
remote-thermohygrometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001818  0800bbb0  0800bbb0  0000cbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000015c  0800d3c8  0800d3c8  0000e3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001b8  0800d524  0800d524  0000e524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6dc  0800d6dc  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6dc  0800d6dc  0000e6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d6e0  0800d6e0  0000e6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800d6e4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  200001e0  0800d8c0  0000f1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  0800d8c0  0000f99c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018023  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003634  00000000  00000000  00027228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0002a860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  0002bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6a0  00000000  00000000  0002c922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165c0  00000000  00000000  00049fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bee2  00000000  00000000  00060582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f4  00000000  00000000  000fc4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00102b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb98 	.word	0x0800bb98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800bb98 	.word	0x0800bb98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_uldivmod>:
 8001110:	b953      	cbnz	r3, 8001128 <__aeabi_uldivmod+0x18>
 8001112:	b94a      	cbnz	r2, 8001128 <__aeabi_uldivmod+0x18>
 8001114:	2900      	cmp	r1, #0
 8001116:	bf08      	it	eq
 8001118:	2800      	cmpeq	r0, #0
 800111a:	bf1c      	itt	ne
 800111c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001120:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001124:	f001 b932 	b.w	800238c <__aeabi_idiv0>
 8001128:	f1ad 0c08 	sub.w	ip, sp, #8
 800112c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001130:	f000 f83c 	bl	80011ac <__udivmoddi4>
 8001134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr

08001140 <__aeabi_d2lz>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x1c>
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4620      	mov	r0, r4
 800115e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	460c      	mov	r4, r1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d14e      	bne.n	8001256 <__udivmoddi4+0xaa>
 80011b8:	4694      	mov	ip, r2
 80011ba:	458c      	cmp	ip, r1
 80011bc:	4686      	mov	lr, r0
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	d962      	bls.n	800128a <__udivmoddi4+0xde>
 80011c4:	b14a      	cbz	r2, 80011da <__udivmoddi4+0x2e>
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	4091      	lsls	r1, r2
 80011cc:	fa20 f303 	lsr.w	r3, r0, r3
 80011d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d4:	4319      	orrs	r1, r3
 80011d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011de:	fbb1 f4f7 	udiv	r4, r1, r7
 80011e2:	fb07 1114 	mls	r1, r7, r4, r1
 80011e6:	fa1f f68c 	uxth.w	r6, ip
 80011ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f2:	fb04 f106 	mul.w	r1, r4, r6
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x64>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001202:	f080 8110 	bcs.w	8001426 <__udivmoddi4+0x27a>
 8001206:	4299      	cmp	r1, r3
 8001208:	f240 810d 	bls.w	8001426 <__udivmoddi4+0x27a>
 800120c:	3c02      	subs	r4, #2
 800120e:	4463      	add	r3, ip
 8001210:	1a59      	subs	r1, r3, r1
 8001212:	fbb1 f0f7 	udiv	r0, r1, r7
 8001216:	fb07 1110 	mls	r1, r7, r0, r1
 800121a:	fb00 f606 	mul.w	r6, r0, r6
 800121e:	fa1f f38e 	uxth.w	r3, lr
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	429e      	cmp	r6, r3
 8001228:	d90a      	bls.n	8001240 <__udivmoddi4+0x94>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001232:	f080 80fa 	bcs.w	800142a <__udivmoddi4+0x27e>
 8001236:	429e      	cmp	r6, r3
 8001238:	f240 80f7 	bls.w	800142a <__udivmoddi4+0x27e>
 800123c:	4463      	add	r3, ip
 800123e:	3802      	subs	r0, #2
 8001240:	2100      	movs	r1, #0
 8001242:	1b9b      	subs	r3, r3, r6
 8001244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001248:	b11d      	cbz	r5, 8001252 <__udivmoddi4+0xa6>
 800124a:	40d3      	lsrs	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	e9c5 3200 	strd	r3, r2, [r5]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d905      	bls.n	8001266 <__udivmoddi4+0xba>
 800125a:	b10d      	cbz	r5, 8001260 <__udivmoddi4+0xb4>
 800125c:	e9c5 0100 	strd	r0, r1, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	4608      	mov	r0, r1
 8001264:	e7f5      	b.n	8001252 <__udivmoddi4+0xa6>
 8001266:	fab3 f183 	clz	r1, r3
 800126a:	2900      	cmp	r1, #0
 800126c:	d146      	bne.n	80012fc <__udivmoddi4+0x150>
 800126e:	42a3      	cmp	r3, r4
 8001270:	d302      	bcc.n	8001278 <__udivmoddi4+0xcc>
 8001272:	4290      	cmp	r0, r2
 8001274:	f0c0 80ee 	bcc.w	8001454 <__udivmoddi4+0x2a8>
 8001278:	1a86      	subs	r6, r0, r2
 800127a:	eb64 0303 	sbc.w	r3, r4, r3
 800127e:	2001      	movs	r0, #1
 8001280:	2d00      	cmp	r5, #0
 8001282:	d0e6      	beq.n	8001252 <__udivmoddi4+0xa6>
 8001284:	e9c5 6300 	strd	r6, r3, [r5]
 8001288:	e7e3      	b.n	8001252 <__udivmoddi4+0xa6>
 800128a:	2a00      	cmp	r2, #0
 800128c:	f040 808f 	bne.w	80013ae <__udivmoddi4+0x202>
 8001290:	eba1 040c 	sub.w	r4, r1, ip
 8001294:	2101      	movs	r1, #1
 8001296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800129a:	fa1f f78c 	uxth.w	r7, ip
 800129e:	fbb4 f6f8 	udiv	r6, r4, r8
 80012a2:	fb08 4416 	mls	r4, r8, r6, r4
 80012a6:	fb07 f006 	mul.w	r0, r7, r6
 80012aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x11c>
 80012b6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80012be:	d202      	bcs.n	80012c6 <__udivmoddi4+0x11a>
 80012c0:	4298      	cmp	r0, r3
 80012c2:	f200 80cb 	bhi.w	800145c <__udivmoddi4+0x2b0>
 80012c6:	4626      	mov	r6, r4
 80012c8:	1a1c      	subs	r4, r3, r0
 80012ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ce:	fb08 4410 	mls	r4, r8, r0, r4
 80012d2:	fb00 f707 	mul.w	r7, r0, r7
 80012d6:	fa1f f38e 	uxth.w	r3, lr
 80012da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012de:	429f      	cmp	r7, r3
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x148>
 80012e2:	eb1c 0303 	adds.w	r3, ip, r3
 80012e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80012ea:	d202      	bcs.n	80012f2 <__udivmoddi4+0x146>
 80012ec:	429f      	cmp	r7, r3
 80012ee:	f200 80ae 	bhi.w	800144e <__udivmoddi4+0x2a2>
 80012f2:	4620      	mov	r0, r4
 80012f4:	1bdb      	subs	r3, r3, r7
 80012f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012fa:	e7a5      	b.n	8001248 <__udivmoddi4+0x9c>
 80012fc:	f1c1 0720 	rsb	r7, r1, #32
 8001300:	408b      	lsls	r3, r1
 8001302:	fa22 fc07 	lsr.w	ip, r2, r7
 8001306:	ea4c 0c03 	orr.w	ip, ip, r3
 800130a:	fa24 f607 	lsr.w	r6, r4, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fbb6 f8f9 	udiv	r8, r6, r9
 8001316:	fa1f fe8c 	uxth.w	lr, ip
 800131a:	fb09 6618 	mls	r6, r9, r8, r6
 800131e:	fa20 f307 	lsr.w	r3, r0, r7
 8001322:	408c      	lsls	r4, r1
 8001324:	fa00 fa01 	lsl.w	sl, r0, r1
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	431c      	orrs	r4, r3
 800132e:	0c23      	lsrs	r3, r4, #16
 8001330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001334:	4298      	cmp	r0, r3
 8001336:	fa02 f201 	lsl.w	r2, r2, r1
 800133a:	d90a      	bls.n	8001352 <__udivmoddi4+0x1a6>
 800133c:	eb1c 0303 	adds.w	r3, ip, r3
 8001340:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8001344:	f080 8081 	bcs.w	800144a <__udivmoddi4+0x29e>
 8001348:	4298      	cmp	r0, r3
 800134a:	d97e      	bls.n	800144a <__udivmoddi4+0x29e>
 800134c:	f1a8 0802 	sub.w	r8, r8, #2
 8001350:	4463      	add	r3, ip
 8001352:	1a1e      	subs	r6, r3, r0
 8001354:	fbb6 f3f9 	udiv	r3, r6, r9
 8001358:	fb09 6613 	mls	r6, r9, r3, r6
 800135c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001366:	45a6      	cmp	lr, r4
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x1d0>
 800136a:	eb1c 0404 	adds.w	r4, ip, r4
 800136e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001372:	d266      	bcs.n	8001442 <__udivmoddi4+0x296>
 8001374:	45a6      	cmp	lr, r4
 8001376:	d964      	bls.n	8001442 <__udivmoddi4+0x296>
 8001378:	3b02      	subs	r3, #2
 800137a:	4464      	add	r4, ip
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	fba0 8302 	umull	r8, r3, r0, r2
 8001384:	eba4 040e 	sub.w	r4, r4, lr
 8001388:	429c      	cmp	r4, r3
 800138a:	46c6      	mov	lr, r8
 800138c:	461e      	mov	r6, r3
 800138e:	d350      	bcc.n	8001432 <__udivmoddi4+0x286>
 8001390:	d04d      	beq.n	800142e <__udivmoddi4+0x282>
 8001392:	b155      	cbz	r5, 80013aa <__udivmoddi4+0x1fe>
 8001394:	ebba 030e 	subs.w	r3, sl, lr
 8001398:	eb64 0406 	sbc.w	r4, r4, r6
 800139c:	fa04 f707 	lsl.w	r7, r4, r7
 80013a0:	40cb      	lsrs	r3, r1
 80013a2:	431f      	orrs	r7, r3
 80013a4:	40cc      	lsrs	r4, r1
 80013a6:	e9c5 7400 	strd	r7, r4, [r5]
 80013aa:	2100      	movs	r1, #0
 80013ac:	e751      	b.n	8001252 <__udivmoddi4+0xa6>
 80013ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b2:	f1c2 0320 	rsb	r3, r2, #32
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013bc:	fa20 f303 	lsr.w	r3, r0, r3
 80013c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013c8:	fb08 1110 	mls	r1, r8, r0, r1
 80013cc:	4094      	lsls	r4, r2
 80013ce:	431c      	orrs	r4, r3
 80013d0:	fa1f f78c 	uxth.w	r7, ip
 80013d4:	0c23      	lsrs	r3, r4, #16
 80013d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013da:	fb00 f107 	mul.w	r1, r0, r7
 80013de:	4299      	cmp	r1, r3
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x248>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80013ea:	d22c      	bcs.n	8001446 <__udivmoddi4+0x29a>
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d92a      	bls.n	8001446 <__udivmoddi4+0x29a>
 80013f0:	3802      	subs	r0, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a5b      	subs	r3, r3, r1
 80013f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013fa:	fb08 3311 	mls	r3, r8, r1, r3
 80013fe:	b2a4      	uxth	r4, r4
 8001400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001404:	fb01 f307 	mul.w	r3, r1, r7
 8001408:	42a3      	cmp	r3, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x272>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001414:	d213      	bcs.n	800143e <__udivmoddi4+0x292>
 8001416:	42a3      	cmp	r3, r4
 8001418:	d911      	bls.n	800143e <__udivmoddi4+0x292>
 800141a:	3902      	subs	r1, #2
 800141c:	4464      	add	r4, ip
 800141e:	1ae4      	subs	r4, r4, r3
 8001420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001424:	e73b      	b.n	800129e <__udivmoddi4+0xf2>
 8001426:	4604      	mov	r4, r0
 8001428:	e6f2      	b.n	8001210 <__udivmoddi4+0x64>
 800142a:	4608      	mov	r0, r1
 800142c:	e708      	b.n	8001240 <__udivmoddi4+0x94>
 800142e:	45c2      	cmp	sl, r8
 8001430:	d2af      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 8001432:	ebb8 0e02 	subs.w	lr, r8, r2
 8001436:	eb63 060c 	sbc.w	r6, r3, ip
 800143a:	3801      	subs	r0, #1
 800143c:	e7a9      	b.n	8001392 <__udivmoddi4+0x1e6>
 800143e:	4631      	mov	r1, r6
 8001440:	e7ed      	b.n	800141e <__udivmoddi4+0x272>
 8001442:	4603      	mov	r3, r0
 8001444:	e79a      	b.n	800137c <__udivmoddi4+0x1d0>
 8001446:	4630      	mov	r0, r6
 8001448:	e7d4      	b.n	80013f4 <__udivmoddi4+0x248>
 800144a:	46b0      	mov	r8, r6
 800144c:	e781      	b.n	8001352 <__udivmoddi4+0x1a6>
 800144e:	4463      	add	r3, ip
 8001450:	3802      	subs	r0, #2
 8001452:	e74f      	b.n	80012f4 <__udivmoddi4+0x148>
 8001454:	4606      	mov	r6, r0
 8001456:	4623      	mov	r3, r4
 8001458:	4608      	mov	r0, r1
 800145a:	e711      	b.n	8001280 <__udivmoddi4+0xd4>
 800145c:	3e02      	subs	r6, #2
 800145e:	4463      	add	r3, ip
 8001460:	e732      	b.n	80012c8 <__udivmoddi4+0x11c>
 8001462:	bf00      	nop

08001464 <selfrel_offset31>:
 8001464:	6803      	ldr	r3, [r0, #0]
 8001466:	005a      	lsls	r2, r3, #1
 8001468:	bf4c      	ite	mi
 800146a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800146e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8001472:	4418      	add	r0, r3
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <search_EIT_table>:
 8001478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800147c:	b341      	cbz	r1, 80014d0 <search_EIT_table+0x58>
 800147e:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8001482:	4605      	mov	r5, r0
 8001484:	4616      	mov	r6, r2
 8001486:	4647      	mov	r7, r8
 8001488:	2400      	movs	r4, #0
 800148a:	19e1      	adds	r1, r4, r7
 800148c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001490:	1049      	asrs	r1, r1, #1
 8001492:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 8001496:	4648      	mov	r0, r9
 8001498:	f7ff ffe4 	bl	8001464 <selfrel_offset31>
 800149c:	4588      	cmp	r8, r1
 800149e:	4603      	mov	r3, r0
 80014a0:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 80014a4:	d00e      	beq.n	80014c4 <search_EIT_table+0x4c>
 80014a6:	f102 0008 	add.w	r0, r2, #8
 80014aa:	42b3      	cmp	r3, r6
 80014ac:	4428      	add	r0, r5
 80014ae:	d80b      	bhi.n	80014c8 <search_EIT_table+0x50>
 80014b0:	f7ff ffd8 	bl	8001464 <selfrel_offset31>
 80014b4:	3801      	subs	r0, #1
 80014b6:	42b0      	cmp	r0, r6
 80014b8:	f101 0401 	add.w	r4, r1, #1
 80014bc:	d3e5      	bcc.n	800148a <search_EIT_table+0x12>
 80014be:	4648      	mov	r0, r9
 80014c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014c4:	42b0      	cmp	r0, r6
 80014c6:	d9fa      	bls.n	80014be <search_EIT_table+0x46>
 80014c8:	428c      	cmp	r4, r1
 80014ca:	d001      	beq.n	80014d0 <search_EIT_table+0x58>
 80014cc:	1e4f      	subs	r7, r1, #1
 80014ce:	e7dc      	b.n	800148a <search_EIT_table+0x12>
 80014d0:	f04f 0900 	mov.w	r9, #0
 80014d4:	4648      	mov	r0, r9
 80014d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014da:	bf00      	nop

080014dc <__gnu_unwind_get_pr_addr>:
 80014dc:	2801      	cmp	r0, #1
 80014de:	d007      	beq.n	80014f0 <__gnu_unwind_get_pr_addr+0x14>
 80014e0:	2802      	cmp	r0, #2
 80014e2:	d007      	beq.n	80014f4 <__gnu_unwind_get_pr_addr+0x18>
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <__gnu_unwind_get_pr_addr+0x1c>)
 80014e6:	2800      	cmp	r0, #0
 80014e8:	bf0c      	ite	eq
 80014ea:	4618      	moveq	r0, r3
 80014ec:	2000      	movne	r0, #0
 80014ee:	4770      	bx	lr
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <__gnu_unwind_get_pr_addr+0x20>)
 80014f2:	4770      	bx	lr
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <__gnu_unwind_get_pr_addr+0x24>)
 80014f6:	4770      	bx	lr
 80014f8:	08001bb9 	.word	0x08001bb9
 80014fc:	08001bbd 	.word	0x08001bbd
 8001500:	08001bc1 	.word	0x08001bc1

08001504 <get_eit_entry>:
 8001504:	b530      	push	{r4, r5, lr}
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <get_eit_entry+0x88>)
 8001508:	4604      	mov	r4, r0
 800150a:	b083      	sub	sp, #12
 800150c:	1e8d      	subs	r5, r1, #2
 800150e:	b31b      	cbz	r3, 8001558 <get_eit_entry+0x54>
 8001510:	4628      	mov	r0, r5
 8001512:	a901      	add	r1, sp, #4
 8001514:	f3af 8000 	nop.w
 8001518:	b388      	cbz	r0, 800157e <get_eit_entry+0x7a>
 800151a:	9901      	ldr	r1, [sp, #4]
 800151c:	462a      	mov	r2, r5
 800151e:	f7ff ffab 	bl	8001478 <search_EIT_table>
 8001522:	4601      	mov	r1, r0
 8001524:	b358      	cbz	r0, 800157e <get_eit_entry+0x7a>
 8001526:	f7ff ff9d 	bl	8001464 <selfrel_offset31>
 800152a:	684b      	ldr	r3, [r1, #4]
 800152c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800152e:	2b01      	cmp	r3, #1
 8001530:	d028      	beq.n	8001584 <get_eit_entry+0x80>
 8001532:	2b00      	cmp	r3, #0
 8001534:	f101 0004 	add.w	r0, r1, #4
 8001538:	db1f      	blt.n	800157a <get_eit_entry+0x76>
 800153a:	f7ff ff93 	bl	8001464 <selfrel_offset31>
 800153e:	2300      	movs	r3, #0
 8001540:	6523      	str	r3, [r4, #80]	@ 0x50
 8001542:	6803      	ldr	r3, [r0, #0]
 8001544:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0d      	blt.n	8001566 <get_eit_entry+0x62>
 800154a:	f7ff ff8b 	bl	8001464 <selfrel_offset31>
 800154e:	4603      	mov	r3, r0
 8001550:	2000      	movs	r0, #0
 8001552:	6123      	str	r3, [r4, #16]
 8001554:	b003      	add	sp, #12
 8001556:	bd30      	pop	{r4, r5, pc}
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <get_eit_entry+0x8c>)
 800155a:	490e      	ldr	r1, [pc, #56]	@ (8001594 <get_eit_entry+0x90>)
 800155c:	4618      	mov	r0, r3
 800155e:	1ac9      	subs	r1, r1, r3
 8001560:	10c9      	asrs	r1, r1, #3
 8001562:	9101      	str	r1, [sp, #4]
 8001564:	e7da      	b.n	800151c <get_eit_entry+0x18>
 8001566:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800156a:	f7ff ffb7 	bl	80014dc <__gnu_unwind_get_pr_addr>
 800156e:	4603      	mov	r3, r0
 8001570:	b128      	cbz	r0, 800157e <get_eit_entry+0x7a>
 8001572:	2000      	movs	r0, #0
 8001574:	6123      	str	r3, [r4, #16]
 8001576:	b003      	add	sp, #12
 8001578:	bd30      	pop	{r4, r5, pc}
 800157a:	2301      	movs	r3, #1
 800157c:	e7e0      	b.n	8001540 <get_eit_entry+0x3c>
 800157e:	2300      	movs	r3, #0
 8001580:	2009      	movs	r0, #9
 8001582:	e7e6      	b.n	8001552 <get_eit_entry+0x4e>
 8001584:	2300      	movs	r3, #0
 8001586:	2005      	movs	r0, #5
 8001588:	e7e3      	b.n	8001552 <get_eit_entry+0x4e>
 800158a:	bf00      	nop
 800158c:	00000000 	.word	0x00000000
 8001590:	0800d524 	.word	0x0800d524
 8001594:	0800d6dc 	.word	0x0800d6dc

08001598 <restore_non_core_regs>:
 8001598:	6803      	ldr	r3, [r0, #0]
 800159a:	b510      	push	{r4, lr}
 800159c:	07da      	lsls	r2, r3, #31
 800159e:	4604      	mov	r4, r0
 80015a0:	d406      	bmi.n	80015b0 <restore_non_core_regs+0x18>
 80015a2:	079b      	lsls	r3, r3, #30
 80015a4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80015a8:	d509      	bpl.n	80015be <restore_non_core_regs+0x26>
 80015aa:	f000 fc6f 	bl	8001e8c <__gnu_Unwind_Restore_VFP_D>
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	0759      	lsls	r1, r3, #29
 80015b2:	d509      	bpl.n	80015c8 <restore_non_core_regs+0x30>
 80015b4:	071a      	lsls	r2, r3, #28
 80015b6:	d50e      	bpl.n	80015d6 <restore_non_core_regs+0x3e>
 80015b8:	06db      	lsls	r3, r3, #27
 80015ba:	d513      	bpl.n	80015e4 <restore_non_core_regs+0x4c>
 80015bc:	bd10      	pop	{r4, pc}
 80015be:	f000 fc5d 	bl	8001e7c <__gnu_Unwind_Restore_VFP>
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	0759      	lsls	r1, r3, #29
 80015c6:	d4f5      	bmi.n	80015b4 <restore_non_core_regs+0x1c>
 80015c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80015cc:	f000 fc66 	bl	8001e9c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	071a      	lsls	r2, r3, #28
 80015d4:	d4f0      	bmi.n	80015b8 <restore_non_core_regs+0x20>
 80015d6:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80015da:	f000 fc67 	bl	8001eac <__gnu_Unwind_Restore_WMMXD>
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	06db      	lsls	r3, r3, #27
 80015e2:	d4eb      	bmi.n	80015bc <restore_non_core_regs+0x24>
 80015e4:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 80015e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015ec:	f000 bca2 	b.w	8001f34 <__gnu_Unwind_Restore_WMMXC>

080015f0 <__gnu_unwind_24bit.constprop.0>:
 80015f0:	2009      	movs	r0, #9
 80015f2:	4770      	bx	lr

080015f4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80015f4:	4603      	mov	r3, r0
 80015f6:	6800      	ldr	r0, [r0, #0]
 80015f8:	b100      	cbz	r0, 80015fc <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80015fa:	4418      	add	r0, r3
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <_Unwind_DebugHook>:
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <unwind_phase2>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	4604      	mov	r4, r0
 8001608:	460e      	mov	r6, r1
 800160a:	4620      	mov	r0, r4
 800160c:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800160e:	f7ff ff79 	bl	8001504 <get_eit_entry>
 8001612:	4605      	mov	r5, r0
 8001614:	b998      	cbnz	r0, 800163e <unwind_phase2+0x3a>
 8001616:	f8d6 c040 	ldr.w	ip, [r6, #64]	@ 0x40
 800161a:	4632      	mov	r2, r6
 800161c:	4621      	mov	r1, r4
 800161e:	2001      	movs	r0, #1
 8001620:	6923      	ldr	r3, [r4, #16]
 8001622:	f8c4 c014 	str.w	ip, [r4, #20]
 8001626:	4798      	blx	r3
 8001628:	2808      	cmp	r0, #8
 800162a:	d0ee      	beq.n	800160a <unwind_phase2+0x6>
 800162c:	2807      	cmp	r0, #7
 800162e:	d106      	bne.n	800163e <unwind_phase2+0x3a>
 8001630:	4628      	mov	r0, r5
 8001632:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001634:	f7ff ffe4 	bl	8001600 <_Unwind_DebugHook>
 8001638:	1d30      	adds	r0, r6, #4
 800163a:	f000 fc13 	bl	8001e64 <__restore_core_regs>
 800163e:	f00a f801 	bl	800b644 <abort>
 8001642:	bf00      	nop

08001644 <unwind_phase2_forced>:
 8001644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001648:	f04f 0a00 	mov.w	sl, #0
 800164c:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001650:	f10d 0e0c 	add.w	lr, sp, #12
 8001654:	f101 0c04 	add.w	ip, r1, #4
 8001658:	68c7      	ldr	r7, [r0, #12]
 800165a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800165e:	4606      	mov	r6, r0
 8001660:	4614      	mov	r4, r2
 8001662:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001666:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800166a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800166e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001672:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001676:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800167a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800167e:	ad02      	add	r5, sp, #8
 8001680:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001684:	f8c5 a000 	str.w	sl, [r5]
 8001688:	e021      	b.n	80016ce <unwind_phase2_forced+0x8a>
 800168a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800168c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001690:	4629      	mov	r1, r5
 8001692:	6173      	str	r3, [r6, #20]
 8001694:	a87a      	add	r0, sp, #488	@ 0x1e8
 8001696:	f006 ff44 	bl	8008522 <memcpy>
 800169a:	4631      	mov	r1, r6
 800169c:	4650      	mov	r0, sl
 800169e:	6933      	ldr	r3, [r6, #16]
 80016a0:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80016a2:	4798      	blx	r3
 80016a4:	9c88      	ldr	r4, [sp, #544]	@ 0x220
 80016a6:	4682      	mov	sl, r0
 80016a8:	646c      	str	r4, [r5, #68]	@ 0x44
 80016aa:	4633      	mov	r3, r6
 80016ac:	4632      	mov	r2, r6
 80016ae:	4649      	mov	r1, r9
 80016b0:	2001      	movs	r0, #1
 80016b2:	e9cd 5800 	strd	r5, r8, [sp]
 80016b6:	47b8      	blx	r7
 80016b8:	4604      	mov	r4, r0
 80016ba:	bb30      	cbnz	r0, 800170a <unwind_phase2_forced+0xc6>
 80016bc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80016c0:	4628      	mov	r0, r5
 80016c2:	a97a      	add	r1, sp, #488	@ 0x1e8
 80016c4:	f006 ff2d 	bl	8008522 <memcpy>
 80016c8:	f1ba 0f08 	cmp.w	sl, #8
 80016cc:	d11a      	bne.n	8001704 <unwind_phase2_forced+0xc0>
 80016ce:	4630      	mov	r0, r6
 80016d0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80016d2:	f7ff ff17 	bl	8001504 <get_eit_entry>
 80016d6:	f104 0909 	add.w	r9, r4, #9
 80016da:	fa5f fa89 	uxtb.w	sl, r9
 80016de:	4604      	mov	r4, r0
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d0d2      	beq.n	800168a <unwind_phase2_forced+0x46>
 80016e4:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80016e6:	4633      	mov	r3, r6
 80016e8:	6469      	str	r1, [r5, #68]	@ 0x44
 80016ea:	4632      	mov	r2, r6
 80016ec:	2001      	movs	r0, #1
 80016ee:	e9cd 5800 	strd	r5, r8, [sp]
 80016f2:	f04a 0110 	orr.w	r1, sl, #16
 80016f6:	47b8      	blx	r7
 80016f8:	b938      	cbnz	r0, 800170a <unwind_phase2_forced+0xc6>
 80016fa:	4620      	mov	r0, r4
 80016fc:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001704:	f1ba 0f07 	cmp.w	sl, #7
 8001708:	d005      	beq.n	8001716 <unwind_phase2_forced+0xd2>
 800170a:	2409      	movs	r4, #9
 800170c:	4620      	mov	r0, r4
 800170e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001716:	4620      	mov	r0, r4
 8001718:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800171a:	f7ff ff71 	bl	8001600 <_Unwind_DebugHook>
 800171e:	a803      	add	r0, sp, #12
 8001720:	f000 fba0 	bl	8001e64 <__restore_core_regs>

08001724 <_Unwind_GetCFA>:
 8001724:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001726:	4770      	bx	lr

08001728 <__gnu_Unwind_RaiseException>:
 8001728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800172e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8001730:	b0f9      	sub	sp, #484	@ 0x1e4
 8001732:	640b      	str	r3, [r1, #64]	@ 0x40
 8001734:	ac01      	add	r4, sp, #4
 8001736:	f101 0c04 	add.w	ip, r1, #4
 800173a:	460e      	mov	r6, r1
 800173c:	4605      	mov	r5, r0
 800173e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001744:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001750:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001758:	9700      	str	r7, [sp, #0]
 800175a:	e006      	b.n	800176a <__gnu_Unwind_RaiseException+0x42>
 800175c:	466a      	mov	r2, sp
 800175e:	4629      	mov	r1, r5
 8001760:	692b      	ldr	r3, [r5, #16]
 8001762:	4798      	blx	r3
 8001764:	2808      	cmp	r0, #8
 8001766:	4604      	mov	r4, r0
 8001768:	d108      	bne.n	800177c <__gnu_Unwind_RaiseException+0x54>
 800176a:	4628      	mov	r0, r5
 800176c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800176e:	f7ff fec9 	bl	8001504 <get_eit_entry>
 8001772:	2800      	cmp	r0, #0
 8001774:	d0f2      	beq.n	800175c <__gnu_Unwind_RaiseException+0x34>
 8001776:	2009      	movs	r0, #9
 8001778:	b079      	add	sp, #484	@ 0x1e4
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	4668      	mov	r0, sp
 800177e:	f7ff ff0b 	bl	8001598 <restore_non_core_regs>
 8001782:	2c06      	cmp	r4, #6
 8001784:	d1f7      	bne.n	8001776 <__gnu_Unwind_RaiseException+0x4e>
 8001786:	4631      	mov	r1, r6
 8001788:	4628      	mov	r0, r5
 800178a:	f7ff ff3b 	bl	8001604 <unwind_phase2>
 800178e:	bf00      	nop

08001790 <__gnu_Unwind_ForcedUnwind>:
 8001790:	b410      	push	{r4}
 8001792:	4614      	mov	r4, r2
 8001794:	6184      	str	r4, [r0, #24]
 8001796:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001798:	60c1      	str	r1, [r0, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	641c      	str	r4, [r3, #64]	@ 0x40
 800179e:	4619      	mov	r1, r3
 80017a0:	bc10      	pop	{r4}
 80017a2:	e74f      	b.n	8001644 <unwind_phase2_forced>

080017a4 <__gnu_Unwind_Resume>:
 80017a4:	b570      	push	{r4, r5, r6, lr}
 80017a6:	6943      	ldr	r3, [r0, #20]
 80017a8:	68c6      	ldr	r6, [r0, #12]
 80017aa:	640b      	str	r3, [r1, #64]	@ 0x40
 80017ac:	b9ae      	cbnz	r6, 80017da <__gnu_Unwind_Resume+0x36>
 80017ae:	460a      	mov	r2, r1
 80017b0:	6903      	ldr	r3, [r0, #16]
 80017b2:	4604      	mov	r4, r0
 80017b4:	460d      	mov	r5, r1
 80017b6:	4601      	mov	r1, r0
 80017b8:	2002      	movs	r0, #2
 80017ba:	4798      	blx	r3
 80017bc:	2807      	cmp	r0, #7
 80017be:	d005      	beq.n	80017cc <__gnu_Unwind_Resume+0x28>
 80017c0:	2808      	cmp	r0, #8
 80017c2:	d10f      	bne.n	80017e4 <__gnu_Unwind_Resume+0x40>
 80017c4:	4629      	mov	r1, r5
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff ff1c 	bl	8001604 <unwind_phase2>
 80017cc:	4630      	mov	r0, r6
 80017ce:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80017d0:	f7ff ff16 	bl	8001600 <_Unwind_DebugHook>
 80017d4:	1d28      	adds	r0, r5, #4
 80017d6:	f000 fb45 	bl	8001e64 <__restore_core_regs>
 80017da:	2201      	movs	r2, #1
 80017dc:	f7ff ff32 	bl	8001644 <unwind_phase2_forced>
 80017e0:	f009 ff30 	bl	800b644 <abort>
 80017e4:	f009 ff2e 	bl	800b644 <abort>

080017e8 <__gnu_Unwind_Resume_or_Rethrow>:
 80017e8:	68c2      	ldr	r2, [r0, #12]
 80017ea:	b12a      	cbz	r2, 80017f8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80017ec:	f8d1 c03c 	ldr.w	ip, [r1, #60]	@ 0x3c
 80017f0:	2200      	movs	r2, #0
 80017f2:	f8c1 c040 	str.w	ip, [r1, #64]	@ 0x40
 80017f6:	e725      	b.n	8001644 <unwind_phase2_forced>
 80017f8:	e796      	b.n	8001728 <__gnu_Unwind_RaiseException>
 80017fa:	bf00      	nop

080017fc <_Unwind_Complete>:
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <_Unwind_DeleteException>:
 8001800:	6883      	ldr	r3, [r0, #8]
 8001802:	4601      	mov	r1, r0
 8001804:	b10b      	cbz	r3, 800180a <_Unwind_DeleteException+0xa>
 8001806:	2001      	movs	r0, #1
 8001808:	4718      	bx	r3
 800180a:	4770      	bx	lr

0800180c <_Unwind_VRS_Get>:
 800180c:	2901      	cmp	r1, #1
 800180e:	d010      	beq.n	8001832 <_Unwind_VRS_Get+0x26>
 8001810:	d809      	bhi.n	8001826 <_Unwind_VRS_Get+0x1a>
 8001812:	b983      	cbnz	r3, 8001836 <_Unwind_VRS_Get+0x2a>
 8001814:	2a0f      	cmp	r2, #15
 8001816:	d80e      	bhi.n	8001836 <_Unwind_VRS_Get+0x2a>
 8001818:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800181c:	6852      	ldr	r2, [r2, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	9b00      	ldr	r3, [sp, #0]
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4770      	bx	lr
 8001826:	3903      	subs	r1, #3
 8001828:	2901      	cmp	r1, #1
 800182a:	bf8c      	ite	hi
 800182c:	2002      	movhi	r0, #2
 800182e:	2001      	movls	r0, #1
 8001830:	4770      	bx	lr
 8001832:	4608      	mov	r0, r1
 8001834:	4770      	bx	lr
 8001836:	2002      	movs	r0, #2
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <_Unwind_GetGR>:
 800183c:	2300      	movs	r3, #0
 800183e:	b500      	push	{lr}
 8001840:	b085      	sub	sp, #20
 8001842:	460a      	mov	r2, r1
 8001844:	a903      	add	r1, sp, #12
 8001846:	9100      	str	r1, [sp, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff ffdf 	bl	800180c <_Unwind_VRS_Get>
 800184e:	9803      	ldr	r0, [sp, #12]
 8001850:	b005      	add	sp, #20
 8001852:	f85d fb04 	ldr.w	pc, [sp], #4
 8001856:	bf00      	nop

08001858 <_Unwind_VRS_Set>:
 8001858:	2901      	cmp	r1, #1
 800185a:	d010      	beq.n	800187e <_Unwind_VRS_Set+0x26>
 800185c:	d809      	bhi.n	8001872 <_Unwind_VRS_Set+0x1a>
 800185e:	b983      	cbnz	r3, 8001882 <_Unwind_VRS_Set+0x2a>
 8001860:	2a0f      	cmp	r2, #15
 8001862:	d80e      	bhi.n	8001882 <_Unwind_VRS_Set+0x2a>
 8001864:	9900      	ldr	r1, [sp, #0]
 8001866:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	6051      	str	r1, [r2, #4]
 8001870:	4770      	bx	lr
 8001872:	3903      	subs	r1, #3
 8001874:	2901      	cmp	r1, #1
 8001876:	bf8c      	ite	hi
 8001878:	2002      	movhi	r0, #2
 800187a:	2001      	movls	r0, #1
 800187c:	4770      	bx	lr
 800187e:	4608      	mov	r0, r1
 8001880:	4770      	bx	lr
 8001882:	2002      	movs	r0, #2
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <_Unwind_SetGR>:
 8001888:	2300      	movs	r3, #0
 800188a:	b510      	push	{r4, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	ac03      	add	r4, sp, #12
 8001890:	9203      	str	r2, [sp, #12]
 8001892:	9400      	str	r4, [sp, #0]
 8001894:	460a      	mov	r2, r1
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff ffde 	bl	8001858 <_Unwind_VRS_Set>
 800189c:	b004      	add	sp, #16
 800189e:	bd10      	pop	{r4, pc}

080018a0 <__gnu_Unwind_Backtrace>:
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80018a6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80018a8:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80018b2:	f102 0c04 	add.w	ip, r2, #4
 80018b6:	4605      	mov	r5, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80018c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80018ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80018d2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80018d6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80018da:	9616      	str	r6, [sp, #88]	@ 0x58
 80018dc:	e012      	b.n	8001904 <__gnu_Unwind_Backtrace+0x64>
 80018de:	210c      	movs	r1, #12
 80018e0:	a816      	add	r0, sp, #88	@ 0x58
 80018e2:	466a      	mov	r2, sp
 80018e4:	f7ff ffd0 	bl	8001888 <_Unwind_SetGR>
 80018e8:	4621      	mov	r1, r4
 80018ea:	a816      	add	r0, sp, #88	@ 0x58
 80018ec:	47a8      	blx	r5
 80018ee:	b978      	cbnz	r0, 8001910 <__gnu_Unwind_Backtrace+0x70>
 80018f0:	4669      	mov	r1, sp
 80018f2:	2008      	movs	r0, #8
 80018f4:	9b04      	ldr	r3, [sp, #16]
 80018f6:	aa16      	add	r2, sp, #88	@ 0x58
 80018f8:	4798      	blx	r3
 80018fa:	2805      	cmp	r0, #5
 80018fc:	4606      	mov	r6, r0
 80018fe:	d008      	beq.n	8001912 <__gnu_Unwind_Backtrace+0x72>
 8001900:	2809      	cmp	r0, #9
 8001902:	d005      	beq.n	8001910 <__gnu_Unwind_Backtrace+0x70>
 8001904:	4668      	mov	r0, sp
 8001906:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8001908:	f7ff fdfc 	bl	8001504 <get_eit_entry>
 800190c:	2800      	cmp	r0, #0
 800190e:	d0e6      	beq.n	80018de <__gnu_Unwind_Backtrace+0x3e>
 8001910:	2609      	movs	r6, #9
 8001912:	a816      	add	r0, sp, #88	@ 0x58
 8001914:	f7ff fe40 	bl	8001598 <restore_non_core_regs>
 8001918:	4630      	mov	r0, r6
 800191a:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800191e:	bd70      	pop	{r4, r5, r6, pc}

08001920 <__gnu_unwind_pr_common>:
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	4693      	mov	fp, r2
 8001926:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001928:	460d      	mov	r5, r1
 800192a:	f852 1b04 	ldr.w	r1, [r2], #4
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	f000 0c03 	and.w	ip, r0, #3
 8001934:	9206      	str	r2, [sp, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d079      	beq.n	8001a2e <__gnu_unwind_pr_common+0x10e>
 800193a:	2402      	movs	r4, #2
 800193c:	0c0e      	lsrs	r6, r1, #16
 800193e:	f88d 601d 	strb.w	r6, [sp, #29]
 8001942:	0409      	lsls	r1, r1, #16
 8001944:	b2f6      	uxtb	r6, r6
 8001946:	9105      	str	r1, [sp, #20]
 8001948:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800194c:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800194e:	f1bc 0f02 	cmp.w	ip, #2
 8001952:	bf08      	it	eq
 8001954:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001956:	f017 0701 	ands.w	r7, r7, #1
 800195a:	f88d 401c 	strb.w	r4, [sp, #28]
 800195e:	d00c      	beq.n	800197a <__gnu_unwind_pr_common+0x5a>
 8001960:	4658      	mov	r0, fp
 8001962:	a905      	add	r1, sp, #20
 8001964:	f000 fb80 	bl	8002068 <__gnu_unwind_execute>
 8001968:	b918      	cbnz	r0, 8001972 <__gnu_unwind_pr_common+0x52>
 800196a:	2008      	movs	r0, #8
 800196c:	b009      	add	sp, #36	@ 0x24
 800196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001972:	2009      	movs	r0, #9
 8001974:	b009      	add	sp, #36	@ 0x24
 8001976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197a:	6816      	ldr	r6, [r2, #0]
 800197c:	2e00      	cmp	r6, #0
 800197e:	d0ef      	beq.n	8001960 <__gnu_unwind_pr_common+0x40>
 8001980:	46b2      	mov	sl, r6
 8001982:	4664      	mov	r4, ip
 8001984:	4699      	mov	r9, r3
 8001986:	f000 0108 	and.w	r1, r0, #8
 800198a:	9101      	str	r1, [sp, #4]
 800198c:	9702      	str	r7, [sp, #8]
 800198e:	f1b9 0f02 	cmp.w	r9, #2
 8001992:	d048      	beq.n	8001a26 <__gnu_unwind_pr_common+0x106>
 8001994:	f8b2 a000 	ldrh.w	sl, [r2]
 8001998:	8856      	ldrh	r6, [r2, #2]
 800199a:	f102 0804 	add.w	r8, r2, #4
 800199e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80019a0:	f026 0201 	bic.w	r2, r6, #1
 80019a4:	210f      	movs	r1, #15
 80019a6:	4658      	mov	r0, fp
 80019a8:	18d7      	adds	r7, r2, r3
 80019aa:	f7ff ff47 	bl	800183c <_Unwind_GetGR>
 80019ae:	4287      	cmp	r7, r0
 80019b0:	d837      	bhi.n	8001a22 <__gnu_unwind_pr_common+0x102>
 80019b2:	f02a 0201 	bic.w	r2, sl, #1
 80019b6:	443a      	add	r2, r7
 80019b8:	4282      	cmp	r2, r0
 80019ba:	bf94      	ite	ls
 80019bc:	2200      	movls	r2, #0
 80019be:	2201      	movhi	r2, #1
 80019c0:	0076      	lsls	r6, r6, #1
 80019c2:	f006 0302 	and.w	r3, r6, #2
 80019c6:	f00a 0a01 	and.w	sl, sl, #1
 80019ca:	ea43 030a 	orr.w	r3, r3, sl
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d047      	beq.n	8001a62 <__gnu_unwind_pr_common+0x142>
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d031      	beq.n	8001a3a <__gnu_unwind_pr_common+0x11a>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1cb      	bne.n	8001972 <__gnu_unwind_pr_common+0x52>
 80019da:	b114      	cbz	r4, 80019e2 <__gnu_unwind_pr_common+0xc2>
 80019dc:	2a00      	cmp	r2, #0
 80019de:	f040 80ca 	bne.w	8001b76 <__gnu_unwind_pr_common+0x256>
 80019e2:	f108 0204 	add.w	r2, r8, #4
 80019e6:	f8d2 a000 	ldr.w	sl, [r2]
 80019ea:	f1ba 0f00 	cmp.w	sl, #0
 80019ee:	d1ce      	bne.n	800198e <__gnu_unwind_pr_common+0x6e>
 80019f0:	4658      	mov	r0, fp
 80019f2:	a905      	add	r1, sp, #20
 80019f4:	9f02      	ldr	r7, [sp, #8]
 80019f6:	f000 fb37 	bl	8002068 <__gnu_unwind_execute>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d1b9      	bne.n	8001972 <__gnu_unwind_pr_common+0x52>
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d0b3      	beq.n	800196a <__gnu_unwind_pr_common+0x4a>
 8001a02:	210f      	movs	r1, #15
 8001a04:	4658      	mov	r0, fp
 8001a06:	f7ff ff19 	bl	800183c <_Unwind_GetGR>
 8001a0a:	210e      	movs	r1, #14
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4658      	mov	r0, fp
 8001a10:	f7ff ff3a 	bl	8001888 <_Unwind_SetGR>
 8001a14:	210f      	movs	r1, #15
 8001a16:	4658      	mov	r0, fp
 8001a18:	4a66      	ldr	r2, [pc, #408]	@ (8001bb4 <__gnu_unwind_pr_common+0x294>)
 8001a1a:	f7ff ff35 	bl	8001888 <_Unwind_SetGR>
 8001a1e:	2007      	movs	r0, #7
 8001a20:	e7a8      	b.n	8001974 <__gnu_unwind_pr_common+0x54>
 8001a22:	2200      	movs	r2, #0
 8001a24:	e7cc      	b.n	80019c0 <__gnu_unwind_pr_common+0xa0>
 8001a26:	6856      	ldr	r6, [r2, #4]
 8001a28:	f102 0808 	add.w	r8, r2, #8
 8001a2c:	e7b7      	b.n	800199e <__gnu_unwind_pr_common+0x7e>
 8001a2e:	0209      	lsls	r1, r1, #8
 8001a30:	2403      	movs	r4, #3
 8001a32:	9105      	str	r1, [sp, #20]
 8001a34:	f88d 301d 	strb.w	r3, [sp, #29]
 8001a38:	e788      	b.n	800194c <__gnu_unwind_pr_common+0x2c>
 8001a3a:	f8d8 6000 	ldr.w	r6, [r8]
 8001a3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8001a42:	2c00      	cmp	r4, #0
 8001a44:	d144      	bne.n	8001ad0 <__gnu_unwind_pr_common+0x1b0>
 8001a46:	b122      	cbz	r2, 8001a52 <__gnu_unwind_pr_common+0x132>
 8001a48:	9a01      	ldr	r2, [sp, #4]
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d05a      	beq.n	8001b04 <__gnu_unwind_pr_common+0x1e4>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d058      	beq.n	8001b04 <__gnu_unwind_pr_common+0x1e4>
 8001a52:	2e00      	cmp	r6, #0
 8001a54:	da01      	bge.n	8001a5a <__gnu_unwind_pr_common+0x13a>
 8001a56:	f108 0804 	add.w	r8, r8, #4
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8001a60:	e7c1      	b.n	80019e6 <__gnu_unwind_pr_common+0xc6>
 8001a62:	b9ec      	cbnz	r4, 8001aa0 <__gnu_unwind_pr_common+0x180>
 8001a64:	b1ca      	cbz	r2, 8001a9a <__gnu_unwind_pr_common+0x17a>
 8001a66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001a6a:	f8d8 2000 	ldr.w	r2, [r8]
 8001a6e:	1c99      	adds	r1, r3, #2
 8001a70:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001a74:	f43f af7d 	beq.w	8001972 <__gnu_unwind_pr_common+0x52>
 8001a78:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	9104      	str	r1, [sp, #16]
 8001a80:	f000 808c 	beq.w	8001b9c <__gnu_unwind_pr_common+0x27c>
 8001a84:	f108 0004 	add.w	r0, r8, #4
 8001a88:	f7ff fdb4 	bl	80015f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001a8c:	ab04      	add	r3, sp, #16
 8001a8e:	4601      	mov	r1, r0
 8001a90:	4628      	mov	r0, r5
 8001a92:	f3af 8000 	nop.w
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d157      	bne.n	8001b4a <__gnu_unwind_pr_common+0x22a>
 8001a9a:	f108 0208 	add.w	r2, r8, #8
 8001a9e:	e7a2      	b.n	80019e6 <__gnu_unwind_pr_common+0xc6>
 8001aa0:	210d      	movs	r1, #13
 8001aa2:	4658      	mov	r0, fp
 8001aa4:	f7ff feca 	bl	800183c <_Unwind_GetGR>
 8001aa8:	6a2b      	ldr	r3, [r5, #32]
 8001aaa:	4283      	cmp	r3, r0
 8001aac:	d1f5      	bne.n	8001a9a <__gnu_unwind_pr_common+0x17a>
 8001aae:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001ab0:	4598      	cmp	r8, r3
 8001ab2:	d1f2      	bne.n	8001a9a <__gnu_unwind_pr_common+0x17a>
 8001ab4:	4640      	mov	r0, r8
 8001ab6:	f7ff fcd5 	bl	8001464 <selfrel_offset31>
 8001aba:	210f      	movs	r1, #15
 8001abc:	4602      	mov	r2, r0
 8001abe:	4658      	mov	r0, fp
 8001ac0:	f7ff fee2 	bl	8001888 <_Unwind_SetGR>
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4658      	mov	r0, fp
 8001aca:	f7ff fedd 	bl	8001888 <_Unwind_SetGR>
 8001ace:	e7a6      	b.n	8001a1e <__gnu_unwind_pr_common+0xfe>
 8001ad0:	210d      	movs	r1, #13
 8001ad2:	4658      	mov	r0, fp
 8001ad4:	9303      	str	r3, [sp, #12]
 8001ad6:	f7ff feb1 	bl	800183c <_Unwind_GetGR>
 8001ada:	6a2a      	ldr	r2, [r5, #32]
 8001adc:	9b03      	ldr	r3, [sp, #12]
 8001ade:	4282      	cmp	r2, r0
 8001ae0:	d1b7      	bne.n	8001a52 <__gnu_unwind_pr_common+0x132>
 8001ae2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001ae4:	4590      	cmp	r8, r2
 8001ae6:	d1b4      	bne.n	8001a52 <__gnu_unwind_pr_common+0x132>
 8001ae8:	2700      	movs	r7, #0
 8001aea:	2204      	movs	r2, #4
 8001aec:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8001af0:	4442      	add	r2, r8
 8001af2:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001af4:	636a      	str	r2, [r5, #52]	@ 0x34
 8001af6:	f8d8 2000 	ldr.w	r2, [r8]
 8001afa:	42ba      	cmp	r2, r7
 8001afc:	db56      	blt.n	8001bac <__gnu_unwind_pr_common+0x28c>
 8001afe:	2201      	movs	r2, #1
 8001b00:	9202      	str	r2, [sp, #8]
 8001b02:	e7aa      	b.n	8001a5a <__gnu_unwind_pr_common+0x13a>
 8001b04:	9403      	str	r4, [sp, #12]
 8001b06:	2600      	movs	r6, #0
 8001b08:	461c      	mov	r4, r3
 8001b0a:	f108 0a04 	add.w	sl, r8, #4
 8001b0e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8001b12:	e00d      	b.n	8001b30 <__gnu_unwind_pr_common+0x210>
 8001b14:	4650      	mov	r0, sl
 8001b16:	9704      	str	r7, [sp, #16]
 8001b18:	f7ff fd6c 	bl	80015f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4601      	mov	r1, r0
 8001b20:	ab04      	add	r3, sp, #16
 8001b22:	4628      	mov	r0, r5
 8001b24:	3601      	adds	r6, #1
 8001b26:	f10a 0a04 	add.w	sl, sl, #4
 8001b2a:	f3af 8000 	nop.w
 8001b2e:	b9e8      	cbnz	r0, 8001b6c <__gnu_unwind_pr_common+0x24c>
 8001b30:	42a6      	cmp	r6, r4
 8001b32:	d1ef      	bne.n	8001b14 <__gnu_unwind_pr_common+0x1f4>
 8001b34:	210d      	movs	r1, #13
 8001b36:	4658      	mov	r0, fp
 8001b38:	f7ff fe80 	bl	800183c <_Unwind_GetGR>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	9a04      	ldr	r2, [sp, #16]
 8001b40:	2006      	movs	r0, #6
 8001b42:	e9c5 2809 	strd	r2, r8, [r5, #36]	@ 0x24
 8001b46:	622b      	str	r3, [r5, #32]
 8001b48:	e714      	b.n	8001974 <__gnu_unwind_pr_common+0x54>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	210d      	movs	r1, #13
 8001b4e:	4658      	mov	r0, fp
 8001b50:	f7ff fe74 	bl	800183c <_Unwind_GetGR>
 8001b54:	9e04      	ldr	r6, [sp, #16]
 8001b56:	2c02      	cmp	r4, #2
 8001b58:	bf08      	it	eq
 8001b5a:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8001b5c:	6228      	str	r0, [r5, #32]
 8001b5e:	bf08      	it	eq
 8001b60:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8001b64:	2006      	movs	r0, #6
 8001b66:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001b6a:	e703      	b.n	8001974 <__gnu_unwind_pr_common+0x54>
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	f8d8 6000 	ldr.w	r6, [r8]
 8001b72:	9c03      	ldr	r4, [sp, #12]
 8001b74:	e76d      	b.n	8001a52 <__gnu_unwind_pr_common+0x132>
 8001b76:	4640      	mov	r0, r8
 8001b78:	f7ff fc74 	bl	8001464 <selfrel_offset31>
 8001b7c:	f108 0204 	add.w	r2, r8, #4
 8001b80:	4604      	mov	r4, r0
 8001b82:	63aa      	str	r2, [r5, #56]	@ 0x38
 8001b84:	4628      	mov	r0, r5
 8001b86:	f3af 8000 	nop.w
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	f43f aef1 	beq.w	8001972 <__gnu_unwind_pr_common+0x52>
 8001b90:	4622      	mov	r2, r4
 8001b92:	210f      	movs	r1, #15
 8001b94:	4658      	mov	r0, fp
 8001b96:	f7ff fe77 	bl	8001888 <_Unwind_SetGR>
 8001b9a:	e740      	b.n	8001a1e <__gnu_unwind_pr_common+0xfe>
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	4658      	mov	r0, fp
 8001ba0:	210d      	movs	r1, #13
 8001ba2:	f7ff fe4b 	bl	800183c <_Unwind_GetGR>
 8001ba6:	4626      	mov	r6, r4
 8001ba8:	6228      	str	r0, [r5, #32]
 8001baa:	e7db      	b.n	8001b64 <__gnu_unwind_pr_common+0x244>
 8001bac:	1c58      	adds	r0, r3, #1
 8001bae:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8001bb2:	e780      	b.n	8001ab6 <__gnu_unwind_pr_common+0x196>
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <__aeabi_unwind_cpp_pr0>:
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e6b1      	b.n	8001920 <__gnu_unwind_pr_common>

08001bbc <__aeabi_unwind_cpp_pr1>:
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e6af      	b.n	8001920 <__gnu_unwind_pr_common>

08001bc0 <__aeabi_unwind_cpp_pr2>:
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e6ad      	b.n	8001920 <__gnu_unwind_pr_common>

08001bc4 <_Unwind_VRS_Pop>:
 8001bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc8:	4606      	mov	r6, r0
 8001bca:	4615      	mov	r5, r2
 8001bcc:	461c      	mov	r4, r3
 8001bce:	b0c3      	sub	sp, #268	@ 0x10c
 8001bd0:	2904      	cmp	r1, #4
 8001bd2:	f200 80cd 	bhi.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001bd6:	e8df f001 	tbb	[pc, r1]
 8001bda:	51ac      	.short	0x51ac
 8001bdc:	2acb      	.short	0x2acb
 8001bde:	03          	.byte	0x03
 8001bdf:	00          	.byte	0x00
 8001be0:	2c00      	cmp	r4, #0
 8001be2:	f040 80c5 	bne.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001be6:	2a10      	cmp	r2, #16
 8001be8:	f200 80c2 	bhi.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	06dc      	lsls	r4, r3, #27
 8001bf0:	f100 80e3 	bmi.w	8001dba <_Unwind_VRS_Pop+0x1f6>
 8001bf4:	af20      	add	r7, sp, #128	@ 0x80
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	f000 f9a6 	bl	8001f48 <__gnu_Unwind_Save_WMMXC>
 8001bfc:	2401      	movs	r4, #1
 8001bfe:	4638      	mov	r0, r7
 8001c00:	2300      	movs	r3, #0
 8001c02:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8001c04:	fa04 f203 	lsl.w	r2, r4, r3
 8001c08:	422a      	tst	r2, r5
 8001c0a:	f103 0301 	add.w	r3, r3, #1
 8001c0e:	d005      	beq.n	8001c1c <_Unwind_VRS_Pop+0x58>
 8001c10:	460a      	mov	r2, r1
 8001c12:	f852 cb04 	ldr.w	ip, [r2], #4
 8001c16:	4611      	mov	r1, r2
 8001c18:	f8c0 c000 	str.w	ip, [r0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	f100 0004 	add.w	r0, r0, #4
 8001c22:	d1ef      	bne.n	8001c04 <_Unwind_VRS_Pop+0x40>
 8001c24:	4638      	mov	r0, r7
 8001c26:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001c28:	f000 f984 	bl	8001f34 <__gnu_Unwind_Restore_WMMXC>
 8001c2c:	e095      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001c2e:	2c03      	cmp	r4, #3
 8001c30:	f040 809e 	bne.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c34:	b294      	uxth	r4, r2
 8001c36:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8001c40:	f200 8096 	bhi.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c44:	6803      	ldr	r3, [r0, #0]
 8001c46:	071f      	lsls	r7, r3, #28
 8001c48:	f100 80bf 	bmi.w	8001dca <_Unwind_VRS_Pop+0x206>
 8001c4c:	af20      	add	r7, sp, #128	@ 0x80
 8001c4e:	4638      	mov	r0, r7
 8001c50:	f000 f94e 	bl	8001ef0 <__gnu_Unwind_Save_WMMXD>
 8001c54:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001c56:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001c5a:	b154      	cbz	r4, 8001c72 <_Unwind_VRS_Pop+0xae>
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001c62:	1ad0      	subs	r0, r2, r3
 8001c64:	00e4      	lsls	r4, r4, #3
 8001c66:	581d      	ldr	r5, [r3, r0]
 8001c68:	f843 5b04 	str.w	r5, [r3], #4
 8001c6c:	428b      	cmp	r3, r1
 8001c6e:	d1fa      	bne.n	8001c66 <_Unwind_VRS_Pop+0xa2>
 8001c70:	4422      	add	r2, r4
 8001c72:	4638      	mov	r0, r7
 8001c74:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001c76:	f000 f919 	bl	8001eac <__gnu_Unwind_Restore_WMMXD>
 8001c7a:	e06e      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001c7c:	2c01      	cmp	r4, #1
 8001c7e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001c82:	b295      	uxth	r5, r2
 8001c84:	d06d      	beq.n	8001d62 <_Unwind_VRS_Pop+0x19e>
 8001c86:	2c05      	cmp	r4, #5
 8001c88:	d172      	bne.n	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c8a:	eb08 0905 	add.w	r9, r8, r5
 8001c8e:	f1b9 0f20 	cmp.w	r9, #32
 8001c92:	d86d      	bhi.n	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c94:	f1b8 0f0f 	cmp.w	r8, #15
 8001c98:	d86e      	bhi.n	8001d78 <_Unwind_VRS_Pop+0x1b4>
 8001c9a:	f1b9 0f10 	cmp.w	r9, #16
 8001c9e:	6803      	ldr	r3, [r0, #0]
 8001ca0:	f200 809b 	bhi.w	8001dda <_Unwind_VRS_Pop+0x216>
 8001ca4:	07d9      	lsls	r1, r3, #31
 8001ca6:	d508      	bpl.n	8001cba <_Unwind_VRS_Pop+0xf6>
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	f840 3b48 	str.w	r3, [r0], #72
 8001cb6:	f000 f8ed 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001cba:	af20      	add	r7, sp, #128	@ 0x80
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	f000 f8e9 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001cc2:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001cc4:	2d00      	cmp	r5, #0
 8001cc6:	f000 80b5 	beq.w	8001e34 <_Unwind_VRS_Pop+0x270>
 8001cca:	006d      	lsls	r5, r5, #1
 8001ccc:	1e6a      	subs	r2, r5, #1
 8001cce:	2500      	movs	r5, #0
 8001cd0:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001cd4:	3201      	adds	r2, #1
 8001cd6:	3904      	subs	r1, #4
 8001cd8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001cdc:	f853 0b04 	ldr.w	r0, [r3], #4
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	f841 0f04 	str.w	r0, [r1, #4]!
 8001ce6:	d1f9      	bne.n	8001cdc <_Unwind_VRS_Pop+0x118>
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	f000 809d 	beq.w	8001e28 <_Unwind_VRS_Pop+0x264>
 8001cee:	4641      	mov	r1, r8
 8001cf0:	2910      	cmp	r1, #16
 8001cf2:	bf38      	it	cc
 8001cf4:	2110      	movcc	r1, #16
 8001cf6:	466f      	mov	r7, sp
 8001cf8:	006b      	lsls	r3, r5, #1
 8001cfa:	3910      	subs	r1, #16
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001d02:	3301      	adds	r3, #1
 8001d04:	3904      	subs	r1, #4
 8001d06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001d0a:	f852 0b04 	ldr.w	r0, [r2], #4
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	f841 0f04 	str.w	r0, [r1, #4]!
 8001d14:	d1f9      	bne.n	8001d0a <_Unwind_VRS_Pop+0x146>
 8001d16:	2c01      	cmp	r4, #1
 8001d18:	f000 8084 	beq.w	8001e24 <_Unwind_VRS_Pop+0x260>
 8001d1c:	f1b8 0f0f 	cmp.w	r8, #15
 8001d20:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001d22:	d802      	bhi.n	8001d2a <_Unwind_VRS_Pop+0x166>
 8001d24:	a820      	add	r0, sp, #128	@ 0x80
 8001d26:	f000 f8b1 	bl	8001e8c <__gnu_Unwind_Restore_VFP_D>
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	f000 f8b6 	bl	8001e9c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001d30:	e013      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001d32:	b9ec      	cbnz	r4, 8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001d34:	4623      	mov	r3, r4
 8001d36:	2401      	movs	r4, #1
 8001d38:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001d3a:	1d37      	adds	r7, r6, #4
 8001d3c:	b290      	uxth	r0, r2
 8001d3e:	fa04 f203 	lsl.w	r2, r4, r3
 8001d42:	4202      	tst	r2, r0
 8001d44:	bf1c      	itt	ne
 8001d46:	f851 2b04 	ldrne.w	r2, [r1], #4
 8001d4a:	f847 2023 	strne.w	r2, [r7, r3, lsl #2]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d1f4      	bne.n	8001d3e <_Unwind_VRS_Pop+0x17a>
 8001d54:	04a8      	lsls	r0, r5, #18
 8001d56:	d400      	bmi.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001d58:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	b043      	add	sp, #268	@ 0x10c
 8001d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d62:	eb08 0305 	add.w	r3, r8, r5
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d802      	bhi.n	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001d6a:	f1b8 0f10 	cmp.w	r8, #16
 8001d6e:	d114      	bne.n	8001d9a <_Unwind_VRS_Pop+0x1d6>
 8001d70:	2002      	movs	r0, #2
 8001d72:	b043      	add	sp, #268	@ 0x10c
 8001d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d78:	2d00      	cmp	r5, #0
 8001d7a:	d0ee      	beq.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001d7c:	6803      	ldr	r3, [r0, #0]
 8001d7e:	075a      	lsls	r2, r3, #29
 8001d80:	d45c      	bmi.n	8001e3c <_Unwind_VRS_Pop+0x278>
 8001d82:	466f      	mov	r7, sp
 8001d84:	4638      	mov	r0, r7
 8001d86:	f000 f88d 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001d8a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001d8c:	006b      	lsls	r3, r5, #1
 8001d8e:	f1a8 0110 	sub.w	r1, r8, #16
 8001d92:	3b01      	subs	r3, #1
 8001d94:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001d98:	e7b3      	b.n	8001d02 <_Unwind_VRS_Pop+0x13e>
 8001d9a:	6803      	ldr	r3, [r0, #0]
 8001d9c:	07da      	lsls	r2, r3, #31
 8001d9e:	d459      	bmi.n	8001e54 <_Unwind_VRS_Pop+0x290>
 8001da0:	af20      	add	r7, sp, #128	@ 0x80
 8001da2:	4638      	mov	r0, r7
 8001da4:	f000 f86e 	bl	8001e84 <__gnu_Unwind_Save_VFP>
 8001da8:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	d18d      	bne.n	8001cca <_Unwind_VRS_Pop+0x106>
 8001dae:	3304      	adds	r3, #4
 8001db0:	4638      	mov	r0, r7
 8001db2:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001db4:	f000 f862 	bl	8001e7c <__gnu_Unwind_Restore_VFP>
 8001db8:	e7cf      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001dba:	f023 0310 	bic.w	r3, r3, #16
 8001dbe:	6003      	str	r3, [r0, #0]
 8001dc0:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001dc4:	f000 f8c0 	bl	8001f48 <__gnu_Unwind_Save_WMMXC>
 8001dc8:	e714      	b.n	8001bf4 <_Unwind_VRS_Pop+0x30>
 8001dca:	f023 0308 	bic.w	r3, r3, #8
 8001dce:	6003      	str	r3, [r0, #0]
 8001dd0:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001dd4:	f000 f88c 	bl	8001ef0 <__gnu_Unwind_Save_WMMXD>
 8001dd8:	e738      	b.n	8001c4c <_Unwind_VRS_Pop+0x88>
 8001dda:	07d9      	lsls	r1, r3, #31
 8001ddc:	d508      	bpl.n	8001df0 <_Unwind_VRS_Pop+0x22c>
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	f840 3b48 	str.w	r3, [r0], #72
 8001dea:	f000 f853 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001dee:	6833      	ldr	r3, [r6, #0]
 8001df0:	0758      	lsls	r0, r3, #29
 8001df2:	d506      	bpl.n	8001e02 <_Unwind_VRS_Pop+0x23e>
 8001df4:	4630      	mov	r0, r6
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	f840 3bd0 	str.w	r3, [r0], #208
 8001dfe:	f000 f851 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e02:	af20      	add	r7, sp, #128	@ 0x80
 8001e04:	4638      	mov	r0, r7
 8001e06:	f000 f845 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001e0a:	4668      	mov	r0, sp
 8001e0c:	f000 f84a 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e10:	f1c8 0210 	rsb	r2, r8, #16
 8001e14:	0052      	lsls	r2, r2, #1
 8001e16:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001e18:	f1a9 0510 	sub.w	r5, r9, #16
 8001e1c:	3a01      	subs	r2, #1
 8001e1e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001e22:	e757      	b.n	8001cd4 <_Unwind_VRS_Pop+0x110>
 8001e24:	af20      	add	r7, sp, #128	@ 0x80
 8001e26:	e7c2      	b.n	8001dae <_Unwind_VRS_Pop+0x1ea>
 8001e28:	2c01      	cmp	r4, #1
 8001e2a:	d0c0      	beq.n	8001dae <_Unwind_VRS_Pop+0x1ea>
 8001e2c:	f1b8 0f0f 	cmp.w	r8, #15
 8001e30:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001e32:	d892      	bhi.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001e34:	4638      	mov	r0, r7
 8001e36:	f000 f829 	bl	8001e8c <__gnu_Unwind_Restore_VFP_D>
 8001e3a:	e78e      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001e3c:	466f      	mov	r7, sp
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	f840 3bd0 	str.w	r3, [r0], #208
 8001e46:	f000 f82d 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e4a:	4638      	mov	r0, r7
 8001e4c:	f000 f82a 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e50:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001e52:	e79b      	b.n	8001d8c <_Unwind_VRS_Pop+0x1c8>
 8001e54:	4630      	mov	r0, r6
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	f840 3b48 	str.w	r3, [r0], #72
 8001e5e:	f000 f811 	bl	8001e84 <__gnu_Unwind_Save_VFP>
 8001e62:	e79d      	b.n	8001da0 <_Unwind_VRS_Pop+0x1dc>

08001e64 <__restore_core_regs>:
 8001e64:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8001e68:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001e6c:	469c      	mov	ip, r3
 8001e6e:	46a6      	mov	lr, r4
 8001e70:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001e74:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001e78:	46e5      	mov	sp, ip
 8001e7a:	bd00      	pop	{pc}

08001e7c <__gnu_Unwind_Restore_VFP>:
 8001e7c:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <__gnu_Unwind_Save_VFP>:
 8001e84:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <__gnu_Unwind_Restore_VFP_D>:
 8001e8c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <__gnu_Unwind_Save_VFP_D>:
 8001e94:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001e9c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001ea4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <__gnu_Unwind_Restore_WMMXD>:
 8001eac:	ecf0 0102 	ldfe	f0, [r0], #8
 8001eb0:	ecf0 1102 	ldfe	f1, [r0], #8
 8001eb4:	ecf0 2102 	ldfe	f2, [r0], #8
 8001eb8:	ecf0 3102 	ldfe	f3, [r0], #8
 8001ebc:	ecf0 4102 	ldfe	f4, [r0], #8
 8001ec0:	ecf0 5102 	ldfe	f5, [r0], #8
 8001ec4:	ecf0 6102 	ldfe	f6, [r0], #8
 8001ec8:	ecf0 7102 	ldfe	f7, [r0], #8
 8001ecc:	ecf0 8102 	ldfp	f0, [r0], #8
 8001ed0:	ecf0 9102 	ldfp	f1, [r0], #8
 8001ed4:	ecf0 a102 	ldfp	f2, [r0], #8
 8001ed8:	ecf0 b102 	ldfp	f3, [r0], #8
 8001edc:	ecf0 c102 	ldfp	f4, [r0], #8
 8001ee0:	ecf0 d102 	ldfp	f5, [r0], #8
 8001ee4:	ecf0 e102 	ldfp	f6, [r0], #8
 8001ee8:	ecf0 f102 	ldfp	f7, [r0], #8
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <__gnu_Unwind_Save_WMMXD>:
 8001ef0:	ece0 0102 	stfe	f0, [r0], #8
 8001ef4:	ece0 1102 	stfe	f1, [r0], #8
 8001ef8:	ece0 2102 	stfe	f2, [r0], #8
 8001efc:	ece0 3102 	stfe	f3, [r0], #8
 8001f00:	ece0 4102 	stfe	f4, [r0], #8
 8001f04:	ece0 5102 	stfe	f5, [r0], #8
 8001f08:	ece0 6102 	stfe	f6, [r0], #8
 8001f0c:	ece0 7102 	stfe	f7, [r0], #8
 8001f10:	ece0 8102 	stfp	f0, [r0], #8
 8001f14:	ece0 9102 	stfp	f1, [r0], #8
 8001f18:	ece0 a102 	stfp	f2, [r0], #8
 8001f1c:	ece0 b102 	stfp	f3, [r0], #8
 8001f20:	ece0 c102 	stfp	f4, [r0], #8
 8001f24:	ece0 d102 	stfp	f5, [r0], #8
 8001f28:	ece0 e102 	stfp	f6, [r0], #8
 8001f2c:	ece0 f102 	stfp	f7, [r0], #8
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop

08001f34 <__gnu_Unwind_Restore_WMMXC>:
 8001f34:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001f38:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001f3c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001f40:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <__gnu_Unwind_Save_WMMXC>:
 8001f48:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001f4c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001f50:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001f54:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <_Unwind_RaiseException>:
 8001f5c:	46ec      	mov	ip, sp
 8001f5e:	b500      	push	{lr}
 8001f60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001f64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001f70:	a901      	add	r1, sp, #4
 8001f72:	f7ff fbd9 	bl	8001728 <__gnu_Unwind_RaiseException>
 8001f76:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001f7a:	b012      	add	sp, #72	@ 0x48
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <_Unwind_Resume>:
 8001f80:	46ec      	mov	ip, sp
 8001f82:	b500      	push	{lr}
 8001f84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001f88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001f94:	a901      	add	r1, sp, #4
 8001f96:	f7ff fc05 	bl	80017a4 <__gnu_Unwind_Resume>
 8001f9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001f9e:	b012      	add	sp, #72	@ 0x48
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <_Unwind_Resume_or_Rethrow>:
 8001fa4:	46ec      	mov	ip, sp
 8001fa6:	b500      	push	{lr}
 8001fa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001fac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001fb8:	a901      	add	r1, sp, #4
 8001fba:	f7ff fc15 	bl	80017e8 <__gnu_Unwind_Resume_or_Rethrow>
 8001fbe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001fc2:	b012      	add	sp, #72	@ 0x48
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <_Unwind_ForcedUnwind>:
 8001fc8:	46ec      	mov	ip, sp
 8001fca:	b500      	push	{lr}
 8001fcc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001fd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001fdc:	ab01      	add	r3, sp, #4
 8001fde:	f7ff fbd7 	bl	8001790 <__gnu_Unwind_ForcedUnwind>
 8001fe2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001fe6:	b012      	add	sp, #72	@ 0x48
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <_Unwind_Backtrace>:
 8001fec:	46ec      	mov	ip, sp
 8001fee:	b500      	push	{lr}
 8001ff0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ff4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002000:	aa01      	add	r2, sp, #4
 8002002:	f7ff fc4d 	bl	80018a0 <__gnu_Unwind_Backtrace>
 8002006:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800200a:	b012      	add	sp, #72	@ 0x48
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop

08002010 <next_unwind_byte>:
 8002010:	7a02      	ldrb	r2, [r0, #8]
 8002012:	4603      	mov	r3, r0
 8002014:	b97a      	cbnz	r2, 8002036 <next_unwind_byte+0x26>
 8002016:	7a42      	ldrb	r2, [r0, #9]
 8002018:	b1a2      	cbz	r2, 8002044 <next_unwind_byte+0x34>
 800201a:	f04f 0c03 	mov.w	ip, #3
 800201e:	6841      	ldr	r1, [r0, #4]
 8002020:	3a01      	subs	r2, #1
 8002022:	7242      	strb	r2, [r0, #9]
 8002024:	6808      	ldr	r0, [r1, #0]
 8002026:	1d0a      	adds	r2, r1, #4
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	0202      	lsls	r2, r0, #8
 800202c:	f883 c008 	strb.w	ip, [r3, #8]
 8002030:	0e00      	lsrs	r0, r0, #24
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	4770      	bx	lr
 8002036:	6800      	ldr	r0, [r0, #0]
 8002038:	3a01      	subs	r2, #1
 800203a:	721a      	strb	r2, [r3, #8]
 800203c:	0202      	lsls	r2, r0, #8
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	0e00      	lsrs	r0, r0, #24
 8002042:	4770      	bx	lr
 8002044:	20b0      	movs	r0, #176	@ 0xb0
 8002046:	4770      	bx	lr

08002048 <_Unwind_GetGR.constprop.0>:
 8002048:	2300      	movs	r3, #0
 800204a:	b500      	push	{lr}
 800204c:	b085      	sub	sp, #20
 800204e:	a903      	add	r1, sp, #12
 8002050:	9100      	str	r1, [sp, #0]
 8002052:	220c      	movs	r2, #12
 8002054:	4619      	mov	r1, r3
 8002056:	f7ff fbd9 	bl	800180c <_Unwind_VRS_Get>
 800205a:	9803      	ldr	r0, [sp, #12]
 800205c:	b005      	add	sp, #20
 800205e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002062:	bf00      	nop

08002064 <unwind_UCB_from_context>:
 8002064:	e7f0      	b.n	8002048 <_Unwind_GetGR.constprop.0>
 8002066:	bf00      	nop

08002068 <__gnu_unwind_execute>:
 8002068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800206c:	f04f 0800 	mov.w	r8, #0
 8002070:	4606      	mov	r6, r0
 8002072:	460d      	mov	r5, r1
 8002074:	b085      	sub	sp, #20
 8002076:	4628      	mov	r0, r5
 8002078:	f7ff ffca 	bl	8002010 <next_unwind_byte>
 800207c:	28b0      	cmp	r0, #176	@ 0xb0
 800207e:	4604      	mov	r4, r0
 8002080:	f000 80dc 	beq.w	800223c <__gnu_unwind_execute+0x1d4>
 8002084:	0607      	lsls	r7, r0, #24
 8002086:	d547      	bpl.n	8002118 <__gnu_unwind_execute+0xb0>
 8002088:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800208c:	2b80      	cmp	r3, #128	@ 0x80
 800208e:	d05f      	beq.n	8002150 <__gnu_unwind_execute+0xe8>
 8002090:	2bb0      	cmp	r3, #176	@ 0xb0
 8002092:	d074      	beq.n	800217e <__gnu_unwind_execute+0x116>
 8002094:	d81b      	bhi.n	80020ce <__gnu_unwind_execute+0x66>
 8002096:	2b90      	cmp	r3, #144	@ 0x90
 8002098:	f000 809c 	beq.w	80021d4 <__gnu_unwind_execute+0x16c>
 800209c:	2ba0      	cmp	r3, #160	@ 0xa0
 800209e:	d112      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 80020a0:	43c3      	mvns	r3, r0
 80020a2:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	411a      	asrs	r2, r3
 80020ac:	0701      	lsls	r1, r0, #28
 80020ae:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 80020b2:	d501      	bpl.n	80020b8 <__gnu_unwind_execute+0x50>
 80020b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020b8:	2300      	movs	r3, #0
 80020ba:	4630      	mov	r0, r6
 80020bc:	4619      	mov	r1, r3
 80020be:	f7ff fd81 	bl	8001bc4 <_Unwind_VRS_Pop>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d0d7      	beq.n	8002076 <__gnu_unwind_execute+0xe>
 80020c6:	2009      	movs	r0, #9
 80020c8:	b005      	add	sp, #20
 80020ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80020d0:	d16e      	bne.n	80021b0 <__gnu_unwind_execute+0x148>
 80020d2:	28c6      	cmp	r0, #198	@ 0xc6
 80020d4:	f000 8094 	beq.w	8002200 <__gnu_unwind_execute+0x198>
 80020d8:	28c7      	cmp	r0, #199	@ 0xc7
 80020da:	f000 80b4 	beq.w	8002246 <__gnu_unwind_execute+0x1de>
 80020de:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80020e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80020e4:	f000 80c9 	beq.w	800227a <__gnu_unwind_execute+0x212>
 80020e8:	28c8      	cmp	r0, #200	@ 0xc8
 80020ea:	f000 80d4 	beq.w	8002296 <__gnu_unwind_execute+0x22e>
 80020ee:	28c9      	cmp	r0, #201	@ 0xc9
 80020f0:	d1e9      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 80020f2:	4628      	mov	r0, r5
 80020f4:	f7ff ff8c 	bl	8002010 <next_unwind_byte>
 80020f8:	2305      	movs	r3, #5
 80020fa:	4604      	mov	r4, r0
 80020fc:	2101      	movs	r1, #1
 80020fe:	4630      	mov	r0, r6
 8002100:	0322      	lsls	r2, r4, #12
 8002102:	f004 040f 	and.w	r4, r4, #15
 8002106:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800210a:	440c      	add	r4, r1
 800210c:	4322      	orrs	r2, r4
 800210e:	f7ff fd59 	bl	8001bc4 <_Unwind_VRS_Pop>
 8002112:	2800      	cmp	r0, #0
 8002114:	d0af      	beq.n	8002076 <__gnu_unwind_execute+0xe>
 8002116:	e7d6      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002118:	0083      	lsls	r3, r0, #2
 800211a:	b2db      	uxtb	r3, r3
 800211c:	1d1f      	adds	r7, r3, #4
 800211e:	2300      	movs	r3, #0
 8002120:	f10d 090c 	add.w	r9, sp, #12
 8002124:	4619      	mov	r1, r3
 8002126:	220d      	movs	r2, #13
 8002128:	4630      	mov	r0, r6
 800212a:	f8cd 9000 	str.w	r9, [sp]
 800212e:	f7ff fb6d 	bl	800180c <_Unwind_VRS_Get>
 8002132:	9b03      	ldr	r3, [sp, #12]
 8002134:	0660      	lsls	r0, r4, #25
 8002136:	bf4c      	ite	mi
 8002138:	1bdf      	submi	r7, r3, r7
 800213a:	18ff      	addpl	r7, r7, r3
 800213c:	2300      	movs	r3, #0
 800213e:	220d      	movs	r2, #13
 8002140:	4630      	mov	r0, r6
 8002142:	4619      	mov	r1, r3
 8002144:	f8cd 9000 	str.w	r9, [sp]
 8002148:	9703      	str	r7, [sp, #12]
 800214a:	f7ff fb85 	bl	8001858 <_Unwind_VRS_Set>
 800214e:	e792      	b.n	8002076 <__gnu_unwind_execute+0xe>
 8002150:	4628      	mov	r0, r5
 8002152:	f7ff ff5d 	bl	8002010 <next_unwind_byte>
 8002156:	0224      	lsls	r4, r4, #8
 8002158:	4320      	orrs	r0, r4
 800215a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800215e:	d0b2      	beq.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002160:	2300      	movs	r3, #0
 8002162:	0104      	lsls	r4, r0, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4630      	mov	r0, r6
 8002168:	b2a2      	uxth	r2, r4
 800216a:	f7ff fd2b 	bl	8001bc4 <_Unwind_VRS_Pop>
 800216e:	2800      	cmp	r0, #0
 8002170:	d1a9      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002172:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8002176:	bf18      	it	ne
 8002178:	f04f 0801 	movne.w	r8, #1
 800217c:	e77b      	b.n	8002076 <__gnu_unwind_execute+0xe>
 800217e:	28b1      	cmp	r0, #177	@ 0xb1
 8002180:	d052      	beq.n	8002228 <__gnu_unwind_execute+0x1c0>
 8002182:	28b2      	cmp	r0, #178	@ 0xb2
 8002184:	f000 80ac 	beq.w	80022e0 <__gnu_unwind_execute+0x278>
 8002188:	28b3      	cmp	r0, #179	@ 0xb3
 800218a:	d06e      	beq.n	800226a <__gnu_unwind_execute+0x202>
 800218c:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8002190:	2bb4      	cmp	r3, #180	@ 0xb4
 8002192:	d098      	beq.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002194:	2301      	movs	r3, #1
 8002196:	f000 0207 	and.w	r2, r0, #7
 800219a:	441a      	add	r2, r3
 800219c:	4630      	mov	r0, r6
 800219e:	4619      	mov	r1, r3
 80021a0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80021a4:	f7ff fd0e 	bl	8001bc4 <_Unwind_VRS_Pop>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	f43f af64 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 80021ae:	e78a      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 80021b0:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80021b4:	2bd0      	cmp	r3, #208	@ 0xd0
 80021b6:	d186      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 80021b8:	f000 0207 	and.w	r2, r0, #7
 80021bc:	3201      	adds	r2, #1
 80021be:	2305      	movs	r3, #5
 80021c0:	2101      	movs	r1, #1
 80021c2:	4630      	mov	r0, r6
 80021c4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80021c8:	f7ff fcfc 	bl	8001bc4 <_Unwind_VRS_Pop>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	f43f af52 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 80021d2:	e778      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 80021d4:	f000 030d 	and.w	r3, r0, #13
 80021d8:	2b0d      	cmp	r3, #13
 80021da:	f43f af74 	beq.w	80020c6 <__gnu_unwind_execute+0x5e>
 80021de:	2300      	movs	r3, #0
 80021e0:	af03      	add	r7, sp, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	f000 020f 	and.w	r2, r0, #15
 80021e8:	9700      	str	r7, [sp, #0]
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7ff fb0e 	bl	800180c <_Unwind_VRS_Get>
 80021f0:	2300      	movs	r3, #0
 80021f2:	220d      	movs	r2, #13
 80021f4:	4630      	mov	r0, r6
 80021f6:	4619      	mov	r1, r3
 80021f8:	9700      	str	r7, [sp, #0]
 80021fa:	f7ff fb2d 	bl	8001858 <_Unwind_VRS_Set>
 80021fe:	e73a      	b.n	8002076 <__gnu_unwind_execute+0xe>
 8002200:	4628      	mov	r0, r5
 8002202:	f7ff ff05 	bl	8002010 <next_unwind_byte>
 8002206:	4604      	mov	r4, r0
 8002208:	2303      	movs	r3, #3
 800220a:	0322      	lsls	r2, r4, #12
 800220c:	f004 040f 	and.w	r4, r4, #15
 8002210:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8002214:	3401      	adds	r4, #1
 8002216:	4630      	mov	r0, r6
 8002218:	4619      	mov	r1, r3
 800221a:	4322      	orrs	r2, r4
 800221c:	f7ff fcd2 	bl	8001bc4 <_Unwind_VRS_Pop>
 8002220:	2800      	cmp	r0, #0
 8002222:	f43f af28 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 8002226:	e74e      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002228:	4628      	mov	r0, r5
 800222a:	f7ff fef1 	bl	8002010 <next_unwind_byte>
 800222e:	1e43      	subs	r3, r0, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b0e      	cmp	r3, #14
 8002234:	4602      	mov	r2, r0
 8002236:	f67f af3f 	bls.w	80020b8 <__gnu_unwind_execute+0x50>
 800223a:	e744      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 800223c:	f1b8 0f00 	cmp.w	r8, #0
 8002240:	d03e      	beq.n	80022c0 <__gnu_unwind_execute+0x258>
 8002242:	2000      	movs	r0, #0
 8002244:	e740      	b.n	80020c8 <__gnu_unwind_execute+0x60>
 8002246:	4628      	mov	r0, r5
 8002248:	f7ff fee2 	bl	8002010 <next_unwind_byte>
 800224c:	1e43      	subs	r3, r0, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b0e      	cmp	r3, #14
 8002252:	4602      	mov	r2, r0
 8002254:	f63f af37 	bhi.w	80020c6 <__gnu_unwind_execute+0x5e>
 8002258:	2300      	movs	r3, #0
 800225a:	2104      	movs	r1, #4
 800225c:	4630      	mov	r0, r6
 800225e:	f7ff fcb1 	bl	8001bc4 <_Unwind_VRS_Pop>
 8002262:	2800      	cmp	r0, #0
 8002264:	f43f af07 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 8002268:	e72d      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 800226a:	4628      	mov	r0, r5
 800226c:	f7ff fed0 	bl	8002010 <next_unwind_byte>
 8002270:	2301      	movs	r3, #1
 8002272:	4604      	mov	r4, r0
 8002274:	4619      	mov	r1, r3
 8002276:	4630      	mov	r0, r6
 8002278:	e742      	b.n	8002100 <__gnu_unwind_execute+0x98>
 800227a:	2303      	movs	r3, #3
 800227c:	f000 020f 	and.w	r2, r0, #15
 8002280:	3201      	adds	r2, #1
 8002282:	4630      	mov	r0, r6
 8002284:	4619      	mov	r1, r3
 8002286:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 800228a:	f7ff fc9b 	bl	8001bc4 <_Unwind_VRS_Pop>
 800228e:	2800      	cmp	r0, #0
 8002290:	f43f aef1 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 8002294:	e717      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002296:	4628      	mov	r0, r5
 8002298:	f7ff feba 	bl	8002010 <next_unwind_byte>
 800229c:	4602      	mov	r2, r0
 800229e:	2101      	movs	r1, #1
 80022a0:	f002 04f0 	and.w	r4, r2, #240	@ 0xf0
 80022a4:	f002 020f 	and.w	r2, r2, #15
 80022a8:	3410      	adds	r4, #16
 80022aa:	440a      	add	r2, r1
 80022ac:	2305      	movs	r3, #5
 80022ae:	4630      	mov	r0, r6
 80022b0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80022b4:	f7ff fc86 	bl	8001bc4 <_Unwind_VRS_Pop>
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f43f aedc 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 80022be:	e702      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 80022c0:	ac03      	add	r4, sp, #12
 80022c2:	4643      	mov	r3, r8
 80022c4:	4641      	mov	r1, r8
 80022c6:	220e      	movs	r2, #14
 80022c8:	4630      	mov	r0, r6
 80022ca:	9400      	str	r4, [sp, #0]
 80022cc:	f7ff fa9e 	bl	800180c <_Unwind_VRS_Get>
 80022d0:	4643      	mov	r3, r8
 80022d2:	220f      	movs	r2, #15
 80022d4:	4641      	mov	r1, r8
 80022d6:	4630      	mov	r0, r6
 80022d8:	9400      	str	r4, [sp, #0]
 80022da:	f7ff fabd 	bl	8001858 <_Unwind_VRS_Set>
 80022de:	e7b0      	b.n	8002242 <__gnu_unwind_execute+0x1da>
 80022e0:	2300      	movs	r3, #0
 80022e2:	f10d 090c 	add.w	r9, sp, #12
 80022e6:	220d      	movs	r2, #13
 80022e8:	4619      	mov	r1, r3
 80022ea:	4630      	mov	r0, r6
 80022ec:	f8cd 9000 	str.w	r9, [sp]
 80022f0:	f7ff fa8c 	bl	800180c <_Unwind_VRS_Get>
 80022f4:	4628      	mov	r0, r5
 80022f6:	f7ff fe8b 	bl	8002010 <next_unwind_byte>
 80022fa:	0602      	lsls	r2, r0, #24
 80022fc:	f04f 0702 	mov.w	r7, #2
 8002300:	9c03      	ldr	r4, [sp, #12]
 8002302:	d50b      	bpl.n	800231c <__gnu_unwind_execute+0x2b4>
 8002304:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002308:	40b8      	lsls	r0, r7
 800230a:	4404      	add	r4, r0
 800230c:	4628      	mov	r0, r5
 800230e:	9403      	str	r4, [sp, #12]
 8002310:	f7ff fe7e 	bl	8002010 <next_unwind_byte>
 8002314:	0603      	lsls	r3, r0, #24
 8002316:	f107 0707 	add.w	r7, r7, #7
 800231a:	d4f3      	bmi.n	8002304 <__gnu_unwind_execute+0x29c>
 800231c:	2300      	movs	r3, #0
 800231e:	fa00 f207 	lsl.w	r2, r0, r7
 8002322:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8002326:	4422      	add	r2, r4
 8002328:	9203      	str	r2, [sp, #12]
 800232a:	4630      	mov	r0, r6
 800232c:	220d      	movs	r2, #13
 800232e:	4619      	mov	r1, r3
 8002330:	f8cd 9000 	str.w	r9, [sp]
 8002334:	f7ff fa90 	bl	8001858 <_Unwind_VRS_Set>
 8002338:	e69d      	b.n	8002076 <__gnu_unwind_execute+0xe>
 800233a:	bf00      	nop

0800233c <__gnu_unwind_frame>:
 800233c:	460b      	mov	r3, r1
 800233e:	f04f 0c03 	mov.w	ip, #3
 8002342:	b500      	push	{lr}
 8002344:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002346:	4618      	mov	r0, r3
 8002348:	6853      	ldr	r3, [r2, #4]
 800234a:	b085      	sub	sp, #20
 800234c:	3208      	adds	r2, #8
 800234e:	9202      	str	r2, [sp, #8]
 8002350:	a901      	add	r1, sp, #4
 8002352:	0e1a      	lsrs	r2, r3, #24
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	f88d c00c 	strb.w	ip, [sp, #12]
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f88d 200d 	strb.w	r2, [sp, #13]
 8002360:	f7ff fe82 	bl	8002068 <__gnu_unwind_execute>
 8002364:	b005      	add	sp, #20
 8002366:	f85d fb04 	ldr.w	pc, [sp], #4
 800236a:	bf00      	nop

0800236c <_Unwind_GetRegionStart>:
 800236c:	b508      	push	{r3, lr}
 800236e:	f7ff fe79 	bl	8002064 <unwind_UCB_from_context>
 8002372:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8002374:	bd08      	pop	{r3, pc}
 8002376:	bf00      	nop

08002378 <_Unwind_GetLanguageSpecificData>:
 8002378:	b508      	push	{r3, lr}
 800237a:	f7ff fe73 	bl	8002064 <unwind_UCB_from_context>
 800237e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8002380:	79c3      	ldrb	r3, [r0, #7]
 8002382:	3302      	adds	r3, #2
 8002384:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002388:	bd08      	pop	{r3, pc}
 800238a:	bf00      	nop

0800238c <__aeabi_idiv0>:
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <_Z14SX1278_SPIReadP8SX1278_th>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fad8 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 faf8 	bl	80029a4 <_Z21SX1278_hw_SPIReadByteP11SX1278_hw_t>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fa90 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	return tmp;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <_Z15SX1278_SPIWriteP8SX1278_thh>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
 80023da:	4613      	mov	r3, r2
 80023dc:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fa7d 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f000 faae 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
	SX1278_hw_SPICommand(module->hw, cmd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	78ba      	ldrb	r2, [r7, #2]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f000 faa7 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
	SX1278_hw_SetNSS(module->hw, 1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fa66 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	72fb      	strb	r3, [r7, #11]
 8002430:	4613      	mov	r3, r2
 8002432:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8002434:	7abb      	ldrb	r3, [r7, #10]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d929      	bls.n	800248e <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fa4f 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f000 fa80 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
		for (i = 0; i < length; i++) {
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	e00b      	b.n	8002478 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f000 fa74 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
		for (i = 0; i < length; i++) {
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	3301      	adds	r3, #1
 8002476:	75fb      	strb	r3, [r7, #23]
 8002478:	7dfa      	ldrb	r2, [r7, #23]
 800247a:	7abb      	ldrb	r3, [r7, #10]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3ef      	bcc.n	8002460 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa2c 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
 800248c:	e000      	b.n	8002490 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x70>
		return;
 800248e:	bf00      	nop
	}
}
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <_Z13SX1278_configP8SX1278_t>:

void SX1278_config(SX1278_t *module) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f90d 	bl	80026c0 <_Z12SX1278_sleepP8SX1278_t>
	SX1278_hw_DelayMs(15);
 80024a6:	200f      	movs	r0, #15
 80024a8:	f000 faa7 	bl	80029fa <_Z17SX1278_hw_DelayMsm>

	SX1278_entryLoRa(module);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f917 	bl	80026e0 <_Z16SX1278_entryLoRaP8SX1278_t>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024b8:	f04f 0000 	mov.w	r0, #0
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	04d9      	lsls	r1, r3, #19
 80024c2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80024c6:	04d0      	lsls	r0, r2, #19
 80024c8:	4a6f      	ldr	r2, [pc, #444]	@ (8002688 <_Z13SX1278_configP8SX1278_t+0x1f0>)
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	f7fe fe1f 	bl	8001110 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80024da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	0c02      	lsrs	r2, r0, #16
 80024e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024ec:	0c0b      	lsrs	r3, r1, #16
 80024ee:	b2d3      	uxtb	r3, r2
 80024f0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80024f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	0a02      	lsrs	r2, r0, #8
 8002500:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002504:	0a0b      	lsrs	r3, r1, #8
 8002506:	b2d3      	uxtb	r3, r2
 8002508:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800250a:	7c3b      	ldrb	r3, [r7, #16]
 800250c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800250e:	f107 020c 	add.w	r2, r7, #12
 8002512:	2303      	movs	r3, #3
 8002514:	2106      	movs	r1, #6
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff82 	bl	8002420 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800251c:	2234      	movs	r2, #52	@ 0x34
 800251e:	2139      	movs	r1, #57	@ 0x39
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff54 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7c1b      	ldrb	r3, [r3, #16]
 800252a:	461a      	mov	r2, r3
 800252c:	4b57      	ldr	r3, [pc, #348]	@ (800268c <_Z13SX1278_configP8SX1278_t+0x1f4>)
 800252e:	5c9b      	ldrb	r3, [r3, r2]
 8002530:	461a      	mov	r2, r3
 8002532:	2109      	movs	r1, #9
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff4a 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800253a:	220b      	movs	r2, #11
 800253c:	210b      	movs	r1, #11
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff45 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002544:	2223      	movs	r2, #35	@ 0x23
 8002546:	210c      	movs	r1, #12
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff40 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7c5b      	ldrb	r3, [r3, #17]
 8002552:	461a      	mov	r2, r3
 8002554:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <_Z13SX1278_configP8SX1278_t+0x1f8>)
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b06      	cmp	r3, #6
 800255a:	d147      	bne.n	80025ec <_Z13SX1278_configP8SX1278_t+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7c9b      	ldrb	r3, [r3, #18]
 8002560:	461a      	mov	r2, r3
 8002562:	4b4c      	ldr	r3, [pc, #304]	@ (8002694 <_Z13SX1278_configP8SX1278_t+0x1fc>)
 8002564:	5c9b      	ldrb	r3, [r3, r2]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7cdb      	ldrb	r3, [r3, #19]
 800256e:	4619      	mov	r1, r3
 8002570:	4b49      	ldr	r3, [pc, #292]	@ (8002698 <_Z13SX1278_configP8SX1278_t+0x200>)
 8002572:	5c5b      	ldrb	r3, [r3, r1]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4413      	add	r3, r2
 800257a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800257c:	3301      	adds	r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	211d      	movs	r1, #29
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff22 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7c5b      	ldrb	r3, [r3, #17]
 800258e:	461a      	mov	r2, r3
 8002590:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <_Z13SX1278_configP8SX1278_t+0x1f8>)
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7d1b      	ldrb	r3, [r3, #20]
 800259c:	4619      	mov	r1, r3
 800259e:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <_Z13SX1278_configP8SX1278_t+0x204>)
 80025a0:	5c5b      	ldrb	r3, [r3, r1]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80025aa:	3303      	adds	r3, #3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	211e      	movs	r1, #30
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ff0b 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

		tmp = SX1278_SPIRead(module, 0x31);
 80025b8:	2131      	movs	r1, #49	@ 0x31
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fee8 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	f023 0307 	bic.w	r3, r3, #7
 80025ca:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	f043 0305 	orr.w	r3, r3, #5
 80025d2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2131      	movs	r1, #49	@ 0x31
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fef7 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80025e0:	220c      	movs	r2, #12
 80025e2:	2137      	movs	r1, #55	@ 0x37
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff fef2 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
 80025ea:	e029      	b.n	8002640 <_Z13SX1278_configP8SX1278_t+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7c9b      	ldrb	r3, [r3, #18]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <_Z13SX1278_configP8SX1278_t+0x1fc>)
 80025f4:	5c9b      	ldrb	r3, [r3, r2]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7cdb      	ldrb	r3, [r3, #19]
 80025fe:	4619      	mov	r1, r3
 8002600:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <_Z13SX1278_configP8SX1278_t+0x200>)
 8002602:	5c5b      	ldrb	r3, [r3, r1]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002608:	4413      	add	r3, r2
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	211d      	movs	r1, #29
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fedc 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7c5b      	ldrb	r3, [r3, #17]
 800261a:	461a      	mov	r2, r3
 800261c:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <_Z13SX1278_configP8SX1278_t+0x1f8>)
 800261e:	5c9b      	ldrb	r3, [r3, r2]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7d1b      	ldrb	r3, [r3, #20]
 8002628:	4619      	mov	r1, r3
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <_Z13SX1278_configP8SX1278_t+0x204>)
 800262c:	5c5b      	ldrb	r3, [r3, r1]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002632:	4413      	add	r3, r2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	211e      	movs	r1, #30
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fec7 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8002640:	2204      	movs	r2, #4
 8002642:	2126      	movs	r1, #38	@ 0x26
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff fec2 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800264a:	2208      	movs	r2, #8
 800264c:	211f      	movs	r1, #31
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff febd 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002654:	2200      	movs	r2, #0
 8002656:	2120      	movs	r1, #32
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff feb8 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800265e:	2208      	movs	r2, #8
 8002660:	2121      	movs	r1, #33	@ 0x21
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff feb3 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002668:	2201      	movs	r2, #1
 800266a:	2141      	movs	r1, #65	@ 0x41
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff feae 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	module->readBytes = 0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f810 	bl	80026a0 <_Z14SX1278_standbyP8SX1278_t>
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	01e84800 	.word	0x01e84800
 800268c:	0800bbec 	.word	0x0800bbec
 8002690:	0800bbf0 	.word	0x0800bbf0
 8002694:	0800bbf8 	.word	0x0800bbf8
 8002698:	0800bc04 	.word	0x0800bc04
 800269c:	0800bc08 	.word	0x0800bc08

080026a0 <_Z14SX1278_standbyP8SX1278_t>:

void SX1278_standby(SX1278_t *module) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80026a8:	2209      	movs	r2, #9
 80026aa:	2101      	movs	r1, #1
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fe8e 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	module->status = STANDBY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	759a      	strb	r2, [r3, #22]
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_Z12SX1278_sleepP8SX1278_t>:

void SX1278_sleep(SX1278_t *module) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80026c8:	2208      	movs	r2, #8
 80026ca:	2101      	movs	r1, #1
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fe7e 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	module->status = SLEEP;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	759a      	strb	r2, [r3, #22]
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_Z16SX1278_entryLoRaP8SX1278_t>:

void SX1278_entryLoRa(SX1278_t *module) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80026e8:	2288      	movs	r2, #136	@ 0x88
 80026ea:	2101      	movs	r1, #1
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fe6e 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_Z19SX1278_clearLoRaIrqP8SX1278_t>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002702:	22ff      	movs	r2, #255	@ 0xff
 8002704:	2112      	movs	r1, #18
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fe61 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_Z18SX1278_LoRaEntryTxP8SX1278_thm>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	460b      	mov	r3, r1
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	7afa      	ldrb	r2, [r7, #11]
 8002726:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff feb5 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800272e:	2287      	movs	r2, #135	@ 0x87
 8002730:	214d      	movs	r1, #77	@ 0x4d
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff fe4b 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8002738:	2200      	movs	r2, #0
 800273a:	2124      	movs	r1, #36	@ 0x24
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff fe46 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8002742:	2241      	movs	r2, #65	@ 0x41
 8002744:	2140      	movs	r1, #64	@ 0x40
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fe41 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_clearLoRaIrq(module);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff ffd4 	bl	80026fa <_Z19SX1278_clearLoRaIrqP8SX1278_t>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8002752:	22f7      	movs	r2, #247	@ 0xf7
 8002754:	2111      	movs	r1, #17
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fe39 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	461a      	mov	r2, r3
 8002760:	2122      	movs	r1, #34	@ 0x22
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff fe33 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8002768:	210e      	movs	r1, #14
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff fe10 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
 8002770:	4603      	mov	r3, r0
 8002772:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	461a      	mov	r2, r3
 8002778:	210d      	movs	r1, #13
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff fe27 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8002780:	2122      	movs	r1, #34	@ 0x22
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7ff fe04 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
 8002788:	4603      	mov	r3, r0
 800278a:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800278c:	7dba      	ldrb	r2, [r7, #22]
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	429a      	cmp	r2, r3
 8002792:	d104      	bne.n	800279e <_Z18SX1278_LoRaEntryTxP8SX1278_thm+0x8a>
			module->status = TX;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2202      	movs	r2, #2
 8002798:	759a      	strb	r2, [r3, #22]
			return 1;
 800279a:	2301      	movs	r3, #1
 800279c:	e013      	b.n	80027c6 <_Z18SX1278_LoRaEntryTxP8SX1278_thm+0xb2>
		}

		if (--timeout == 0) {
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0e5      	beq.n	8002780 <_Z18SX1278_LoRaEntryTxP8SX1278_thm+0x6c>
			SX1278_hw_Reset(module->hw);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f8aa 	bl	8002912 <_Z15SX1278_hw_ResetP11SX1278_hw_t>
			SX1278_config(module);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff fe6a 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
			return 0;
 80027c4:	2300      	movs	r3, #0
		}
	}
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	2100      	movs	r1, #0
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe1b 	bl	8002420 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80027ea:	228b      	movs	r2, #139	@ 0x8b
 80027ec:	2101      	movs	r1, #1
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff fded 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f909 	bl	8002a10 <_Z17SX1278_hw_GetDIO0P11SX1278_hw_t>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x58>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800280e:	2112      	movs	r1, #18
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fdbd 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
			SX1278_clearLoRaIrq(module); //Clear irq
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff ff6f 	bl	80026fa <_Z19SX1278_clearLoRaIrqP8SX1278_t>
			SX1278_standby(module); //Entry Standby mode
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff ff3f 	bl	80026a0 <_Z14SX1278_standbyP8SX1278_t>
			return 1;
 8002822:	2301      	movs	r3, #1
 8002824:	e018      	b.n	8002858 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x8a>
		}

		if (--timeout == 0) {
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	3b01      	subs	r3, #1
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x82>
			SX1278_hw_Reset(module->hw);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f866 	bl	8002912 <_Z15SX1278_hw_ResetP11SX1278_hw_t>
			SX1278_config(module);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fe26 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
			return 0;
 800284c:	2300      	movs	r3, #0
 800284e:	e003      	b.n	8002858 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x8a>
		}
		SX1278_hw_DelayMs(1);
 8002850:	2001      	movs	r0, #1
 8002852:	f000 f8d2 	bl	80029fa <_Z17SX1278_hw_DelayMsm>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002856:	e7cd      	b.n	80027f4 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x26>
	}
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_Z11SX1278_initP8SX1278_tyhhhhhh>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f000 f822 	bl	80028ba <_Z14SX1278_hw_initP11SX1278_hw_t>
	module->frequency = frequency;
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800287c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	7e3a      	ldrb	r2, [r7, #24]
 8002884:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	7f3a      	ldrb	r2, [r7, #28]
 800288a:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002892:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800289a:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80028a2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80028aa:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff fdf3 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_Z14SX1278_hw_initP11SX1278_hw_t>:
#include "SX1278_hw.h"
#include <string.h>

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80028c2:	2101      	movs	r1, #1
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f80d 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6858      	ldr	r0, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2201      	movs	r2, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	f001 feb5 	bl	8004646 <HAL_GPIO_WritePin>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6958      	ldr	r0, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	b299      	uxth	r1, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti+0x1e>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti+0x20>
 8002902:	2300      	movs	r3, #0
 8002904:	461a      	mov	r2, r3
 8002906:	f001 fe9e 	bl	8004646 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_Z15SX1278_hw_ResetP11SX1278_hw_t>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800291a:	2101      	movs	r1, #1
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffe1 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6858      	ldr	r0, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	2200      	movs	r2, #0
 800292e:	4619      	mov	r1, r3
 8002930:	f001 fe89 	bl	8004646 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8002934:	2001      	movs	r0, #1
 8002936:	f000 f860 	bl	80029fa <_Z17SX1278_hw_DelayMsm>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6858      	ldr	r0, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	2201      	movs	r2, #1
 8002946:	4619      	mov	r1, r3
 8002948:	f001 fe7d 	bl	8004646 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800294c:	2064      	movs	r0, #100	@ 0x64
 800294e:	f000 f854 	bl	80029fa <_Z17SX1278_hw_DelayMsm>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8002966:	2100      	movs	r1, #0
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffbb 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6998      	ldr	r0, [r3, #24]
 8002972:	1cf9      	adds	r1, r7, #3
 8002974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002978:	2201      	movs	r2, #1
 800297a:	f003 ff55 	bl	8006828 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800297e:	bf00      	nop
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4618      	mov	r0, r3
 8002986:	f004 fa42 	bl	8006e0e <HAL_SPI_GetState>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f2      	bne.n	8002980 <_Z20SX1278_hw_SPICommandP11SX1278_hw_th+0x26>
		;
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_Z21SX1278_hw_SPIReadByteP11SX1278_hw_t>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff94 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6998      	ldr	r0, [r3, #24]
 80029c0:	f107 020e 	add.w	r2, r7, #14
 80029c4:	f107 010f 	add.w	r1, r7, #15
 80029c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2301      	movs	r3, #1
 80029d0:	f004 f86d 	bl	8006aae <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80029d4:	bf00      	nop
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fa17 	bl	8006e0e <HAL_SPI_GetState>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f2      	bne.n	80029d6 <_Z21SX1278_hw_SPIReadByteP11SX1278_hw_t+0x32>
		;
	return rxByte;
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_Z17SX1278_hw_DelayMsm>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f001 fb7c 	bl	8004100 <HAL_Delay>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_Z17SX1278_hw_GetDIO0P11SX1278_hw_t>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f001 fdf7 	bl	8004618 <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <_ZN21EnvironmentConditions9isSimilarERS_>:
	bool isSame(EnvironmentConditions &that)
	{
		return fabs(this->tempC - that.tempC) <= 0.01 && fabs(this->humidity - that.humidity) <= 0.01 && this->isValid == that.isValid;
	}

	bool isSimilar(EnvironmentConditions &that)
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	{
	    return fabs(this->tempC - that.tempC) <= 0.1 && fabs(this->humidity - that.humidity) <= 0.1 && this->isValid == that.isValid;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7fe f88b 	bl	8000b70 <__aeabi_fsub>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fce1 	bl	8000428 <__aeabi_f2d>
 8002a66:	a316      	add	r3, pc, #88	@ (adr r3, 8002ac0 <_ZN21EnvironmentConditions9isSimilarERS_+0x80>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd ffb0 	bl	80009d0 <__aeabi_dcmple>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01d      	beq.n	8002ab2 <_ZN21EnvironmentConditions9isSimilarERS_+0x72>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7fe f875 	bl	8000b70 <__aeabi_fsub>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fccb 	bl	8000428 <__aeabi_f2d>
 8002a92:	a30b      	add	r3, pc, #44	@ (adr r3, 8002ac0 <_ZN21EnvironmentConditions9isSimilarERS_+0x80>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd ff9a 	bl	80009d0 <__aeabi_dcmple>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <_ZN21EnvironmentConditions9isSimilarERS_+0x72>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7a1a      	ldrb	r2, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7a1b      	ldrb	r3, [r3, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d101      	bne.n	8002ab2 <_ZN21EnvironmentConditions9isSimilarERS_+0x72>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <_ZN21EnvironmentConditions9isSimilarERS_+0x74>
 8002ab2:	2300      	movs	r3, #0
	}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	f3af 8000 	nop.w
 8002ac0:	9999999a 	.word	0x9999999a
 8002ac4:	3fb99999 	.word	0x3fb99999

08002ac8 <appMain>:
void displayState(float tempC, float humidity);
void sendState(const char* id, float tempC, float humidity, const char* dateTime);
void initSX1278();

void appMain(I2C_HandleTypeDef *carrierLcdI2C, SPI_HandleTypeDef *carrierLoRaSPI)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SENSORS_POWER_GPIO_Port, SENSORS_POWER_Pin, GPIO_PIN_SET);
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ad8:	4842      	ldr	r0, [pc, #264]	@ (8002be4 <appMain+0x11c>)
 8002ada:	f001 fdb4 	bl	8004646 <HAL_GPIO_WritePin>

    GPIO_PinState systemWakeupButtonPressed = HAL_GPIO_ReadPin(SYSTEM_WAKEUP_GPIO_Port, SYSTEM_WAKEUP_Pin);
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4841      	ldr	r0, [pc, #260]	@ (8002be8 <appMain+0x120>)
 8002ae2:	f001 fd99 	bl	8004618 <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    lcdI2C = carrierLcdI2C;
 8002aec:	4a3f      	ldr	r2, [pc, #252]	@ (8002bec <appMain+0x124>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
    loRaSPI = carrierLoRaSPI;
 8002af2:	4a3f      	ldr	r2, [pc, #252]	@ (8002bf0 <appMain+0x128>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6013      	str	r3, [r2, #0]

    if (systemWakeupButtonPressed)
 8002af8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <appMain+0x4e>
    {
        HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, GPIO_PIN_SET);
 8002b00:	2201      	movs	r2, #1
 8002b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b06:	4837      	ldr	r0, [pc, #220]	@ (8002be4 <appMain+0x11c>)
 8002b08:	f001 fd9d 	bl	8004646 <HAL_GPIO_WritePin>
        ssd1306_Init(lcdI2C);
 8002b0c:	4b37      	ldr	r3, [pc, #220]	@ (8002bec <appMain+0x124>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fb79 	bl	8003208 <_Z12ssd1306_InitP17I2C_HandleTypeDef>
    }

    initSX1278();
 8002b16:	f000 f873 	bl	8002c00 <_Z10initSX1278v>

    DTH22 dth22(DTH_22_GPIO_Port, DTH_22_Pin);
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	2210      	movs	r2, #16
 8002b20:	4931      	ldr	r1, [pc, #196]	@ (8002be8 <appMain+0x120>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f968 	bl	8002df8 <_ZN5DTH22C1EP12GPIO_TypeDeft>

	while (1)
	{
	    EnvironmentConditions environmentConditions = dth22.read();
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	f107 0220 	add.w	r2, r7, #32
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f980 	bl	8002e38 <_ZN5DTH224readEv>
	    if (!environmentConditions.isValid)
 8002b38:	7f3b      	ldrb	r3, [r7, #28]
 8002b3a:	f083 0301 	eor.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d145      	bne.n	8002bd0 <appMain+0x108>
	    {
	        continue;
	    }

	    EnvironmentConditions environmentConditionsVarification = dth22.read();
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	f107 0220 	add.w	r2, r7, #32
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f972 	bl	8002e38 <_ZN5DTH224readEv>
        if (!environmentConditionsVarification.isValid)
 8002b54:	7c3b      	ldrb	r3, [r7, #16]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d139      	bne.n	8002bd4 <appMain+0x10c>
        {
            continue;
        }

        if (!environmentConditions.isSimilar(environmentConditionsVarification))
 8002b60:	f107 0208 	add.w	r2, r7, #8
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff68 	bl	8002a40 <_ZN21EnvironmentConditions9isSimilarERS_>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f083 0301 	eor.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d12d      	bne.n	8002bd8 <appMain+0x110>
        {
            continue;
        }

	    if (systemWakeupButtonPressed)
 8002b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <appMain+0xc8>
	    {
	        displayState(environmentConditions.tempC, environmentConditions.humidity);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f8f0 	bl	8002d70 <_Z12displayStateff>
	    }

        sendState("loft", environmentConditions.tempC, environmentConditions.humidity, "10:00 12.03");
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <appMain+0x12c>)
 8002b96:	4818      	ldr	r0, [pc, #96]	@ (8002bf8 <appMain+0x130>)
 8002b98:	f000 f876 	bl	8002c88 <_Z9sendStatePKcffS0_>

        //keep on when SYSTEM WAKEUP button is pressed
        while(HAL_GPIO_ReadPin(SYSTEM_WAKEUP_GPIO_Port, SYSTEM_WAKEUP_Pin) == GPIO_PIN_SET);
 8002b9c:	bf00      	nop
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4811      	ldr	r0, [pc, #68]	@ (8002be8 <appMain+0x120>)
 8002ba2:	f001 fd39 	bl	8004618 <HAL_GPIO_ReadPin>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f3      	bne.n	8002b9e <appMain+0xd6>

        break;
	}

	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, GPIO_PIN_RESET);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bbc:	4809      	ldr	r0, [pc, #36]	@ (8002be4 <appMain+0x11c>)
 8002bbe:	f001 fd42 	bl	8004646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENSORS_POWER_GPIO_Port, SENSORS_POWER_Pin, GPIO_PIN_RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bc8:	4806      	ldr	r0, [pc, #24]	@ (8002be4 <appMain+0x11c>)
 8002bca:	f001 fd3c 	bl	8004646 <HAL_GPIO_WritePin>
}
 8002bce:	e005      	b.n	8002bdc <appMain+0x114>
	        continue;
 8002bd0:	bf00      	nop
 8002bd2:	e7a9      	b.n	8002b28 <appMain+0x60>
            continue;
 8002bd4:	bf00      	nop
 8002bd6:	e7a7      	b.n	8002b28 <appMain+0x60>
            continue;
 8002bd8:	bf00      	nop
	}
 8002bda:	e7a5      	b.n	8002b28 <appMain+0x60>
}
 8002bdc:	3730      	adds	r7, #48	@ 0x30
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40010c00 	.word	0x40010c00
 8002be8:	40010800 	.word	0x40010800
 8002bec:	200001fc 	.word	0x200001fc
 8002bf0:	20000200 	.word	0x20000200
 8002bf4:	0800bbb0 	.word	0x0800bbb0
 8002bf8:	0800bbbc 	.word	0x0800bbbc
 8002bfc:	00000000 	.word	0x00000000

08002c00 <_Z10initSX1278v>:

void initSX1278()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af06      	add	r7, sp, #24
    SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c08:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <_Z10initSX1278v+0x7c>)
 8002c0a:	60da      	str	r2, [r3, #12]
    SX1278_hw.dio0.pin = DIO0_Pin;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c0e:	2220      	movs	r2, #32
 8002c10:	609a      	str	r2, [r3, #8]
    SX1278_hw.nss.port = NSS_GPIO_Port;
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c14:	4a19      	ldr	r2, [pc, #100]	@ (8002c7c <_Z10initSX1278v+0x7c>)
 8002c16:	615a      	str	r2, [r3, #20]
    SX1278_hw.nss.pin = NSS_Pin;
 8002c18:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
    SX1278_hw.reset.port = RESET_GPIO_Port;
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c20:	4a16      	ldr	r2, [pc, #88]	@ (8002c7c <_Z10initSX1278v+0x7c>)
 8002c22:	605a      	str	r2, [r3, #4]
    SX1278_hw.reset.pin = RESET_Pin;
 8002c24:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c26:	2240      	movs	r2, #64	@ 0x40
 8002c28:	601a      	str	r2, [r3, #0]
    SX1278_hw.spi = loRaSPI;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <_Z10initSX1278v+0x80>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c30:	6193      	str	r3, [r2, #24]

    SX1278.hw = &SX1278_hw;
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <_Z10initSX1278v+0x84>)
 8002c34:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <_Z10initSX1278v+0x78>)
 8002c36:	601a      	str	r2, [r3, #0]

    SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
 8002c38:	230a      	movs	r3, #10
 8002c3a:	9305      	str	r3, [sp, #20]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9304      	str	r3, [sp, #16]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9303      	str	r3, [sp, #12]
 8002c44:	2307      	movs	r3, #7
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	a307      	add	r3, pc, #28	@ (adr r3, 8002c70 <_Z10initSX1278v+0x70>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	480b      	ldr	r0, [pc, #44]	@ (8002c84 <_Z10initSX1278v+0x84>)
 8002c58:	f7ff fe02 	bl	8002860 <_Z11SX1278_initP8SX1278_tyhhhhhh>

    SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8002c5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002c60:	2110      	movs	r1, #16
 8002c62:	4808      	ldr	r0, [pc, #32]	@ (8002c84 <_Z10initSX1278v+0x84>)
 8002c64:	f7ff fd56 	bl	8002714 <_Z18SX1278_LoRaEntryTxP8SX1278_thm>
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	19de5080 	.word	0x19de5080
 8002c74:	00000000 	.word	0x00000000
 8002c78:	20000204 	.word	0x20000204
 8002c7c:	40010c00 	.word	0x40010c00
 8002c80:	20000200 	.word	0x20000200
 8002c84:	20000220 	.word	0x20000220

08002c88 <_Z9sendStatePKcffS0_>:

void sendState(const char* id, float tempC, float humidity, const char* dateTime)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b0c6      	sub	sp, #280	@ 0x118
 8002c8c:	af06      	add	r7, sp, #24
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8002c98:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8002c9c:	6013      	str	r3, [r2, #0]
    char payload[100];
    uint8_t payloadLength = sprintf(payload, "%s,%.1f,%.1f,%s", id, tempC, humidity, "10:00 12.03");
 8002c9e:	68b8      	ldr	r0, [r7, #8]
 8002ca0:	f7fd fbc2 	bl	8000428 <__aeabi_f2d>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd fbbd 	bl	8000428 <__aeabi_f2d>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002cb6:	492a      	ldr	r1, [pc, #168]	@ (8002d60 <_Z9sendStatePKcffS0_+0xd8>)
 8002cb8:	9104      	str	r1, [sp, #16]
 8002cba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cbe:	e9cd 4500 	strd	r4, r5, [sp]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4927      	ldr	r1, [pc, #156]	@ (8002d64 <_Z9sendStatePKcffS0_+0xdc>)
 8002cc6:	f005 fb3b 	bl	8008340 <siprintf>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc

    uint16_t checkSum = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    for (uint8_t i=0; i<payloadLength; i++) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
 8002cdc:	e011      	b.n	8002d02 <_Z9sendStatePKcffS0_+0x7a>
        checkSum += payload[i];
 8002cde:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8002ce2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    for (uint8_t i=0; i<payloadLength; i++) {
 8002cf8:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
 8002d02:	f897 20fd 	ldrb.w	r2, [r7, #253]	@ 0xfd
 8002d06:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d3e7      	bcc.n	8002cde <_Z9sendStatePKcffS0_+0x56>
    }

    char message[128];
    int messageLength = sprintf(message, "%s,%d", payload, checkSum);
 8002d0e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8002d12:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002d16:	f107 0014 	add.w	r0, r7, #20
 8002d1a:	4913      	ldr	r1, [pc, #76]	@ (8002d68 <_Z9sendStatePKcffS0_+0xe0>)
 8002d1c:	f005 fb10 	bl	8008340 <siprintf>
 8002d20:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    SX1278_standby(&SX1278);
 8002d24:	4811      	ldr	r0, [pc, #68]	@ (8002d6c <_Z9sendStatePKcffS0_+0xe4>)
 8002d26:	f7ff fcbb 	bl	80026a0 <_Z14SX1278_standbyP8SX1278_t>

    SX1278_LoRaEntryTx(&SX1278, messageLength, 2000);
 8002d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d34:	4619      	mov	r1, r3
 8002d36:	480d      	ldr	r0, [pc, #52]	@ (8002d6c <_Z9sendStatePKcffS0_+0xe4>)
 8002d38:	f7ff fcec 	bl	8002714 <_Z18SX1278_LoRaEntryTxP8SX1278_thm>
    SX1278_LoRaTxPacket(&SX1278, (uint8_t*) message, messageLength, 2000);
 8002d3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	f107 0114 	add.w	r1, r7, #20
 8002d46:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d4a:	4808      	ldr	r0, [pc, #32]	@ (8002d6c <_Z9sendStatePKcffS0_+0xe4>)
 8002d4c:	f7ff fd3f 	bl	80027ce <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm>

    SX1278_sleep(&SX1278);
 8002d50:	4806      	ldr	r0, [pc, #24]	@ (8002d6c <_Z9sendStatePKcffS0_+0xe4>)
 8002d52:	f7ff fcb5 	bl	80026c0 <_Z12SX1278_sleepP8SX1278_t>
}
 8002d56:	bf00      	nop
 8002d58:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d60:	0800bbb0 	.word	0x0800bbb0
 8002d64:	0800bbc4 	.word	0x0800bbc4
 8002d68:	0800bbd4 	.word	0x0800bbd4
 8002d6c:	20000220 	.word	0x20000220

08002d70 <_Z12displayStateff>:

void displayState(float tempC, float humidity)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	@ 0x30
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    char tempDisplay[20];
    sprintf(tempDisplay, "%.1fC", tempC);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fb54 	bl	8000428 <__aeabi_f2d>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	f107 001c 	add.w	r0, r7, #28
 8002d88:	4917      	ldr	r1, [pc, #92]	@ (8002de8 <_Z12displayStateff+0x78>)
 8002d8a:	f005 fad9 	bl	8008340 <siprintf>

    char humidityDisplay[20];
    sprintf(humidityDisplay, "%.1f%%", humidity);
 8002d8e:	6838      	ldr	r0, [r7, #0]
 8002d90:	f7fd fb4a 	bl	8000428 <__aeabi_f2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	f107 0008 	add.w	r0, r7, #8
 8002d9c:	4913      	ldr	r1, [pc, #76]	@ (8002dec <_Z12displayStateff+0x7c>)
 8002d9e:	f005 facf 	bl	8008340 <siprintf>

    ssd1306_Fill(Black);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f000 fb50 	bl	8003448 <_Z12ssd1306_Fill13SSD1306_COLOR>

    ssd1306_SetCursor(20, 0);
 8002da8:	2100      	movs	r1, #0
 8002daa:	2014      	movs	r0, #20
 8002dac:	f000 fcac 	bl	8003708 <_Z17ssd1306_SetCursorhh>
    ssd1306_WriteString(tempDisplay, Font_16x26, White);
 8002db0:	4a0f      	ldr	r2, [pc, #60]	@ (8002df0 <_Z12displayStateff+0x80>)
 8002db2:	f107 001c 	add.w	r0, r7, #28
 8002db6:	2301      	movs	r3, #1
 8002db8:	ca06      	ldmia	r2, {r1, r2}
 8002dba:	f000 fc79 	bl	80036b0 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>

    ssd1306_SetCursor(20, 35);
 8002dbe:	2123      	movs	r1, #35	@ 0x23
 8002dc0:	2014      	movs	r0, #20
 8002dc2:	f000 fca1 	bl	8003708 <_Z17ssd1306_SetCursorhh>
    ssd1306_WriteString(humidityDisplay, Font_16x26, White);
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <_Z12displayStateff+0x80>)
 8002dc8:	f107 0008 	add.w	r0, r7, #8
 8002dcc:	2301      	movs	r3, #1
 8002dce:	ca06      	ldmia	r2, {r1, r2}
 8002dd0:	f000 fc6e 	bl	80036b0 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>

    ssd1306_UpdateScreen(lcdI2C);
 8002dd4:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <_Z12displayStateff+0x84>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fb57 	bl	800348c <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>
}
 8002dde:	bf00      	nop
 8002de0:	3730      	adds	r7, #48	@ 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	0800bbdc 	.word	0x0800bbdc
 8002dec:	0800bbe4 	.word	0x0800bbe4
 8002df0:	20000000 	.word	0x20000000
 8002df4:	200001fc 	.word	0x200001fc

08002df8 <_ZN5DTH22C1EP12GPIO_TypeDeft>:
#include "dth22.class.h"

DTH22::DTH22(GPIO_TypeDef *gpio, uint16_t gpioPin)
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	22d8      	movs	r2, #216	@ 0xd8
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2250      	movs	r2, #80	@ 0x50
 8002e10:	705a      	strb	r2, [r3, #1]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	709a      	strb	r2, [r3, #2]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2264      	movs	r2, #100	@ 0x64
 8002e1c:	70da      	strb	r2, [r3, #3]
{
	this->gpio = gpio;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	605a      	str	r2, [r3, #4]
	this->gpioPin = gpioPin;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	811a      	strh	r2, [r3, #8]
}
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
	...

08002e38 <_ZN5DTH224readEv>:

EnvironmentConditions DTH22::read()
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
	if(!dht22Start())
 8002e42:	6838      	ldr	r0, [r7, #0]
 8002e44:	f000 f8ac 	bl	8002fa0 <_ZN5DTH2210dht22StartEv>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <_ZN5DTH224readEv+0x34>
	{
	    return EnvironmentConditions {0, 0, false};
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	721a      	strb	r2, [r3, #8]
 8002e6a:	e093      	b.n	8002f94 <_ZN5DTH224readEv+0x15c>
	}

	uint8_t hum1 = dht22ReadByte();
 8002e6c:	6838      	ldr	r0, [r7, #0]
 8002e6e:	f000 f92f 	bl	80030d0 <_ZN5DTH2213dht22ReadByteEv>
 8002e72:	4603      	mov	r3, r0
 8002e74:	77fb      	strb	r3, [r7, #31]
	uint8_t hum2 = dht22ReadByte();
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	f000 f92a 	bl	80030d0 <_ZN5DTH2213dht22ReadByteEv>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	77bb      	strb	r3, [r7, #30]
	uint8_t tempC1 = dht22ReadByte();
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	f000 f925 	bl	80030d0 <_ZN5DTH2213dht22ReadByteEv>
 8002e86:	4603      	mov	r3, r0
 8002e88:	777b      	strb	r3, [r7, #29]
	uint8_t tempC2 = dht22ReadByte();
 8002e8a:	6838      	ldr	r0, [r7, #0]
 8002e8c:	f000 f920 	bl	80030d0 <_ZN5DTH2213dht22ReadByteEv>
 8002e90:	4603      	mov	r3, r0
 8002e92:	773b      	strb	r3, [r7, #28]
	uint8_t checkSumReceived = dht22ReadByte();
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f000 f91b 	bl	80030d0 <_ZN5DTH2213dht22ReadByteEv>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	76fb      	strb	r3, [r7, #27]
	uint8_t checkSumCalculated = hum1 + hum2 + tempC1 + tempC2;
 8002e9e:	7ffa      	ldrb	r2, [r7, #31]
 8002ea0:	7fbb      	ldrb	r3, [r7, #30]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	7f7b      	ldrb	r3, [r7, #29]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	7f3b      	ldrb	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	76bb      	strb	r3, [r7, #26]

	if (checkSumCalculated != checkSumReceived)
 8002eb2:	7eba      	ldrb	r2, [r7, #26]
 8002eb4:	7efb      	ldrb	r3, [r7, #27]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d00b      	beq.n	8002ed2 <_ZN5DTH224readEv+0x9a>
	{
	    return EnvironmentConditions {0, 0, false};
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	721a      	strb	r2, [r3, #8]
 8002ed0:	e060      	b.n	8002f94 <_ZN5DTH224readEv+0x15c>
	}

	float tempC = (float) ((tempC1<<8)|tempC2)/10;
 8002ed2:	7f7b      	ldrb	r3, [r7, #29]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	7f3b      	ldrb	r3, [r7, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fefe 	bl	8000cdc <__aeabi_i2f>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	492e      	ldr	r1, [pc, #184]	@ (8002f9c <_ZN5DTH224readEv+0x164>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe f801 	bl	8000eec <__aeabi_fdiv>
 8002eea:	4603      	mov	r3, r0
 8002eec:	617b      	str	r3, [r7, #20]
	float humidity =(float) ((hum1<<8)|hum2)/10;
 8002eee:	7ffb      	ldrb	r3, [r7, #31]
 8002ef0:	021a      	lsls	r2, r3, #8
 8002ef2:	7fbb      	ldrb	r3, [r7, #30]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fef0 	bl	8000cdc <__aeabi_i2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4927      	ldr	r1, [pc, #156]	@ (8002f9c <_ZN5DTH224readEv+0x164>)
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fff3 	bl	8000eec <__aeabi_fdiv>
 8002f06:	4603      	mov	r3, r0
 8002f08:	613b      	str	r3, [r7, #16]
	bool isValid = tempC >= MIN_TEMP_C && tempC <= MAX_TEMP_C && humidity >= MIN_HUMIDITY_PERCENT && humidity <= MAX_HUMIDITY_PERCENT;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fee3 	bl	8000cdc <__aeabi_i2f>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7fe f8e4 	bl	80010e8 <__aeabi_fcmpge>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02b      	beq.n	8002f7e <_ZN5DTH224readEv+0x146>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fed5 	bl	8000cdc <__aeabi_i2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4619      	mov	r1, r3
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7fe f8cc 	bl	80010d4 <__aeabi_fcmple>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01d      	beq.n	8002f7e <_ZN5DTH224readEv+0x146>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fec7 	bl	8000cdc <__aeabi_i2f>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4619      	mov	r1, r3
 8002f52:	6938      	ldr	r0, [r7, #16]
 8002f54:	f7fe f8c8 	bl	80010e8 <__aeabi_fcmpge>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00f      	beq.n	8002f7e <_ZN5DTH224readEv+0x146>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd feb9 	bl	8000cdc <__aeabi_i2f>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6938      	ldr	r0, [r7, #16]
 8002f70:	f7fe f8b0 	bl	80010d4 <__aeabi_fcmple>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <_ZN5DTH224readEv+0x146>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <_ZN5DTH224readEv+0x148>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]

	return EnvironmentConditions {tempC, humidity, isValid};
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	721a      	strb	r2, [r3, #8]
}
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	41200000 	.word	0x41200000

08002fa0 <_ZN5DTH2210dht22StartEv>:

bool DTH22::dht22Start()
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	uint8_t response = false;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	//make GPIO output
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8002fae:	f107 030c 	add.w	r3, r7, #12
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = gpioPin;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	891b      	ldrh	r3, [r3, #8]
 8002fc0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(gpio, &GPIO_InitStructPrivate);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f107 020c 	add.w	r2, r7, #12
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 f999 	bl	8004310 <HAL_GPIO_Init>

	HAL_GPIO_WritePin (gpio, gpioPin, GPIO_PIN_RESET);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6858      	ldr	r0, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	891b      	ldrh	r3, [r3, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f001 fb2c 	bl	8004646 <HAL_GPIO_WritePin>
	microDelay (1300);
 8002fee:	f240 5014 	movw	r0, #1300	@ 0x514
 8002ff2:	f000 fded 	bl	8003bd0 <microDelay>

	HAL_GPIO_WritePin (gpio, gpioPin, GPIO_PIN_SET);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6858      	ldr	r0, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	891b      	ldrh	r3, [r3, #8]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4619      	mov	r1, r3
 8003002:	f001 fb20 	bl	8004646 <HAL_GPIO_WritePin>
	microDelay (30);
 8003006:	201e      	movs	r0, #30
 8003008:	f000 fde2 	bl	8003bd0 <microDelay>

	//make GPIO input
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8003010:	2301      	movs	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(gpio, &GPIO_InitStructPrivate);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f107 020c 	add.w	r2, r7, #12
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f976 	bl	8004310 <HAL_GPIO_Init>
	microDelay (40);
 8003024:	2028      	movs	r0, #40	@ 0x28
 8003026:	f000 fdd3 	bl	8003bd0 <microDelay>

	if (!(HAL_GPIO_ReadPin (gpio, gpioPin)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	891b      	ldrh	r3, [r3, #8]
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f001 faef 	bl	8004618 <HAL_GPIO_ReadPin>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <_ZN5DTH2210dht22StartEv+0xd6>
	{
		microDelay (80);
 800304a:	2050      	movs	r0, #80	@ 0x50
 800304c:	f000 fdc0 	bl	8003bd0 <microDelay>
		if ((HAL_GPIO_ReadPin (gpio, gpioPin)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	891b      	ldrh	r3, [r3, #8]
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f001 fadc 	bl	8004618 <HAL_GPIO_ReadPin>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <_ZN5DTH2210dht22StartEv+0xd6>
		{
			 response = true;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	uint32_t pMillis = HAL_GetTick();
 8003076:	f001 f839 	bl	80040ec <HAL_GetTick>
 800307a:	4603      	mov	r3, r0
 800307c:	61fb      	str	r3, [r7, #28]
	uint32_t cMillis = HAL_GetTick();
 800307e:	f001 f835 	bl	80040ec <HAL_GetTick>
 8003082:	4603      	mov	r3, r0
 8003084:	623b      	str	r3, [r7, #32]

	//wait until pin is low
	while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 8003086:	e003      	b.n	8003090 <_ZN5DTH2210dht22StartEv+0xf0>
	{
		cMillis = HAL_GetTick();
 8003088:	f001 f830 	bl	80040ec <HAL_GetTick>
 800308c:	4603      	mov	r3, r0
 800308e:	623b      	str	r3, [r7, #32]
	while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	891b      	ldrh	r3, [r3, #8]
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f001 fabc 	bl	8004618 <HAL_GPIO_ReadPin>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <_ZN5DTH2210dht22StartEv+0x114>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3302      	adds	r3, #2
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d201      	bcs.n	80030b4 <_ZN5DTH2210dht22StartEv+0x114>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <_ZN5DTH2210dht22StartEv+0x116>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e6      	bne.n	8003088 <_ZN5DTH2210dht22StartEv+0xe8>
	}

	return response;
 80030ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3728      	adds	r7, #40	@ 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZN5DTH2213dht22ReadByteEv>:


uint8_t DTH22::dht22ReadByte()
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	uint8_t byte;

	for (uint8_t bitNumber=0;bitNumber<8;bitNumber++)
 80030d8:	2300      	movs	r3, #0
 80030da:	75bb      	strb	r3, [r7, #22]
 80030dc:	e074      	b.n	80031c8 <_ZN5DTH2213dht22ReadByteEv+0xf8>
	{
		uint32_t pMillis = HAL_GetTick();
 80030de:	f001 f805 	bl	80040ec <HAL_GetTick>
 80030e2:	4603      	mov	r3, r0
 80030e4:	60fb      	str	r3, [r7, #12]
		uint32_t cMillis = HAL_GetTick();
 80030e6:	f001 f801 	bl	80040ec <HAL_GetTick>
 80030ea:	4603      	mov	r3, r0
 80030ec:	613b      	str	r3, [r7, #16]
		while (!(HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 80030ee:	e003      	b.n	80030f8 <_ZN5DTH2213dht22ReadByteEv+0x28>
		{
			cMillis = HAL_GetTick();
 80030f0:	f000 fffc 	bl	80040ec <HAL_GetTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	613b      	str	r3, [r7, #16]
		while (!(HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	891b      	ldrh	r3, [r3, #8]
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f001 fa88 	bl	8004618 <HAL_GPIO_ReadPin>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <_ZN5DTH2213dht22ReadByteEv+0x4c>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3302      	adds	r3, #2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d201      	bcs.n	800311c <_ZN5DTH2213dht22ReadByteEv+0x4c>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <_ZN5DTH2213dht22ReadByteEv+0x4e>
 800311c:	2300      	movs	r3, #0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e6      	bne.n	80030f0 <_ZN5DTH2213dht22ReadByteEv+0x20>
		}

		microDelay (40);
 8003122:	2028      	movs	r0, #40	@ 0x28
 8003124:	f000 fd54 	bl	8003bd0 <microDelay>

		if (HAL_GPIO_ReadPin(gpio, gpioPin))   // if the pin is low
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	891b      	ldrh	r3, [r3, #8]
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f001 fa70 	bl	8004618 <HAL_GPIO_ReadPin>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <_ZN5DTH2213dht22ReadByteEv+0x92>
		{
			byte|= (1<<(7-bitNumber));
 8003148:	7dbb      	ldrb	r3, [r7, #22]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2201      	movs	r2, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	b25a      	sxtb	r2, r3
 8003156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800315a:	4313      	orrs	r3, r2
 800315c:	b25b      	sxtb	r3, r3
 800315e:	75fb      	strb	r3, [r7, #23]
 8003160:	e00d      	b.n	800317e <_ZN5DTH2213dht22ReadByteEv+0xae>
		}
		else
		{
			byte&= ~(1<<(7-bitNumber));
 8003162:	7dbb      	ldrb	r3, [r7, #22]
 8003164:	f1c3 0307 	rsb	r3, r3, #7
 8003168:	2201      	movs	r2, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	b25b      	sxtb	r3, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	b25a      	sxtb	r2, r3
 8003174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003178:	4013      	ands	r3, r2
 800317a:	b25b      	sxtb	r3, r3
 800317c:	75fb      	strb	r3, [r7, #23]
		}

		pMillis = HAL_GetTick();
 800317e:	f000 ffb5 	bl	80040ec <HAL_GetTick>
 8003182:	4603      	mov	r3, r0
 8003184:	60fb      	str	r3, [r7, #12]
		cMillis = HAL_GetTick();
 8003186:	f000 ffb1 	bl	80040ec <HAL_GetTick>
 800318a:	4603      	mov	r3, r0
 800318c:	613b      	str	r3, [r7, #16]
		// wait for the pin to go low
		while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 800318e:	e003      	b.n	8003198 <_ZN5DTH2213dht22ReadByteEv+0xc8>
		{
			cMillis = HAL_GetTick();
 8003190:	f000 ffac 	bl	80040ec <HAL_GetTick>
 8003194:	4603      	mov	r3, r0
 8003196:	613b      	str	r3, [r7, #16]
		while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	891b      	ldrh	r3, [r3, #8]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f001 fa38 	bl	8004618 <HAL_GPIO_ReadPin>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d006      	beq.n	80031bc <_ZN5DTH2213dht22ReadByteEv+0xec>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3302      	adds	r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d201      	bcs.n	80031bc <_ZN5DTH2213dht22ReadByteEv+0xec>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <_ZN5DTH2213dht22ReadByteEv+0xee>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e6      	bne.n	8003190 <_ZN5DTH2213dht22ReadByteEv+0xc0>
	for (uint8_t bitNumber=0;bitNumber<8;bitNumber++)
 80031c2:	7dbb      	ldrb	r3, [r7, #22]
 80031c4:	3301      	adds	r3, #1
 80031c6:	75bb      	strb	r3, [r7, #22]
 80031c8:	7dbb      	ldrb	r3, [r7, #22]
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	d987      	bls.n	80030de <_ZN5DTH2213dht22ReadByteEv+0xe>
		}
	}

	return byte;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af04      	add	r7, sp, #16
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80031e4:	230a      	movs	r3, #10
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	2301      	movs	r3, #1
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	1cfb      	adds	r3, r7, #3
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2301      	movs	r3, #1
 80031f2:	2200      	movs	r2, #0
 80031f4:	2178      	movs	r1, #120	@ 0x78
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f001 fb82 	bl	8004900 <HAL_I2C_Mem_Write>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <_Z12ssd1306_InitP17I2C_HandleTypeDef>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8003210:	2064      	movs	r0, #100	@ 0x64
 8003212:	f000 ff75 	bl	8004100 <HAL_Delay>
    int status = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800321a:	21ae      	movs	r1, #174	@ 0xae
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ffdb 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800322c:	2120      	movs	r1, #32
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff ffd2 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800323e:	2110      	movs	r1, #16
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ffc9 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8003250:	21b0      	movs	r1, #176	@ 0xb0
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffc0 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8003262:	21c8      	movs	r1, #200	@ 0xc8
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ffb7 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8003274:	2100      	movs	r1, #0
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ffae 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8003286:	2110      	movs	r1, #16
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ffa5 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8003298:	2140      	movs	r1, #64	@ 0x40
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff9c 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80032aa:	2181      	movs	r1, #129	@ 0x81
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff93 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80032bc:	21ff      	movs	r1, #255	@ 0xff
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ff8a 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80032ce:	21a1      	movs	r1, #161	@ 0xa1
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff81 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4413      	add	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80032e0:	21a6      	movs	r1, #166	@ 0xa6
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff78 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80032f2:	21a8      	movs	r1, #168	@ 0xa8
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff6f 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8003304:	213f      	movs	r1, #63	@ 0x3f
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff66 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003316:	21a4      	movs	r1, #164	@ 0xa4
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff5d 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8003328:	21d3      	movs	r1, #211	@ 0xd3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff54 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800333a:	2100      	movs	r1, #0
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff4b 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800334c:	21d5      	movs	r1, #213	@ 0xd5
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff42 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800335e:	21f0      	movs	r1, #240	@ 0xf0
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff39 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8003370:	21d9      	movs	r1, #217	@ 0xd9
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ff30 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8003382:	2122      	movs	r1, #34	@ 0x22
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff27 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8003394:	21da      	movs	r1, #218	@ 0xda
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ff1e 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 80033a6:	2112      	movs	r1, #18
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff15 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80033b8:	21db      	movs	r1, #219	@ 0xdb
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff0c 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80033ca:	2120      	movs	r1, #32
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff03 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80033dc:	218d      	movs	r1, #141	@ 0x8d
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fefa 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80033ee:	2114      	movs	r1, #20
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fef1 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003400:	21af      	movs	r1, #175	@ 0xaf
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fee8 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x214>
        return 1;
 8003418:	2301      	movs	r3, #1
 800341a:	e00f      	b.n	800343c <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800341c:	2000      	movs	r0, #0
 800341e:	f000 f813 	bl	8003448 <_Z12ssd1306_Fill13SSD1306_COLOR>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f832 	bl	800348c <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003428:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 800342a:	2200      	movs	r2, #0
 800342c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800342e:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 8003430:	2200      	movs	r2, #0
 8003432:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003434:	4b03      	ldr	r3, [pc, #12]	@ (8003444 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 8003436:	2201      	movs	r2, #1
 8003438:	715a      	strb	r2, [r3, #5]

    return 0;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000738 	.word	0x20000738

08003448 <_Z12ssd1306_Fill13SSD1306_COLOR>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e00d      	b.n	8003474 <_Z12ssd1306_Fill13SSD1306_COLOR+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <_Z12ssd1306_Fill13SSD1306_COLOR+0x1a>
 800345e:	2100      	movs	r1, #0
 8003460:	e000      	b.n	8003464 <_Z12ssd1306_Fill13SSD1306_COLOR+0x1c>
 8003462:	21ff      	movs	r1, #255	@ 0xff
 8003464:	4a08      	ldr	r2, [pc, #32]	@ (8003488 <_Z12ssd1306_Fill13SSD1306_COLOR+0x40>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4413      	add	r3, r2
 800346a:	460a      	mov	r2, r1
 800346c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3301      	adds	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347a:	d3ed      	bcc.n	8003458 <_Z12ssd1306_Fill13SSD1306_COLOR+0x10>
    }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	20000338 	.word	0x20000338

0800348c <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af04      	add	r7, sp, #16
 8003492:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	e020      	b.n	80034dc <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3b50      	subs	r3, #80	@ 0x50
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fe98 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
        ssd1306_WriteCommand(hi2c, 0x00);
 80034a8:	2100      	movs	r1, #0
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fe94 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
        ssd1306_WriteCommand(hi2c, 0x10);
 80034b0:	2110      	movs	r1, #16
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fe90 	bl	80031d8 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	01db      	lsls	r3, r3, #7
 80034bc:	4a0b      	ldr	r2, [pc, #44]	@ (80034ec <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0x60>)
 80034be:	4413      	add	r3, r2
 80034c0:	2264      	movs	r2, #100	@ 0x64
 80034c2:	9202      	str	r2, [sp, #8]
 80034c4:	2280      	movs	r2, #128	@ 0x80
 80034c6:	9201      	str	r2, [sp, #4]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2301      	movs	r3, #1
 80034cc:	2240      	movs	r2, #64	@ 0x40
 80034ce:	2178      	movs	r1, #120	@ 0x78
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 fa15 	bl	8004900 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	3301      	adds	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b07      	cmp	r3, #7
 80034e0:	d9db      	bls.n	800349a <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0xe>
    }
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000338 	.word	0x20000338

080034f0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
 80034fa:	460b      	mov	r3, r1
 80034fc:	71bb      	strb	r3, [r7, #6]
 80034fe:	4613      	mov	r3, r2
 8003500:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db48      	blt.n	800359c <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xac>
 800350a:	79bb      	ldrb	r3, [r7, #6]
 800350c:	2b3f      	cmp	r3, #63	@ 0x3f
 800350e:	d845      	bhi.n	800359c <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003510:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xb8>)
 8003512:	791b      	ldrb	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8003518:	797b      	ldrb	r3, [r7, #5]
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8003526:	797b      	ldrb	r3, [r7, #5]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d11a      	bne.n	8003562 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800352c:	79fa      	ldrb	r2, [r7, #7]
 800352e:	79bb      	ldrb	r3, [r7, #6]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	b2d8      	uxtb	r0, r3
 8003534:	4603      	mov	r3, r0
 8003536:	01db      	lsls	r3, r3, #7
 8003538:	4413      	add	r3, r2
 800353a:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	b25a      	sxtb	r2, r3
 8003540:	79bb      	ldrb	r3, [r7, #6]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	b25b      	sxtb	r3, r3
 800354e:	4313      	orrs	r3, r2
 8003550:	b259      	sxtb	r1, r3
 8003552:	79fa      	ldrb	r2, [r7, #7]
 8003554:	4603      	mov	r3, r0
 8003556:	01db      	lsls	r3, r3, #7
 8003558:	4413      	add	r3, r2
 800355a:	b2c9      	uxtb	r1, r1
 800355c:	4a13      	ldr	r2, [pc, #76]	@ (80035ac <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 800355e:	54d1      	strb	r1, [r2, r3]
 8003560:	e01d      	b.n	800359e <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003562:	79fa      	ldrb	r2, [r7, #7]
 8003564:	79bb      	ldrb	r3, [r7, #6]
 8003566:	08db      	lsrs	r3, r3, #3
 8003568:	b2d8      	uxtb	r0, r3
 800356a:	4603      	mov	r3, r0
 800356c:	01db      	lsls	r3, r3, #7
 800356e:	4413      	add	r3, r2
 8003570:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 8003572:	5cd3      	ldrb	r3, [r2, r3]
 8003574:	b25a      	sxtb	r2, r3
 8003576:	79bb      	ldrb	r3, [r7, #6]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	b25b      	sxtb	r3, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	b25b      	sxtb	r3, r3
 8003588:	4013      	ands	r3, r2
 800358a:	b259      	sxtb	r1, r3
 800358c:	79fa      	ldrb	r2, [r7, #7]
 800358e:	4603      	mov	r3, r0
 8003590:	01db      	lsls	r3, r3, #7
 8003592:	4413      	add	r3, r2
 8003594:	b2c9      	uxtb	r1, r1
 8003596:	4a05      	ldr	r2, [pc, #20]	@ (80035ac <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 8003598:	54d1      	strb	r1, [r2, r3]
 800359a:	e000      	b.n	800359e <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xae>
        return;
 800359c:	bf00      	nop
    }
}
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000738 	.word	0x20000738
 80035ac:	20000338 	.word	0x20000338

080035b0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b089      	sub	sp, #36	@ 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4604      	mov	r4, r0
 80035b8:	1d38      	adds	r0, r7, #4
 80035ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80035be:	461a      	mov	r2, r3
 80035c0:	4623      	mov	r3, r4
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	4613      	mov	r3, r2
 80035c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80035c8:	4b38      	ldr	r3, [pc, #224]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	793b      	ldrb	r3, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80035d4:	dc06      	bgt.n	80035e4 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80035d6:	4b35      	ldr	r3, [pc, #212]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80035d8:	885b      	ldrh	r3, [r3, #2]
 80035da:	461a      	mov	r2, r3
 80035dc:	797b      	ldrb	r3, [r7, #5]
 80035de:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80035e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80035e2:	dd01      	ble.n	80035e8 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x38>
    {
        // Not enough space on current line
        return 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e05c      	b.n	80036a2 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e04c      	b.n	8003688 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	3b20      	subs	r3, #32
 80035f4:	7979      	ldrb	r1, [r7, #5]
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4619      	mov	r1, r3
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	440b      	add	r3, r1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	e034      	b.n	8003678 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xc8>
        {
            if ((b << j) & 0x8000)
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800361e:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	4413      	add	r3, r2
 800362a:	b2d8      	uxtb	r0, r3
 800362c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 800362e:	885b      	ldrh	r3, [r3, #2]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4413      	add	r3, r2
 8003638:	b2db      	uxtb	r3, r3
 800363a:	7bba      	ldrb	r2, [r7, #14]
 800363c:	4619      	mov	r1, r3
 800363e:	f7ff ff57 	bl	80034f0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
 8003642:	e016      	b.n	8003672 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003644:	4b19      	ldr	r3, [pc, #100]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	4413      	add	r3, r2
 8003650:	b2d8      	uxtb	r0, r3
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8003654:	885b      	ldrh	r3, [r3, #2]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	4413      	add	r3, r2
 800365e:	b2d9      	uxtb	r1, r3
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	f7ff ff3f 	bl	80034f0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
        for (j = 0; j < Font.FontWidth; j++)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3301      	adds	r3, #1
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	793b      	ldrb	r3, [r7, #4]
 800367a:	461a      	mov	r2, r3
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4293      	cmp	r3, r2
 8003680:	d3c5      	bcc.n	800360e <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	797b      	ldrb	r3, [r7, #5]
 800368a:	461a      	mov	r2, r3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4293      	cmp	r3, r2
 8003690:	d3ad      	bcc.n	80035ee <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	793a      	ldrb	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	b29a      	uxth	r2, r3
 800369c:	4b03      	ldr	r3, [pc, #12]	@ (80036ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 800369e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	@ 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000738 	.word	0x20000738

080036b0 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	1d38      	adds	r0, r7, #4
 80036ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80036be:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80036c0:	e017      	b.n	80036f2 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x42>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	7818      	ldrb	r0, [r3, #0]
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	1d3a      	adds	r2, r7, #4
 80036ca:	ca06      	ldmia	r2, {r1, r2}
 80036cc:	f7ff ff70 	bl	80035b0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x3c>
        {
            // Char could not be written
            return *str;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	e008      	b.n	80036fe <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x4e>
        }

        // Next char
        str++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
    while (*str)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e3      	bne.n	80036c2 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x12>
    }

    // Everything ok
    return *str;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	781b      	ldrb	r3, [r3, #0]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <_Z17ssd1306_SetCursorhh>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	460a      	mov	r2, r1
 8003712:	71fb      	strb	r3, [r7, #7]
 8003714:	4613      	mov	r3, r2
 8003716:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	b29a      	uxth	r2, r3
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <_Z17ssd1306_SetCursorhh+0x2c>)
 800371e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003720:	79bb      	ldrb	r3, [r7, #6]
 8003722:	b29a      	uxth	r2, r3
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <_Z17ssd1306_SetCursorhh+0x2c>)
 8003726:	805a      	strh	r2, [r3, #2]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000738 	.word	0x20000738

08003738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800373c:	f000 fc7e 	bl	800403c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003740:	f000 f828 	bl	8003794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003744:	f000 f998 	bl	8003a78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003748:	f000 f910 	bl	800396c <MX_SPI1_Init>
  MX_I2C2_Init();
 800374c:	f000 f87c 	bl	8003848 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003750:	f000 f942 	bl	80039d8 <MX_TIM1_Init>
  MX_RTC_Init();
 8003754:	f000 f8a6 	bl	80038a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003758:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <main+0x4c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a09      	ldr	r2, [pc, #36]	@ (8003784 <main+0x4c>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start(&htim1);
 8003764:	4808      	ldr	r0, [pc, #32]	@ (8003788 <main+0x50>)
 8003766:	f003 fc55 	bl	8007014 <HAL_TIM_Base_Start>
  appMain(&hi2c2, &hspi1);
 800376a:	4908      	ldr	r1, [pc, #32]	@ (800378c <main+0x54>)
 800376c:	4808      	ldr	r0, [pc, #32]	@ (8003790 <main+0x58>)
 800376e:	f7ff f9ab 	bl	8002ac8 <appMain>

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003772:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003776:	f001 fc37 	bl	8004fe8 <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_EnterSTANDBYMode();
 800377a:	f001 fc51 	bl	8005020 <HAL_PWR_EnterSTANDBYMode>
  //wake up with RTC alert
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800377e:	bf00      	nop
 8003780:	e7fd      	b.n	800377e <main+0x46>
 8003782:	bf00      	nop
 8003784:	40007000 	.word	0x40007000
 8003788:	20000800 	.word	0x20000800
 800378c:	200007a8 	.word	0x200007a8
 8003790:	20000740 	.word	0x20000740

08003794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b094      	sub	sp, #80	@ 0x50
 8003798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800379a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800379e:	2228      	movs	r2, #40	@ 0x28
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 fe2f 	bl	8008406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80037c4:	230a      	movs	r3, #10
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037c8:	2301      	movs	r3, #1
 80037ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037cc:	2310      	movs	r3, #16
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037d0:	2301      	movs	r3, #1
 80037d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037d4:	2302      	movs	r3, #2
 80037d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80037d8:	2300      	movs	r3, #0
 80037da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80037dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80037e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fc32 	bl	8005050 <HAL_RCC_OscConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80037f2:	f000 fa05 	bl	8003c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f6:	230f      	movs	r3, #15
 80037f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037fa:	2302      	movs	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003806:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fe9e 	bl	8005554 <HAL_RCC_ClockConfig>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800381e:	f000 f9ef 	bl	8003c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003822:	2301      	movs	r3, #1
 8003824:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003826:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800382a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	4618      	mov	r0, r3
 8003830:	f002 f81e 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800383a:	f000 f9e1 	bl	8003c00 <Error_Handler>
  }
}
 800383e:	bf00      	nop
 8003840:	3750      	adds	r7, #80	@ 0x50
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800384c:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <MX_I2C2_Init+0x50>)
 800384e:	4a13      	ldr	r2, [pc, #76]	@ (800389c <MX_I2C2_Init+0x54>)
 8003850:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003852:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <MX_I2C2_Init+0x50>)
 8003854:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <MX_I2C2_Init+0x58>)
 8003856:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <MX_I2C2_Init+0x50>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800385e:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <MX_I2C2_Init+0x50>)
 8003860:	2200      	movs	r2, #0
 8003862:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <MX_I2C2_Init+0x50>)
 8003866:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800386a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <MX_I2C2_Init+0x50>)
 800386e:	2200      	movs	r2, #0
 8003870:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <MX_I2C2_Init+0x50>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003878:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <MX_I2C2_Init+0x50>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <MX_I2C2_Init+0x50>)
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003884:	4804      	ldr	r0, [pc, #16]	@ (8003898 <MX_I2C2_Init+0x50>)
 8003886:	f000 fef7 	bl	8004678 <HAL_I2C_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003890:	f000 f9b6 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000740 	.word	0x20000740
 800389c:	40005800 	.word	0x40005800
 80038a0:	000186a0 	.word	0x000186a0

080038a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	2100      	movs	r1, #0
 80038b0:	460a      	mov	r2, r1
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	460a      	mov	r2, r1
 80038b6:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80038b8:	2300      	movs	r3, #0
 80038ba:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80038bc:	463b      	mov	r3, r7
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80038c4:	4b27      	ldr	r3, [pc, #156]	@ (8003964 <MX_RTC_Init+0xc0>)
 80038c6:	4a28      	ldr	r2, [pc, #160]	@ (8003968 <MX_RTC_Init+0xc4>)
 80038c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80038ca:	4b26      	ldr	r3, [pc, #152]	@ (8003964 <MX_RTC_Init+0xc0>)
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80038d2:	4b24      	ldr	r3, [pc, #144]	@ (8003964 <MX_RTC_Init+0xc0>)
 80038d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038d8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80038da:	4822      	ldr	r0, [pc, #136]	@ (8003964 <MX_RTC_Init+0xc0>)
 80038dc:	f002 f934 	bl	8005b48 <HAL_RTC_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80038e6:	f000 f98b 	bl	8003c00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	2201      	movs	r2, #1
 80038fc:	4619      	mov	r1, r3
 80038fe:	4819      	ldr	r0, [pc, #100]	@ (8003964 <MX_RTC_Init+0xc0>)
 8003900:	f002 f9ae 	bl	8005c60 <HAL_RTC_SetTime>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800390a:	f000 f979 	bl	8003c00 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800390e:	2301      	movs	r3, #1
 8003910:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003912:	2301      	movs	r3, #1
 8003914:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8003916:	2301      	movs	r3, #1
 8003918:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800391a:	2300      	movs	r3, #0
 800391c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	2201      	movs	r2, #1
 8003924:	4619      	mov	r1, r3
 8003926:	480f      	ldr	r0, [pc, #60]	@ (8003964 <MX_RTC_Init+0xc0>)
 8003928:	f002 fb0a 	bl	8005f40 <HAL_RTC_SetDate>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003932:	f000 f965 	bl	8003c00 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003936:	2300      	movs	r3, #0
 8003938:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800393a:	2301      	movs	r3, #1
 800393c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800393e:	2300      	movs	r3, #0
 8003940:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003946:	463b      	mov	r3, r7
 8003948:	2201      	movs	r2, #1
 800394a:	4619      	mov	r1, r3
 800394c:	4805      	ldr	r0, [pc, #20]	@ (8003964 <MX_RTC_Init+0xc0>)
 800394e:	f002 fbad 	bl	80060ac <HAL_RTC_SetAlarm>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8003958:	f000 f952 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000794 	.word	0x20000794
 8003968:	40002800 	.word	0x40002800

0800396c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003970:	4b17      	ldr	r3, [pc, #92]	@ (80039d0 <MX_SPI1_Init+0x64>)
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <MX_SPI1_Init+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003976:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <MX_SPI1_Init+0x64>)
 8003978:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800397c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800397e:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <MX_SPI1_Init+0x64>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003984:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <MX_SPI1_Init+0x64>)
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800398a:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <MX_SPI1_Init+0x64>)
 800398c:	2200      	movs	r2, #0
 800398e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003990:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <MX_SPI1_Init+0x64>)
 8003992:	2200      	movs	r2, #0
 8003994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003996:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <MX_SPI1_Init+0x64>)
 8003998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800399c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800399e:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <MX_SPI1_Init+0x64>)
 80039a0:	2220      	movs	r2, #32
 80039a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <MX_SPI1_Init+0x64>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039aa:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <MX_SPI1_Init+0x64>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b0:	4b07      	ldr	r3, [pc, #28]	@ (80039d0 <MX_SPI1_Init+0x64>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039b6:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <MX_SPI1_Init+0x64>)
 80039b8:	220a      	movs	r2, #10
 80039ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039bc:	4804      	ldr	r0, [pc, #16]	@ (80039d0 <MX_SPI1_Init+0x64>)
 80039be:	f002 feaf 	bl	8006720 <HAL_SPI_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039c8:	f000 f91a 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	200007a8 	.word	0x200007a8
 80039d4:	40013000 	.word	0x40013000

080039d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ec:	463b      	mov	r3, r7
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <MX_TIM1_Init+0x98>)
 80039f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <MX_TIM1_Init+0x9c>)
 80039f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80039fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003a70 <MX_TIM1_Init+0x98>)
 80039fc:	220f      	movs	r2, #15
 80039fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a06:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a14:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a20:	4813      	ldr	r0, [pc, #76]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a22:	f003 faa7 	bl	8006f74 <HAL_TIM_Base_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003a2c:	f000 f8e8 	bl	8003c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	480c      	ldr	r0, [pc, #48]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a3e:	f003 fb33 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003a48:	f000 f8da 	bl	8003c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a50:	2300      	movs	r3, #0
 8003a52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a54:	463b      	mov	r3, r7
 8003a56:	4619      	mov	r1, r3
 8003a58:	4805      	ldr	r0, [pc, #20]	@ (8003a70 <MX_TIM1_Init+0x98>)
 8003a5a:	f003 fce5 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003a64:	f000 f8cc 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000800 	.word	0x20000800
 8003a74:	40012c00 	.word	0x40012c00

08003a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7e:	f107 0310 	add.w	r3, r7, #16
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003a92:	f043 0310 	orr.w	r3, r3, #16
 8003a96:	6193      	str	r3, [r2, #24]
 8003a98:	4b49      	ldr	r3, [pc, #292]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa4:	4b46      	ldr	r3, [pc, #280]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	4a45      	ldr	r2, [pc, #276]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003aaa:	f043 0320 	orr.w	r3, r3, #32
 8003aae:	6193      	str	r3, [r2, #24]
 8003ab0:	4b43      	ldr	r3, [pc, #268]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b40      	ldr	r3, [pc, #256]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6193      	str	r3, [r2, #24]
 8003ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	4a39      	ldr	r2, [pc, #228]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003ada:	f043 0308 	orr.w	r3, r3, #8
 8003ade:	6193      	str	r3, [r2, #24]
 8003ae0:	4b37      	ldr	r3, [pc, #220]	@ (8003bc0 <MX_GPIO_Init+0x148>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTH_22_GPIO_Port, DTH_22_Pin, GPIO_PIN_RESET);
 8003aec:	2200      	movs	r2, #0
 8003aee:	2110      	movs	r1, #16
 8003af0:	4834      	ldr	r0, [pc, #208]	@ (8003bc4 <MX_GPIO_Init+0x14c>)
 8003af2:	f000 fda8 	bl	8004646 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSORS_POWER_Pin|DISPLAY_POWER_Pin, GPIO_PIN_RESET);
 8003af6:	2200      	movs	r2, #0
 8003af8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003afc:	4832      	ldr	r0, [pc, #200]	@ (8003bc8 <MX_GPIO_Init+0x150>)
 8003afe:	f000 fda2 	bl	8004646 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8003b02:	2201      	movs	r2, #1
 8003b04:	2148      	movs	r1, #72	@ 0x48
 8003b06:	4830      	ldr	r0, [pc, #192]	@ (8003bc8 <MX_GPIO_Init+0x150>)
 8003b08:	f000 fd9d 	bl	8004646 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003b0c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b12:	2303      	movs	r3, #3
 8003b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	f107 0310 	add.w	r3, r7, #16
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	482b      	ldr	r0, [pc, #172]	@ (8003bcc <MX_GPIO_Init+0x154>)
 8003b1e:	f000 fbf7 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8003b22:	f649 730e 	movw	r3, #40718	@ 0x9f0e
 8003b26:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2c:	f107 0310 	add.w	r3, r7, #16
 8003b30:	4619      	mov	r1, r3
 8003b32:	4824      	ldr	r0, [pc, #144]	@ (8003bc4 <MX_GPIO_Init+0x14c>)
 8003b34:	f000 fbec 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : DTH_22_Pin */
  GPIO_InitStruct.Pin = DTH_22_Pin;
 8003b38:	2310      	movs	r3, #16
 8003b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b44:	2302      	movs	r3, #2
 8003b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DTH_22_GPIO_Port, &GPIO_InitStruct);
 8003b48:	f107 0310 	add.w	r3, r7, #16
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	481d      	ldr	r0, [pc, #116]	@ (8003bc4 <MX_GPIO_Init+0x14c>)
 8003b50:	f000 fbde 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB15 PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8003b54:	f24c 3317 	movw	r3, #49943	@ 0xc317
 8003b58:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	f107 0310 	add.w	r3, r7, #16
 8003b62:	4619      	mov	r1, r3
 8003b64:	4818      	ldr	r0, [pc, #96]	@ (8003bc8 <MX_GPIO_Init+0x150>)
 8003b66:	f000 fbd3 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSORS_POWER_Pin DISPLAY_POWER_Pin NSS_Pin RESET_Pin */
  GPIO_InitStruct.Pin = SENSORS_POWER_Pin|DISPLAY_POWER_Pin|NSS_Pin|RESET_Pin;
 8003b6a:	f243 0348 	movw	r3, #12360	@ 0x3048
 8003b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b70:	2301      	movs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7c:	f107 0310 	add.w	r3, r7, #16
 8003b80:	4619      	mov	r1, r3
 8003b82:	4811      	ldr	r0, [pc, #68]	@ (8003bc8 <MX_GPIO_Init+0x150>)
 8003b84:	f000 fbc4 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003b88:	2320      	movs	r3, #32
 8003b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	4619      	mov	r1, r3
 8003b9a:	480b      	ldr	r0, [pc, #44]	@ (8003bc8 <MX_GPIO_Init+0x150>)
 8003b9c:	f000 fbb8 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8003ba0:	2380      	movs	r3, #128	@ 0x80
 8003ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f107 0310 	add.w	r3, r7, #16
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4805      	ldr	r0, [pc, #20]	@ (8003bc8 <MX_GPIO_Init+0x150>)
 8003bb4:	f000 fbac 	bl	8004310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bb8:	bf00      	nop
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40010800 	.word	0x40010800
 8003bc8:	40010c00 	.word	0x40010c00
 8003bcc:	40011000 	.word	0x40011000

08003bd0 <microDelay>:

/* USER CODE BEGIN 4 */
void microDelay(uint32_t microSeconds)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <microDelay+0x2c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < microSeconds);
 8003be0:	bf00      	nop
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <microDelay+0x2c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d8f9      	bhi.n	8003be2 <microDelay+0x12>
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000800 	.word	0x20000800

08003c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c04:	b672      	cpsid	i
}
 8003c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <Error_Handler+0x8>

08003c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c12:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <HAL_MspInit+0x5c>)
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	4a14      	ldr	r2, [pc, #80]	@ (8003c68 <HAL_MspInit+0x5c>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6193      	str	r3, [r2, #24]
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_MspInit+0x5c>)
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c68 <HAL_MspInit+0x5c>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c68 <HAL_MspInit+0x5c>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c34:	61d3      	str	r3, [r2, #28]
 8003c36:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <HAL_MspInit+0x5c>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_MspInit+0x60>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	4a04      	ldr	r2, [pc, #16]	@ (8003c6c <HAL_MspInit+0x60>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010000 	.word	0x40010000

08003c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 0310 	add.w	r3, r7, #16
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a16      	ldr	r2, [pc, #88]	@ (8003ce4 <HAL_I2C_MspInit+0x74>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d124      	bne.n	8003cda <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c90:	4b15      	ldr	r3, [pc, #84]	@ (8003ce8 <HAL_I2C_MspInit+0x78>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4a14      	ldr	r2, [pc, #80]	@ (8003ce8 <HAL_I2C_MspInit+0x78>)
 8003c96:	f043 0308 	orr.w	r3, r3, #8
 8003c9a:	6193      	str	r3, [r2, #24]
 8003c9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ce8 <HAL_I2C_MspInit+0x78>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ca8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cae:	2312      	movs	r3, #18
 8003cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb6:	f107 0310 	add.w	r3, r7, #16
 8003cba:	4619      	mov	r1, r3
 8003cbc:	480b      	ldr	r0, [pc, #44]	@ (8003cec <HAL_I2C_MspInit+0x7c>)
 8003cbe:	f000 fb27 	bl	8004310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003cc2:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <HAL_I2C_MspInit+0x78>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4a08      	ldr	r2, [pc, #32]	@ (8003ce8 <HAL_I2C_MspInit+0x78>)
 8003cc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ccc:	61d3      	str	r3, [r2, #28]
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_I2C_MspInit+0x78>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003cda:	bf00      	nop
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40005800 	.word	0x40005800
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40010c00 	.word	0x40010c00

08003cf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <HAL_RTC_MspInit+0x3c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d110      	bne.n	8003d24 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003d02:	f001 f965 	bl	8004fd0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003d06:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <HAL_RTC_MspInit+0x40>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RTC_MspInit+0x40>)
 8003d0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d10:	61d3      	str	r3, [r2, #28]
 8003d12:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <HAL_RTC_MspInit+0x40>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RTC_MspInit+0x44>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40002800 	.word	0x40002800
 8003d30:	40021000 	.word	0x40021000
 8003d34:	4242043c 	.word	0x4242043c

08003d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d40:	f107 0310 	add.w	r3, r7, #16
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc0 <HAL_SPI_MspInit+0x88>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d12f      	bne.n	8003db8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d58:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <HAL_SPI_MspInit+0x8c>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	@ (8003dc4 <HAL_SPI_MspInit+0x8c>)
 8003d5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d62:	6193      	str	r3, [r2, #24]
 8003d64:	4b17      	ldr	r3, [pc, #92]	@ (8003dc4 <HAL_SPI_MspInit+0x8c>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d70:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <HAL_SPI_MspInit+0x8c>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	4a13      	ldr	r2, [pc, #76]	@ (8003dc4 <HAL_SPI_MspInit+0x8c>)
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	6193      	str	r3, [r2, #24]
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <HAL_SPI_MspInit+0x8c>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin|LORA_MOSI_Pin;
 8003d88:	23a0      	movs	r3, #160	@ 0xa0
 8003d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d94:	f107 0310 	add.w	r3, r7, #16
 8003d98:	4619      	mov	r1, r3
 8003d9a:	480b      	ldr	r0, [pc, #44]	@ (8003dc8 <HAL_SPI_MspInit+0x90>)
 8003d9c:	f000 fab8 	bl	8004310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin;
 8003da0:	2340      	movs	r3, #64	@ 0x40
 8003da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LORA_MISO_GPIO_Port, &GPIO_InitStruct);
 8003dac:	f107 0310 	add.w	r3, r7, #16
 8003db0:	4619      	mov	r1, r3
 8003db2:	4805      	ldr	r0, [pc, #20]	@ (8003dc8 <HAL_SPI_MspInit+0x90>)
 8003db4:	f000 faac 	bl	8004310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003db8:	bf00      	nop
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40013000 	.word	0x40013000
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40010800 	.word	0x40010800

08003dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <HAL_TIM_Base_MspInit+0x34>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10b      	bne.n	8003df6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dde:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_TIM_Base_MspInit+0x38>)
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4a08      	ldr	r2, [pc, #32]	@ (8003e04 <HAL_TIM_Base_MspInit+0x38>)
 8003de4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003de8:	6193      	str	r3, [r2, #24]
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_TIM_Base_MspInit+0x38>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40021000 	.word	0x40021000

08003e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e0c:	bf00      	nop
 8003e0e:	e7fd      	b.n	8003e0c <NMI_Handler+0x4>

08003e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <HardFault_Handler+0x4>

08003e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <MemManage_Handler+0x4>

08003e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <BusFault_Handler+0x4>

08003e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e2c:	bf00      	nop
 8003e2e:	e7fd      	b.n	8003e2c <UsageFault_Handler+0x4>

08003e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e58:	f000 f936 	bl	80040c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return 1;
 8003e64:	2301      	movs	r3, #1
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <_kill>:

int _kill(int pid, int sig)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e78:	f004 fb18 	bl	80084ac <__errno>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2216      	movs	r2, #22
 8003e80:	601a      	str	r2, [r3, #0]
  return -1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_exit>:

void _exit (int status)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ffe7 	bl	8003e6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ea0:	bf00      	nop
 8003ea2:	e7fd      	b.n	8003ea0 <_exit+0x12>

08003ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e00a      	b.n	8003ecc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003eb6:	f3af 8000 	nop.w
 8003eba:	4601      	mov	r1, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	60ba      	str	r2, [r7, #8]
 8003ec2:	b2ca      	uxtb	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	dbf0      	blt.n	8003eb6 <_read+0x12>
  }

  return len;
 8003ed4:	687b      	ldr	r3, [r7, #4]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e009      	b.n	8003f04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	60ba      	str	r2, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	3301      	adds	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	dbf1      	blt.n	8003ef0 <_write+0x12>
  }
  return len;
 8003f0c:	687b      	ldr	r3, [r7, #4]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <_close>:

int _close(int file)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f3c:	605a      	str	r2, [r3, #4]
  return 0;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <_isatty>:

int _isatty(int file)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f52:	2301      	movs	r3, #1
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
	...

08003f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f80:	4a14      	ldr	r2, [pc, #80]	@ (8003fd4 <_sbrk+0x5c>)
 8003f82:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <_sbrk+0x60>)
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f8c:	4b13      	ldr	r3, [pc, #76]	@ (8003fdc <_sbrk+0x64>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f94:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <_sbrk+0x64>)
 8003f96:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <_sbrk+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f9a:	4b10      	ldr	r3, [pc, #64]	@ (8003fdc <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d207      	bcs.n	8003fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fa8:	f004 fa80 	bl	80084ac <__errno>
 8003fac:	4603      	mov	r3, r0
 8003fae:	220c      	movs	r2, #12
 8003fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fb6:	e009      	b.n	8003fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fb8:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <_sbrk+0x64>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <_sbrk+0x64>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	4a05      	ldr	r2, [pc, #20]	@ (8003fdc <_sbrk+0x64>)
 8003fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20005000 	.word	0x20005000
 8003fd8:	00000400 	.word	0x00000400
 8003fdc:	20000848 	.word	0x20000848
 8003fe0:	200009a0 	.word	0x200009a0

08003fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ff0:	f7ff fff8 	bl	8003fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ff4:	480b      	ldr	r0, [pc, #44]	@ (8004024 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003ff6:	490c      	ldr	r1, [pc, #48]	@ (8004028 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800402c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ffc:	e002      	b.n	8004004 <LoopCopyDataInit>

08003ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004002:	3304      	adds	r3, #4

08004004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004008:	d3f9      	bcc.n	8003ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800400a:	4a09      	ldr	r2, [pc, #36]	@ (8004030 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800400c:	4c09      	ldr	r4, [pc, #36]	@ (8004034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004010:	e001      	b.n	8004016 <LoopFillZerobss>

08004012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004014:	3204      	adds	r2, #4

08004016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004018:	d3fb      	bcc.n	8004012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800401a:	f004 fa4d 	bl	80084b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800401e:	f7ff fb8b 	bl	8003738 <main>
  bx lr
 8004022:	4770      	bx	lr
  ldr r0, =_sdata
 8004024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004028:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800402c:	0800d6e4 	.word	0x0800d6e4
  ldr r2, =_sbss
 8004030:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004034:	2000099c 	.word	0x2000099c

08004038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004038:	e7fe      	b.n	8004038 <ADC1_2_IRQHandler>
	...

0800403c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004040:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <HAL_Init+0x28>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a07      	ldr	r2, [pc, #28]	@ (8004064 <HAL_Init+0x28>)
 8004046:	f043 0310 	orr.w	r3, r3, #16
 800404a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800404c:	2003      	movs	r0, #3
 800404e:	f000 f92b 	bl	80042a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004052:	200f      	movs	r0, #15
 8004054:	f000 f808 	bl	8004068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004058:	f7ff fdd8 	bl	8003c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40022000 	.word	0x40022000

08004068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004070:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <HAL_InitTick+0x54>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b12      	ldr	r3, [pc, #72]	@ (80040c0 <HAL_InitTick+0x58>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800407e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f935 	bl	80042f6 <HAL_SYSTICK_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e00e      	b.n	80040b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d80a      	bhi.n	80040b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800409c:	2200      	movs	r2, #0
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040a4:	f000 f90b 	bl	80042be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a8:	4a06      	ldr	r2, [pc, #24]	@ (80040c4 <HAL_InitTick+0x5c>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000008 	.word	0x20000008
 80040c0:	20000010 	.word	0x20000010
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <HAL_IncTick+0x1c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_IncTick+0x20>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4413      	add	r3, r2
 80040d8:	4a03      	ldr	r2, [pc, #12]	@ (80040e8 <HAL_IncTick+0x20>)
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	20000010 	.word	0x20000010
 80040e8:	2000084c 	.word	0x2000084c

080040ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;
 80040f0:	4b02      	ldr	r3, [pc, #8]	@ (80040fc <HAL_GetTick+0x10>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	2000084c 	.word	0x2000084c

08004100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff fff0 	bl	80040ec <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004118:	d005      	beq.n	8004126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_Delay+0x44>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004126:	bf00      	nop
 8004128:	f7ff ffe0 	bl	80040ec <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d8f7      	bhi.n	8004128 <HAL_Delay+0x28>
  {
  }
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000010 	.word	0x20000010

08004148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417a:	4a04      	ldr	r2, [pc, #16]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	db0a      	blt.n	80041d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	490c      	ldr	r1, [pc, #48]	@ (80041f8 <__NVIC_SetPriority+0x4c>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	0112      	lsls	r2, r2, #4
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	440b      	add	r3, r1
 80041d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041d4:	e00a      	b.n	80041ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	4908      	ldr	r1, [pc, #32]	@ (80041fc <__NVIC_SetPriority+0x50>)
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	3b04      	subs	r3, #4
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	440b      	add	r3, r1
 80041ea:	761a      	strb	r2, [r3, #24]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	e000e100 	.word	0xe000e100
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	@ 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f1c3 0307 	rsb	r3, r3, #7
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf28      	it	cs
 800421e:	2304      	movcs	r3, #4
 8004220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3304      	adds	r3, #4
 8004226:	2b06      	cmp	r3, #6
 8004228:	d902      	bls.n	8004230 <NVIC_EncodePriority+0x30>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3b03      	subs	r3, #3
 800422e:	e000      	b.n	8004232 <NVIC_EncodePriority+0x32>
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43da      	mvns	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	401a      	ands	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004248:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	43d9      	mvns	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	4313      	orrs	r3, r2
         );
}
 800425a:	4618      	mov	r0, r3
 800425c:	3724      	adds	r7, #36	@ 0x24
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004274:	d301      	bcc.n	800427a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004276:	2301      	movs	r3, #1
 8004278:	e00f      	b.n	800429a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800427a:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <SysTick_Config+0x40>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3b01      	subs	r3, #1
 8004280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004282:	210f      	movs	r1, #15
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004288:	f7ff ff90 	bl	80041ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <SysTick_Config+0x40>)
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004292:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <SysTick_Config+0x40>)
 8004294:	2207      	movs	r2, #7
 8004296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	e000e010 	.word	0xe000e010

080042a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff ff49 	bl	8004148 <__NVIC_SetPriorityGrouping>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042be:	b580      	push	{r7, lr}
 80042c0:	b086      	sub	sp, #24
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	4603      	mov	r3, r0
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042d0:	f7ff ff5e 	bl	8004190 <__NVIC_GetPriorityGrouping>
 80042d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	6978      	ldr	r0, [r7, #20]
 80042dc:	f7ff ff90 	bl	8004200 <NVIC_EncodePriority>
 80042e0:	4602      	mov	r2, r0
 80042e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff5f 	bl	80041ac <__NVIC_SetPriority>
}
 80042ee:	bf00      	nop
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ffb0 	bl	8004264 <SysTick_Config>
 8004304:	4603      	mov	r3, r0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004310:	b480      	push	{r7}
 8004312:	b08b      	sub	sp, #44	@ 0x2c
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800431e:	2300      	movs	r3, #0
 8004320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004322:	e169      	b.n	80045f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004324:	2201      	movs	r2, #1
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	f040 8158 	bne.w	80045f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4a9a      	ldr	r2, [pc, #616]	@ (80045b0 <HAL_GPIO_Init+0x2a0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d05e      	beq.n	800440a <HAL_GPIO_Init+0xfa>
 800434c:	4a98      	ldr	r2, [pc, #608]	@ (80045b0 <HAL_GPIO_Init+0x2a0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d875      	bhi.n	800443e <HAL_GPIO_Init+0x12e>
 8004352:	4a98      	ldr	r2, [pc, #608]	@ (80045b4 <HAL_GPIO_Init+0x2a4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d058      	beq.n	800440a <HAL_GPIO_Init+0xfa>
 8004358:	4a96      	ldr	r2, [pc, #600]	@ (80045b4 <HAL_GPIO_Init+0x2a4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d86f      	bhi.n	800443e <HAL_GPIO_Init+0x12e>
 800435e:	4a96      	ldr	r2, [pc, #600]	@ (80045b8 <HAL_GPIO_Init+0x2a8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d052      	beq.n	800440a <HAL_GPIO_Init+0xfa>
 8004364:	4a94      	ldr	r2, [pc, #592]	@ (80045b8 <HAL_GPIO_Init+0x2a8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d869      	bhi.n	800443e <HAL_GPIO_Init+0x12e>
 800436a:	4a94      	ldr	r2, [pc, #592]	@ (80045bc <HAL_GPIO_Init+0x2ac>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d04c      	beq.n	800440a <HAL_GPIO_Init+0xfa>
 8004370:	4a92      	ldr	r2, [pc, #584]	@ (80045bc <HAL_GPIO_Init+0x2ac>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d863      	bhi.n	800443e <HAL_GPIO_Init+0x12e>
 8004376:	4a92      	ldr	r2, [pc, #584]	@ (80045c0 <HAL_GPIO_Init+0x2b0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d046      	beq.n	800440a <HAL_GPIO_Init+0xfa>
 800437c:	4a90      	ldr	r2, [pc, #576]	@ (80045c0 <HAL_GPIO_Init+0x2b0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d85d      	bhi.n	800443e <HAL_GPIO_Init+0x12e>
 8004382:	2b12      	cmp	r3, #18
 8004384:	d82a      	bhi.n	80043dc <HAL_GPIO_Init+0xcc>
 8004386:	2b12      	cmp	r3, #18
 8004388:	d859      	bhi.n	800443e <HAL_GPIO_Init+0x12e>
 800438a:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <HAL_GPIO_Init+0x80>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	0800440b 	.word	0x0800440b
 8004394:	080043e5 	.word	0x080043e5
 8004398:	080043f7 	.word	0x080043f7
 800439c:	08004439 	.word	0x08004439
 80043a0:	0800443f 	.word	0x0800443f
 80043a4:	0800443f 	.word	0x0800443f
 80043a8:	0800443f 	.word	0x0800443f
 80043ac:	0800443f 	.word	0x0800443f
 80043b0:	0800443f 	.word	0x0800443f
 80043b4:	0800443f 	.word	0x0800443f
 80043b8:	0800443f 	.word	0x0800443f
 80043bc:	0800443f 	.word	0x0800443f
 80043c0:	0800443f 	.word	0x0800443f
 80043c4:	0800443f 	.word	0x0800443f
 80043c8:	0800443f 	.word	0x0800443f
 80043cc:	0800443f 	.word	0x0800443f
 80043d0:	0800443f 	.word	0x0800443f
 80043d4:	080043ed 	.word	0x080043ed
 80043d8:	08004401 	.word	0x08004401
 80043dc:	4a79      	ldr	r2, [pc, #484]	@ (80045c4 <HAL_GPIO_Init+0x2b4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043e2:	e02c      	b.n	800443e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	623b      	str	r3, [r7, #32]
          break;
 80043ea:	e029      	b.n	8004440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	623b      	str	r3, [r7, #32]
          break;
 80043f4:	e024      	b.n	8004440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	3308      	adds	r3, #8
 80043fc:	623b      	str	r3, [r7, #32]
          break;
 80043fe:	e01f      	b.n	8004440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	330c      	adds	r3, #12
 8004406:	623b      	str	r3, [r7, #32]
          break;
 8004408:	e01a      	b.n	8004440 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004412:	2304      	movs	r3, #4
 8004414:	623b      	str	r3, [r7, #32]
          break;
 8004416:	e013      	b.n	8004440 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004420:	2308      	movs	r3, #8
 8004422:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	611a      	str	r2, [r3, #16]
          break;
 800442a:	e009      	b.n	8004440 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800442c:	2308      	movs	r3, #8
 800442e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	615a      	str	r2, [r3, #20]
          break;
 8004436:	e003      	b.n	8004440 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004438:	2300      	movs	r3, #0
 800443a:	623b      	str	r3, [r7, #32]
          break;
 800443c:	e000      	b.n	8004440 <HAL_GPIO_Init+0x130>
          break;
 800443e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2bff      	cmp	r3, #255	@ 0xff
 8004444:	d801      	bhi.n	800444a <HAL_GPIO_Init+0x13a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	e001      	b.n	800444e <HAL_GPIO_Init+0x13e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3304      	adds	r3, #4
 800444e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2bff      	cmp	r3, #255	@ 0xff
 8004454:	d802      	bhi.n	800445c <HAL_GPIO_Init+0x14c>
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	e002      	b.n	8004462 <HAL_GPIO_Init+0x152>
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	3b08      	subs	r3, #8
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	210f      	movs	r1, #15
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	431a      	orrs	r2, r3
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80b1 	beq.w	80045f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004490:	4b4d      	ldr	r3, [pc, #308]	@ (80045c8 <HAL_GPIO_Init+0x2b8>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	4a4c      	ldr	r2, [pc, #304]	@ (80045c8 <HAL_GPIO_Init+0x2b8>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6193      	str	r3, [r2, #24]
 800449c:	4b4a      	ldr	r3, [pc, #296]	@ (80045c8 <HAL_GPIO_Init+0x2b8>)
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044a8:	4a48      	ldr	r2, [pc, #288]	@ (80045cc <HAL_GPIO_Init+0x2bc>)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	089b      	lsrs	r3, r3, #2
 80044ae:	3302      	adds	r3, #2
 80044b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	220f      	movs	r2, #15
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a40      	ldr	r2, [pc, #256]	@ (80045d0 <HAL_GPIO_Init+0x2c0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_GPIO_Init+0x1ec>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3f      	ldr	r2, [pc, #252]	@ (80045d4 <HAL_GPIO_Init+0x2c4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00d      	beq.n	80044f8 <HAL_GPIO_Init+0x1e8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3e      	ldr	r2, [pc, #248]	@ (80045d8 <HAL_GPIO_Init+0x2c8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <HAL_GPIO_Init+0x1e4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3d      	ldr	r2, [pc, #244]	@ (80045dc <HAL_GPIO_Init+0x2cc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_GPIO_Init+0x1e0>
 80044ec:	2303      	movs	r3, #3
 80044ee:	e006      	b.n	80044fe <HAL_GPIO_Init+0x1ee>
 80044f0:	2304      	movs	r3, #4
 80044f2:	e004      	b.n	80044fe <HAL_GPIO_Init+0x1ee>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e002      	b.n	80044fe <HAL_GPIO_Init+0x1ee>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_GPIO_Init+0x1ee>
 80044fc:	2300      	movs	r3, #0
 80044fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004500:	f002 0203 	and.w	r2, r2, #3
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	4093      	lsls	r3, r2
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800450e:	492f      	ldr	r1, [pc, #188]	@ (80045cc <HAL_GPIO_Init+0x2bc>)
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	3302      	adds	r3, #2
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004528:	4b2d      	ldr	r3, [pc, #180]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	492c      	ldr	r1, [pc, #176]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]
 8004534:	e006      	b.n	8004544 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004536:	4b2a      	ldr	r3, [pc, #168]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	43db      	mvns	r3, r3
 800453e:	4928      	ldr	r1, [pc, #160]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004540:	4013      	ands	r3, r2
 8004542:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004550:	4b23      	ldr	r3, [pc, #140]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	4922      	ldr	r1, [pc, #136]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	60cb      	str	r3, [r1, #12]
 800455c:	e006      	b.n	800456c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800455e:	4b20      	ldr	r3, [pc, #128]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	43db      	mvns	r3, r3
 8004566:	491e      	ldr	r1, [pc, #120]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004568:	4013      	ands	r3, r2
 800456a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004578:	4b19      	ldr	r3, [pc, #100]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	4918      	ldr	r1, [pc, #96]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
 8004584:	e006      	b.n	8004594 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004586:	4b16      	ldr	r3, [pc, #88]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	43db      	mvns	r3, r3
 800458e:	4914      	ldr	r1, [pc, #80]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 8004590:	4013      	ands	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d021      	beq.n	80045e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045a0:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	490e      	ldr	r1, [pc, #56]	@ (80045e0 <HAL_GPIO_Init+0x2d0>)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	e021      	b.n	80045f2 <HAL_GPIO_Init+0x2e2>
 80045ae:	bf00      	nop
 80045b0:	10320000 	.word	0x10320000
 80045b4:	10310000 	.word	0x10310000
 80045b8:	10220000 	.word	0x10220000
 80045bc:	10210000 	.word	0x10210000
 80045c0:	10120000 	.word	0x10120000
 80045c4:	10110000 	.word	0x10110000
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40010800 	.word	0x40010800
 80045d4:	40010c00 	.word	0x40010c00
 80045d8:	40011000 	.word	0x40011000
 80045dc:	40011400 	.word	0x40011400
 80045e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <HAL_GPIO_Init+0x304>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	4909      	ldr	r1, [pc, #36]	@ (8004614 <HAL_GPIO_Init+0x304>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	3301      	adds	r3, #1
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	f47f ae8e 	bne.w	8004324 <HAL_GPIO_Init+0x14>
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	372c      	adds	r7, #44	@ 0x2c
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	e001      	b.n	800463a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	807b      	strh	r3, [r7, #2]
 8004652:	4613      	mov	r3, r2
 8004654:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004656:	787b      	ldrb	r3, [r7, #1]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800465c:	887a      	ldrh	r2, [r7, #2]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004662:	e003      	b.n	800466c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	041a      	lsls	r2, r3, #16
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	611a      	str	r2, [r3, #16]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
	...

08004678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e12b      	b.n	80048e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fae6 	bl	8003c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	@ 0x24
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046dc:	f001 f882 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80046e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4a81      	ldr	r2, [pc, #516]	@ (80048ec <HAL_I2C_Init+0x274>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d807      	bhi.n	80046fc <HAL_I2C_Init+0x84>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a80      	ldr	r2, [pc, #512]	@ (80048f0 <HAL_I2C_Init+0x278>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bf94      	ite	ls
 80046f4:	2301      	movls	r3, #1
 80046f6:	2300      	movhi	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e006      	b.n	800470a <HAL_I2C_Init+0x92>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a7d      	ldr	r2, [pc, #500]	@ (80048f4 <HAL_I2C_Init+0x27c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e0e7      	b.n	80048e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a78      	ldr	r2, [pc, #480]	@ (80048f8 <HAL_I2C_Init+0x280>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0c9b      	lsrs	r3, r3, #18
 800471c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a6a      	ldr	r2, [pc, #424]	@ (80048ec <HAL_I2C_Init+0x274>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d802      	bhi.n	800474c <HAL_I2C_Init+0xd4>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3301      	adds	r3, #1
 800474a:	e009      	b.n	8004760 <HAL_I2C_Init+0xe8>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	4a69      	ldr	r2, [pc, #420]	@ (80048fc <HAL_I2C_Init+0x284>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	099b      	lsrs	r3, r3, #6
 800475e:	3301      	adds	r3, #1
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	430b      	orrs	r3, r1
 8004766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004772:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	495c      	ldr	r1, [pc, #368]	@ (80048ec <HAL_I2C_Init+0x274>)
 800477c:	428b      	cmp	r3, r1
 800477e:	d819      	bhi.n	80047b4 <HAL_I2C_Init+0x13c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	1e59      	subs	r1, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fbb1 f3f3 	udiv	r3, r1, r3
 800478e:	1c59      	adds	r1, r3, #1
 8004790:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004794:	400b      	ands	r3, r1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_I2C_Init+0x138>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1e59      	subs	r1, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a8:	3301      	adds	r3, #1
 80047aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ae:	e051      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 80047b0:	2304      	movs	r3, #4
 80047b2:	e04f      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d111      	bne.n	80047e0 <HAL_I2C_Init+0x168>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e58      	subs	r0, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	440b      	add	r3, r1
 80047ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e012      	b.n	8004806 <HAL_I2C_Init+0x18e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e58      	subs	r0, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	0099      	lsls	r1, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Init+0x196>
 800480a:	2301      	movs	r3, #1
 800480c:	e022      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10e      	bne.n	8004834 <HAL_I2C_Init+0x1bc>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1e58      	subs	r0, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	440b      	add	r3, r1
 8004824:	fbb0 f3f3 	udiv	r3, r0, r3
 8004828:	3301      	adds	r3, #1
 800482a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004832:	e00f      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e58      	subs	r0, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	0099      	lsls	r1, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	fbb0 f3f3 	udiv	r3, r0, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	6809      	ldr	r1, [r1, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004882:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6911      	ldr	r1, [r2, #16]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	4311      	orrs	r1, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	430b      	orrs	r3, r1
 8004896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	000186a0 	.word	0x000186a0
 80048f0:	001e847f 	.word	0x001e847f
 80048f4:	003d08ff 	.word	0x003d08ff
 80048f8:	431bde83 	.word	0x431bde83
 80048fc:	10624dd3 	.word	0x10624dd3

08004900 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	4608      	mov	r0, r1
 800490a:	4611      	mov	r1, r2
 800490c:	461a      	mov	r2, r3
 800490e:	4603      	mov	r3, r0
 8004910:	817b      	strh	r3, [r7, #10]
 8004912:	460b      	mov	r3, r1
 8004914:	813b      	strh	r3, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800491a:	f7ff fbe7 	bl	80040ec <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	f040 80d9 	bne.w	8004ae0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2319      	movs	r3, #25
 8004934:	2201      	movs	r2, #1
 8004936:	496d      	ldr	r1, [pc, #436]	@ (8004aec <HAL_I2C_Mem_Write+0x1ec>)
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f971 	bl	8004c20 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
 8004946:	e0cc      	b.n	8004ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_I2C_Mem_Write+0x56>
 8004952:	2302      	movs	r3, #2
 8004954:	e0c5      	b.n	8004ae2 <HAL_I2C_Mem_Write+0x1e2>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d007      	beq.n	800497c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800498a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2221      	movs	r2, #33	@ 0x21
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4a4d      	ldr	r2, [pc, #308]	@ (8004af0 <HAL_I2C_Mem_Write+0x1f0>)
 80049bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049be:	88f8      	ldrh	r0, [r7, #6]
 80049c0:	893a      	ldrh	r2, [r7, #8]
 80049c2:	8979      	ldrh	r1, [r7, #10]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	4603      	mov	r3, r0
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f890 	bl	8004af4 <I2C_RequestMemoryWrite>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d052      	beq.n	8004a80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e081      	b.n	8004ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fa36 	bl	8004e54 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d107      	bne.n	8004a06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e06b      	b.n	8004ae2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11b      	bne.n	8004a80 <HAL_I2C_Mem_Write+0x180>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d017      	beq.n	8004a80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	781a      	ldrb	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1aa      	bne.n	80049de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa29 	bl	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d107      	bne.n	8004ab0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e016      	b.n	8004ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e000      	b.n	8004ae2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	00100002 	.word	0x00100002
 8004af0:	ffff0000 	.word	0xffff0000

08004af4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	4608      	mov	r0, r1
 8004afe:	4611      	mov	r1, r2
 8004b00:	461a      	mov	r2, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	817b      	strh	r3, [r7, #10]
 8004b06:	460b      	mov	r3, r1
 8004b08:	813b      	strh	r3, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f878 	bl	8004c20 <I2C_WaitOnFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b44:	d103      	bne.n	8004b4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e05f      	b.n	8004c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	492d      	ldr	r1, [pc, #180]	@ (8004c1c <I2C_RequestMemoryWrite+0x128>)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f8d3 	bl	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e04c      	b.n	8004c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b90:	6a39      	ldr	r1, [r7, #32]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f95e 	bl	8004e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d107      	bne.n	8004bb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e02b      	b.n	8004c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d105      	bne.n	8004bcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc0:	893b      	ldrh	r3, [r7, #8]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
 8004bca:	e021      	b.n	8004c10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bcc:	893b      	ldrh	r3, [r7, #8]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	6a39      	ldr	r1, [r7, #32]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f938 	bl	8004e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00d      	beq.n	8004c06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d107      	bne.n	8004c02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e005      	b.n	8004c12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c06:	893b      	ldrh	r3, [r7, #8]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	00010002 	.word	0x00010002

08004c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c30:	e048      	b.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c38:	d044      	beq.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3a:	f7ff fa57 	bl	80040ec <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d139      	bne.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	0c1b      	lsrs	r3, r3, #16
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10d      	bne.n	8004c76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	43da      	mvns	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	e00c      	b.n	8004c90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	43da      	mvns	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d116      	bne.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	f043 0220 	orr.w	r2, r3, #32
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e023      	b.n	8004d0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10d      	bne.n	8004cea <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	e00c      	b.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d093      	beq.n	8004c32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d22:	e071      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d32:	d123      	bne.n	8004d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d68:	f043 0204 	orr.w	r2, r3, #4
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e067      	b.n	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d82:	d041      	beq.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d84:	f7ff f9b2 	bl	80040ec <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d302      	bcc.n	8004d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d136      	bne.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10c      	bne.n	8004dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	43da      	mvns	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	2300      	moveq	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	e00b      	b.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e021      	b.n	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d10c      	bne.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e00b      	b.n	8004e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f af6d 	bne.w	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e60:	e034      	b.n	8004ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f886 	bl	8004f74 <I2C_IsAcknowledgeFailed>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e034      	b.n	8004edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e78:	d028      	beq.n	8004ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7ff f937 	bl	80040ec <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11d      	bne.n	8004ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b80      	cmp	r3, #128	@ 0x80
 8004e9c:	d016      	beq.n	8004ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e007      	b.n	8004edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d1c3      	bne.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ef0:	e034      	b.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f83e 	bl	8004f74 <I2C_IsAcknowledgeFailed>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e034      	b.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f08:	d028      	beq.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7ff f8ef 	bl	80040ec <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d11d      	bne.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d016      	beq.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e007      	b.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d1c3      	bne.n	8004ef2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8a:	d11b      	bne.n	8004fc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	f043 0204 	orr.w	r2, r3, #4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	420e0020 	.word	0x420e0020

08004fe8 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_PWR_EnableWakeUpPin+0x34>)
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	461a      	mov	r2, r3
 800500e:	2301      	movs	r3, #1
 8005010:	6013      	str	r3, [r2, #0]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	10838020 	.word	0x10838020

08005020 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005024:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a07      	ldr	r2, [pc, #28]	@ (8005048 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800502a:	f043 0302 	orr.w	r3, r3, #2
 800502e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	4a05      	ldr	r2, [pc, #20]	@ (800504c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800503c:	bf30      	wfi
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40007000 	.word	0x40007000
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e272      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8087 	beq.w	800517e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005070:	4b92      	ldr	r3, [pc, #584]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b04      	cmp	r3, #4
 800507a:	d00c      	beq.n	8005096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800507c:	4b8f      	ldr	r3, [pc, #572]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d112      	bne.n	80050ae <HAL_RCC_OscConfig+0x5e>
 8005088:	4b8c      	ldr	r3, [pc, #560]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005094:	d10b      	bne.n	80050ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005096:	4b89      	ldr	r3, [pc, #548]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d06c      	beq.n	800517c <HAL_RCC_OscConfig+0x12c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d168      	bne.n	800517c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e24c      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b6:	d106      	bne.n	80050c6 <HAL_RCC_OscConfig+0x76>
 80050b8:	4b80      	ldr	r3, [pc, #512]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7f      	ldr	r2, [pc, #508]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	e02e      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x98>
 80050ce:	4b7b      	ldr	r3, [pc, #492]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a7a      	ldr	r2, [pc, #488]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b78      	ldr	r3, [pc, #480]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a77      	ldr	r2, [pc, #476]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e01d      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f0:	d10c      	bne.n	800510c <HAL_RCC_OscConfig+0xbc>
 80050f2:	4b72      	ldr	r3, [pc, #456]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a71      	ldr	r2, [pc, #452]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b6f      	ldr	r3, [pc, #444]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6e      	ldr	r2, [pc, #440]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e00b      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 800510c:	4b6b      	ldr	r3, [pc, #428]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6a      	ldr	r2, [pc, #424]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b68      	ldr	r3, [pc, #416]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a67      	ldr	r2, [pc, #412]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 800511e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512c:	f7fe ffde 	bl	80040ec <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fe ffda 	bl	80040ec <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	@ 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e200      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	4b5d      	ldr	r3, [pc, #372]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0xe4>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fe ffca 	bl	80040ec <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fe ffc6 	bl	80040ec <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	@ 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1ec      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516e:	4b53      	ldr	r3, [pc, #332]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x10c>
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d063      	beq.n	8005252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800518a:	4b4c      	ldr	r3, [pc, #304]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005196:	4b49      	ldr	r3, [pc, #292]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d11c      	bne.n	80051dc <HAL_RCC_OscConfig+0x18c>
 80051a2:	4b46      	ldr	r3, [pc, #280]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ae:	4b43      	ldr	r3, [pc, #268]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_RCC_OscConfig+0x176>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e1c0      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c6:	4b3d      	ldr	r3, [pc, #244]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4939      	ldr	r1, [pc, #228]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051da:	e03a      	b.n	8005252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e4:	4b36      	ldr	r3, [pc, #216]	@ (80052c0 <HAL_RCC_OscConfig+0x270>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fe ff7f 	bl	80040ec <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fe ff7b 	bl	80040ec <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e1a1      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	4b2d      	ldr	r3, [pc, #180]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b2a      	ldr	r3, [pc, #168]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4927      	ldr	r1, [pc, #156]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]
 8005224:	e015      	b.n	8005252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b26      	ldr	r3, [pc, #152]	@ (80052c0 <HAL_RCC_OscConfig+0x270>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fe ff5e 	bl	80040ec <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005234:	f7fe ff5a 	bl	80040ec <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e180      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005246:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03a      	beq.n	80052d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d019      	beq.n	800529a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005266:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <HAL_RCC_OscConfig+0x274>)
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526c:	f7fe ff3e 	bl	80040ec <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005274:	f7fe ff3a 	bl	80040ec <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e160      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005286:	4b0d      	ldr	r3, [pc, #52]	@ (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005292:	2001      	movs	r0, #1
 8005294:	f000 face 	bl	8005834 <RCC_Delay>
 8005298:	e01c      	b.n	80052d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529a:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <HAL_RCC_OscConfig+0x274>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a0:	f7fe ff24 	bl	80040ec <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a6:	e00f      	b.n	80052c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fe ff20 	bl	80040ec <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d908      	bls.n	80052c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e146      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000
 80052c0:	42420000 	.word	0x42420000
 80052c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	4b92      	ldr	r3, [pc, #584]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e9      	bne.n	80052a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a6 	beq.w	800542e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e2:	2300      	movs	r3, #0
 80052e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10d      	bne.n	800530e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	4b88      	ldr	r3, [pc, #544]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4a87      	ldr	r2, [pc, #540]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	61d3      	str	r3, [r2, #28]
 80052fe:	4b85      	ldr	r3, [pc, #532]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530a:	2301      	movs	r3, #1
 800530c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530e:	4b82      	ldr	r3, [pc, #520]	@ (8005518 <HAL_RCC_OscConfig+0x4c8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d118      	bne.n	800534c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531a:	4b7f      	ldr	r3, [pc, #508]	@ (8005518 <HAL_RCC_OscConfig+0x4c8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7e      	ldr	r2, [pc, #504]	@ (8005518 <HAL_RCC_OscConfig+0x4c8>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005326:	f7fe fee1 	bl	80040ec <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fe fedd 	bl	80040ec <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	@ 0x64
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e103      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b75      	ldr	r3, [pc, #468]	@ (8005518 <HAL_RCC_OscConfig+0x4c8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d106      	bne.n	8005362 <HAL_RCC_OscConfig+0x312>
 8005354:	4b6f      	ldr	r3, [pc, #444]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	4a6e      	ldr	r2, [pc, #440]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6213      	str	r3, [r2, #32]
 8005360:	e02d      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x334>
 800536a:	4b6a      	ldr	r3, [pc, #424]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a69      	ldr	r2, [pc, #420]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6213      	str	r3, [r2, #32]
 8005376:	4b67      	ldr	r3, [pc, #412]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4a66      	ldr	r2, [pc, #408]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	6213      	str	r3, [r2, #32]
 8005382:	e01c      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d10c      	bne.n	80053a6 <HAL_RCC_OscConfig+0x356>
 800538c:	4b61      	ldr	r3, [pc, #388]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	4a60      	ldr	r2, [pc, #384]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6213      	str	r3, [r2, #32]
 8005398:	4b5e      	ldr	r3, [pc, #376]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	4a5d      	ldr	r2, [pc, #372]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6213      	str	r3, [r2, #32]
 80053a4:	e00b      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 80053a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	4a5a      	ldr	r2, [pc, #360]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6213      	str	r3, [r2, #32]
 80053b2:	4b58      	ldr	r3, [pc, #352]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4a57      	ldr	r2, [pc, #348]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d015      	beq.n	80053f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c6:	f7fe fe91 	bl	80040ec <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fe fe8d 	bl	80040ec <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e0b1      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCC_OscConfig+0x37e>
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f2:	f7fe fe7b 	bl	80040ec <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fe fe77 	bl	80040ec <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e09b      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005410:	4b40      	ldr	r3, [pc, #256]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ee      	bne.n	80053fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b3c      	ldr	r3, [pc, #240]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	4a3b      	ldr	r2, [pc, #236]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800542c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8087 	beq.w	8005546 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005438:	4b36      	ldr	r3, [pc, #216]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b08      	cmp	r3, #8
 8005442:	d061      	beq.n	8005508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d146      	bne.n	80054da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544c:	4b33      	ldr	r3, [pc, #204]	@ (800551c <HAL_RCC_OscConfig+0x4cc>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7fe fe4b 	bl	80040ec <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545a:	f7fe fe47 	bl	80040ec <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e06d      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800546c:	4b29      	ldr	r3, [pc, #164]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005480:	d108      	bne.n	8005494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005482:	4b24      	ldr	r3, [pc, #144]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	4921      	ldr	r1, [pc, #132]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005494:	4b1f      	ldr	r3, [pc, #124]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a19      	ldr	r1, [r3, #32]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	430b      	orrs	r3, r1
 80054a6:	491b      	ldr	r1, [pc, #108]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ac:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <HAL_RCC_OscConfig+0x4cc>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fe fe1b 	bl	80040ec <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fe fe17 	bl	80040ec <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e03d      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x46a>
 80054d8:	e035      	b.n	8005546 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054da:	4b10      	ldr	r3, [pc, #64]	@ (800551c <HAL_RCC_OscConfig+0x4cc>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fe fe04 	bl	80040ec <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fe fe00 	bl	80040ec <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e026      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <HAL_RCC_OscConfig+0x4c4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x498>
 8005506:	e01e      	b.n	8005546 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e019      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
 8005514:	40021000 	.word	0x40021000
 8005518:	40007000 	.word	0x40007000
 800551c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <HAL_RCC_OscConfig+0x500>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	429a      	cmp	r2, r3
 8005532:	d106      	bne.n	8005542 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d001      	beq.n	8005546 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40021000 	.word	0x40021000

08005554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0d0      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005568:	4b6a      	ldr	r3, [pc, #424]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d910      	bls.n	8005598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b67      	ldr	r3, [pc, #412]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 0207 	bic.w	r2, r3, #7
 800557e:	4965      	ldr	r1, [pc, #404]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b63      	ldr	r3, [pc, #396]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0b8      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d020      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b0:	4b59      	ldr	r3, [pc, #356]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a58      	ldr	r2, [pc, #352]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c8:	4b53      	ldr	r3, [pc, #332]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a52      	ldr	r2, [pc, #328]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d4:	4b50      	ldr	r3, [pc, #320]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	494d      	ldr	r1, [pc, #308]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d040      	beq.n	8005674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d107      	bne.n	800560a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	4b47      	ldr	r3, [pc, #284]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d115      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e07f      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005612:	4b41      	ldr	r3, [pc, #260]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e073      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005622:	4b3d      	ldr	r3, [pc, #244]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e06b      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005632:	4b39      	ldr	r3, [pc, #228]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f023 0203 	bic.w	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	4936      	ldr	r1, [pc, #216]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	4313      	orrs	r3, r2
 8005642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005644:	f7fe fd52 	bl	80040ec <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	e00a      	b.n	8005662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564c:	f7fe fd4e 	bl	80040ec <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e053      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	4b2d      	ldr	r3, [pc, #180]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 020c 	and.w	r2, r3, #12
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	429a      	cmp	r2, r3
 8005672:	d1eb      	bne.n	800564c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b27      	ldr	r3, [pc, #156]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d210      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b24      	ldr	r3, [pc, #144]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 0207 	bic.w	r2, r3, #7
 800568a:	4922      	ldr	r1, [pc, #136]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b20      	ldr	r3, [pc, #128]	@ (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e032      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b0:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4916      	ldr	r1, [pc, #88]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ce:	4b12      	ldr	r3, [pc, #72]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	490e      	ldr	r1, [pc, #56]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056e2:	f000 f821 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	490a      	ldr	r1, [pc, #40]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	fa22 f303 	lsr.w	r3, r2, r3
 80056fa:	4a09      	ldr	r2, [pc, #36]	@ (8005720 <HAL_RCC_ClockConfig+0x1cc>)
 80056fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056fe:	4b09      	ldr	r3, [pc, #36]	@ (8005724 <HAL_RCC_ClockConfig+0x1d0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fcb0 	bl	8004068 <HAL_InitTick>

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40022000 	.word	0x40022000
 8005718:	40021000 	.word	0x40021000
 800571c:	0800cf58 	.word	0x0800cf58
 8005720:	20000008 	.word	0x20000008
 8005724:	2000000c 	.word	0x2000000c

08005728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005742:	4b1e      	ldr	r3, [pc, #120]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b04      	cmp	r3, #4
 8005750:	d002      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x30>
 8005752:	2b08      	cmp	r3, #8
 8005754:	d003      	beq.n	800575e <HAL_RCC_GetSysClockFreq+0x36>
 8005756:	e027      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005758:	4b19      	ldr	r3, [pc, #100]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800575a:	613b      	str	r3, [r7, #16]
      break;
 800575c:	e027      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	0c9b      	lsrs	r3, r3, #18
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	4a17      	ldr	r2, [pc, #92]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005768:	5cd3      	ldrb	r3, [r2, r3]
 800576a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005776:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	0c5b      	lsrs	r3, r3, #17
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	4a11      	ldr	r2, [pc, #68]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005782:	5cd3      	ldrb	r3, [r2, r3]
 8005784:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a0d      	ldr	r2, [pc, #52]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800578a:	fb03 f202 	mul.w	r2, r3, r2
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e004      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0c      	ldr	r2, [pc, #48]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	613b      	str	r3, [r7, #16]
      break;
 80057a6:	e002      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80057aa:	613b      	str	r3, [r7, #16]
      break;
 80057ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ae:	693b      	ldr	r3, [r7, #16]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	007a1200 	.word	0x007a1200
 80057c4:	0800cf70 	.word	0x0800cf70
 80057c8:	0800cf80 	.word	0x0800cf80
 80057cc:	003d0900 	.word	0x003d0900

080057d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d4:	4b02      	ldr	r3, [pc, #8]	@ (80057e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80057d6:	681b      	ldr	r3, [r3, #0]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	20000008 	.word	0x20000008

080057e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e8:	f7ff fff2 	bl	80057d0 <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	0a1b      	lsrs	r3, r3, #8
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4903      	ldr	r1, [pc, #12]	@ (8005808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40021000 	.word	0x40021000
 8005808:	0800cf68 	.word	0x0800cf68

0800580c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005810:	f7ff ffde 	bl	80057d0 <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b05      	ldr	r3, [pc, #20]	@ (800582c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	0adb      	lsrs	r3, r3, #11
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4903      	ldr	r1, [pc, #12]	@ (8005830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40021000 	.word	0x40021000
 8005830:	0800cf68 	.word	0x0800cf68

08005834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <RCC_Delay+0x34>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0a      	ldr	r2, [pc, #40]	@ (800586c <RCC_Delay+0x38>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	0a5b      	lsrs	r3, r3, #9
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005850:	bf00      	nop
  }
  while (Delay --);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1e5a      	subs	r2, r3, #1
 8005856:	60fa      	str	r2, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f9      	bne.n	8005850 <RCC_Delay+0x1c>
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr
 8005868:	20000008 	.word	0x20000008
 800586c:	10624dd3 	.word	0x10624dd3

08005870 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d07d      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800588c:	2300      	movs	r3, #0
 800588e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005890:	4b4f      	ldr	r3, [pc, #316]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589c:	4b4c      	ldr	r3, [pc, #304]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4a4b      	ldr	r2, [pc, #300]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	61d3      	str	r3, [r2, #28]
 80058a8:	4b49      	ldr	r3, [pc, #292]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b8:	4b46      	ldr	r3, [pc, #280]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d118      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c4:	4b43      	ldr	r3, [pc, #268]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a42      	ldr	r2, [pc, #264]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d0:	f7fe fc0c 	bl	80040ec <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d6:	e008      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d8:	f7fe fc08 	bl	80040ec <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b64      	cmp	r3, #100	@ 0x64
 80058e4:	d901      	bls.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e06d      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ea:	4b3a      	ldr	r3, [pc, #232]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058f6:	4b36      	ldr	r3, [pc, #216]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d02e      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d027      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005914:	4b2e      	ldr	r3, [pc, #184]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800591e:	4b2e      	ldr	r3, [pc, #184]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005924:	4b2c      	ldr	r3, [pc, #176]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800592a:	4a29      	ldr	r2, [pc, #164]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d014      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593a:	f7fe fbd7 	bl	80040ec <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005940:	e00a      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005942:	f7fe fbd3 	bl	80040ec <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e036      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ee      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005964:	4b1a      	ldr	r3, [pc, #104]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4917      	ldr	r1, [pc, #92]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005972:	4313      	orrs	r3, r2
 8005974:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d105      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597c:	4b14      	ldr	r3, [pc, #80]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	4a13      	ldr	r2, [pc, #76]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005986:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005994:	4b0e      	ldr	r3, [pc, #56]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	490b      	ldr	r1, [pc, #44]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b2:	4b07      	ldr	r3, [pc, #28]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	4904      	ldr	r1, [pc, #16]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	40007000 	.word	0x40007000
 80059d8:	42420440 	.word	0x42420440

080059dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	f200 808a 	bhi.w	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d045      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d075      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005a12:	e082      	b.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005a14:	4b46      	ldr	r3, [pc, #280]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a1a:	4b45      	ldr	r3, [pc, #276]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d07b      	beq.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	0c9b      	lsrs	r3, r3, #18
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	4a41      	ldr	r2, [pc, #260]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a30:	5cd3      	ldrb	r3, [r2, r3]
 8005a32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d015      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	0c5b      	lsrs	r3, r3, #17
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	4a3b      	ldr	r2, [pc, #236]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a4a:	5cd3      	ldrb	r3, [r2, r3]
 8005a4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00d      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a58:	4a38      	ldr	r2, [pc, #224]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e004      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4a34      	ldr	r2, [pc, #208]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a74:	4b2e      	ldr	r3, [pc, #184]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a80:	d102      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	61bb      	str	r3, [r7, #24]
      break;
 8005a86:	e04a      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	61bb      	str	r3, [r7, #24]
      break;
 8005a96:	e042      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005a98:	4b25      	ldr	r3, [pc, #148]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aa8:	d108      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	e01f      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac6:	d109      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ac8:	4b19      	ldr	r3, [pc, #100]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005ad4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	e00f      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae6:	d11c      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d016      	beq.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005af4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005af8:	61bb      	str	r3, [r7, #24]
      break;
 8005afa:	e012      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005afc:	e011      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005afe:	f7ff fe85 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8005b02:	4602      	mov	r2, r0
 8005b04:	4b0a      	ldr	r3, [pc, #40]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	0b9b      	lsrs	r3, r3, #14
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	61bb      	str	r3, [r7, #24]
      break;
 8005b18:	e004      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b22:	bf00      	nop
    }
  }
  return (frequency);
 8005b24:	69bb      	ldr	r3, [r7, #24]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	0800cf84 	.word	0x0800cf84
 8005b38:	0800cf94 	.word	0x0800cf94
 8005b3c:	007a1200 	.word	0x007a1200
 8005b40:	003d0900 	.word	0x003d0900
 8005b44:	aaaaaaab 	.word	0xaaaaaaab

08005b48 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e07a      	b.n	8005c54 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	7c5b      	ldrb	r3, [r3, #17]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fe f8be 	bl	8003cf0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fb2f 	bl	80061de <HAL_RTC_WaitForSynchro>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e061      	b.n	8005c54 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fbe8 	bl	8006366 <RTC_EnterInitMode>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e056      	b.n	8005c54 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0207 	bic.w	r2, r2, #7
 8005bb4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005bbe:	4b27      	ldr	r3, [pc, #156]	@ (8005c5c <HAL_RTC_Init+0x114>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	4a26      	ldr	r2, [pc, #152]	@ (8005c5c <HAL_RTC_Init+0x114>)
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005bca:	4b24      	ldr	r3, [pc, #144]	@ (8005c5c <HAL_RTC_Init+0x114>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4921      	ldr	r1, [pc, #132]	@ (8005c5c <HAL_RTC_Init+0x114>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005be4:	d003      	beq.n	8005bee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e00e      	b.n	8005c0c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f7ff fef4 	bl	80059dc <HAL_RCCEx_GetPeriphCLKFreq>
 8005bf4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e026      	b.n	8005c54 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	0c1a      	lsrs	r2, r3, #16
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f002 020f 	and.w	r2, r2, #15
 8005c18:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	b292      	uxth	r2, r2
 8005c22:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fbc6 	bl	80063b6 <RTC_ExitInitMode>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d004      	beq.n	8005c3a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2204      	movs	r2, #4
 8005c34:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e00c      	b.n	8005c54 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40006c00 	.word	0x40006c00

08005c60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c60:	b590      	push	{r4, r7, lr}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_RTC_SetTime+0x20>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e080      	b.n	8005d86 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	7c1b      	ldrb	r3, [r3, #16]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_RTC_SetTime+0x30>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e07a      	b.n	8005d86 <HAL_RTC_SetTime+0x126>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d113      	bne.n	8005cca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005cac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	1a5b      	subs	r3, r3, r1
 8005cbc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005cbe:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005cc4:	4413      	add	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	e01e      	b.n	8005d08 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fbb6 	bl	8006440 <RTC_Bcd2ToByte>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005cdc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fbab 	bl	8006440 <RTC_Bcd2ToByte>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	4613      	mov	r3, r2
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	1a9b      	subs	r3, r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005cf6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	789b      	ldrb	r3, [r3, #2]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fb9f 	bl	8006440 <RTC_Bcd2ToByte>
 8005d02:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005d04:	4423      	add	r3, r4
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fac4 	bl	8006298 <RTC_WriteTimeCounter>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e02f      	b.n	8005d86 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0205 	bic.w	r2, r2, #5
 8005d34:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fad5 	bl	80062e6 <RTC_ReadAlarmCounter>
 8005d3c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d44:	d018      	beq.n	8005d78 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d214      	bcs.n	8005d78 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005d54:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005d58:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d5a:	6939      	ldr	r1, [r7, #16]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fadb 	bl	8006318 <RTC_WriteAlarmCounter>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e006      	b.n	8005d86 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd90      	pop	{r4, r7, pc}
	...

08005d90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	2300      	movs	r3, #0
 8005daa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_RTC_GetTime+0x28>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0b5      	b.n	8005f28 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0ac      	b.n	8005f28 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fa32 	bl	8006238 <RTC_ReadTimeCounter>
 8005dd4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	4a55      	ldr	r2, [pc, #340]	@ (8005f30 <HAL_RTC_GetTime+0x1a0>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0adb      	lsrs	r3, r3, #11
 8005de0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4b52      	ldr	r3, [pc, #328]	@ (8005f30 <HAL_RTC_GetTime+0x1a0>)
 8005de6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dea:	0adb      	lsrs	r3, r3, #11
 8005dec:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	4a4f      	ldr	r2, [pc, #316]	@ (8005f34 <HAL_RTC_GetTime+0x1a4>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	4a4a      	ldr	r2, [pc, #296]	@ (8005f30 <HAL_RTC_GetTime+0x1a0>)
 8005e08:	fba2 1203 	umull	r1, r2, r2, r3
 8005e0c:	0ad2      	lsrs	r2, r2, #11
 8005e0e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005e12:	fb01 f202 	mul.w	r2, r1, r2
 8005e16:	1a9a      	subs	r2, r3, r2
 8005e18:	4b46      	ldr	r3, [pc, #280]	@ (8005f34 <HAL_RTC_GetTime+0x1a4>)
 8005e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1e:	0959      	lsrs	r1, r3, #5
 8005e20:	460b      	mov	r3, r1
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	1a5b      	subs	r3, r3, r1
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	1ad1      	subs	r1, r2, r3
 8005e2a:	b2ca      	uxtb	r2, r1
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b17      	cmp	r3, #23
 8005e34:	d955      	bls.n	8005ee2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4a3f      	ldr	r2, [pc, #252]	@ (8005f38 <HAL_RTC_GetTime+0x1a8>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005e42:	6939      	ldr	r1, [r7, #16]
 8005e44:	4b3c      	ldr	r3, [pc, #240]	@ (8005f38 <HAL_RTC_GetTime+0x1a8>)
 8005e46:	fba3 2301 	umull	r2, r3, r3, r1
 8005e4a:	091a      	lsrs	r2, r3, #4
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	1aca      	subs	r2, r1, r3
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fa42 	bl	80062e6 <RTC_ReadAlarmCounter>
 8005e62:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e6a:	d008      	beq.n	8005e7e <HAL_RTC_GetTime+0xee>
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d904      	bls.n	8005e7e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e002      	b.n	8005e84 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e82:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4a2d      	ldr	r2, [pc, #180]	@ (8005f3c <HAL_RTC_GetTime+0x1ac>)
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005e92:	69b9      	ldr	r1, [r7, #24]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f9ff 	bl	8006298 <RTC_WriteTimeCounter>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e041      	b.n	8005f28 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fa2e 	bl	8006318 <RTC_WriteAlarmCounter>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e030      	b.n	8005f28 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ec6:	69f9      	ldr	r1, [r7, #28]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fa25 	bl	8006318 <RTC_WriteAlarmCounter>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e027      	b.n	8005f28 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005ed8:	6979      	ldr	r1, [r7, #20]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 facd 	bl	800647a <RTC_DateUpdate>
 8005ee0:	e003      	b.n	8005eea <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01a      	beq.n	8005f26 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fa86 	bl	8006406 <RTC_ByteToBcd2>
 8005efa:	4603      	mov	r3, r0
 8005efc:	461a      	mov	r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fa7d 	bl	8006406 <RTC_ByteToBcd2>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	789b      	ldrb	r3, [r3, #2]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fa74 	bl	8006406 <RTC_ByteToBcd2>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	461a      	mov	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	91a2b3c5 	.word	0x91a2b3c5
 8005f34:	88888889 	.word	0x88888889
 8005f38:	aaaaaaab 	.word	0xaaaaaaab
 8005f3c:	00015180 	.word	0x00015180

08005f40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	2300      	movs	r3, #0
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_RTC_SetDate+0x24>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e097      	b.n	8006098 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	7c1b      	ldrb	r3, [r3, #16]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_RTC_SetDate+0x34>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e091      	b.n	8006098 <HAL_RTC_SetDate+0x158>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	78da      	ldrb	r2, [r3, #3]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	785a      	ldrb	r2, [r3, #1]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	789a      	ldrb	r2, [r3, #2]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	739a      	strb	r2, [r3, #14]
 8005f9e:	e01a      	b.n	8005fd6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	78db      	ldrb	r3, [r3, #3]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fa4b 	bl	8006440 <RTC_Bcd2ToByte>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461a      	mov	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fa42 	bl	8006440 <RTC_Bcd2ToByte>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	789b      	ldrb	r3, [r3, #2]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fa39 	bl	8006440 <RTC_Bcd2ToByte>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	7bdb      	ldrb	r3, [r3, #15]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	7b59      	ldrb	r1, [r3, #13]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	7b9b      	ldrb	r3, [r3, #14]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f000 fb23 	bl	8006630 <RTC_WeekDayNum>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	7b1a      	ldrb	r2, [r3, #12]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f91c 	bl	8006238 <RTC_ReadTimeCounter>
 8006000:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4a26      	ldr	r2, [pc, #152]	@ (80060a0 <HAL_RTC_SetDate+0x160>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	0adb      	lsrs	r3, r3, #11
 800600c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b18      	cmp	r3, #24
 8006012:	d93a      	bls.n	800608a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4a23      	ldr	r2, [pc, #140]	@ (80060a4 <HAL_RTC_SetDate+0x164>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	4a22      	ldr	r2, [pc, #136]	@ (80060a8 <HAL_RTC_SetDate+0x168>)
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f933 	bl	8006298 <RTC_WriteTimeCounter>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2204      	movs	r2, #4
 800603c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e027      	b.n	8006098 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f94c 	bl	80062e6 <RTC_ReadAlarmCounter>
 800604e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006056:	d018      	beq.n	800608a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	429a      	cmp	r2, r3
 800605e:	d214      	bcs.n	800608a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8006066:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800606a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800606c:	69b9      	ldr	r1, [r7, #24]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f952 	bl	8006318 <RTC_WriteAlarmCounter>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2204      	movs	r2, #4
 800607e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e006      	b.n	8006098 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	91a2b3c5 	.word	0x91a2b3c5
 80060a4:	aaaaaaab 	.word	0xaaaaaaab
 80060a8:	00015180 	.word	0x00015180

080060ac <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80060ac:	b590      	push	{r4, r7, lr}
 80060ae:	b089      	sub	sp, #36	@ 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	2100      	movs	r1, #0
 80060c2:	460a      	mov	r2, r1
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	460a      	mov	r2, r1
 80060c8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_RTC_SetAlarm+0x2a>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07d      	b.n	80061d6 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	7c1b      	ldrb	r3, [r3, #16]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_RTC_SetAlarm+0x3a>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e077      	b.n	80061d6 <HAL_RTC_SetAlarm+0x12a>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2202      	movs	r2, #2
 80060f0:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80060f2:	f107 0314 	add.w	r3, r7, #20
 80060f6:	2200      	movs	r2, #0
 80060f8:	4619      	mov	r1, r3
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7ff fe48 	bl	8005d90 <HAL_RTC_GetTime>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e065      	b.n	80061d6 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800610a:	7d3b      	ldrb	r3, [r7, #20]
 800610c:	461a      	mov	r2, r3
 800610e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006112:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8006116:	7d7b      	ldrb	r3, [r7, #21]
 8006118:	4619      	mov	r1, r3
 800611a:	460b      	mov	r3, r1
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	1a5b      	subs	r3, r3, r1
 8006120:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006122:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8006124:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006126:	4413      	add	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d113      	bne.n	8006158 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800613a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	4619      	mov	r1, r3
 8006144:	460b      	mov	r3, r1
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	1a5b      	subs	r3, r3, r1
 800614a:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800614c:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006152:	4413      	add	r3, r2
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	e01e      	b.n	8006196 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f96f 	bl	8006440 <RTC_Bcd2ToByte>
 8006162:	4603      	mov	r3, r0
 8006164:	461a      	mov	r2, r3
 8006166:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800616a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f964 	bl	8006440 <RTC_Bcd2ToByte>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	4613      	mov	r3, r2
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006184:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	789b      	ldrb	r3, [r3, #2]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f958 	bl	8006440 <RTC_Bcd2ToByte>
 8006190:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006192:	4423      	add	r3, r4
 8006194:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	429a      	cmp	r2, r3
 800619c:	d205      	bcs.n	80061aa <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80061a4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80061a8:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80061aa:	69f9      	ldr	r1, [r7, #28]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f8b3 	bl	8006318 <RTC_WriteAlarmCounter>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e006      	b.n	80061d6 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2201      	movs	r2, #1
 80061cc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3724      	adds	r7, #36	@ 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd90      	pop	{r4, r7, pc}

080061de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e01d      	b.n	8006230 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0208 	bic.w	r2, r2, #8
 8006202:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006204:	f7fd ff72 	bl	80040ec <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800620a:	e009      	b.n	8006220 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800620c:	f7fd ff6e 	bl	80040ec <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800621a:	d901      	bls.n	8006220 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e007      	b.n	8006230 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0ee      	beq.n	800620c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	827b      	strh	r3, [r7, #18]
 8006244:	2300      	movs	r3, #0
 8006246:	823b      	strh	r3, [r7, #16]
 8006248:	2300      	movs	r3, #0
 800624a:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006268:	8a7a      	ldrh	r2, [r7, #18]
 800626a:	8a3b      	ldrh	r3, [r7, #16]
 800626c:	429a      	cmp	r2, r3
 800626e:	d008      	beq.n	8006282 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006270:	8a3b      	ldrh	r3, [r7, #16]
 8006272:	041a      	lsls	r2, r3, #16
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	b29b      	uxth	r3, r3
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	e004      	b.n	800628c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006282:	8a7b      	ldrh	r3, [r7, #18]
 8006284:	041a      	lsls	r2, r3, #16
 8006286:	89fb      	ldrh	r3, [r7, #14]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800628c:	697b      	ldr	r3, [r7, #20]
}
 800628e:	4618      	mov	r0, r3
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f85d 	bl	8006366 <RTC_EnterInitMode>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	e011      	b.n	80062dc <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	0c12      	lsrs	r2, r2, #16
 80062c0:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	b292      	uxth	r2, r2
 80062ca:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f872 	bl	80063b6 <RTC_ExitInitMode>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	81fb      	strh	r3, [r7, #14]
 80062f2:	2300      	movs	r3, #0
 80062f4:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006306:	89fb      	ldrh	r3, [r7, #14]
 8006308:	041a      	lsls	r2, r3, #16
 800630a:	89bb      	ldrh	r3, [r7, #12]
 800630c:	4313      	orrs	r3, r2
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f81d 	bl	8006366 <RTC_EnterInitMode>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
 8006336:	e011      	b.n	800635c <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	0c12      	lsrs	r2, r2, #16
 8006340:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	b292      	uxth	r2, r2
 800634a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f832 	bl	80063b6 <RTC_ExitInitMode>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006372:	f7fd febb 	bl	80040ec <HAL_GetTick>
 8006376:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006378:	e009      	b.n	800638e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800637a:	f7fd feb7 	bl	80040ec <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006388:	d901      	bls.n	800638e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e00f      	b.n	80063ae <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0ee      	beq.n	800637a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0210 	orr.w	r2, r2, #16
 80063aa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0210 	bic.w	r2, r2, #16
 80063d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80063d2:	f7fd fe8b 	bl	80040ec <HAL_GetTick>
 80063d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80063d8:	e009      	b.n	80063ee <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80063da:	f7fd fe87 	bl	80040ec <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063e8:	d901      	bls.n	80063ee <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e007      	b.n	80063fe <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ee      	beq.n	80063da <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	4603      	mov	r3, r0
 800640e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006414:	e005      	b.n	8006422 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	3b0a      	subs	r3, #10
 8006420:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	2b09      	cmp	r3, #9
 8006426:	d8f6      	bhi.n	8006416 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	b2da      	uxtb	r2, r3
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	4313      	orrs	r3, r2
 8006434:	b2db      	uxtb	r3, r3
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	b2db      	uxtb	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	b2da      	uxtb	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4413      	add	r3, r2
 800646e:	b2db      	uxtb	r3, r3
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	2300      	movs	r3, #0
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	7bdb      	ldrb	r3, [r3, #15]
 8006498:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7b5b      	ldrb	r3, [r3, #13]
 800649e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7b9b      	ldrb	r3, [r3, #14]
 80064a4:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	e06f      	b.n	800658c <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d011      	beq.n	80064d6 <RTC_DateUpdate+0x5c>
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d00e      	beq.n	80064d6 <RTC_DateUpdate+0x5c>
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d00b      	beq.n	80064d6 <RTC_DateUpdate+0x5c>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b07      	cmp	r3, #7
 80064c2:	d008      	beq.n	80064d6 <RTC_DateUpdate+0x5c>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d005      	beq.n	80064d6 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b0a      	cmp	r3, #10
 80064ce:	d002      	beq.n	80064d6 <RTC_DateUpdate+0x5c>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b0c      	cmp	r3, #12
 80064d4:	d117      	bne.n	8006506 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b1e      	cmp	r3, #30
 80064da:	d803      	bhi.n	80064e4 <RTC_DateUpdate+0x6a>
      {
        day++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3301      	adds	r3, #1
 80064e0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80064e2:	e050      	b.n	8006586 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b0c      	cmp	r3, #12
 80064e8:	d005      	beq.n	80064f6 <RTC_DateUpdate+0x7c>
        {
          month++;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	3301      	adds	r3, #1
 80064ee:	613b      	str	r3, [r7, #16]
          day = 1U;
 80064f0:	2301      	movs	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80064f4:	e047      	b.n	8006586 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80064f6:	2301      	movs	r3, #1
 80064f8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80064fa:	2301      	movs	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
          year++;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	3301      	adds	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006504:	e03f      	b.n	8006586 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d008      	beq.n	800651e <RTC_DateUpdate+0xa4>
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b06      	cmp	r3, #6
 8006510:	d005      	beq.n	800651e <RTC_DateUpdate+0xa4>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b09      	cmp	r3, #9
 8006516:	d002      	beq.n	800651e <RTC_DateUpdate+0xa4>
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b0b      	cmp	r3, #11
 800651c:	d10c      	bne.n	8006538 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b1d      	cmp	r3, #29
 8006522:	d803      	bhi.n	800652c <RTC_DateUpdate+0xb2>
      {
        day++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800652a:	e02c      	b.n	8006586 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	3301      	adds	r3, #1
 8006530:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006532:	2301      	movs	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006536:	e026      	b.n	8006586 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d123      	bne.n	8006586 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b1b      	cmp	r3, #27
 8006542:	d803      	bhi.n	800654c <RTC_DateUpdate+0xd2>
      {
        day++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	e01c      	b.n	8006586 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b1c      	cmp	r3, #28
 8006550:	d111      	bne.n	8006576 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	b29b      	uxth	r3, r3
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f838 	bl	80065cc <RTC_IsLeapYear>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <RTC_DateUpdate+0xf0>
        {
          day++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e00d      	b.n	8006586 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3301      	adds	r3, #1
 800656e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006570:	2301      	movs	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e007      	b.n	8006586 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b1d      	cmp	r3, #29
 800657a:	d104      	bne.n	8006586 <RTC_DateUpdate+0x10c>
      {
        month++;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	3301      	adds	r3, #1
 8006580:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006582:	2301      	movs	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	3301      	adds	r3, #1
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d38b      	bcc.n	80064ac <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	6978      	ldr	r0, [r7, #20]
 80065b8:	f000 f83a 	bl	8006630 <RTC_WeekDayNum>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	731a      	strb	r2, [r3, #12]
}
 80065c4:	bf00      	nop
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e01d      	b.n	8006622 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	4a10      	ldr	r2, [pc, #64]	@ (800662c <RTC_IsLeapYear+0x60>)
 80065ea:	fba2 1203 	umull	r1, r2, r2, r3
 80065ee:	0952      	lsrs	r2, r2, #5
 80065f0:	2164      	movs	r1, #100	@ 0x64
 80065f2:	fb01 f202 	mul.w	r2, r1, r2
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80065fe:	2301      	movs	r3, #1
 8006600:	e00f      	b.n	8006622 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	4a09      	ldr	r2, [pc, #36]	@ (800662c <RTC_IsLeapYear+0x60>)
 8006606:	fba2 1203 	umull	r1, r2, r2, r3
 800660a:	09d2      	lsrs	r2, r2, #7
 800660c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8006610:	fb01 f202 	mul.w	r2, r1, r2
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006620:	2300      	movs	r3, #0
  }
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr
 800662c:	51eb851f 	.word	0x51eb851f

08006630 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
 800663c:	4613      	mov	r3, r2
 800663e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800664e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	2b02      	cmp	r3, #2
 8006654:	d82d      	bhi.n	80066b2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	4613      	mov	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4413      	add	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	4a2c      	ldr	r2, [pc, #176]	@ (8006714 <RTC_WeekDayNum+0xe4>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	085a      	lsrs	r2, r3, #1
 800666a:	78bb      	ldrb	r3, [r7, #2]
 800666c:	441a      	add	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	441a      	add	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	3b01      	subs	r3, #1
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	3b01      	subs	r3, #1
 800667e:	4926      	ldr	r1, [pc, #152]	@ (8006718 <RTC_WeekDayNum+0xe8>)
 8006680:	fba1 1303 	umull	r1, r3, r1, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	1ad2      	subs	r2, r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3b01      	subs	r3, #1
 800668c:	4922      	ldr	r1, [pc, #136]	@ (8006718 <RTC_WeekDayNum+0xe8>)
 800668e:	fba1 1303 	umull	r1, r3, r1, r3
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	4413      	add	r3, r2
 8006696:	1d1a      	adds	r2, r3, #4
 8006698:	4b20      	ldr	r3, [pc, #128]	@ (800671c <RTC_WeekDayNum+0xec>)
 800669a:	fba3 1302 	umull	r1, r3, r3, r2
 800669e:	1ad1      	subs	r1, r2, r3
 80066a0:	0849      	lsrs	r1, r1, #1
 80066a2:	440b      	add	r3, r1
 80066a4:	0899      	lsrs	r1, r3, #2
 80066a6:	460b      	mov	r3, r1
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	1a5b      	subs	r3, r3, r1
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e029      	b.n	8006706 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <RTC_WeekDayNum+0xe4>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	085a      	lsrs	r2, r3, #1
 80066c6:	78bb      	ldrb	r3, [r7, #2]
 80066c8:	441a      	add	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	441a      	add	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	089b      	lsrs	r3, r3, #2
 80066d2:	441a      	add	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4910      	ldr	r1, [pc, #64]	@ (8006718 <RTC_WeekDayNum+0xe8>)
 80066d8:	fba1 1303 	umull	r1, r3, r1, r3
 80066dc:	095b      	lsrs	r3, r3, #5
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	490d      	ldr	r1, [pc, #52]	@ (8006718 <RTC_WeekDayNum+0xe8>)
 80066e4:	fba1 1303 	umull	r1, r3, r1, r3
 80066e8:	09db      	lsrs	r3, r3, #7
 80066ea:	4413      	add	r3, r2
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <RTC_WeekDayNum+0xec>)
 80066f0:	fba3 1302 	umull	r1, r3, r3, r2
 80066f4:	1ad1      	subs	r1, r2, r3
 80066f6:	0849      	lsrs	r1, r1, #1
 80066f8:	440b      	add	r3, r1
 80066fa:	0899      	lsrs	r1, r3, #2
 80066fc:	460b      	mov	r3, r1
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	1a5b      	subs	r3, r3, r1
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	b2db      	uxtb	r3, r3
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr
 8006714:	38e38e39 	.word	0x38e38e39
 8006718:	51eb851f 	.word	0x51eb851f
 800671c:	24924925 	.word	0x24924925

08006720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e076      	b.n	8006820 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d108      	bne.n	800674c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006742:	d009      	beq.n	8006758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	61da      	str	r2, [r3, #28]
 800674a:	e005      	b.n	8006758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fd fae0 	bl	8003d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800678e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067dc:	ea42 0103 	orr.w	r1, r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	0c1a      	lsrs	r2, r3, #16
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f002 0204 	and.w	r2, r2, #4
 80067fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800680e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_SPI_Transmit+0x22>
 8006846:	2302      	movs	r3, #2
 8006848:	e12d      	b.n	8006aa6 <HAL_SPI_Transmit+0x27e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006852:	f7fd fc4b 	bl	80040ec <HAL_GetTick>
 8006856:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d002      	beq.n	800686e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006868:	2302      	movs	r3, #2
 800686a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800686c:	e116      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_SPI_Transmit+0x52>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800687e:	e10d      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2203      	movs	r2, #3
 8006884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068c6:	d10f      	bne.n	80068e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f2:	2b40      	cmp	r3, #64	@ 0x40
 80068f4:	d007      	beq.n	8006906 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800690e:	d14f      	bne.n	80069b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_SPI_Transmit+0xf6>
 8006918:	8afb      	ldrh	r3, [r7, #22]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d142      	bne.n	80069a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692e:	1c9a      	adds	r2, r3, #2
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006942:	e02f      	b.n	80069a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b02      	cmp	r3, #2
 8006950:	d112      	bne.n	8006978 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006976:	e015      	b.n	80069a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006978:	f7fd fbb8 	bl	80040ec <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d803      	bhi.n	8006990 <HAL_SPI_Transmit+0x168>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800698e:	d102      	bne.n	8006996 <HAL_SPI_Transmit+0x16e>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80069a2:	e07b      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ca      	bne.n	8006944 <HAL_SPI_Transmit+0x11c>
 80069ae:	e050      	b.n	8006a52 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <HAL_SPI_Transmit+0x196>
 80069b8:	8afb      	ldrh	r3, [r7, #22]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d144      	bne.n	8006a48 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	7812      	ldrb	r2, [r2, #0]
 80069ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069e4:	e030      	b.n	8006a48 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d113      	bne.n	8006a1c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a1a:	e015      	b.n	8006a48 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1c:	f7fd fb66 	bl	80040ec <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d803      	bhi.n	8006a34 <HAL_SPI_Transmit+0x20c>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a32:	d102      	bne.n	8006a3a <HAL_SPI_Transmit+0x212>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006a46:	e029      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1c9      	bne.n	80069e6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa6e 	bl	8006f38 <SPI_EndRxTxTransaction>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e003      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b08c      	sub	sp, #48	@ 0x30
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006abc:	2301      	movs	r3, #1
 8006abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x26>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e198      	b.n	8006e06 <HAL_SPI_TransmitReceive+0x358>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006adc:	f7fd fb06 	bl	80040ec <HAL_GetTick>
 8006ae0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006af2:	887b      	ldrh	r3, [r7, #2]
 8006af4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006af6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d00f      	beq.n	8006b1e <HAL_SPI_TransmitReceive+0x70>
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b04:	d107      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x68>
 8006b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d003      	beq.n	8006b1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
 8006b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006b1c:	e16d      	b.n	8006dfa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x82>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x82>
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006b36:	e160      	b.n	8006dfa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d003      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2205      	movs	r2, #5
 8006b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	887a      	ldrh	r2, [r7, #2]
 8006b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	887a      	ldrh	r2, [r7, #2]
 8006b62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	887a      	ldrh	r2, [r7, #2]
 8006b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	887a      	ldrh	r2, [r7, #2]
 8006b74:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b40      	cmp	r3, #64	@ 0x40
 8006b8e:	d007      	beq.n	8006ba0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba8:	d17c      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_SPI_TransmitReceive+0x10a>
 8006bb2:	8b7b      	ldrh	r3, [r7, #26]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d16a      	bne.n	8006c8e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	1c9a      	adds	r2, r3, #2
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bdc:	e057      	b.n	8006c8e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d11b      	bne.n	8006c24 <HAL_SPI_TransmitReceive+0x176>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d016      	beq.n	8006c24 <HAL_SPI_TransmitReceive+0x176>
 8006bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d113      	bne.n	8006c24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d119      	bne.n	8006c66 <HAL_SPI_TransmitReceive+0x1b8>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d014      	beq.n	8006c66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	b292      	uxth	r2, r2
 8006c48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4e:	1c9a      	adds	r2, r3, #2
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c62:	2301      	movs	r3, #1
 8006c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c66:	f7fd fa41 	bl	80040ec <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d80b      	bhi.n	8006c8e <HAL_SPI_TransmitReceive+0x1e0>
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c7c:	d007      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006c8c:	e0b5      	b.n	8006dfa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1a2      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x130>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d19d      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x130>
 8006ca2:	e080      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x204>
 8006cac:	8b7b      	ldrh	r3, [r7, #26]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d16f      	bne.n	8006d92 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	7812      	ldrb	r2, [r2, #0]
 8006cbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd8:	e05b      	b.n	8006d92 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d11c      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x274>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d017      	beq.n	8006d22 <HAL_SPI_TransmitReceive+0x274>
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d114      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	7812      	ldrb	r2, [r2, #0]
 8006d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d119      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x2b6>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d014      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d60:	2301      	movs	r3, #1
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d64:	f7fd f9c2 	bl	80040ec <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d803      	bhi.n	8006d7c <HAL_SPI_TransmitReceive+0x2ce>
 8006d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_TransmitReceive+0x2d4>
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d107      	bne.n	8006d92 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006d90:	e033      	b.n	8006dfa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d19e      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x22c>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d199      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f8c4 	bl	8006f38 <SPI_EndRxTxTransaction>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006dc2:	e01a      	b.n	8006dfa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df0:	e003      	b.n	8006dfa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006e02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3730      	adds	r7, #48	@ 0x30
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e1c:	b2db      	uxtb	r3, r3
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	4613      	mov	r3, r2
 8006e36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e38:	f7fd f958 	bl	80040ec <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e48:	f7fd f950 	bl	80040ec <HAL_GetTick>
 8006e4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e4e:	4b39      	ldr	r3, [pc, #228]	@ (8006f34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	015b      	lsls	r3, r3, #5
 8006e54:	0d1b      	lsrs	r3, r3, #20
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	fb02 f303 	mul.w	r3, r2, r3
 8006e5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e5e:	e054      	b.n	8006f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e66:	d050      	beq.n	8006f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e68:	f7fd f940 	bl	80040ec <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d902      	bls.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d13d      	bne.n	8006efa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e96:	d111      	bne.n	8006ebc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea0:	d004      	beq.n	8006eac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eaa:	d107      	bne.n	8006ebc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec4:	d10f      	bne.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e017      	b.n	8006f2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d19b      	bne.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20000008 	.word	0x20000008

08006f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2180      	movs	r1, #128	@ 0x80
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7ff ff6a 	bl	8006e28 <SPI_WaitFlagStateUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e000      	b.n	8006f6c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e041      	b.n	800700a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fc ff16 	bl	8003dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f000 f940 	bl	8007238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d001      	beq.n	800702c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e032      	b.n	8007092 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a18      	ldr	r2, [pc, #96]	@ (800709c <HAL_TIM_Base_Start+0x88>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00e      	beq.n	800705c <HAL_TIM_Base_Start+0x48>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007046:	d009      	beq.n	800705c <HAL_TIM_Base_Start+0x48>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a14      	ldr	r2, [pc, #80]	@ (80070a0 <HAL_TIM_Base_Start+0x8c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <HAL_TIM_Base_Start+0x48>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a13      	ldr	r2, [pc, #76]	@ (80070a4 <HAL_TIM_Base_Start+0x90>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d111      	bne.n	8007080 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b06      	cmp	r3, #6
 800706c:	d010      	beq.n	8007090 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0201 	orr.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707e:	e007      	b.n	8007090 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800

080070a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_TIM_ConfigClockSource+0x1c>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e0b4      	b.n	800722e <HAL_TIM_ConfigClockSource+0x186>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070fc:	d03e      	beq.n	800717c <HAL_TIM_ConfigClockSource+0xd4>
 80070fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007102:	f200 8087 	bhi.w	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800710a:	f000 8086 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x172>
 800710e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007112:	d87f      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007114:	2b70      	cmp	r3, #112	@ 0x70
 8007116:	d01a      	beq.n	800714e <HAL_TIM_ConfigClockSource+0xa6>
 8007118:	2b70      	cmp	r3, #112	@ 0x70
 800711a:	d87b      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 800711c:	2b60      	cmp	r3, #96	@ 0x60
 800711e:	d050      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x11a>
 8007120:	2b60      	cmp	r3, #96	@ 0x60
 8007122:	d877      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007124:	2b50      	cmp	r3, #80	@ 0x50
 8007126:	d03c      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0xfa>
 8007128:	2b50      	cmp	r3, #80	@ 0x50
 800712a:	d873      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 800712c:	2b40      	cmp	r3, #64	@ 0x40
 800712e:	d058      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x13a>
 8007130:	2b40      	cmp	r3, #64	@ 0x40
 8007132:	d86f      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007134:	2b30      	cmp	r3, #48	@ 0x30
 8007136:	d064      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 8007138:	2b30      	cmp	r3, #48	@ 0x30
 800713a:	d86b      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 800713c:	2b20      	cmp	r3, #32
 800713e:	d060      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 8007140:	2b20      	cmp	r3, #32
 8007142:	d867      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007144:	2b00      	cmp	r3, #0
 8007146:	d05c      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 8007148:	2b10      	cmp	r3, #16
 800714a:	d05a      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 800714c:	e062      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800715e:	f000 f944 	bl	80073ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	609a      	str	r2, [r3, #8]
      break;
 800717a:	e04f      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800718c:	f000 f92d 	bl	80073ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800719e:	609a      	str	r2, [r3, #8]
      break;
 80071a0:	e03c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ae:	461a      	mov	r2, r3
 80071b0:	f000 f8a4 	bl	80072fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2150      	movs	r1, #80	@ 0x50
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f8fb 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 80071c0:	e02c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ce:	461a      	mov	r2, r3
 80071d0:	f000 f8c2 	bl	8007358 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2160      	movs	r1, #96	@ 0x60
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f8eb 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 80071e0:	e01c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ee:	461a      	mov	r2, r3
 80071f0:	f000 f884 	bl	80072fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2140      	movs	r1, #64	@ 0x40
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f8db 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8007200:	e00c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f000 f8d2 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8007212:	e003      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	e000      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800721a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a29      	ldr	r2, [pc, #164]	@ (80072f0 <TIM_Base_SetConfig+0xb8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00b      	beq.n	8007268 <TIM_Base_SetConfig+0x30>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007256:	d007      	beq.n	8007268 <TIM_Base_SetConfig+0x30>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a26      	ldr	r2, [pc, #152]	@ (80072f4 <TIM_Base_SetConfig+0xbc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_Base_SetConfig+0x30>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a25      	ldr	r2, [pc, #148]	@ (80072f8 <TIM_Base_SetConfig+0xc0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d108      	bne.n	800727a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800726e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a1c      	ldr	r2, [pc, #112]	@ (80072f0 <TIM_Base_SetConfig+0xb8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00b      	beq.n	800729a <TIM_Base_SetConfig+0x62>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007288:	d007      	beq.n	800729a <TIM_Base_SetConfig+0x62>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a19      	ldr	r2, [pc, #100]	@ (80072f4 <TIM_Base_SetConfig+0xbc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_Base_SetConfig+0x62>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a18      	ldr	r2, [pc, #96]	@ (80072f8 <TIM_Base_SetConfig+0xc0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d108      	bne.n	80072ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a07      	ldr	r2, [pc, #28]	@ (80072f0 <TIM_Base_SetConfig+0xb8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d103      	bne.n	80072e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	615a      	str	r2, [r3, #20]
}
 80072e6:	bf00      	nop
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800

080072fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f023 0201 	bic.w	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f023 030a 	bic.w	r3, r3, #10
 8007338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0210 	bic.w	r2, r3, #16
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	031b      	lsls	r3, r3, #12
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007394:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	621a      	str	r2, [r3, #32]
}
 80073ac:	bf00      	nop
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f043 0307 	orr.w	r3, r3, #7
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
 80073f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007404:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	021a      	lsls	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	431a      	orrs	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4313      	orrs	r3, r2
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	609a      	str	r2, [r3, #8]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e046      	b.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a16      	ldr	r2, [pc, #88]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800748c:	d009      	beq.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a12      	ldr	r2, [pc, #72]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a10      	ldr	r2, [pc, #64]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d10c      	bne.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800

080074e4 <__cvt>:
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ea:	461d      	mov	r5, r3
 80074ec:	bfbb      	ittet	lt
 80074ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80074f2:	461d      	movlt	r5, r3
 80074f4:	2300      	movge	r3, #0
 80074f6:	232d      	movlt	r3, #45	@ 0x2d
 80074f8:	b088      	sub	sp, #32
 80074fa:	4614      	mov	r4, r2
 80074fc:	bfb8      	it	lt
 80074fe:	4614      	movlt	r4, r2
 8007500:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007502:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007504:	7013      	strb	r3, [r2, #0]
 8007506:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007508:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800750c:	f023 0820 	bic.w	r8, r3, #32
 8007510:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007514:	d005      	beq.n	8007522 <__cvt+0x3e>
 8007516:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800751a:	d100      	bne.n	800751e <__cvt+0x3a>
 800751c:	3601      	adds	r6, #1
 800751e:	2302      	movs	r3, #2
 8007520:	e000      	b.n	8007524 <__cvt+0x40>
 8007522:	2303      	movs	r3, #3
 8007524:	aa07      	add	r2, sp, #28
 8007526:	9204      	str	r2, [sp, #16]
 8007528:	aa06      	add	r2, sp, #24
 800752a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800752e:	e9cd 3600 	strd	r3, r6, [sp]
 8007532:	4622      	mov	r2, r4
 8007534:	462b      	mov	r3, r5
 8007536:	f001 f88f 	bl	8008658 <_dtoa_r>
 800753a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800753e:	4607      	mov	r7, r0
 8007540:	d119      	bne.n	8007576 <__cvt+0x92>
 8007542:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007544:	07db      	lsls	r3, r3, #31
 8007546:	d50e      	bpl.n	8007566 <__cvt+0x82>
 8007548:	eb00 0906 	add.w	r9, r0, r6
 800754c:	2200      	movs	r2, #0
 800754e:	2300      	movs	r3, #0
 8007550:	4620      	mov	r0, r4
 8007552:	4629      	mov	r1, r5
 8007554:	f7f9 fa28 	bl	80009a8 <__aeabi_dcmpeq>
 8007558:	b108      	cbz	r0, 800755e <__cvt+0x7a>
 800755a:	f8cd 901c 	str.w	r9, [sp, #28]
 800755e:	2230      	movs	r2, #48	@ 0x30
 8007560:	9b07      	ldr	r3, [sp, #28]
 8007562:	454b      	cmp	r3, r9
 8007564:	d31e      	bcc.n	80075a4 <__cvt+0xc0>
 8007566:	4638      	mov	r0, r7
 8007568:	9b07      	ldr	r3, [sp, #28]
 800756a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800756c:	1bdb      	subs	r3, r3, r7
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	b008      	add	sp, #32
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800757a:	eb00 0906 	add.w	r9, r0, r6
 800757e:	d1e5      	bne.n	800754c <__cvt+0x68>
 8007580:	7803      	ldrb	r3, [r0, #0]
 8007582:	2b30      	cmp	r3, #48	@ 0x30
 8007584:	d10a      	bne.n	800759c <__cvt+0xb8>
 8007586:	2200      	movs	r2, #0
 8007588:	2300      	movs	r3, #0
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f7f9 fa0b 	bl	80009a8 <__aeabi_dcmpeq>
 8007592:	b918      	cbnz	r0, 800759c <__cvt+0xb8>
 8007594:	f1c6 0601 	rsb	r6, r6, #1
 8007598:	f8ca 6000 	str.w	r6, [sl]
 800759c:	f8da 3000 	ldr.w	r3, [sl]
 80075a0:	4499      	add	r9, r3
 80075a2:	e7d3      	b.n	800754c <__cvt+0x68>
 80075a4:	1c59      	adds	r1, r3, #1
 80075a6:	9107      	str	r1, [sp, #28]
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e7d9      	b.n	8007560 <__cvt+0x7c>

080075ac <__exponent>:
 80075ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ae:	2900      	cmp	r1, #0
 80075b0:	bfb6      	itet	lt
 80075b2:	232d      	movlt	r3, #45	@ 0x2d
 80075b4:	232b      	movge	r3, #43	@ 0x2b
 80075b6:	4249      	neglt	r1, r1
 80075b8:	2909      	cmp	r1, #9
 80075ba:	7002      	strb	r2, [r0, #0]
 80075bc:	7043      	strb	r3, [r0, #1]
 80075be:	dd29      	ble.n	8007614 <__exponent+0x68>
 80075c0:	f10d 0307 	add.w	r3, sp, #7
 80075c4:	461d      	mov	r5, r3
 80075c6:	270a      	movs	r7, #10
 80075c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80075cc:	461a      	mov	r2, r3
 80075ce:	fb07 1416 	mls	r4, r7, r6, r1
 80075d2:	3430      	adds	r4, #48	@ 0x30
 80075d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075d8:	460c      	mov	r4, r1
 80075da:	2c63      	cmp	r4, #99	@ 0x63
 80075dc:	4631      	mov	r1, r6
 80075de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80075e2:	dcf1      	bgt.n	80075c8 <__exponent+0x1c>
 80075e4:	3130      	adds	r1, #48	@ 0x30
 80075e6:	1e94      	subs	r4, r2, #2
 80075e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075ec:	4623      	mov	r3, r4
 80075ee:	1c41      	adds	r1, r0, #1
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	d30a      	bcc.n	800760a <__exponent+0x5e>
 80075f4:	f10d 0309 	add.w	r3, sp, #9
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	42ac      	cmp	r4, r5
 80075fc:	bf88      	it	hi
 80075fe:	2300      	movhi	r3, #0
 8007600:	3302      	adds	r3, #2
 8007602:	4403      	add	r3, r0
 8007604:	1a18      	subs	r0, r3, r0
 8007606:	b003      	add	sp, #12
 8007608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800760a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800760e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007612:	e7ed      	b.n	80075f0 <__exponent+0x44>
 8007614:	2330      	movs	r3, #48	@ 0x30
 8007616:	3130      	adds	r1, #48	@ 0x30
 8007618:	7083      	strb	r3, [r0, #2]
 800761a:	70c1      	strb	r1, [r0, #3]
 800761c:	1d03      	adds	r3, r0, #4
 800761e:	e7f1      	b.n	8007604 <__exponent+0x58>

08007620 <_printf_float>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	b091      	sub	sp, #68	@ 0x44
 8007626:	460c      	mov	r4, r1
 8007628:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800762c:	4616      	mov	r6, r2
 800762e:	461f      	mov	r7, r3
 8007630:	4605      	mov	r5, r0
 8007632:	f000 fef1 	bl	8008418 <_localeconv_r>
 8007636:	6803      	ldr	r3, [r0, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	9308      	str	r3, [sp, #32]
 800763c:	f7f8 fd88 	bl	8000150 <strlen>
 8007640:	2300      	movs	r3, #0
 8007642:	930e      	str	r3, [sp, #56]	@ 0x38
 8007644:	f8d8 3000 	ldr.w	r3, [r8]
 8007648:	9009      	str	r0, [sp, #36]	@ 0x24
 800764a:	3307      	adds	r3, #7
 800764c:	f023 0307 	bic.w	r3, r3, #7
 8007650:	f103 0208 	add.w	r2, r3, #8
 8007654:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007658:	f8d4 b000 	ldr.w	fp, [r4]
 800765c:	f8c8 2000 	str.w	r2, [r8]
 8007660:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007664:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007668:	930b      	str	r3, [sp, #44]	@ 0x2c
 800766a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800766e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007672:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007676:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800767a:	4b9c      	ldr	r3, [pc, #624]	@ (80078ec <_printf_float+0x2cc>)
 800767c:	f7f9 f9c6 	bl	8000a0c <__aeabi_dcmpun>
 8007680:	bb70      	cbnz	r0, 80076e0 <_printf_float+0xc0>
 8007682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007686:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800768a:	4b98      	ldr	r3, [pc, #608]	@ (80078ec <_printf_float+0x2cc>)
 800768c:	f7f9 f9a0 	bl	80009d0 <__aeabi_dcmple>
 8007690:	bb30      	cbnz	r0, 80076e0 <_printf_float+0xc0>
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	4640      	mov	r0, r8
 8007698:	4649      	mov	r1, r9
 800769a:	f7f9 f98f 	bl	80009bc <__aeabi_dcmplt>
 800769e:	b110      	cbz	r0, 80076a6 <_printf_float+0x86>
 80076a0:	232d      	movs	r3, #45	@ 0x2d
 80076a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a6:	4a92      	ldr	r2, [pc, #584]	@ (80078f0 <_printf_float+0x2d0>)
 80076a8:	4b92      	ldr	r3, [pc, #584]	@ (80078f4 <_printf_float+0x2d4>)
 80076aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076ae:	bf94      	ite	ls
 80076b0:	4690      	movls	r8, r2
 80076b2:	4698      	movhi	r8, r3
 80076b4:	2303      	movs	r3, #3
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	f02b 0304 	bic.w	r3, fp, #4
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	4633      	mov	r3, r6
 80076c4:	4621      	mov	r1, r4
 80076c6:	4628      	mov	r0, r5
 80076c8:	9700      	str	r7, [sp, #0]
 80076ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80076cc:	f000 f9d4 	bl	8007a78 <_printf_common>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f040 8090 	bne.w	80077f6 <_printf_float+0x1d6>
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076da:	b011      	add	sp, #68	@ 0x44
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	4640      	mov	r0, r8
 80076e6:	4649      	mov	r1, r9
 80076e8:	f7f9 f990 	bl	8000a0c <__aeabi_dcmpun>
 80076ec:	b148      	cbz	r0, 8007702 <_printf_float+0xe2>
 80076ee:	464b      	mov	r3, r9
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bfb8      	it	lt
 80076f4:	232d      	movlt	r3, #45	@ 0x2d
 80076f6:	4a80      	ldr	r2, [pc, #512]	@ (80078f8 <_printf_float+0x2d8>)
 80076f8:	bfb8      	it	lt
 80076fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076fe:	4b7f      	ldr	r3, [pc, #508]	@ (80078fc <_printf_float+0x2dc>)
 8007700:	e7d3      	b.n	80076aa <_printf_float+0x8a>
 8007702:	6863      	ldr	r3, [r4, #4]
 8007704:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	d13f      	bne.n	800778c <_printf_float+0x16c>
 800770c:	2306      	movs	r3, #6
 800770e:	6063      	str	r3, [r4, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	9206      	str	r2, [sp, #24]
 800771a:	aa0e      	add	r2, sp, #56	@ 0x38
 800771c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007720:	aa0d      	add	r2, sp, #52	@ 0x34
 8007722:	9203      	str	r2, [sp, #12]
 8007724:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007728:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800772c:	6863      	ldr	r3, [r4, #4]
 800772e:	4642      	mov	r2, r8
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	4628      	mov	r0, r5
 8007734:	464b      	mov	r3, r9
 8007736:	910a      	str	r1, [sp, #40]	@ 0x28
 8007738:	f7ff fed4 	bl	80074e4 <__cvt>
 800773c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800773e:	4680      	mov	r8, r0
 8007740:	2947      	cmp	r1, #71	@ 0x47
 8007742:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007744:	d128      	bne.n	8007798 <_printf_float+0x178>
 8007746:	1cc8      	adds	r0, r1, #3
 8007748:	db02      	blt.n	8007750 <_printf_float+0x130>
 800774a:	6863      	ldr	r3, [r4, #4]
 800774c:	4299      	cmp	r1, r3
 800774e:	dd40      	ble.n	80077d2 <_printf_float+0x1b2>
 8007750:	f1aa 0a02 	sub.w	sl, sl, #2
 8007754:	fa5f fa8a 	uxtb.w	sl, sl
 8007758:	4652      	mov	r2, sl
 800775a:	3901      	subs	r1, #1
 800775c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007760:	910d      	str	r1, [sp, #52]	@ 0x34
 8007762:	f7ff ff23 	bl	80075ac <__exponent>
 8007766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007768:	4681      	mov	r9, r0
 800776a:	1813      	adds	r3, r2, r0
 800776c:	2a01      	cmp	r2, #1
 800776e:	6123      	str	r3, [r4, #16]
 8007770:	dc02      	bgt.n	8007778 <_printf_float+0x158>
 8007772:	6822      	ldr	r2, [r4, #0]
 8007774:	07d2      	lsls	r2, r2, #31
 8007776:	d501      	bpl.n	800777c <_printf_float+0x15c>
 8007778:	3301      	adds	r3, #1
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007780:	2b00      	cmp	r3, #0
 8007782:	d09e      	beq.n	80076c2 <_printf_float+0xa2>
 8007784:	232d      	movs	r3, #45	@ 0x2d
 8007786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800778a:	e79a      	b.n	80076c2 <_printf_float+0xa2>
 800778c:	2947      	cmp	r1, #71	@ 0x47
 800778e:	d1bf      	bne.n	8007710 <_printf_float+0xf0>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1bd      	bne.n	8007710 <_printf_float+0xf0>
 8007794:	2301      	movs	r3, #1
 8007796:	e7ba      	b.n	800770e <_printf_float+0xee>
 8007798:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800779c:	d9dc      	bls.n	8007758 <_printf_float+0x138>
 800779e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80077a2:	d118      	bne.n	80077d6 <_printf_float+0x1b6>
 80077a4:	2900      	cmp	r1, #0
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	dd0b      	ble.n	80077c2 <_printf_float+0x1a2>
 80077aa:	6121      	str	r1, [r4, #16]
 80077ac:	b913      	cbnz	r3, 80077b4 <_printf_float+0x194>
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	07d0      	lsls	r0, r2, #31
 80077b2:	d502      	bpl.n	80077ba <_printf_float+0x19a>
 80077b4:	3301      	adds	r3, #1
 80077b6:	440b      	add	r3, r1
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	f04f 0900 	mov.w	r9, #0
 80077be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077c0:	e7dc      	b.n	800777c <_printf_float+0x15c>
 80077c2:	b913      	cbnz	r3, 80077ca <_printf_float+0x1aa>
 80077c4:	6822      	ldr	r2, [r4, #0]
 80077c6:	07d2      	lsls	r2, r2, #31
 80077c8:	d501      	bpl.n	80077ce <_printf_float+0x1ae>
 80077ca:	3302      	adds	r3, #2
 80077cc:	e7f4      	b.n	80077b8 <_printf_float+0x198>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e7f2      	b.n	80077b8 <_printf_float+0x198>
 80077d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077d8:	4299      	cmp	r1, r3
 80077da:	db05      	blt.n	80077e8 <_printf_float+0x1c8>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	6121      	str	r1, [r4, #16]
 80077e0:	07d8      	lsls	r0, r3, #31
 80077e2:	d5ea      	bpl.n	80077ba <_printf_float+0x19a>
 80077e4:	1c4b      	adds	r3, r1, #1
 80077e6:	e7e7      	b.n	80077b8 <_printf_float+0x198>
 80077e8:	2900      	cmp	r1, #0
 80077ea:	bfcc      	ite	gt
 80077ec:	2201      	movgt	r2, #1
 80077ee:	f1c1 0202 	rsble	r2, r1, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	e7e0      	b.n	80077b8 <_printf_float+0x198>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	055a      	lsls	r2, r3, #21
 80077fa:	d407      	bmi.n	800780c <_printf_float+0x1ec>
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	4642      	mov	r2, r8
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	d12b      	bne.n	8007862 <_printf_float+0x242>
 800780a:	e764      	b.n	80076d6 <_printf_float+0xb6>
 800780c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007810:	f240 80dc 	bls.w	80079cc <_printf_float+0x3ac>
 8007814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007818:	2200      	movs	r2, #0
 800781a:	2300      	movs	r3, #0
 800781c:	f7f9 f8c4 	bl	80009a8 <__aeabi_dcmpeq>
 8007820:	2800      	cmp	r0, #0
 8007822:	d033      	beq.n	800788c <_printf_float+0x26c>
 8007824:	2301      	movs	r3, #1
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	4a35      	ldr	r2, [pc, #212]	@ (8007900 <_printf_float+0x2e0>)
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f af51 	beq.w	80076d6 <_printf_float+0xb6>
 8007834:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007838:	4543      	cmp	r3, r8
 800783a:	db02      	blt.n	8007842 <_printf_float+0x222>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07d8      	lsls	r0, r3, #31
 8007840:	d50f      	bpl.n	8007862 <_printf_float+0x242>
 8007842:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007846:	4631      	mov	r1, r6
 8007848:	4628      	mov	r0, r5
 800784a:	47b8      	blx	r7
 800784c:	3001      	adds	r0, #1
 800784e:	f43f af42 	beq.w	80076d6 <_printf_float+0xb6>
 8007852:	f04f 0900 	mov.w	r9, #0
 8007856:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800785a:	f104 0a1a 	add.w	sl, r4, #26
 800785e:	45c8      	cmp	r8, r9
 8007860:	dc09      	bgt.n	8007876 <_printf_float+0x256>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	079b      	lsls	r3, r3, #30
 8007866:	f100 8102 	bmi.w	8007a6e <_printf_float+0x44e>
 800786a:	68e0      	ldr	r0, [r4, #12]
 800786c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786e:	4298      	cmp	r0, r3
 8007870:	bfb8      	it	lt
 8007872:	4618      	movlt	r0, r3
 8007874:	e731      	b.n	80076da <_printf_float+0xba>
 8007876:	2301      	movs	r3, #1
 8007878:	4652      	mov	r2, sl
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f af28 	beq.w	80076d6 <_printf_float+0xb6>
 8007886:	f109 0901 	add.w	r9, r9, #1
 800788a:	e7e8      	b.n	800785e <_printf_float+0x23e>
 800788c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800788e:	2b00      	cmp	r3, #0
 8007890:	dc38      	bgt.n	8007904 <_printf_float+0x2e4>
 8007892:	2301      	movs	r3, #1
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	4a19      	ldr	r2, [pc, #100]	@ (8007900 <_printf_float+0x2e0>)
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	f43f af1a 	beq.w	80076d6 <_printf_float+0xb6>
 80078a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80078a6:	ea59 0303 	orrs.w	r3, r9, r3
 80078aa:	d102      	bne.n	80078b2 <_printf_float+0x292>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	d5d7      	bpl.n	8007862 <_printf_float+0x242>
 80078b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f af0a 	beq.w	80076d6 <_printf_float+0xb6>
 80078c2:	f04f 0a00 	mov.w	sl, #0
 80078c6:	f104 0b1a 	add.w	fp, r4, #26
 80078ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078cc:	425b      	negs	r3, r3
 80078ce:	4553      	cmp	r3, sl
 80078d0:	dc01      	bgt.n	80078d6 <_printf_float+0x2b6>
 80078d2:	464b      	mov	r3, r9
 80078d4:	e793      	b.n	80077fe <_printf_float+0x1de>
 80078d6:	2301      	movs	r3, #1
 80078d8:	465a      	mov	r2, fp
 80078da:	4631      	mov	r1, r6
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	f43f aef8 	beq.w	80076d6 <_printf_float+0xb6>
 80078e6:	f10a 0a01 	add.w	sl, sl, #1
 80078ea:	e7ee      	b.n	80078ca <_printf_float+0x2aa>
 80078ec:	7fefffff 	.word	0x7fefffff
 80078f0:	0800cf96 	.word	0x0800cf96
 80078f4:	0800cf9a 	.word	0x0800cf9a
 80078f8:	0800cf9e 	.word	0x0800cf9e
 80078fc:	0800cfa2 	.word	0x0800cfa2
 8007900:	0800cfa6 	.word	0x0800cfa6
 8007904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007906:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800790a:	4553      	cmp	r3, sl
 800790c:	bfa8      	it	ge
 800790e:	4653      	movge	r3, sl
 8007910:	2b00      	cmp	r3, #0
 8007912:	4699      	mov	r9, r3
 8007914:	dc36      	bgt.n	8007984 <_printf_float+0x364>
 8007916:	f04f 0b00 	mov.w	fp, #0
 800791a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800791e:	f104 021a 	add.w	r2, r4, #26
 8007922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007924:	930a      	str	r3, [sp, #40]	@ 0x28
 8007926:	eba3 0309 	sub.w	r3, r3, r9
 800792a:	455b      	cmp	r3, fp
 800792c:	dc31      	bgt.n	8007992 <_printf_float+0x372>
 800792e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007930:	459a      	cmp	sl, r3
 8007932:	dc3a      	bgt.n	80079aa <_printf_float+0x38a>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	07da      	lsls	r2, r3, #31
 8007938:	d437      	bmi.n	80079aa <_printf_float+0x38a>
 800793a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800793c:	ebaa 0903 	sub.w	r9, sl, r3
 8007940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007942:	ebaa 0303 	sub.w	r3, sl, r3
 8007946:	4599      	cmp	r9, r3
 8007948:	bfa8      	it	ge
 800794a:	4699      	movge	r9, r3
 800794c:	f1b9 0f00 	cmp.w	r9, #0
 8007950:	dc33      	bgt.n	80079ba <_printf_float+0x39a>
 8007952:	f04f 0800 	mov.w	r8, #0
 8007956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800795a:	f104 0b1a 	add.w	fp, r4, #26
 800795e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007960:	ebaa 0303 	sub.w	r3, sl, r3
 8007964:	eba3 0309 	sub.w	r3, r3, r9
 8007968:	4543      	cmp	r3, r8
 800796a:	f77f af7a 	ble.w	8007862 <_printf_float+0x242>
 800796e:	2301      	movs	r3, #1
 8007970:	465a      	mov	r2, fp
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f aeac 	beq.w	80076d6 <_printf_float+0xb6>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	e7ec      	b.n	800795e <_printf_float+0x33e>
 8007984:	4642      	mov	r2, r8
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	d1c2      	bne.n	8007916 <_printf_float+0x2f6>
 8007990:	e6a1      	b.n	80076d6 <_printf_float+0xb6>
 8007992:	2301      	movs	r3, #1
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	920a      	str	r2, [sp, #40]	@ 0x28
 800799a:	47b8      	blx	r7
 800799c:	3001      	adds	r0, #1
 800799e:	f43f ae9a 	beq.w	80076d6 <_printf_float+0xb6>
 80079a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079a4:	f10b 0b01 	add.w	fp, fp, #1
 80079a8:	e7bb      	b.n	8007922 <_printf_float+0x302>
 80079aa:	4631      	mov	r1, r6
 80079ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b8      	blx	r7
 80079b4:	3001      	adds	r0, #1
 80079b6:	d1c0      	bne.n	800793a <_printf_float+0x31a>
 80079b8:	e68d      	b.n	80076d6 <_printf_float+0xb6>
 80079ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079bc:	464b      	mov	r3, r9
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	4442      	add	r2, r8
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	d1c3      	bne.n	8007952 <_printf_float+0x332>
 80079ca:	e684      	b.n	80076d6 <_printf_float+0xb6>
 80079cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80079d0:	f1ba 0f01 	cmp.w	sl, #1
 80079d4:	dc01      	bgt.n	80079da <_printf_float+0x3ba>
 80079d6:	07db      	lsls	r3, r3, #31
 80079d8:	d536      	bpl.n	8007a48 <_printf_float+0x428>
 80079da:	2301      	movs	r3, #1
 80079dc:	4642      	mov	r2, r8
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b8      	blx	r7
 80079e4:	3001      	adds	r0, #1
 80079e6:	f43f ae76 	beq.w	80076d6 <_printf_float+0xb6>
 80079ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f ae6e 	beq.w	80076d6 <_printf_float+0xb6>
 80079fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007a06:	f7f8 ffcf 	bl	80009a8 <__aeabi_dcmpeq>
 8007a0a:	b9c0      	cbnz	r0, 8007a3e <_printf_float+0x41e>
 8007a0c:	4653      	mov	r3, sl
 8007a0e:	f108 0201 	add.w	r2, r8, #1
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d10c      	bne.n	8007a36 <_printf_float+0x416>
 8007a1c:	e65b      	b.n	80076d6 <_printf_float+0xb6>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	465a      	mov	r2, fp
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f43f ae54 	beq.w	80076d6 <_printf_float+0xb6>
 8007a2e:	f108 0801 	add.w	r8, r8, #1
 8007a32:	45d0      	cmp	r8, sl
 8007a34:	dbf3      	blt.n	8007a1e <_printf_float+0x3fe>
 8007a36:	464b      	mov	r3, r9
 8007a38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a3c:	e6e0      	b.n	8007800 <_printf_float+0x1e0>
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	f104 0b1a 	add.w	fp, r4, #26
 8007a46:	e7f4      	b.n	8007a32 <_printf_float+0x412>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4642      	mov	r2, r8
 8007a4c:	e7e1      	b.n	8007a12 <_printf_float+0x3f2>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	464a      	mov	r2, r9
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f43f ae3c 	beq.w	80076d6 <_printf_float+0xb6>
 8007a5e:	f108 0801 	add.w	r8, r8, #1
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a66:	1a5b      	subs	r3, r3, r1
 8007a68:	4543      	cmp	r3, r8
 8007a6a:	dcf0      	bgt.n	8007a4e <_printf_float+0x42e>
 8007a6c:	e6fd      	b.n	800786a <_printf_float+0x24a>
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	f104 0919 	add.w	r9, r4, #25
 8007a76:	e7f4      	b.n	8007a62 <_printf_float+0x442>

08007a78 <_printf_common>:
 8007a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	4698      	mov	r8, r3
 8007a80:	688a      	ldr	r2, [r1, #8]
 8007a82:	690b      	ldr	r3, [r1, #16]
 8007a84:	4607      	mov	r7, r0
 8007a86:	4293      	cmp	r3, r2
 8007a88:	bfb8      	it	lt
 8007a8a:	4613      	movlt	r3, r2
 8007a8c:	6033      	str	r3, [r6, #0]
 8007a8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a92:	460c      	mov	r4, r1
 8007a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a98:	b10a      	cbz	r2, 8007a9e <_printf_common+0x26>
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	6033      	str	r3, [r6, #0]
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	0699      	lsls	r1, r3, #26
 8007aa2:	bf42      	ittt	mi
 8007aa4:	6833      	ldrmi	r3, [r6, #0]
 8007aa6:	3302      	addmi	r3, #2
 8007aa8:	6033      	strmi	r3, [r6, #0]
 8007aaa:	6825      	ldr	r5, [r4, #0]
 8007aac:	f015 0506 	ands.w	r5, r5, #6
 8007ab0:	d106      	bne.n	8007ac0 <_printf_common+0x48>
 8007ab2:	f104 0a19 	add.w	sl, r4, #25
 8007ab6:	68e3      	ldr	r3, [r4, #12]
 8007ab8:	6832      	ldr	r2, [r6, #0]
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	42ab      	cmp	r3, r5
 8007abe:	dc2b      	bgt.n	8007b18 <_printf_common+0xa0>
 8007ac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	3b00      	subs	r3, #0
 8007ac8:	bf18      	it	ne
 8007aca:	2301      	movne	r3, #1
 8007acc:	0692      	lsls	r2, r2, #26
 8007ace:	d430      	bmi.n	8007b32 <_printf_common+0xba>
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ad8:	47c8      	blx	r9
 8007ada:	3001      	adds	r0, #1
 8007adc:	d023      	beq.n	8007b26 <_printf_common+0xae>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	6922      	ldr	r2, [r4, #16]
 8007ae2:	f003 0306 	and.w	r3, r3, #6
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	bf14      	ite	ne
 8007aea:	2500      	movne	r5, #0
 8007aec:	6833      	ldreq	r3, [r6, #0]
 8007aee:	f04f 0600 	mov.w	r6, #0
 8007af2:	bf08      	it	eq
 8007af4:	68e5      	ldreq	r5, [r4, #12]
 8007af6:	f104 041a 	add.w	r4, r4, #26
 8007afa:	bf08      	it	eq
 8007afc:	1aed      	subeq	r5, r5, r3
 8007afe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b02:	bf08      	it	eq
 8007b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	bfc4      	itt	gt
 8007b0c:	1a9b      	subgt	r3, r3, r2
 8007b0e:	18ed      	addgt	r5, r5, r3
 8007b10:	42b5      	cmp	r5, r6
 8007b12:	d11a      	bne.n	8007b4a <_printf_common+0xd2>
 8007b14:	2000      	movs	r0, #0
 8007b16:	e008      	b.n	8007b2a <_printf_common+0xb2>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4652      	mov	r2, sl
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	4638      	mov	r0, r7
 8007b20:	47c8      	blx	r9
 8007b22:	3001      	adds	r0, #1
 8007b24:	d103      	bne.n	8007b2e <_printf_common+0xb6>
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2e:	3501      	adds	r5, #1
 8007b30:	e7c1      	b.n	8007ab6 <_printf_common+0x3e>
 8007b32:	2030      	movs	r0, #48	@ 0x30
 8007b34:	18e1      	adds	r1, r4, r3
 8007b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b40:	4422      	add	r2, r4
 8007b42:	3302      	adds	r3, #2
 8007b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b48:	e7c2      	b.n	8007ad0 <_printf_common+0x58>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	4641      	mov	r1, r8
 8007b50:	4638      	mov	r0, r7
 8007b52:	47c8      	blx	r9
 8007b54:	3001      	adds	r0, #1
 8007b56:	d0e6      	beq.n	8007b26 <_printf_common+0xae>
 8007b58:	3601      	adds	r6, #1
 8007b5a:	e7d9      	b.n	8007b10 <_printf_common+0x98>

08007b5c <_printf_i>:
 8007b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	7e0f      	ldrb	r7, [r1, #24]
 8007b62:	4691      	mov	r9, r2
 8007b64:	2f78      	cmp	r7, #120	@ 0x78
 8007b66:	4680      	mov	r8, r0
 8007b68:	460c      	mov	r4, r1
 8007b6a:	469a      	mov	sl, r3
 8007b6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b72:	d807      	bhi.n	8007b84 <_printf_i+0x28>
 8007b74:	2f62      	cmp	r7, #98	@ 0x62
 8007b76:	d80a      	bhi.n	8007b8e <_printf_i+0x32>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	f000 80d3 	beq.w	8007d24 <_printf_i+0x1c8>
 8007b7e:	2f58      	cmp	r7, #88	@ 0x58
 8007b80:	f000 80ba 	beq.w	8007cf8 <_printf_i+0x19c>
 8007b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b8c:	e03a      	b.n	8007c04 <_printf_i+0xa8>
 8007b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b92:	2b15      	cmp	r3, #21
 8007b94:	d8f6      	bhi.n	8007b84 <_printf_i+0x28>
 8007b96:	a101      	add	r1, pc, #4	@ (adr r1, 8007b9c <_printf_i+0x40>)
 8007b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007b85 	.word	0x08007b85
 8007ba8:	08007b85 	.word	0x08007b85
 8007bac:	08007b85 	.word	0x08007b85
 8007bb0:	08007b85 	.word	0x08007b85
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b85 	.word	0x08007b85
 8007bbc:	08007b85 	.word	0x08007b85
 8007bc0:	08007b85 	.word	0x08007b85
 8007bc4:	08007b85 	.word	0x08007b85
 8007bc8:	08007d0b 	.word	0x08007d0b
 8007bcc:	08007c33 	.word	0x08007c33
 8007bd0:	08007cc5 	.word	0x08007cc5
 8007bd4:	08007b85 	.word	0x08007b85
 8007bd8:	08007b85 	.word	0x08007b85
 8007bdc:	08007d2d 	.word	0x08007d2d
 8007be0:	08007b85 	.word	0x08007b85
 8007be4:	08007c33 	.word	0x08007c33
 8007be8:	08007b85 	.word	0x08007b85
 8007bec:	08007b85 	.word	0x08007b85
 8007bf0:	08007ccd 	.word	0x08007ccd
 8007bf4:	6833      	ldr	r3, [r6, #0]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6032      	str	r2, [r6, #0]
 8007bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c04:	2301      	movs	r3, #1
 8007c06:	e09e      	b.n	8007d46 <_printf_i+0x1ea>
 8007c08:	6833      	ldr	r3, [r6, #0]
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	1d19      	adds	r1, r3, #4
 8007c0e:	6031      	str	r1, [r6, #0]
 8007c10:	0606      	lsls	r6, r0, #24
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0xbc>
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	e003      	b.n	8007c20 <_printf_i+0xc4>
 8007c18:	0645      	lsls	r5, r0, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0xb8>
 8007c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	da03      	bge.n	8007c2c <_printf_i+0xd0>
 8007c24:	232d      	movs	r3, #45	@ 0x2d
 8007c26:	426d      	negs	r5, r5
 8007c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c2c:	230a      	movs	r3, #10
 8007c2e:	4859      	ldr	r0, [pc, #356]	@ (8007d94 <_printf_i+0x238>)
 8007c30:	e011      	b.n	8007c56 <_printf_i+0xfa>
 8007c32:	6821      	ldr	r1, [r4, #0]
 8007c34:	6833      	ldr	r3, [r6, #0]
 8007c36:	0608      	lsls	r0, r1, #24
 8007c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c3c:	d402      	bmi.n	8007c44 <_printf_i+0xe8>
 8007c3e:	0649      	lsls	r1, r1, #25
 8007c40:	bf48      	it	mi
 8007c42:	b2ad      	uxthmi	r5, r5
 8007c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c46:	6033      	str	r3, [r6, #0]
 8007c48:	bf14      	ite	ne
 8007c4a:	230a      	movne	r3, #10
 8007c4c:	2308      	moveq	r3, #8
 8007c4e:	4851      	ldr	r0, [pc, #324]	@ (8007d94 <_printf_i+0x238>)
 8007c50:	2100      	movs	r1, #0
 8007c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c56:	6866      	ldr	r6, [r4, #4]
 8007c58:	2e00      	cmp	r6, #0
 8007c5a:	bfa8      	it	ge
 8007c5c:	6821      	ldrge	r1, [r4, #0]
 8007c5e:	60a6      	str	r6, [r4, #8]
 8007c60:	bfa4      	itt	ge
 8007c62:	f021 0104 	bicge.w	r1, r1, #4
 8007c66:	6021      	strge	r1, [r4, #0]
 8007c68:	b90d      	cbnz	r5, 8007c6e <_printf_i+0x112>
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	d04b      	beq.n	8007d06 <_printf_i+0x1aa>
 8007c6e:	4616      	mov	r6, r2
 8007c70:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c74:	fb03 5711 	mls	r7, r3, r1, r5
 8007c78:	5dc7      	ldrb	r7, [r0, r7]
 8007c7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c7e:	462f      	mov	r7, r5
 8007c80:	42bb      	cmp	r3, r7
 8007c82:	460d      	mov	r5, r1
 8007c84:	d9f4      	bls.n	8007c70 <_printf_i+0x114>
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d10b      	bne.n	8007ca2 <_printf_i+0x146>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	07df      	lsls	r7, r3, #31
 8007c8e:	d508      	bpl.n	8007ca2 <_printf_i+0x146>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	6861      	ldr	r1, [r4, #4]
 8007c94:	4299      	cmp	r1, r3
 8007c96:	bfde      	ittt	le
 8007c98:	2330      	movle	r3, #48	@ 0x30
 8007c9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c9e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ca2:	1b92      	subs	r2, r2, r6
 8007ca4:	6122      	str	r2, [r4, #16]
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4640      	mov	r0, r8
 8007cac:	f8cd a000 	str.w	sl, [sp]
 8007cb0:	aa03      	add	r2, sp, #12
 8007cb2:	f7ff fee1 	bl	8007a78 <_printf_common>
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d14a      	bne.n	8007d50 <_printf_i+0x1f4>
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cbe:	b004      	add	sp, #16
 8007cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	f043 0320 	orr.w	r3, r3, #32
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	2778      	movs	r7, #120	@ 0x78
 8007cce:	4832      	ldr	r0, [pc, #200]	@ (8007d98 <_printf_i+0x23c>)
 8007cd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	6831      	ldr	r1, [r6, #0]
 8007cd8:	061f      	lsls	r7, r3, #24
 8007cda:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cde:	d402      	bmi.n	8007ce6 <_printf_i+0x18a>
 8007ce0:	065f      	lsls	r7, r3, #25
 8007ce2:	bf48      	it	mi
 8007ce4:	b2ad      	uxthmi	r5, r5
 8007ce6:	6031      	str	r1, [r6, #0]
 8007ce8:	07d9      	lsls	r1, r3, #31
 8007cea:	bf44      	itt	mi
 8007cec:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf0:	6023      	strmi	r3, [r4, #0]
 8007cf2:	b11d      	cbz	r5, 8007cfc <_printf_i+0x1a0>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	e7ab      	b.n	8007c50 <_printf_i+0xf4>
 8007cf8:	4826      	ldr	r0, [pc, #152]	@ (8007d94 <_printf_i+0x238>)
 8007cfa:	e7e9      	b.n	8007cd0 <_printf_i+0x174>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	f023 0320 	bic.w	r3, r3, #32
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	e7f6      	b.n	8007cf4 <_printf_i+0x198>
 8007d06:	4616      	mov	r6, r2
 8007d08:	e7bd      	b.n	8007c86 <_printf_i+0x12a>
 8007d0a:	6833      	ldr	r3, [r6, #0]
 8007d0c:	6825      	ldr	r5, [r4, #0]
 8007d0e:	1d18      	adds	r0, r3, #4
 8007d10:	6961      	ldr	r1, [r4, #20]
 8007d12:	6030      	str	r0, [r6, #0]
 8007d14:	062e      	lsls	r6, r5, #24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	d501      	bpl.n	8007d1e <_printf_i+0x1c2>
 8007d1a:	6019      	str	r1, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <_printf_i+0x1c8>
 8007d1e:	0668      	lsls	r0, r5, #25
 8007d20:	d5fb      	bpl.n	8007d1a <_printf_i+0x1be>
 8007d22:	8019      	strh	r1, [r3, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	4616      	mov	r6, r2
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	e7bc      	b.n	8007ca6 <_printf_i+0x14a>
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	2100      	movs	r1, #0
 8007d30:	1d1a      	adds	r2, r3, #4
 8007d32:	6032      	str	r2, [r6, #0]
 8007d34:	681e      	ldr	r6, [r3, #0]
 8007d36:	6862      	ldr	r2, [r4, #4]
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f000 fbe4 	bl	8008506 <memchr>
 8007d3e:	b108      	cbz	r0, 8007d44 <_printf_i+0x1e8>
 8007d40:	1b80      	subs	r0, r0, r6
 8007d42:	6060      	str	r0, [r4, #4]
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d4e:	e7aa      	b.n	8007ca6 <_printf_i+0x14a>
 8007d50:	4632      	mov	r2, r6
 8007d52:	4649      	mov	r1, r9
 8007d54:	4640      	mov	r0, r8
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	47d0      	blx	sl
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d0ad      	beq.n	8007cba <_printf_i+0x15e>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	079b      	lsls	r3, r3, #30
 8007d62:	d413      	bmi.n	8007d8c <_printf_i+0x230>
 8007d64:	68e0      	ldr	r0, [r4, #12]
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	4298      	cmp	r0, r3
 8007d6a:	bfb8      	it	lt
 8007d6c:	4618      	movlt	r0, r3
 8007d6e:	e7a6      	b.n	8007cbe <_printf_i+0x162>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4632      	mov	r2, r6
 8007d74:	4649      	mov	r1, r9
 8007d76:	4640      	mov	r0, r8
 8007d78:	47d0      	blx	sl
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d09d      	beq.n	8007cba <_printf_i+0x15e>
 8007d7e:	3501      	adds	r5, #1
 8007d80:	68e3      	ldr	r3, [r4, #12]
 8007d82:	9903      	ldr	r1, [sp, #12]
 8007d84:	1a5b      	subs	r3, r3, r1
 8007d86:	42ab      	cmp	r3, r5
 8007d88:	dcf2      	bgt.n	8007d70 <_printf_i+0x214>
 8007d8a:	e7eb      	b.n	8007d64 <_printf_i+0x208>
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	f104 0619 	add.w	r6, r4, #25
 8007d92:	e7f5      	b.n	8007d80 <_printf_i+0x224>
 8007d94:	0800cfa8 	.word	0x0800cfa8
 8007d98:	0800cfb9 	.word	0x0800cfb9

08007d9c <_scanf_float>:
 8007d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	b087      	sub	sp, #28
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	688b      	ldr	r3, [r1, #8]
 8007da6:	4617      	mov	r7, r2
 8007da8:	1e5a      	subs	r2, r3, #1
 8007daa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007dae:	bf82      	ittt	hi
 8007db0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007db4:	eb03 0b05 	addhi.w	fp, r3, r5
 8007db8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007dbc:	460a      	mov	r2, r1
 8007dbe:	f04f 0500 	mov.w	r5, #0
 8007dc2:	bf88      	it	hi
 8007dc4:	608b      	strhi	r3, [r1, #8]
 8007dc6:	680b      	ldr	r3, [r1, #0]
 8007dc8:	4680      	mov	r8, r0
 8007dca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007dce:	f842 3b1c 	str.w	r3, [r2], #28
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	bf98      	it	ls
 8007dd6:	f04f 0b00 	movls.w	fp, #0
 8007dda:	4616      	mov	r6, r2
 8007ddc:	46aa      	mov	sl, r5
 8007dde:	46a9      	mov	r9, r5
 8007de0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007de4:	9201      	str	r2, [sp, #4]
 8007de6:	9502      	str	r5, [sp, #8]
 8007de8:	68a2      	ldr	r2, [r4, #8]
 8007dea:	b152      	cbz	r2, 8007e02 <_scanf_float+0x66>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b4e      	cmp	r3, #78	@ 0x4e
 8007df2:	d865      	bhi.n	8007ec0 <_scanf_float+0x124>
 8007df4:	2b40      	cmp	r3, #64	@ 0x40
 8007df6:	d83d      	bhi.n	8007e74 <_scanf_float+0xd8>
 8007df8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007dfc:	b2c8      	uxtb	r0, r1
 8007dfe:	280e      	cmp	r0, #14
 8007e00:	d93b      	bls.n	8007e7a <_scanf_float+0xde>
 8007e02:	f1b9 0f00 	cmp.w	r9, #0
 8007e06:	d003      	beq.n	8007e10 <_scanf_float+0x74>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007e14:	f1ba 0f01 	cmp.w	sl, #1
 8007e18:	f200 8118 	bhi.w	800804c <_scanf_float+0x2b0>
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	429e      	cmp	r6, r3
 8007e20:	f200 8109 	bhi.w	8008036 <_scanf_float+0x29a>
 8007e24:	2001      	movs	r0, #1
 8007e26:	b007      	add	sp, #28
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007e30:	2a0d      	cmp	r2, #13
 8007e32:	d8e6      	bhi.n	8007e02 <_scanf_float+0x66>
 8007e34:	a101      	add	r1, pc, #4	@ (adr r1, 8007e3c <_scanf_float+0xa0>)
 8007e36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007f83 	.word	0x08007f83
 8007e40:	08007e03 	.word	0x08007e03
 8007e44:	08007e03 	.word	0x08007e03
 8007e48:	08007e03 	.word	0x08007e03
 8007e4c:	08007fe3 	.word	0x08007fe3
 8007e50:	08007fbb 	.word	0x08007fbb
 8007e54:	08007e03 	.word	0x08007e03
 8007e58:	08007e03 	.word	0x08007e03
 8007e5c:	08007f91 	.word	0x08007f91
 8007e60:	08007e03 	.word	0x08007e03
 8007e64:	08007e03 	.word	0x08007e03
 8007e68:	08007e03 	.word	0x08007e03
 8007e6c:	08007e03 	.word	0x08007e03
 8007e70:	08007f49 	.word	0x08007f49
 8007e74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007e78:	e7da      	b.n	8007e30 <_scanf_float+0x94>
 8007e7a:	290e      	cmp	r1, #14
 8007e7c:	d8c1      	bhi.n	8007e02 <_scanf_float+0x66>
 8007e7e:	a001      	add	r0, pc, #4	@ (adr r0, 8007e84 <_scanf_float+0xe8>)
 8007e80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e84:	08007f39 	.word	0x08007f39
 8007e88:	08007e03 	.word	0x08007e03
 8007e8c:	08007f39 	.word	0x08007f39
 8007e90:	08007fcf 	.word	0x08007fcf
 8007e94:	08007e03 	.word	0x08007e03
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007f1f 	.word	0x08007f1f
 8007ea0:	08007f1f 	.word	0x08007f1f
 8007ea4:	08007f1f 	.word	0x08007f1f
 8007ea8:	08007f1f 	.word	0x08007f1f
 8007eac:	08007f1f 	.word	0x08007f1f
 8007eb0:	08007f1f 	.word	0x08007f1f
 8007eb4:	08007f1f 	.word	0x08007f1f
 8007eb8:	08007f1f 	.word	0x08007f1f
 8007ebc:	08007f1f 	.word	0x08007f1f
 8007ec0:	2b6e      	cmp	r3, #110	@ 0x6e
 8007ec2:	d809      	bhi.n	8007ed8 <_scanf_float+0x13c>
 8007ec4:	2b60      	cmp	r3, #96	@ 0x60
 8007ec6:	d8b1      	bhi.n	8007e2c <_scanf_float+0x90>
 8007ec8:	2b54      	cmp	r3, #84	@ 0x54
 8007eca:	d07b      	beq.n	8007fc4 <_scanf_float+0x228>
 8007ecc:	2b59      	cmp	r3, #89	@ 0x59
 8007ece:	d198      	bne.n	8007e02 <_scanf_float+0x66>
 8007ed0:	2d07      	cmp	r5, #7
 8007ed2:	d196      	bne.n	8007e02 <_scanf_float+0x66>
 8007ed4:	2508      	movs	r5, #8
 8007ed6:	e02c      	b.n	8007f32 <_scanf_float+0x196>
 8007ed8:	2b74      	cmp	r3, #116	@ 0x74
 8007eda:	d073      	beq.n	8007fc4 <_scanf_float+0x228>
 8007edc:	2b79      	cmp	r3, #121	@ 0x79
 8007ede:	e7f6      	b.n	8007ece <_scanf_float+0x132>
 8007ee0:	6821      	ldr	r1, [r4, #0]
 8007ee2:	05c8      	lsls	r0, r1, #23
 8007ee4:	d51b      	bpl.n	8007f1e <_scanf_float+0x182>
 8007ee6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007eea:	6021      	str	r1, [r4, #0]
 8007eec:	f109 0901 	add.w	r9, r9, #1
 8007ef0:	f1bb 0f00 	cmp.w	fp, #0
 8007ef4:	d003      	beq.n	8007efe <_scanf_float+0x162>
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007efc:	60a2      	str	r2, [r4, #8]
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	60a3      	str	r3, [r4, #8]
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	3301      	adds	r3, #1
 8007f08:	6123      	str	r3, [r4, #16]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	607b      	str	r3, [r7, #4]
 8007f12:	f340 8087 	ble.w	8008024 <_scanf_float+0x288>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	e764      	b.n	8007de8 <_scanf_float+0x4c>
 8007f1e:	eb1a 0105 	adds.w	r1, sl, r5
 8007f22:	f47f af6e 	bne.w	8007e02 <_scanf_float+0x66>
 8007f26:	460d      	mov	r5, r1
 8007f28:	468a      	mov	sl, r1
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007f30:	6022      	str	r2, [r4, #0]
 8007f32:	f806 3b01 	strb.w	r3, [r6], #1
 8007f36:	e7e2      	b.n	8007efe <_scanf_float+0x162>
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	0610      	lsls	r0, r2, #24
 8007f3c:	f57f af61 	bpl.w	8007e02 <_scanf_float+0x66>
 8007f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f44:	6022      	str	r2, [r4, #0]
 8007f46:	e7f4      	b.n	8007f32 <_scanf_float+0x196>
 8007f48:	f1ba 0f00 	cmp.w	sl, #0
 8007f4c:	d10e      	bne.n	8007f6c <_scanf_float+0x1d0>
 8007f4e:	f1b9 0f00 	cmp.w	r9, #0
 8007f52:	d10e      	bne.n	8007f72 <_scanf_float+0x1d6>
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f5a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f5e:	d108      	bne.n	8007f72 <_scanf_float+0x1d6>
 8007f60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f64:	f04f 0a01 	mov.w	sl, #1
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	e7e2      	b.n	8007f32 <_scanf_float+0x196>
 8007f6c:	f1ba 0f02 	cmp.w	sl, #2
 8007f70:	d055      	beq.n	800801e <_scanf_float+0x282>
 8007f72:	2d01      	cmp	r5, #1
 8007f74:	d002      	beq.n	8007f7c <_scanf_float+0x1e0>
 8007f76:	2d04      	cmp	r5, #4
 8007f78:	f47f af43 	bne.w	8007e02 <_scanf_float+0x66>
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	b2ed      	uxtb	r5, r5
 8007f80:	e7d7      	b.n	8007f32 <_scanf_float+0x196>
 8007f82:	f1ba 0f01 	cmp.w	sl, #1
 8007f86:	f47f af3c 	bne.w	8007e02 <_scanf_float+0x66>
 8007f8a:	f04f 0a02 	mov.w	sl, #2
 8007f8e:	e7d0      	b.n	8007f32 <_scanf_float+0x196>
 8007f90:	b97d      	cbnz	r5, 8007fb2 <_scanf_float+0x216>
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	f47f af37 	bne.w	8007e08 <_scanf_float+0x6c>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007fa0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007fa4:	f040 8103 	bne.w	80081ae <_scanf_float+0x412>
 8007fa8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007fac:	2501      	movs	r5, #1
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	e7bf      	b.n	8007f32 <_scanf_float+0x196>
 8007fb2:	2d03      	cmp	r5, #3
 8007fb4:	d0e2      	beq.n	8007f7c <_scanf_float+0x1e0>
 8007fb6:	2d05      	cmp	r5, #5
 8007fb8:	e7de      	b.n	8007f78 <_scanf_float+0x1dc>
 8007fba:	2d02      	cmp	r5, #2
 8007fbc:	f47f af21 	bne.w	8007e02 <_scanf_float+0x66>
 8007fc0:	2503      	movs	r5, #3
 8007fc2:	e7b6      	b.n	8007f32 <_scanf_float+0x196>
 8007fc4:	2d06      	cmp	r5, #6
 8007fc6:	f47f af1c 	bne.w	8007e02 <_scanf_float+0x66>
 8007fca:	2507      	movs	r5, #7
 8007fcc:	e7b1      	b.n	8007f32 <_scanf_float+0x196>
 8007fce:	6822      	ldr	r2, [r4, #0]
 8007fd0:	0591      	lsls	r1, r2, #22
 8007fd2:	f57f af16 	bpl.w	8007e02 <_scanf_float+0x66>
 8007fd6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007fda:	6022      	str	r2, [r4, #0]
 8007fdc:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fe0:	e7a7      	b.n	8007f32 <_scanf_float+0x196>
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007fe8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007fec:	d006      	beq.n	8007ffc <_scanf_float+0x260>
 8007fee:	0550      	lsls	r0, r2, #21
 8007ff0:	f57f af07 	bpl.w	8007e02 <_scanf_float+0x66>
 8007ff4:	f1b9 0f00 	cmp.w	r9, #0
 8007ff8:	f000 80d9 	beq.w	80081ae <_scanf_float+0x412>
 8007ffc:	0591      	lsls	r1, r2, #22
 8007ffe:	bf58      	it	pl
 8008000:	9902      	ldrpl	r1, [sp, #8]
 8008002:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008006:	bf58      	it	pl
 8008008:	eba9 0101 	subpl.w	r1, r9, r1
 800800c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008010:	f04f 0900 	mov.w	r9, #0
 8008014:	bf58      	it	pl
 8008016:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	e789      	b.n	8007f32 <_scanf_float+0x196>
 800801e:	f04f 0a03 	mov.w	sl, #3
 8008022:	e786      	b.n	8007f32 <_scanf_float+0x196>
 8008024:	4639      	mov	r1, r7
 8008026:	4640      	mov	r0, r8
 8008028:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800802c:	4798      	blx	r3
 800802e:	2800      	cmp	r0, #0
 8008030:	f43f aeda 	beq.w	8007de8 <_scanf_float+0x4c>
 8008034:	e6e5      	b.n	8007e02 <_scanf_float+0x66>
 8008036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800803a:	463a      	mov	r2, r7
 800803c:	4640      	mov	r0, r8
 800803e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008042:	4798      	blx	r3
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	3b01      	subs	r3, #1
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	e6e7      	b.n	8007e1c <_scanf_float+0x80>
 800804c:	1e6b      	subs	r3, r5, #1
 800804e:	2b06      	cmp	r3, #6
 8008050:	d824      	bhi.n	800809c <_scanf_float+0x300>
 8008052:	2d02      	cmp	r5, #2
 8008054:	d836      	bhi.n	80080c4 <_scanf_float+0x328>
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	429e      	cmp	r6, r3
 800805a:	f67f aee3 	bls.w	8007e24 <_scanf_float+0x88>
 800805e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008062:	463a      	mov	r2, r7
 8008064:	4640      	mov	r0, r8
 8008066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800806a:	4798      	blx	r3
 800806c:	6923      	ldr	r3, [r4, #16]
 800806e:	3b01      	subs	r3, #1
 8008070:	6123      	str	r3, [r4, #16]
 8008072:	e7f0      	b.n	8008056 <_scanf_float+0x2ba>
 8008074:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008078:	463a      	mov	r2, r7
 800807a:	4640      	mov	r0, r8
 800807c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008080:	4798      	blx	r3
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	3b01      	subs	r3, #1
 8008086:	6123      	str	r3, [r4, #16]
 8008088:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800808c:	fa5f fa8a 	uxtb.w	sl, sl
 8008090:	f1ba 0f02 	cmp.w	sl, #2
 8008094:	d1ee      	bne.n	8008074 <_scanf_float+0x2d8>
 8008096:	3d03      	subs	r5, #3
 8008098:	b2ed      	uxtb	r5, r5
 800809a:	1b76      	subs	r6, r6, r5
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	05da      	lsls	r2, r3, #23
 80080a0:	d530      	bpl.n	8008104 <_scanf_float+0x368>
 80080a2:	055b      	lsls	r3, r3, #21
 80080a4:	d511      	bpl.n	80080ca <_scanf_float+0x32e>
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	429e      	cmp	r6, r3
 80080aa:	f67f aebb 	bls.w	8007e24 <_scanf_float+0x88>
 80080ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080b2:	463a      	mov	r2, r7
 80080b4:	4640      	mov	r0, r8
 80080b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080ba:	4798      	blx	r3
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	3b01      	subs	r3, #1
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	e7f0      	b.n	80080a6 <_scanf_float+0x30a>
 80080c4:	46aa      	mov	sl, r5
 80080c6:	46b3      	mov	fp, r6
 80080c8:	e7de      	b.n	8008088 <_scanf_float+0x2ec>
 80080ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	2965      	cmp	r1, #101	@ 0x65
 80080d2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80080d6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	d00c      	beq.n	80080f8 <_scanf_float+0x35c>
 80080de:	2945      	cmp	r1, #69	@ 0x45
 80080e0:	d00a      	beq.n	80080f8 <_scanf_float+0x35c>
 80080e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080e6:	463a      	mov	r2, r7
 80080e8:	4640      	mov	r0, r8
 80080ea:	4798      	blx	r3
 80080ec:	6923      	ldr	r3, [r4, #16]
 80080ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	1eb5      	subs	r5, r6, #2
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	463a      	mov	r2, r7
 80080fa:	4640      	mov	r0, r8
 80080fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008100:	4798      	blx	r3
 8008102:	462e      	mov	r6, r5
 8008104:	6822      	ldr	r2, [r4, #0]
 8008106:	f012 0210 	ands.w	r2, r2, #16
 800810a:	d001      	beq.n	8008110 <_scanf_float+0x374>
 800810c:	2000      	movs	r0, #0
 800810e:	e68a      	b.n	8007e26 <_scanf_float+0x8a>
 8008110:	7032      	strb	r2, [r6, #0]
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800811c:	d11c      	bne.n	8008158 <_scanf_float+0x3bc>
 800811e:	9b02      	ldr	r3, [sp, #8]
 8008120:	454b      	cmp	r3, r9
 8008122:	eba3 0209 	sub.w	r2, r3, r9
 8008126:	d123      	bne.n	8008170 <_scanf_float+0x3d4>
 8008128:	2200      	movs	r2, #0
 800812a:	4640      	mov	r0, r8
 800812c:	9901      	ldr	r1, [sp, #4]
 800812e:	f002 fbfb 	bl	800a928 <_strtod_r>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	6825      	ldr	r5, [r4, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f015 0f02 	tst.w	r5, #2
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	f103 0204 	add.w	r2, r3, #4
 8008144:	d01f      	beq.n	8008186 <_scanf_float+0x3ea>
 8008146:	9903      	ldr	r1, [sp, #12]
 8008148:	600a      	str	r2, [r1, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	e9c3 6700 	strd	r6, r7, [r3]
 8008150:	68e3      	ldr	r3, [r4, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60e3      	str	r3, [r4, #12]
 8008156:	e7d9      	b.n	800810c <_scanf_float+0x370>
 8008158:	9b04      	ldr	r3, [sp, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0e4      	beq.n	8008128 <_scanf_float+0x38c>
 800815e:	9905      	ldr	r1, [sp, #20]
 8008160:	230a      	movs	r3, #10
 8008162:	4640      	mov	r0, r8
 8008164:	3101      	adds	r1, #1
 8008166:	f002 fc5f 	bl	800aa28 <_strtol_r>
 800816a:	9b04      	ldr	r3, [sp, #16]
 800816c:	9e05      	ldr	r6, [sp, #20]
 800816e:	1ac2      	subs	r2, r0, r3
 8008170:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008174:	429e      	cmp	r6, r3
 8008176:	bf28      	it	cs
 8008178:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800817c:	4630      	mov	r0, r6
 800817e:	490d      	ldr	r1, [pc, #52]	@ (80081b4 <_scanf_float+0x418>)
 8008180:	f000 f8de 	bl	8008340 <siprintf>
 8008184:	e7d0      	b.n	8008128 <_scanf_float+0x38c>
 8008186:	076d      	lsls	r5, r5, #29
 8008188:	d4dd      	bmi.n	8008146 <_scanf_float+0x3aa>
 800818a:	9d03      	ldr	r5, [sp, #12]
 800818c:	602a      	str	r2, [r5, #0]
 800818e:	681d      	ldr	r5, [r3, #0]
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	f7f8 fc3a 	bl	8000a0c <__aeabi_dcmpun>
 8008198:	b120      	cbz	r0, 80081a4 <_scanf_float+0x408>
 800819a:	4807      	ldr	r0, [pc, #28]	@ (80081b8 <_scanf_float+0x41c>)
 800819c:	f000 f9d0 	bl	8008540 <nanf>
 80081a0:	6028      	str	r0, [r5, #0]
 80081a2:	e7d5      	b.n	8008150 <_scanf_float+0x3b4>
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 fc8e 	bl	8000ac8 <__aeabi_d2f>
 80081ac:	e7f8      	b.n	80081a0 <_scanf_float+0x404>
 80081ae:	f04f 0900 	mov.w	r9, #0
 80081b2:	e62d      	b.n	8007e10 <_scanf_float+0x74>
 80081b4:	0800cfca 	.word	0x0800cfca
 80081b8:	0800d365 	.word	0x0800d365

080081bc <std>:
 80081bc:	2300      	movs	r3, #0
 80081be:	b510      	push	{r4, lr}
 80081c0:	4604      	mov	r4, r0
 80081c2:	e9c0 3300 	strd	r3, r3, [r0]
 80081c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ca:	6083      	str	r3, [r0, #8]
 80081cc:	8181      	strh	r1, [r0, #12]
 80081ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80081d0:	81c2      	strh	r2, [r0, #14]
 80081d2:	6183      	str	r3, [r0, #24]
 80081d4:	4619      	mov	r1, r3
 80081d6:	2208      	movs	r2, #8
 80081d8:	305c      	adds	r0, #92	@ 0x5c
 80081da:	f000 f914 	bl	8008406 <memset>
 80081de:	4b0d      	ldr	r3, [pc, #52]	@ (8008214 <std+0x58>)
 80081e0:	6224      	str	r4, [r4, #32]
 80081e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80081e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008218 <std+0x5c>)
 80081e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081e8:	4b0c      	ldr	r3, [pc, #48]	@ (800821c <std+0x60>)
 80081ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <std+0x64>)
 80081ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80081f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <std+0x68>)
 80081f2:	429c      	cmp	r4, r3
 80081f4:	d006      	beq.n	8008204 <std+0x48>
 80081f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081fa:	4294      	cmp	r4, r2
 80081fc:	d002      	beq.n	8008204 <std+0x48>
 80081fe:	33d0      	adds	r3, #208	@ 0xd0
 8008200:	429c      	cmp	r4, r3
 8008202:	d105      	bne.n	8008210 <std+0x54>
 8008204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820c:	f000 b978 	b.w	8008500 <__retarget_lock_init_recursive>
 8008210:	bd10      	pop	{r4, pc}
 8008212:	bf00      	nop
 8008214:	08008381 	.word	0x08008381
 8008218:	080083a3 	.word	0x080083a3
 800821c:	080083db 	.word	0x080083db
 8008220:	080083ff 	.word	0x080083ff
 8008224:	20000850 	.word	0x20000850

08008228 <stdio_exit_handler>:
 8008228:	4a02      	ldr	r2, [pc, #8]	@ (8008234 <stdio_exit_handler+0xc>)
 800822a:	4903      	ldr	r1, [pc, #12]	@ (8008238 <stdio_exit_handler+0x10>)
 800822c:	4803      	ldr	r0, [pc, #12]	@ (800823c <stdio_exit_handler+0x14>)
 800822e:	f000 b869 	b.w	8008304 <_fwalk_sglue>
 8008232:	bf00      	nop
 8008234:	20000014 	.word	0x20000014
 8008238:	0800addd 	.word	0x0800addd
 800823c:	20000024 	.word	0x20000024

08008240 <cleanup_stdio>:
 8008240:	6841      	ldr	r1, [r0, #4]
 8008242:	4b0c      	ldr	r3, [pc, #48]	@ (8008274 <cleanup_stdio+0x34>)
 8008244:	b510      	push	{r4, lr}
 8008246:	4299      	cmp	r1, r3
 8008248:	4604      	mov	r4, r0
 800824a:	d001      	beq.n	8008250 <cleanup_stdio+0x10>
 800824c:	f002 fdc6 	bl	800addc <_fflush_r>
 8008250:	68a1      	ldr	r1, [r4, #8]
 8008252:	4b09      	ldr	r3, [pc, #36]	@ (8008278 <cleanup_stdio+0x38>)
 8008254:	4299      	cmp	r1, r3
 8008256:	d002      	beq.n	800825e <cleanup_stdio+0x1e>
 8008258:	4620      	mov	r0, r4
 800825a:	f002 fdbf 	bl	800addc <_fflush_r>
 800825e:	68e1      	ldr	r1, [r4, #12]
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <cleanup_stdio+0x3c>)
 8008262:	4299      	cmp	r1, r3
 8008264:	d004      	beq.n	8008270 <cleanup_stdio+0x30>
 8008266:	4620      	mov	r0, r4
 8008268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800826c:	f002 bdb6 	b.w	800addc <_fflush_r>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	bf00      	nop
 8008274:	20000850 	.word	0x20000850
 8008278:	200008b8 	.word	0x200008b8
 800827c:	20000920 	.word	0x20000920

08008280 <global_stdio_init.part.0>:
 8008280:	b510      	push	{r4, lr}
 8008282:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <global_stdio_init.part.0+0x30>)
 8008284:	4c0b      	ldr	r4, [pc, #44]	@ (80082b4 <global_stdio_init.part.0+0x34>)
 8008286:	4a0c      	ldr	r2, [pc, #48]	@ (80082b8 <global_stdio_init.part.0+0x38>)
 8008288:	4620      	mov	r0, r4
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	2104      	movs	r1, #4
 800828e:	2200      	movs	r2, #0
 8008290:	f7ff ff94 	bl	80081bc <std>
 8008294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008298:	2201      	movs	r2, #1
 800829a:	2109      	movs	r1, #9
 800829c:	f7ff ff8e 	bl	80081bc <std>
 80082a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082a4:	2202      	movs	r2, #2
 80082a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082aa:	2112      	movs	r1, #18
 80082ac:	f7ff bf86 	b.w	80081bc <std>
 80082b0:	20000988 	.word	0x20000988
 80082b4:	20000850 	.word	0x20000850
 80082b8:	08008229 	.word	0x08008229

080082bc <__sfp_lock_acquire>:
 80082bc:	4801      	ldr	r0, [pc, #4]	@ (80082c4 <__sfp_lock_acquire+0x8>)
 80082be:	f000 b920 	b.w	8008502 <__retarget_lock_acquire_recursive>
 80082c2:	bf00      	nop
 80082c4:	20000991 	.word	0x20000991

080082c8 <__sfp_lock_release>:
 80082c8:	4801      	ldr	r0, [pc, #4]	@ (80082d0 <__sfp_lock_release+0x8>)
 80082ca:	f000 b91b 	b.w	8008504 <__retarget_lock_release_recursive>
 80082ce:	bf00      	nop
 80082d0:	20000991 	.word	0x20000991

080082d4 <__sinit>:
 80082d4:	b510      	push	{r4, lr}
 80082d6:	4604      	mov	r4, r0
 80082d8:	f7ff fff0 	bl	80082bc <__sfp_lock_acquire>
 80082dc:	6a23      	ldr	r3, [r4, #32]
 80082de:	b11b      	cbz	r3, 80082e8 <__sinit+0x14>
 80082e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e4:	f7ff bff0 	b.w	80082c8 <__sfp_lock_release>
 80082e8:	4b04      	ldr	r3, [pc, #16]	@ (80082fc <__sinit+0x28>)
 80082ea:	6223      	str	r3, [r4, #32]
 80082ec:	4b04      	ldr	r3, [pc, #16]	@ (8008300 <__sinit+0x2c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f5      	bne.n	80082e0 <__sinit+0xc>
 80082f4:	f7ff ffc4 	bl	8008280 <global_stdio_init.part.0>
 80082f8:	e7f2      	b.n	80082e0 <__sinit+0xc>
 80082fa:	bf00      	nop
 80082fc:	08008241 	.word	0x08008241
 8008300:	20000988 	.word	0x20000988

08008304 <_fwalk_sglue>:
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008308:	4607      	mov	r7, r0
 800830a:	4688      	mov	r8, r1
 800830c:	4614      	mov	r4, r2
 800830e:	2600      	movs	r6, #0
 8008310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008314:	f1b9 0901 	subs.w	r9, r9, #1
 8008318:	d505      	bpl.n	8008326 <_fwalk_sglue+0x22>
 800831a:	6824      	ldr	r4, [r4, #0]
 800831c:	2c00      	cmp	r4, #0
 800831e:	d1f7      	bne.n	8008310 <_fwalk_sglue+0xc>
 8008320:	4630      	mov	r0, r6
 8008322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d907      	bls.n	800833c <_fwalk_sglue+0x38>
 800832c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008330:	3301      	adds	r3, #1
 8008332:	d003      	beq.n	800833c <_fwalk_sglue+0x38>
 8008334:	4629      	mov	r1, r5
 8008336:	4638      	mov	r0, r7
 8008338:	47c0      	blx	r8
 800833a:	4306      	orrs	r6, r0
 800833c:	3568      	adds	r5, #104	@ 0x68
 800833e:	e7e9      	b.n	8008314 <_fwalk_sglue+0x10>

08008340 <siprintf>:
 8008340:	b40e      	push	{r1, r2, r3}
 8008342:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008346:	b500      	push	{lr}
 8008348:	b09c      	sub	sp, #112	@ 0x70
 800834a:	ab1d      	add	r3, sp, #116	@ 0x74
 800834c:	9002      	str	r0, [sp, #8]
 800834e:	9006      	str	r0, [sp, #24]
 8008350:	9107      	str	r1, [sp, #28]
 8008352:	9104      	str	r1, [sp, #16]
 8008354:	4808      	ldr	r0, [pc, #32]	@ (8008378 <siprintf+0x38>)
 8008356:	4909      	ldr	r1, [pc, #36]	@ (800837c <siprintf+0x3c>)
 8008358:	f853 2b04 	ldr.w	r2, [r3], #4
 800835c:	9105      	str	r1, [sp, #20]
 800835e:	6800      	ldr	r0, [r0, #0]
 8008360:	a902      	add	r1, sp, #8
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	f002 fbbe 	bl	800aae4 <_svfiprintf_r>
 8008368:	2200      	movs	r2, #0
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	b01c      	add	sp, #112	@ 0x70
 8008370:	f85d eb04 	ldr.w	lr, [sp], #4
 8008374:	b003      	add	sp, #12
 8008376:	4770      	bx	lr
 8008378:	20000020 	.word	0x20000020
 800837c:	ffff0208 	.word	0xffff0208

08008380 <__sread>:
 8008380:	b510      	push	{r4, lr}
 8008382:	460c      	mov	r4, r1
 8008384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008388:	f000 f86c 	bl	8008464 <_read_r>
 800838c:	2800      	cmp	r0, #0
 800838e:	bfab      	itete	ge
 8008390:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008392:	89a3      	ldrhlt	r3, [r4, #12]
 8008394:	181b      	addge	r3, r3, r0
 8008396:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800839a:	bfac      	ite	ge
 800839c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800839e:	81a3      	strhlt	r3, [r4, #12]
 80083a0:	bd10      	pop	{r4, pc}

080083a2 <__swrite>:
 80083a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a6:	461f      	mov	r7, r3
 80083a8:	898b      	ldrh	r3, [r1, #12]
 80083aa:	4605      	mov	r5, r0
 80083ac:	05db      	lsls	r3, r3, #23
 80083ae:	460c      	mov	r4, r1
 80083b0:	4616      	mov	r6, r2
 80083b2:	d505      	bpl.n	80083c0 <__swrite+0x1e>
 80083b4:	2302      	movs	r3, #2
 80083b6:	2200      	movs	r2, #0
 80083b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083bc:	f000 f840 	bl	8008440 <_lseek_r>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	4632      	mov	r2, r6
 80083c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	4628      	mov	r0, r5
 80083cc:	463b      	mov	r3, r7
 80083ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083d6:	f000 b857 	b.w	8008488 <_write_r>

080083da <__sseek>:
 80083da:	b510      	push	{r4, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e2:	f000 f82d 	bl	8008440 <_lseek_r>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	bf15      	itete	ne
 80083ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083f6:	81a3      	strheq	r3, [r4, #12]
 80083f8:	bf18      	it	ne
 80083fa:	81a3      	strhne	r3, [r4, #12]
 80083fc:	bd10      	pop	{r4, pc}

080083fe <__sclose>:
 80083fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008402:	f000 b80d 	b.w	8008420 <_close_r>

08008406 <memset>:
 8008406:	4603      	mov	r3, r0
 8008408:	4402      	add	r2, r0
 800840a:	4293      	cmp	r3, r2
 800840c:	d100      	bne.n	8008410 <memset+0xa>
 800840e:	4770      	bx	lr
 8008410:	f803 1b01 	strb.w	r1, [r3], #1
 8008414:	e7f9      	b.n	800840a <memset+0x4>
	...

08008418 <_localeconv_r>:
 8008418:	4800      	ldr	r0, [pc, #0]	@ (800841c <_localeconv_r+0x4>)
 800841a:	4770      	bx	lr
 800841c:	20000160 	.word	0x20000160

08008420 <_close_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	2300      	movs	r3, #0
 8008424:	4d05      	ldr	r5, [pc, #20]	@ (800843c <_close_r+0x1c>)
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7fb fd73 	bl	8003f16 <_close>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_close_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_close_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	2000098c 	.word	0x2000098c

08008440 <_lseek_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	4611      	mov	r1, r2
 8008448:	2200      	movs	r2, #0
 800844a:	4d05      	ldr	r5, [pc, #20]	@ (8008460 <_lseek_r+0x20>)
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f7fb fd85 	bl	8003f5e <_lseek>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_lseek_r+0x1e>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_lseek_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	2000098c 	.word	0x2000098c

08008464 <_read_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4604      	mov	r4, r0
 8008468:	4608      	mov	r0, r1
 800846a:	4611      	mov	r1, r2
 800846c:	2200      	movs	r2, #0
 800846e:	4d05      	ldr	r5, [pc, #20]	@ (8008484 <_read_r+0x20>)
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7fb fd16 	bl	8003ea4 <_read>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_read_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_read_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	2000098c 	.word	0x2000098c

08008488 <_write_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	2200      	movs	r2, #0
 8008492:	4d05      	ldr	r5, [pc, #20]	@ (80084a8 <_write_r+0x20>)
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	f7fb fd21 	bl	8003ede <_write>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_write_r+0x1e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_write_r+0x1e>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	2000098c 	.word	0x2000098c

080084ac <__errno>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	@ (80084b4 <__errno+0x8>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000020 	.word	0x20000020

080084b8 <__libc_init_array>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	2600      	movs	r6, #0
 80084bc:	4d0c      	ldr	r5, [pc, #48]	@ (80084f0 <__libc_init_array+0x38>)
 80084be:	4c0d      	ldr	r4, [pc, #52]	@ (80084f4 <__libc_init_array+0x3c>)
 80084c0:	1b64      	subs	r4, r4, r5
 80084c2:	10a4      	asrs	r4, r4, #2
 80084c4:	42a6      	cmp	r6, r4
 80084c6:	d109      	bne.n	80084dc <__libc_init_array+0x24>
 80084c8:	f003 fb66 	bl	800bb98 <_init>
 80084cc:	2600      	movs	r6, #0
 80084ce:	4d0a      	ldr	r5, [pc, #40]	@ (80084f8 <__libc_init_array+0x40>)
 80084d0:	4c0a      	ldr	r4, [pc, #40]	@ (80084fc <__libc_init_array+0x44>)
 80084d2:	1b64      	subs	r4, r4, r5
 80084d4:	10a4      	asrs	r4, r4, #2
 80084d6:	42a6      	cmp	r6, r4
 80084d8:	d105      	bne.n	80084e6 <__libc_init_array+0x2e>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e0:	4798      	blx	r3
 80084e2:	3601      	adds	r6, #1
 80084e4:	e7ee      	b.n	80084c4 <__libc_init_array+0xc>
 80084e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ea:	4798      	blx	r3
 80084ec:	3601      	adds	r6, #1
 80084ee:	e7f2      	b.n	80084d6 <__libc_init_array+0x1e>
 80084f0:	0800d6dc 	.word	0x0800d6dc
 80084f4:	0800d6dc 	.word	0x0800d6dc
 80084f8:	0800d6dc 	.word	0x0800d6dc
 80084fc:	0800d6e0 	.word	0x0800d6e0

08008500 <__retarget_lock_init_recursive>:
 8008500:	4770      	bx	lr

08008502 <__retarget_lock_acquire_recursive>:
 8008502:	4770      	bx	lr

08008504 <__retarget_lock_release_recursive>:
 8008504:	4770      	bx	lr

08008506 <memchr>:
 8008506:	4603      	mov	r3, r0
 8008508:	b510      	push	{r4, lr}
 800850a:	b2c9      	uxtb	r1, r1
 800850c:	4402      	add	r2, r0
 800850e:	4293      	cmp	r3, r2
 8008510:	4618      	mov	r0, r3
 8008512:	d101      	bne.n	8008518 <memchr+0x12>
 8008514:	2000      	movs	r0, #0
 8008516:	e003      	b.n	8008520 <memchr+0x1a>
 8008518:	7804      	ldrb	r4, [r0, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	428c      	cmp	r4, r1
 800851e:	d1f6      	bne.n	800850e <memchr+0x8>
 8008520:	bd10      	pop	{r4, pc}

08008522 <memcpy>:
 8008522:	440a      	add	r2, r1
 8008524:	4291      	cmp	r1, r2
 8008526:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800852a:	d100      	bne.n	800852e <memcpy+0xc>
 800852c:	4770      	bx	lr
 800852e:	b510      	push	{r4, lr}
 8008530:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008534:	4291      	cmp	r1, r2
 8008536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853a:	d1f9      	bne.n	8008530 <memcpy+0xe>
 800853c:	bd10      	pop	{r4, pc}
	...

08008540 <nanf>:
 8008540:	4800      	ldr	r0, [pc, #0]	@ (8008544 <nanf+0x4>)
 8008542:	4770      	bx	lr
 8008544:	7fc00000 	.word	0x7fc00000

08008548 <quorem>:
 8008548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	6903      	ldr	r3, [r0, #16]
 800854e:	690c      	ldr	r4, [r1, #16]
 8008550:	4607      	mov	r7, r0
 8008552:	42a3      	cmp	r3, r4
 8008554:	db7e      	blt.n	8008654 <quorem+0x10c>
 8008556:	3c01      	subs	r4, #1
 8008558:	00a3      	lsls	r3, r4, #2
 800855a:	f100 0514 	add.w	r5, r0, #20
 800855e:	f101 0814 	add.w	r8, r1, #20
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800856e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008572:	3301      	adds	r3, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	fbb2 f6f3 	udiv	r6, r2, r3
 800857a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800857e:	d32e      	bcc.n	80085de <quorem+0x96>
 8008580:	f04f 0a00 	mov.w	sl, #0
 8008584:	46c4      	mov	ip, r8
 8008586:	46ae      	mov	lr, r5
 8008588:	46d3      	mov	fp, sl
 800858a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800858e:	b298      	uxth	r0, r3
 8008590:	fb06 a000 	mla	r0, r6, r0, sl
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	0c02      	lsrs	r2, r0, #16
 8008598:	fb06 2303 	mla	r3, r6, r3, r2
 800859c:	f8de 2000 	ldr.w	r2, [lr]
 80085a0:	b280      	uxth	r0, r0
 80085a2:	b292      	uxth	r2, r2
 80085a4:	1a12      	subs	r2, r2, r0
 80085a6:	445a      	add	r2, fp
 80085a8:	f8de 0000 	ldr.w	r0, [lr]
 80085ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80085b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80085ba:	b292      	uxth	r2, r2
 80085bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085c0:	45e1      	cmp	r9, ip
 80085c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80085c6:	f84e 2b04 	str.w	r2, [lr], #4
 80085ca:	d2de      	bcs.n	800858a <quorem+0x42>
 80085cc:	9b00      	ldr	r3, [sp, #0]
 80085ce:	58eb      	ldr	r3, [r5, r3]
 80085d0:	b92b      	cbnz	r3, 80085de <quorem+0x96>
 80085d2:	9b01      	ldr	r3, [sp, #4]
 80085d4:	3b04      	subs	r3, #4
 80085d6:	429d      	cmp	r5, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	d32f      	bcc.n	800863c <quorem+0xf4>
 80085dc:	613c      	str	r4, [r7, #16]
 80085de:	4638      	mov	r0, r7
 80085e0:	f001 f9c2 	bl	8009968 <__mcmp>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	db25      	blt.n	8008634 <quorem+0xec>
 80085e8:	4629      	mov	r1, r5
 80085ea:	2000      	movs	r0, #0
 80085ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80085f0:	f8d1 c000 	ldr.w	ip, [r1]
 80085f4:	fa1f fe82 	uxth.w	lr, r2
 80085f8:	fa1f f38c 	uxth.w	r3, ip
 80085fc:	eba3 030e 	sub.w	r3, r3, lr
 8008600:	4403      	add	r3, r0
 8008602:	0c12      	lsrs	r2, r2, #16
 8008604:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008608:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800860c:	b29b      	uxth	r3, r3
 800860e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008612:	45c1      	cmp	r9, r8
 8008614:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008618:	f841 3b04 	str.w	r3, [r1], #4
 800861c:	d2e6      	bcs.n	80085ec <quorem+0xa4>
 800861e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008626:	b922      	cbnz	r2, 8008632 <quorem+0xea>
 8008628:	3b04      	subs	r3, #4
 800862a:	429d      	cmp	r5, r3
 800862c:	461a      	mov	r2, r3
 800862e:	d30b      	bcc.n	8008648 <quorem+0x100>
 8008630:	613c      	str	r4, [r7, #16]
 8008632:	3601      	adds	r6, #1
 8008634:	4630      	mov	r0, r6
 8008636:	b003      	add	sp, #12
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	3b04      	subs	r3, #4
 8008640:	2a00      	cmp	r2, #0
 8008642:	d1cb      	bne.n	80085dc <quorem+0x94>
 8008644:	3c01      	subs	r4, #1
 8008646:	e7c6      	b.n	80085d6 <quorem+0x8e>
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	3b04      	subs	r3, #4
 800864c:	2a00      	cmp	r2, #0
 800864e:	d1ef      	bne.n	8008630 <quorem+0xe8>
 8008650:	3c01      	subs	r4, #1
 8008652:	e7ea      	b.n	800862a <quorem+0xe2>
 8008654:	2000      	movs	r0, #0
 8008656:	e7ee      	b.n	8008636 <quorem+0xee>

08008658 <_dtoa_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	4614      	mov	r4, r2
 800865e:	461d      	mov	r5, r3
 8008660:	69c7      	ldr	r7, [r0, #28]
 8008662:	b097      	sub	sp, #92	@ 0x5c
 8008664:	4683      	mov	fp, r0
 8008666:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800866a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800866c:	b97f      	cbnz	r7, 800868e <_dtoa_r+0x36>
 800866e:	2010      	movs	r0, #16
 8008670:	f000 fe02 	bl	8009278 <malloc>
 8008674:	4602      	mov	r2, r0
 8008676:	f8cb 001c 	str.w	r0, [fp, #28]
 800867a:	b920      	cbnz	r0, 8008686 <_dtoa_r+0x2e>
 800867c:	21ef      	movs	r1, #239	@ 0xef
 800867e:	4ba8      	ldr	r3, [pc, #672]	@ (8008920 <_dtoa_r+0x2c8>)
 8008680:	48a8      	ldr	r0, [pc, #672]	@ (8008924 <_dtoa_r+0x2cc>)
 8008682:	f002 fc15 	bl	800aeb0 <__assert_func>
 8008686:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800868a:	6007      	str	r7, [r0, #0]
 800868c:	60c7      	str	r7, [r0, #12]
 800868e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	b159      	cbz	r1, 80086ae <_dtoa_r+0x56>
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	2301      	movs	r3, #1
 800869a:	4093      	lsls	r3, r2
 800869c:	604a      	str	r2, [r1, #4]
 800869e:	608b      	str	r3, [r1, #8]
 80086a0:	4658      	mov	r0, fp
 80086a2:	f000 fedf 	bl	8009464 <_Bfree>
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	1e2b      	subs	r3, r5, #0
 80086b0:	bfaf      	iteee	ge
 80086b2:	2300      	movge	r3, #0
 80086b4:	2201      	movlt	r2, #1
 80086b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80086ba:	9303      	strlt	r3, [sp, #12]
 80086bc:	bfa8      	it	ge
 80086be:	6033      	strge	r3, [r6, #0]
 80086c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086c4:	4b98      	ldr	r3, [pc, #608]	@ (8008928 <_dtoa_r+0x2d0>)
 80086c6:	bfb8      	it	lt
 80086c8:	6032      	strlt	r2, [r6, #0]
 80086ca:	ea33 0308 	bics.w	r3, r3, r8
 80086ce:	d112      	bne.n	80086f6 <_dtoa_r+0x9e>
 80086d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80086d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80086dc:	4323      	orrs	r3, r4
 80086de:	f000 8550 	beq.w	8009182 <_dtoa_r+0xb2a>
 80086e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80086e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800892c <_dtoa_r+0x2d4>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 8552 	beq.w	8009192 <_dtoa_r+0xb3a>
 80086ee:	f10a 0303 	add.w	r3, sl, #3
 80086f2:	f000 bd4c 	b.w	800918e <_dtoa_r+0xb36>
 80086f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80086fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008702:	2200      	movs	r2, #0
 8008704:	2300      	movs	r3, #0
 8008706:	f7f8 f94f 	bl	80009a8 <__aeabi_dcmpeq>
 800870a:	4607      	mov	r7, r0
 800870c:	b158      	cbz	r0, 8008726 <_dtoa_r+0xce>
 800870e:	2301      	movs	r3, #1
 8008710:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008716:	b113      	cbz	r3, 800871e <_dtoa_r+0xc6>
 8008718:	4b85      	ldr	r3, [pc, #532]	@ (8008930 <_dtoa_r+0x2d8>)
 800871a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008934 <_dtoa_r+0x2dc>
 8008722:	f000 bd36 	b.w	8009192 <_dtoa_r+0xb3a>
 8008726:	ab14      	add	r3, sp, #80	@ 0x50
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	ab15      	add	r3, sp, #84	@ 0x54
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	4658      	mov	r0, fp
 8008730:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008734:	f001 fa30 	bl	8009b98 <__d2b>
 8008738:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800873c:	4681      	mov	r9, r0
 800873e:	2e00      	cmp	r6, #0
 8008740:	d077      	beq.n	8008832 <_dtoa_r+0x1da>
 8008742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008748:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800874c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008750:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008754:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008758:	9712      	str	r7, [sp, #72]	@ 0x48
 800875a:	4619      	mov	r1, r3
 800875c:	2200      	movs	r2, #0
 800875e:	4b76      	ldr	r3, [pc, #472]	@ (8008938 <_dtoa_r+0x2e0>)
 8008760:	f7f7 fd02 	bl	8000168 <__aeabi_dsub>
 8008764:	a368      	add	r3, pc, #416	@ (adr r3, 8008908 <_dtoa_r+0x2b0>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	f7f7 feb5 	bl	80004d8 <__aeabi_dmul>
 800876e:	a368      	add	r3, pc, #416	@ (adr r3, 8008910 <_dtoa_r+0x2b8>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f7f7 fcfa 	bl	800016c <__adddf3>
 8008778:	4604      	mov	r4, r0
 800877a:	4630      	mov	r0, r6
 800877c:	460d      	mov	r5, r1
 800877e:	f7f7 fe41 	bl	8000404 <__aeabi_i2d>
 8008782:	a365      	add	r3, pc, #404	@ (adr r3, 8008918 <_dtoa_r+0x2c0>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 fea6 	bl	80004d8 <__aeabi_dmul>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4620      	mov	r0, r4
 8008792:	4629      	mov	r1, r5
 8008794:	f7f7 fcea 	bl	800016c <__adddf3>
 8008798:	4604      	mov	r4, r0
 800879a:	460d      	mov	r5, r1
 800879c:	f7f8 f94c 	bl	8000a38 <__aeabi_d2iz>
 80087a0:	2200      	movs	r2, #0
 80087a2:	4607      	mov	r7, r0
 80087a4:	2300      	movs	r3, #0
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f8 f907 	bl	80009bc <__aeabi_dcmplt>
 80087ae:	b140      	cbz	r0, 80087c2 <_dtoa_r+0x16a>
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7f7 fe27 	bl	8000404 <__aeabi_i2d>
 80087b6:	4622      	mov	r2, r4
 80087b8:	462b      	mov	r3, r5
 80087ba:	f7f8 f8f5 	bl	80009a8 <__aeabi_dcmpeq>
 80087be:	b900      	cbnz	r0, 80087c2 <_dtoa_r+0x16a>
 80087c0:	3f01      	subs	r7, #1
 80087c2:	2f16      	cmp	r7, #22
 80087c4:	d853      	bhi.n	800886e <_dtoa_r+0x216>
 80087c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087ca:	4b5c      	ldr	r3, [pc, #368]	@ (800893c <_dtoa_r+0x2e4>)
 80087cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	f7f8 f8f2 	bl	80009bc <__aeabi_dcmplt>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d04a      	beq.n	8008872 <_dtoa_r+0x21a>
 80087dc:	2300      	movs	r3, #0
 80087de:	3f01      	subs	r7, #1
 80087e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087e4:	1b9b      	subs	r3, r3, r6
 80087e6:	1e5a      	subs	r2, r3, #1
 80087e8:	bf46      	itte	mi
 80087ea:	f1c3 0801 	rsbmi	r8, r3, #1
 80087ee:	2300      	movmi	r3, #0
 80087f0:	f04f 0800 	movpl.w	r8, #0
 80087f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80087f6:	bf48      	it	mi
 80087f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80087fa:	2f00      	cmp	r7, #0
 80087fc:	db3b      	blt.n	8008876 <_dtoa_r+0x21e>
 80087fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008800:	970e      	str	r7, [sp, #56]	@ 0x38
 8008802:	443b      	add	r3, r7
 8008804:	9309      	str	r3, [sp, #36]	@ 0x24
 8008806:	2300      	movs	r3, #0
 8008808:	930a      	str	r3, [sp, #40]	@ 0x28
 800880a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800880c:	2b09      	cmp	r3, #9
 800880e:	d866      	bhi.n	80088de <_dtoa_r+0x286>
 8008810:	2b05      	cmp	r3, #5
 8008812:	bfc4      	itt	gt
 8008814:	3b04      	subgt	r3, #4
 8008816:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008818:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800881a:	bfc8      	it	gt
 800881c:	2400      	movgt	r4, #0
 800881e:	f1a3 0302 	sub.w	r3, r3, #2
 8008822:	bfd8      	it	le
 8008824:	2401      	movle	r4, #1
 8008826:	2b03      	cmp	r3, #3
 8008828:	d864      	bhi.n	80088f4 <_dtoa_r+0x29c>
 800882a:	e8df f003 	tbb	[pc, r3]
 800882e:	382b      	.short	0x382b
 8008830:	5636      	.short	0x5636
 8008832:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008836:	441e      	add	r6, r3
 8008838:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800883c:	2b20      	cmp	r3, #32
 800883e:	bfc1      	itttt	gt
 8008840:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008844:	fa08 f803 	lslgt.w	r8, r8, r3
 8008848:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800884c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008850:	bfd6      	itet	le
 8008852:	f1c3 0320 	rsble	r3, r3, #32
 8008856:	ea48 0003 	orrgt.w	r0, r8, r3
 800885a:	fa04 f003 	lslle.w	r0, r4, r3
 800885e:	f7f7 fdc1 	bl	80003e4 <__aeabi_ui2d>
 8008862:	2201      	movs	r2, #1
 8008864:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008868:	3e01      	subs	r6, #1
 800886a:	9212      	str	r2, [sp, #72]	@ 0x48
 800886c:	e775      	b.n	800875a <_dtoa_r+0x102>
 800886e:	2301      	movs	r3, #1
 8008870:	e7b6      	b.n	80087e0 <_dtoa_r+0x188>
 8008872:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008874:	e7b5      	b.n	80087e2 <_dtoa_r+0x18a>
 8008876:	427b      	negs	r3, r7
 8008878:	930a      	str	r3, [sp, #40]	@ 0x28
 800887a:	2300      	movs	r3, #0
 800887c:	eba8 0807 	sub.w	r8, r8, r7
 8008880:	930e      	str	r3, [sp, #56]	@ 0x38
 8008882:	e7c2      	b.n	800880a <_dtoa_r+0x1b2>
 8008884:	2300      	movs	r3, #0
 8008886:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008888:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800888a:	2b00      	cmp	r3, #0
 800888c:	dc35      	bgt.n	80088fa <_dtoa_r+0x2a2>
 800888e:	2301      	movs	r3, #1
 8008890:	461a      	mov	r2, r3
 8008892:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008896:	9221      	str	r2, [sp, #132]	@ 0x84
 8008898:	e00b      	b.n	80088b2 <_dtoa_r+0x25a>
 800889a:	2301      	movs	r3, #1
 800889c:	e7f3      	b.n	8008886 <_dtoa_r+0x22e>
 800889e:	2300      	movs	r3, #0
 80088a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088a4:	18fb      	adds	r3, r7, r3
 80088a6:	9308      	str	r3, [sp, #32]
 80088a8:	3301      	adds	r3, #1
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	9307      	str	r3, [sp, #28]
 80088ae:	bfb8      	it	lt
 80088b0:	2301      	movlt	r3, #1
 80088b2:	2100      	movs	r1, #0
 80088b4:	2204      	movs	r2, #4
 80088b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80088ba:	f102 0514 	add.w	r5, r2, #20
 80088be:	429d      	cmp	r5, r3
 80088c0:	d91f      	bls.n	8008902 <_dtoa_r+0x2aa>
 80088c2:	6041      	str	r1, [r0, #4]
 80088c4:	4658      	mov	r0, fp
 80088c6:	f000 fd8d 	bl	80093e4 <_Balloc>
 80088ca:	4682      	mov	sl, r0
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d139      	bne.n	8008944 <_dtoa_r+0x2ec>
 80088d0:	4602      	mov	r2, r0
 80088d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80088d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008940 <_dtoa_r+0x2e8>)
 80088d8:	e6d2      	b.n	8008680 <_dtoa_r+0x28>
 80088da:	2301      	movs	r3, #1
 80088dc:	e7e0      	b.n	80088a0 <_dtoa_r+0x248>
 80088de:	2401      	movs	r4, #1
 80088e0:	2300      	movs	r3, #0
 80088e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80088e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80088e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088ea:	2200      	movs	r2, #0
 80088ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80088f0:	2312      	movs	r3, #18
 80088f2:	e7d0      	b.n	8008896 <_dtoa_r+0x23e>
 80088f4:	2301      	movs	r3, #1
 80088f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088f8:	e7f5      	b.n	80088e6 <_dtoa_r+0x28e>
 80088fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008900:	e7d7      	b.n	80088b2 <_dtoa_r+0x25a>
 8008902:	3101      	adds	r1, #1
 8008904:	0052      	lsls	r2, r2, #1
 8008906:	e7d8      	b.n	80088ba <_dtoa_r+0x262>
 8008908:	636f4361 	.word	0x636f4361
 800890c:	3fd287a7 	.word	0x3fd287a7
 8008910:	8b60c8b3 	.word	0x8b60c8b3
 8008914:	3fc68a28 	.word	0x3fc68a28
 8008918:	509f79fb 	.word	0x509f79fb
 800891c:	3fd34413 	.word	0x3fd34413
 8008920:	0800cfdc 	.word	0x0800cfdc
 8008924:	0800cff3 	.word	0x0800cff3
 8008928:	7ff00000 	.word	0x7ff00000
 800892c:	0800cfd8 	.word	0x0800cfd8
 8008930:	0800cfa7 	.word	0x0800cfa7
 8008934:	0800cfa6 	.word	0x0800cfa6
 8008938:	3ff80000 	.word	0x3ff80000
 800893c:	0800d0f0 	.word	0x0800d0f0
 8008940:	0800d04b 	.word	0x0800d04b
 8008944:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008948:	6018      	str	r0, [r3, #0]
 800894a:	9b07      	ldr	r3, [sp, #28]
 800894c:	2b0e      	cmp	r3, #14
 800894e:	f200 80a4 	bhi.w	8008a9a <_dtoa_r+0x442>
 8008952:	2c00      	cmp	r4, #0
 8008954:	f000 80a1 	beq.w	8008a9a <_dtoa_r+0x442>
 8008958:	2f00      	cmp	r7, #0
 800895a:	dd33      	ble.n	80089c4 <_dtoa_r+0x36c>
 800895c:	4b86      	ldr	r3, [pc, #536]	@ (8008b78 <_dtoa_r+0x520>)
 800895e:	f007 020f 	and.w	r2, r7, #15
 8008962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008966:	05f8      	lsls	r0, r7, #23
 8008968:	e9d3 3400 	ldrd	r3, r4, [r3]
 800896c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008970:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008974:	d516      	bpl.n	80089a4 <_dtoa_r+0x34c>
 8008976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800897a:	4b80      	ldr	r3, [pc, #512]	@ (8008b7c <_dtoa_r+0x524>)
 800897c:	2603      	movs	r6, #3
 800897e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008982:	f7f7 fed3 	bl	800072c <__aeabi_ddiv>
 8008986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800898a:	f004 040f 	and.w	r4, r4, #15
 800898e:	4d7b      	ldr	r5, [pc, #492]	@ (8008b7c <_dtoa_r+0x524>)
 8008990:	b954      	cbnz	r4, 80089a8 <_dtoa_r+0x350>
 8008992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800899a:	f7f7 fec7 	bl	800072c <__aeabi_ddiv>
 800899e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a2:	e028      	b.n	80089f6 <_dtoa_r+0x39e>
 80089a4:	2602      	movs	r6, #2
 80089a6:	e7f2      	b.n	800898e <_dtoa_r+0x336>
 80089a8:	07e1      	lsls	r1, r4, #31
 80089aa:	d508      	bpl.n	80089be <_dtoa_r+0x366>
 80089ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089b4:	f7f7 fd90 	bl	80004d8 <__aeabi_dmul>
 80089b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089bc:	3601      	adds	r6, #1
 80089be:	1064      	asrs	r4, r4, #1
 80089c0:	3508      	adds	r5, #8
 80089c2:	e7e5      	b.n	8008990 <_dtoa_r+0x338>
 80089c4:	f000 80d2 	beq.w	8008b6c <_dtoa_r+0x514>
 80089c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089cc:	427c      	negs	r4, r7
 80089ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008b78 <_dtoa_r+0x520>)
 80089d0:	f004 020f 	and.w	r2, r4, #15
 80089d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f7f7 fd7c 	bl	80004d8 <__aeabi_dmul>
 80089e0:	2602      	movs	r6, #2
 80089e2:	2300      	movs	r3, #0
 80089e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e8:	4d64      	ldr	r5, [pc, #400]	@ (8008b7c <_dtoa_r+0x524>)
 80089ea:	1124      	asrs	r4, r4, #4
 80089ec:	2c00      	cmp	r4, #0
 80089ee:	f040 80b2 	bne.w	8008b56 <_dtoa_r+0x4fe>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1d3      	bne.n	800899e <_dtoa_r+0x346>
 80089f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 80b7 	beq.w	8008b70 <_dtoa_r+0x518>
 8008a02:	2200      	movs	r2, #0
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	4b5d      	ldr	r3, [pc, #372]	@ (8008b80 <_dtoa_r+0x528>)
 8008a0a:	f7f7 ffd7 	bl	80009bc <__aeabi_dcmplt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f000 80ae 	beq.w	8008b70 <_dtoa_r+0x518>
 8008a14:	9b07      	ldr	r3, [sp, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80aa 	beq.w	8008b70 <_dtoa_r+0x518>
 8008a1c:	9b08      	ldr	r3, [sp, #32]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dd37      	ble.n	8008a92 <_dtoa_r+0x43a>
 8008a22:	1e7b      	subs	r3, r7, #1
 8008a24:	4620      	mov	r0, r4
 8008a26:	9304      	str	r3, [sp, #16]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4b55      	ldr	r3, [pc, #340]	@ (8008b84 <_dtoa_r+0x52c>)
 8008a2e:	f7f7 fd53 	bl	80004d8 <__aeabi_dmul>
 8008a32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a36:	9c08      	ldr	r4, [sp, #32]
 8008a38:	3601      	adds	r6, #1
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7f7 fce2 	bl	8000404 <__aeabi_i2d>
 8008a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a44:	f7f7 fd48 	bl	80004d8 <__aeabi_dmul>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8008b88 <_dtoa_r+0x530>)
 8008a4c:	f7f7 fb8e 	bl	800016c <__adddf3>
 8008a50:	4605      	mov	r5, r0
 8008a52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a56:	2c00      	cmp	r4, #0
 8008a58:	f040 809a 	bne.w	8008b90 <_dtoa_r+0x538>
 8008a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a60:	2200      	movs	r2, #0
 8008a62:	4b4a      	ldr	r3, [pc, #296]	@ (8008b8c <_dtoa_r+0x534>)
 8008a64:	f7f7 fb80 	bl	8000168 <__aeabi_dsub>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a70:	462a      	mov	r2, r5
 8008a72:	4633      	mov	r3, r6
 8008a74:	f7f7 ffc0 	bl	80009f8 <__aeabi_dcmpgt>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	f040 828e 	bne.w	8008f9a <_dtoa_r+0x942>
 8008a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a82:	462a      	mov	r2, r5
 8008a84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a88:	f7f7 ff98 	bl	80009bc <__aeabi_dcmplt>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f040 8127 	bne.w	8008ce0 <_dtoa_r+0x688>
 8008a92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f2c0 8163 	blt.w	8008d68 <_dtoa_r+0x710>
 8008aa2:	2f0e      	cmp	r7, #14
 8008aa4:	f300 8160 	bgt.w	8008d68 <_dtoa_r+0x710>
 8008aa8:	4b33      	ldr	r3, [pc, #204]	@ (8008b78 <_dtoa_r+0x520>)
 8008aaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008aae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ab2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ab6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da03      	bge.n	8008ac4 <_dtoa_r+0x46c>
 8008abc:	9b07      	ldr	r3, [sp, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f340 8100 	ble.w	8008cc4 <_dtoa_r+0x66c>
 8008ac4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ac8:	4656      	mov	r6, sl
 8008aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f7 fe2b 	bl	800072c <__aeabi_ddiv>
 8008ad6:	f7f7 ffaf 	bl	8000a38 <__aeabi_d2iz>
 8008ada:	4680      	mov	r8, r0
 8008adc:	f7f7 fc92 	bl	8000404 <__aeabi_i2d>
 8008ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ae4:	f7f7 fcf8 	bl	80004d8 <__aeabi_dmul>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4620      	mov	r0, r4
 8008aee:	4629      	mov	r1, r5
 8008af0:	f7f7 fb3a 	bl	8000168 <__aeabi_dsub>
 8008af4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008af8:	9d07      	ldr	r5, [sp, #28]
 8008afa:	f806 4b01 	strb.w	r4, [r6], #1
 8008afe:	eba6 040a 	sub.w	r4, r6, sl
 8008b02:	42a5      	cmp	r5, r4
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	f040 8116 	bne.w	8008d38 <_dtoa_r+0x6e0>
 8008b0c:	f7f7 fb2e 	bl	800016c <__adddf3>
 8008b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b14:	4604      	mov	r4, r0
 8008b16:	460d      	mov	r5, r1
 8008b18:	f7f7 ff6e 	bl	80009f8 <__aeabi_dcmpgt>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f040 80f8 	bne.w	8008d12 <_dtoa_r+0x6ba>
 8008b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 ff3d 	bl	80009a8 <__aeabi_dcmpeq>
 8008b2e:	b118      	cbz	r0, 8008b38 <_dtoa_r+0x4e0>
 8008b30:	f018 0f01 	tst.w	r8, #1
 8008b34:	f040 80ed 	bne.w	8008d12 <_dtoa_r+0x6ba>
 8008b38:	4649      	mov	r1, r9
 8008b3a:	4658      	mov	r0, fp
 8008b3c:	f000 fc92 	bl	8009464 <_Bfree>
 8008b40:	2300      	movs	r3, #0
 8008b42:	7033      	strb	r3, [r6, #0]
 8008b44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008b46:	3701      	adds	r7, #1
 8008b48:	601f      	str	r7, [r3, #0]
 8008b4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8320 	beq.w	8009192 <_dtoa_r+0xb3a>
 8008b52:	601e      	str	r6, [r3, #0]
 8008b54:	e31d      	b.n	8009192 <_dtoa_r+0xb3a>
 8008b56:	07e2      	lsls	r2, r4, #31
 8008b58:	d505      	bpl.n	8008b66 <_dtoa_r+0x50e>
 8008b5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b5e:	f7f7 fcbb 	bl	80004d8 <__aeabi_dmul>
 8008b62:	2301      	movs	r3, #1
 8008b64:	3601      	adds	r6, #1
 8008b66:	1064      	asrs	r4, r4, #1
 8008b68:	3508      	adds	r5, #8
 8008b6a:	e73f      	b.n	80089ec <_dtoa_r+0x394>
 8008b6c:	2602      	movs	r6, #2
 8008b6e:	e742      	b.n	80089f6 <_dtoa_r+0x39e>
 8008b70:	9c07      	ldr	r4, [sp, #28]
 8008b72:	9704      	str	r7, [sp, #16]
 8008b74:	e761      	b.n	8008a3a <_dtoa_r+0x3e2>
 8008b76:	bf00      	nop
 8008b78:	0800d0f0 	.word	0x0800d0f0
 8008b7c:	0800d0c8 	.word	0x0800d0c8
 8008b80:	3ff00000 	.word	0x3ff00000
 8008b84:	40240000 	.word	0x40240000
 8008b88:	401c0000 	.word	0x401c0000
 8008b8c:	40140000 	.word	0x40140000
 8008b90:	4b70      	ldr	r3, [pc, #448]	@ (8008d54 <_dtoa_r+0x6fc>)
 8008b92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b9c:	4454      	add	r4, sl
 8008b9e:	2900      	cmp	r1, #0
 8008ba0:	d045      	beq.n	8008c2e <_dtoa_r+0x5d6>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	496c      	ldr	r1, [pc, #432]	@ (8008d58 <_dtoa_r+0x700>)
 8008ba6:	f7f7 fdc1 	bl	800072c <__aeabi_ddiv>
 8008baa:	4633      	mov	r3, r6
 8008bac:	462a      	mov	r2, r5
 8008bae:	f7f7 fadb 	bl	8000168 <__aeabi_dsub>
 8008bb2:	4656      	mov	r6, sl
 8008bb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bbc:	f7f7 ff3c 	bl	8000a38 <__aeabi_d2iz>
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	f7f7 fc1f 	bl	8000404 <__aeabi_i2d>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bce:	f7f7 facb 	bl	8000168 <__aeabi_dsub>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	3530      	adds	r5, #48	@ 0x30
 8008bd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008be0:	f806 5b01 	strb.w	r5, [r6], #1
 8008be4:	f7f7 feea 	bl	80009bc <__aeabi_dcmplt>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d163      	bne.n	8008cb4 <_dtoa_r+0x65c>
 8008bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	495a      	ldr	r1, [pc, #360]	@ (8008d5c <_dtoa_r+0x704>)
 8008bf4:	f7f7 fab8 	bl	8000168 <__aeabi_dsub>
 8008bf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bfc:	f7f7 fede 	bl	80009bc <__aeabi_dcmplt>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f040 8087 	bne.w	8008d14 <_dtoa_r+0x6bc>
 8008c06:	42a6      	cmp	r6, r4
 8008c08:	f43f af43 	beq.w	8008a92 <_dtoa_r+0x43a>
 8008c0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b53      	ldr	r3, [pc, #332]	@ (8008d60 <_dtoa_r+0x708>)
 8008c14:	f7f7 fc60 	bl	80004d8 <__aeabi_dmul>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c22:	4b4f      	ldr	r3, [pc, #316]	@ (8008d60 <_dtoa_r+0x708>)
 8008c24:	f7f7 fc58 	bl	80004d8 <__aeabi_dmul>
 8008c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c2c:	e7c4      	b.n	8008bb8 <_dtoa_r+0x560>
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	f7f7 fc51 	bl	80004d8 <__aeabi_dmul>
 8008c36:	4656      	mov	r6, sl
 8008c38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c3c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c42:	f7f7 fef9 	bl	8000a38 <__aeabi_d2iz>
 8008c46:	4605      	mov	r5, r0
 8008c48:	f7f7 fbdc 	bl	8000404 <__aeabi_i2d>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c54:	f7f7 fa88 	bl	8000168 <__aeabi_dsub>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	3530      	adds	r5, #48	@ 0x30
 8008c5e:	f806 5b01 	strb.w	r5, [r6], #1
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	d124      	bne.n	8008cb8 <_dtoa_r+0x660>
 8008c6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c72:	4b39      	ldr	r3, [pc, #228]	@ (8008d58 <_dtoa_r+0x700>)
 8008c74:	f7f7 fa7a 	bl	800016c <__adddf3>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c80:	f7f7 feba 	bl	80009f8 <__aeabi_dcmpgt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d145      	bne.n	8008d14 <_dtoa_r+0x6bc>
 8008c88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4932      	ldr	r1, [pc, #200]	@ (8008d58 <_dtoa_r+0x700>)
 8008c90:	f7f7 fa6a 	bl	8000168 <__aeabi_dsub>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c9c:	f7f7 fe8e 	bl	80009bc <__aeabi_dcmplt>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f43f aef6 	beq.w	8008a92 <_dtoa_r+0x43a>
 8008ca6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008ca8:	1e73      	subs	r3, r6, #1
 8008caa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cb0:	2b30      	cmp	r3, #48	@ 0x30
 8008cb2:	d0f8      	beq.n	8008ca6 <_dtoa_r+0x64e>
 8008cb4:	9f04      	ldr	r7, [sp, #16]
 8008cb6:	e73f      	b.n	8008b38 <_dtoa_r+0x4e0>
 8008cb8:	4b29      	ldr	r3, [pc, #164]	@ (8008d60 <_dtoa_r+0x708>)
 8008cba:	f7f7 fc0d 	bl	80004d8 <__aeabi_dmul>
 8008cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc2:	e7bc      	b.n	8008c3e <_dtoa_r+0x5e6>
 8008cc4:	d10c      	bne.n	8008ce0 <_dtoa_r+0x688>
 8008cc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4b25      	ldr	r3, [pc, #148]	@ (8008d64 <_dtoa_r+0x70c>)
 8008cce:	f7f7 fc03 	bl	80004d8 <__aeabi_dmul>
 8008cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cd6:	f7f7 fe85 	bl	80009e4 <__aeabi_dcmpge>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f000 815b 	beq.w	8008f96 <_dtoa_r+0x93e>
 8008ce0:	2400      	movs	r4, #0
 8008ce2:	4625      	mov	r5, r4
 8008ce4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ce6:	4656      	mov	r6, sl
 8008ce8:	43db      	mvns	r3, r3
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	2700      	movs	r7, #0
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4658      	mov	r0, fp
 8008cf2:	f000 fbb7 	bl	8009464 <_Bfree>
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	d0dc      	beq.n	8008cb4 <_dtoa_r+0x65c>
 8008cfa:	b12f      	cbz	r7, 8008d08 <_dtoa_r+0x6b0>
 8008cfc:	42af      	cmp	r7, r5
 8008cfe:	d003      	beq.n	8008d08 <_dtoa_r+0x6b0>
 8008d00:	4639      	mov	r1, r7
 8008d02:	4658      	mov	r0, fp
 8008d04:	f000 fbae 	bl	8009464 <_Bfree>
 8008d08:	4629      	mov	r1, r5
 8008d0a:	4658      	mov	r0, fp
 8008d0c:	f000 fbaa 	bl	8009464 <_Bfree>
 8008d10:	e7d0      	b.n	8008cb4 <_dtoa_r+0x65c>
 8008d12:	9704      	str	r7, [sp, #16]
 8008d14:	4633      	mov	r3, r6
 8008d16:	461e      	mov	r6, r3
 8008d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d1c:	2a39      	cmp	r2, #57	@ 0x39
 8008d1e:	d107      	bne.n	8008d30 <_dtoa_r+0x6d8>
 8008d20:	459a      	cmp	sl, r3
 8008d22:	d1f8      	bne.n	8008d16 <_dtoa_r+0x6be>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	3201      	adds	r2, #1
 8008d28:	9204      	str	r2, [sp, #16]
 8008d2a:	2230      	movs	r2, #48	@ 0x30
 8008d2c:	f88a 2000 	strb.w	r2, [sl]
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	3201      	adds	r2, #1
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	e7bd      	b.n	8008cb4 <_dtoa_r+0x65c>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4b09      	ldr	r3, [pc, #36]	@ (8008d60 <_dtoa_r+0x708>)
 8008d3c:	f7f7 fbcc 	bl	80004d8 <__aeabi_dmul>
 8008d40:	2200      	movs	r2, #0
 8008d42:	2300      	movs	r3, #0
 8008d44:	4604      	mov	r4, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	f7f7 fe2e 	bl	80009a8 <__aeabi_dcmpeq>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f aebc 	beq.w	8008aca <_dtoa_r+0x472>
 8008d52:	e6f1      	b.n	8008b38 <_dtoa_r+0x4e0>
 8008d54:	0800d0f0 	.word	0x0800d0f0
 8008d58:	3fe00000 	.word	0x3fe00000
 8008d5c:	3ff00000 	.word	0x3ff00000
 8008d60:	40240000 	.word	0x40240000
 8008d64:	40140000 	.word	0x40140000
 8008d68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d6a:	2a00      	cmp	r2, #0
 8008d6c:	f000 80db 	beq.w	8008f26 <_dtoa_r+0x8ce>
 8008d70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d72:	2a01      	cmp	r2, #1
 8008d74:	f300 80bf 	bgt.w	8008ef6 <_dtoa_r+0x89e>
 8008d78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008d7a:	2a00      	cmp	r2, #0
 8008d7c:	f000 80b7 	beq.w	8008eee <_dtoa_r+0x896>
 8008d80:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d84:	4646      	mov	r6, r8
 8008d86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	441a      	add	r2, r3
 8008d8e:	4658      	mov	r0, fp
 8008d90:	4498      	add	r8, r3
 8008d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d94:	f000 fc64 	bl	8009660 <__i2b>
 8008d98:	4605      	mov	r5, r0
 8008d9a:	b15e      	cbz	r6, 8008db4 <_dtoa_r+0x75c>
 8008d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dd08      	ble.n	8008db4 <_dtoa_r+0x75c>
 8008da2:	42b3      	cmp	r3, r6
 8008da4:	bfa8      	it	ge
 8008da6:	4633      	movge	r3, r6
 8008da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008daa:	eba8 0803 	sub.w	r8, r8, r3
 8008dae:	1af6      	subs	r6, r6, r3
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008db6:	b1f3      	cbz	r3, 8008df6 <_dtoa_r+0x79e>
 8008db8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 80b7 	beq.w	8008f2e <_dtoa_r+0x8d6>
 8008dc0:	b18c      	cbz	r4, 8008de6 <_dtoa_r+0x78e>
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4658      	mov	r0, fp
 8008dc8:	f000 fd08 	bl	80097dc <__pow5mult>
 8008dcc:	464a      	mov	r2, r9
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	4658      	mov	r0, fp
 8008dd4:	f000 fc5a 	bl	800968c <__multiply>
 8008dd8:	4649      	mov	r1, r9
 8008dda:	9004      	str	r0, [sp, #16]
 8008ddc:	4658      	mov	r0, fp
 8008dde:	f000 fb41 	bl	8009464 <_Bfree>
 8008de2:	9b04      	ldr	r3, [sp, #16]
 8008de4:	4699      	mov	r9, r3
 8008de6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008de8:	1b1a      	subs	r2, r3, r4
 8008dea:	d004      	beq.n	8008df6 <_dtoa_r+0x79e>
 8008dec:	4649      	mov	r1, r9
 8008dee:	4658      	mov	r0, fp
 8008df0:	f000 fcf4 	bl	80097dc <__pow5mult>
 8008df4:	4681      	mov	r9, r0
 8008df6:	2101      	movs	r1, #1
 8008df8:	4658      	mov	r0, fp
 8008dfa:	f000 fc31 	bl	8009660 <__i2b>
 8008dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e00:	4604      	mov	r4, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 81c9 	beq.w	800919a <_dtoa_r+0xb42>
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4658      	mov	r0, fp
 8008e0e:	f000 fce5 	bl	80097dc <__pow5mult>
 8008e12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e14:	4604      	mov	r4, r0
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	f300 808f 	bgt.w	8008f3a <_dtoa_r+0x8e2>
 8008e1c:	9b02      	ldr	r3, [sp, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 8087 	bne.w	8008f32 <_dtoa_r+0x8da>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f040 8083 	bne.w	8008f36 <_dtoa_r+0x8de>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e36:	0d1b      	lsrs	r3, r3, #20
 8008e38:	051b      	lsls	r3, r3, #20
 8008e3a:	b12b      	cbz	r3, 8008e48 <_dtoa_r+0x7f0>
 8008e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3e:	f108 0801 	add.w	r8, r8, #1
 8008e42:	3301      	adds	r3, #1
 8008e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e46:	2301      	movs	r3, #1
 8008e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 81aa 	beq.w	80091a6 <_dtoa_r+0xb4e>
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e58:	6918      	ldr	r0, [r3, #16]
 8008e5a:	f000 fbb5 	bl	80095c8 <__hi0bits>
 8008e5e:	f1c0 0020 	rsb	r0, r0, #32
 8008e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e64:	4418      	add	r0, r3
 8008e66:	f010 001f 	ands.w	r0, r0, #31
 8008e6a:	d071      	beq.n	8008f50 <_dtoa_r+0x8f8>
 8008e6c:	f1c0 0320 	rsb	r3, r0, #32
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	dd65      	ble.n	8008f40 <_dtoa_r+0x8e8>
 8008e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e76:	f1c0 001c 	rsb	r0, r0, #28
 8008e7a:	4403      	add	r3, r0
 8008e7c:	4480      	add	r8, r0
 8008e7e:	4406      	add	r6, r0
 8008e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e82:	f1b8 0f00 	cmp.w	r8, #0
 8008e86:	dd05      	ble.n	8008e94 <_dtoa_r+0x83c>
 8008e88:	4649      	mov	r1, r9
 8008e8a:	4642      	mov	r2, r8
 8008e8c:	4658      	mov	r0, fp
 8008e8e:	f000 fcff 	bl	8009890 <__lshift>
 8008e92:	4681      	mov	r9, r0
 8008e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dd05      	ble.n	8008ea6 <_dtoa_r+0x84e>
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4658      	mov	r0, fp
 8008ea0:	f000 fcf6 	bl	8009890 <__lshift>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d053      	beq.n	8008f54 <_dtoa_r+0x8fc>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4648      	mov	r0, r9
 8008eb0:	f000 fd5a 	bl	8009968 <__mcmp>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	da4d      	bge.n	8008f54 <_dtoa_r+0x8fc>
 8008eb8:	1e7b      	subs	r3, r7, #1
 8008eba:	4649      	mov	r1, r9
 8008ebc:	9304      	str	r3, [sp, #16]
 8008ebe:	220a      	movs	r2, #10
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4658      	mov	r0, fp
 8008ec4:	f000 faf0 	bl	80094a8 <__multadd>
 8008ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eca:	4681      	mov	r9, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 816c 	beq.w	80091aa <_dtoa_r+0xb52>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	220a      	movs	r2, #10
 8008ed8:	4658      	mov	r0, fp
 8008eda:	f000 fae5 	bl	80094a8 <__multadd>
 8008ede:	9b08      	ldr	r3, [sp, #32]
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dc61      	bgt.n	8008faa <_dtoa_r+0x952>
 8008ee6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	dc3b      	bgt.n	8008f64 <_dtoa_r+0x90c>
 8008eec:	e05d      	b.n	8008faa <_dtoa_r+0x952>
 8008eee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ef0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008ef4:	e746      	b.n	8008d84 <_dtoa_r+0x72c>
 8008ef6:	9b07      	ldr	r3, [sp, #28]
 8008ef8:	1e5c      	subs	r4, r3, #1
 8008efa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	bfbf      	itttt	lt
 8008f00:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f02:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008f04:	1ae3      	sublt	r3, r4, r3
 8008f06:	18d2      	addlt	r2, r2, r3
 8008f08:	bfa8      	it	ge
 8008f0a:	1b1c      	subge	r4, r3, r4
 8008f0c:	9b07      	ldr	r3, [sp, #28]
 8008f0e:	bfbe      	ittt	lt
 8008f10:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f12:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008f14:	2400      	movlt	r4, #0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb5      	itete	lt
 8008f1a:	eba8 0603 	sublt.w	r6, r8, r3
 8008f1e:	4646      	movge	r6, r8
 8008f20:	2300      	movlt	r3, #0
 8008f22:	9b07      	ldrge	r3, [sp, #28]
 8008f24:	e730      	b.n	8008d88 <_dtoa_r+0x730>
 8008f26:	4646      	mov	r6, r8
 8008f28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f2c:	e735      	b.n	8008d9a <_dtoa_r+0x742>
 8008f2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f30:	e75c      	b.n	8008dec <_dtoa_r+0x794>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e788      	b.n	8008e48 <_dtoa_r+0x7f0>
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	e786      	b.n	8008e48 <_dtoa_r+0x7f0>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f3e:	e788      	b.n	8008e52 <_dtoa_r+0x7fa>
 8008f40:	d09f      	beq.n	8008e82 <_dtoa_r+0x82a>
 8008f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f44:	331c      	adds	r3, #28
 8008f46:	441a      	add	r2, r3
 8008f48:	4498      	add	r8, r3
 8008f4a:	441e      	add	r6, r3
 8008f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f4e:	e798      	b.n	8008e82 <_dtoa_r+0x82a>
 8008f50:	4603      	mov	r3, r0
 8008f52:	e7f6      	b.n	8008f42 <_dtoa_r+0x8ea>
 8008f54:	9b07      	ldr	r3, [sp, #28]
 8008f56:	9704      	str	r7, [sp, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dc20      	bgt.n	8008f9e <_dtoa_r+0x946>
 8008f5c:	9308      	str	r3, [sp, #32]
 8008f5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	dd1e      	ble.n	8008fa2 <_dtoa_r+0x94a>
 8008f64:	9b08      	ldr	r3, [sp, #32]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f47f aebc 	bne.w	8008ce4 <_dtoa_r+0x68c>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	2205      	movs	r2, #5
 8008f70:	4658      	mov	r0, fp
 8008f72:	f000 fa99 	bl	80094a8 <__multadd>
 8008f76:	4601      	mov	r1, r0
 8008f78:	4604      	mov	r4, r0
 8008f7a:	4648      	mov	r0, r9
 8008f7c:	f000 fcf4 	bl	8009968 <__mcmp>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	f77f aeaf 	ble.w	8008ce4 <_dtoa_r+0x68c>
 8008f86:	2331      	movs	r3, #49	@ 0x31
 8008f88:	4656      	mov	r6, sl
 8008f8a:	f806 3b01 	strb.w	r3, [r6], #1
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	3301      	adds	r3, #1
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	e6aa      	b.n	8008cec <_dtoa_r+0x694>
 8008f96:	9c07      	ldr	r4, [sp, #28]
 8008f98:	9704      	str	r7, [sp, #16]
 8008f9a:	4625      	mov	r5, r4
 8008f9c:	e7f3      	b.n	8008f86 <_dtoa_r+0x92e>
 8008f9e:	9b07      	ldr	r3, [sp, #28]
 8008fa0:	9308      	str	r3, [sp, #32]
 8008fa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8104 	beq.w	80091b2 <_dtoa_r+0xb5a>
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	dd05      	ble.n	8008fba <_dtoa_r+0x962>
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	4658      	mov	r0, fp
 8008fb4:	f000 fc6c 	bl	8009890 <__lshift>
 8008fb8:	4605      	mov	r5, r0
 8008fba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05a      	beq.n	8009076 <_dtoa_r+0xa1e>
 8008fc0:	4658      	mov	r0, fp
 8008fc2:	6869      	ldr	r1, [r5, #4]
 8008fc4:	f000 fa0e 	bl	80093e4 <_Balloc>
 8008fc8:	4606      	mov	r6, r0
 8008fca:	b928      	cbnz	r0, 8008fd8 <_dtoa_r+0x980>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008fd2:	4b83      	ldr	r3, [pc, #524]	@ (80091e0 <_dtoa_r+0xb88>)
 8008fd4:	f7ff bb54 	b.w	8008680 <_dtoa_r+0x28>
 8008fd8:	692a      	ldr	r2, [r5, #16]
 8008fda:	f105 010c 	add.w	r1, r5, #12
 8008fde:	3202      	adds	r2, #2
 8008fe0:	0092      	lsls	r2, r2, #2
 8008fe2:	300c      	adds	r0, #12
 8008fe4:	f7ff fa9d 	bl	8008522 <memcpy>
 8008fe8:	2201      	movs	r2, #1
 8008fea:	4631      	mov	r1, r6
 8008fec:	4658      	mov	r0, fp
 8008fee:	f000 fc4f 	bl	8009890 <__lshift>
 8008ff2:	462f      	mov	r7, r5
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	f10a 0301 	add.w	r3, sl, #1
 8008ffa:	9307      	str	r3, [sp, #28]
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	4453      	add	r3, sl
 8009000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	930a      	str	r3, [sp, #40]	@ 0x28
 800900a:	9b07      	ldr	r3, [sp, #28]
 800900c:	4621      	mov	r1, r4
 800900e:	3b01      	subs	r3, #1
 8009010:	4648      	mov	r0, r9
 8009012:	9302      	str	r3, [sp, #8]
 8009014:	f7ff fa98 	bl	8008548 <quorem>
 8009018:	4639      	mov	r1, r7
 800901a:	9008      	str	r0, [sp, #32]
 800901c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009020:	4648      	mov	r0, r9
 8009022:	f000 fca1 	bl	8009968 <__mcmp>
 8009026:	462a      	mov	r2, r5
 8009028:	9009      	str	r0, [sp, #36]	@ 0x24
 800902a:	4621      	mov	r1, r4
 800902c:	4658      	mov	r0, fp
 800902e:	f000 fcb7 	bl	80099a0 <__mdiff>
 8009032:	68c2      	ldr	r2, [r0, #12]
 8009034:	4606      	mov	r6, r0
 8009036:	bb02      	cbnz	r2, 800907a <_dtoa_r+0xa22>
 8009038:	4601      	mov	r1, r0
 800903a:	4648      	mov	r0, r9
 800903c:	f000 fc94 	bl	8009968 <__mcmp>
 8009040:	4602      	mov	r2, r0
 8009042:	4631      	mov	r1, r6
 8009044:	4658      	mov	r0, fp
 8009046:	920c      	str	r2, [sp, #48]	@ 0x30
 8009048:	f000 fa0c 	bl	8009464 <_Bfree>
 800904c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800904e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009050:	9e07      	ldr	r6, [sp, #28]
 8009052:	ea43 0102 	orr.w	r1, r3, r2
 8009056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009058:	4319      	orrs	r1, r3
 800905a:	d110      	bne.n	800907e <_dtoa_r+0xa26>
 800905c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009060:	d029      	beq.n	80090b6 <_dtoa_r+0xa5e>
 8009062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd02      	ble.n	800906e <_dtoa_r+0xa16>
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800906e:	9b02      	ldr	r3, [sp, #8]
 8009070:	f883 8000 	strb.w	r8, [r3]
 8009074:	e63b      	b.n	8008cee <_dtoa_r+0x696>
 8009076:	4628      	mov	r0, r5
 8009078:	e7bb      	b.n	8008ff2 <_dtoa_r+0x99a>
 800907a:	2201      	movs	r2, #1
 800907c:	e7e1      	b.n	8009042 <_dtoa_r+0x9ea>
 800907e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	db04      	blt.n	800908e <_dtoa_r+0xa36>
 8009084:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009086:	430b      	orrs	r3, r1
 8009088:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800908a:	430b      	orrs	r3, r1
 800908c:	d120      	bne.n	80090d0 <_dtoa_r+0xa78>
 800908e:	2a00      	cmp	r2, #0
 8009090:	dded      	ble.n	800906e <_dtoa_r+0xa16>
 8009092:	4649      	mov	r1, r9
 8009094:	2201      	movs	r2, #1
 8009096:	4658      	mov	r0, fp
 8009098:	f000 fbfa 	bl	8009890 <__lshift>
 800909c:	4621      	mov	r1, r4
 800909e:	4681      	mov	r9, r0
 80090a0:	f000 fc62 	bl	8009968 <__mcmp>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dc03      	bgt.n	80090b0 <_dtoa_r+0xa58>
 80090a8:	d1e1      	bne.n	800906e <_dtoa_r+0xa16>
 80090aa:	f018 0f01 	tst.w	r8, #1
 80090ae:	d0de      	beq.n	800906e <_dtoa_r+0xa16>
 80090b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090b4:	d1d8      	bne.n	8009068 <_dtoa_r+0xa10>
 80090b6:	2339      	movs	r3, #57	@ 0x39
 80090b8:	9a02      	ldr	r2, [sp, #8]
 80090ba:	7013      	strb	r3, [r2, #0]
 80090bc:	4633      	mov	r3, r6
 80090be:	461e      	mov	r6, r3
 80090c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	2a39      	cmp	r2, #57	@ 0x39
 80090c8:	d052      	beq.n	8009170 <_dtoa_r+0xb18>
 80090ca:	3201      	adds	r2, #1
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e60e      	b.n	8008cee <_dtoa_r+0x696>
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	dd07      	ble.n	80090e4 <_dtoa_r+0xa8c>
 80090d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090d8:	d0ed      	beq.n	80090b6 <_dtoa_r+0xa5e>
 80090da:	9a02      	ldr	r2, [sp, #8]
 80090dc:	f108 0301 	add.w	r3, r8, #1
 80090e0:	7013      	strb	r3, [r2, #0]
 80090e2:	e604      	b.n	8008cee <_dtoa_r+0x696>
 80090e4:	9b07      	ldr	r3, [sp, #28]
 80090e6:	9a07      	ldr	r2, [sp, #28]
 80090e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80090ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d028      	beq.n	8009144 <_dtoa_r+0xaec>
 80090f2:	4649      	mov	r1, r9
 80090f4:	2300      	movs	r3, #0
 80090f6:	220a      	movs	r2, #10
 80090f8:	4658      	mov	r0, fp
 80090fa:	f000 f9d5 	bl	80094a8 <__multadd>
 80090fe:	42af      	cmp	r7, r5
 8009100:	4681      	mov	r9, r0
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	f04f 020a 	mov.w	r2, #10
 800910a:	4639      	mov	r1, r7
 800910c:	4658      	mov	r0, fp
 800910e:	d107      	bne.n	8009120 <_dtoa_r+0xac8>
 8009110:	f000 f9ca 	bl	80094a8 <__multadd>
 8009114:	4607      	mov	r7, r0
 8009116:	4605      	mov	r5, r0
 8009118:	9b07      	ldr	r3, [sp, #28]
 800911a:	3301      	adds	r3, #1
 800911c:	9307      	str	r3, [sp, #28]
 800911e:	e774      	b.n	800900a <_dtoa_r+0x9b2>
 8009120:	f000 f9c2 	bl	80094a8 <__multadd>
 8009124:	4629      	mov	r1, r5
 8009126:	4607      	mov	r7, r0
 8009128:	2300      	movs	r3, #0
 800912a:	220a      	movs	r2, #10
 800912c:	4658      	mov	r0, fp
 800912e:	f000 f9bb 	bl	80094a8 <__multadd>
 8009132:	4605      	mov	r5, r0
 8009134:	e7f0      	b.n	8009118 <_dtoa_r+0xac0>
 8009136:	9b08      	ldr	r3, [sp, #32]
 8009138:	2700      	movs	r7, #0
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfcc      	ite	gt
 800913e:	461e      	movgt	r6, r3
 8009140:	2601      	movle	r6, #1
 8009142:	4456      	add	r6, sl
 8009144:	4649      	mov	r1, r9
 8009146:	2201      	movs	r2, #1
 8009148:	4658      	mov	r0, fp
 800914a:	f000 fba1 	bl	8009890 <__lshift>
 800914e:	4621      	mov	r1, r4
 8009150:	4681      	mov	r9, r0
 8009152:	f000 fc09 	bl	8009968 <__mcmp>
 8009156:	2800      	cmp	r0, #0
 8009158:	dcb0      	bgt.n	80090bc <_dtoa_r+0xa64>
 800915a:	d102      	bne.n	8009162 <_dtoa_r+0xb0a>
 800915c:	f018 0f01 	tst.w	r8, #1
 8009160:	d1ac      	bne.n	80090bc <_dtoa_r+0xa64>
 8009162:	4633      	mov	r3, r6
 8009164:	461e      	mov	r6, r3
 8009166:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800916a:	2a30      	cmp	r2, #48	@ 0x30
 800916c:	d0fa      	beq.n	8009164 <_dtoa_r+0xb0c>
 800916e:	e5be      	b.n	8008cee <_dtoa_r+0x696>
 8009170:	459a      	cmp	sl, r3
 8009172:	d1a4      	bne.n	80090be <_dtoa_r+0xa66>
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	3301      	adds	r3, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	2331      	movs	r3, #49	@ 0x31
 800917c:	f88a 3000 	strb.w	r3, [sl]
 8009180:	e5b5      	b.n	8008cee <_dtoa_r+0x696>
 8009182:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009184:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80091e4 <_dtoa_r+0xb8c>
 8009188:	b11b      	cbz	r3, 8009192 <_dtoa_r+0xb3a>
 800918a:	f10a 0308 	add.w	r3, sl, #8
 800918e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	4650      	mov	r0, sl
 8009194:	b017      	add	sp, #92	@ 0x5c
 8009196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800919c:	2b01      	cmp	r3, #1
 800919e:	f77f ae3d 	ble.w	8008e1c <_dtoa_r+0x7c4>
 80091a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a6:	2001      	movs	r0, #1
 80091a8:	e65b      	b.n	8008e62 <_dtoa_r+0x80a>
 80091aa:	9b08      	ldr	r3, [sp, #32]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f77f aed6 	ble.w	8008f5e <_dtoa_r+0x906>
 80091b2:	4656      	mov	r6, sl
 80091b4:	4621      	mov	r1, r4
 80091b6:	4648      	mov	r0, r9
 80091b8:	f7ff f9c6 	bl	8008548 <quorem>
 80091bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091c0:	9b08      	ldr	r3, [sp, #32]
 80091c2:	f806 8b01 	strb.w	r8, [r6], #1
 80091c6:	eba6 020a 	sub.w	r2, r6, sl
 80091ca:	4293      	cmp	r3, r2
 80091cc:	ddb3      	ble.n	8009136 <_dtoa_r+0xade>
 80091ce:	4649      	mov	r1, r9
 80091d0:	2300      	movs	r3, #0
 80091d2:	220a      	movs	r2, #10
 80091d4:	4658      	mov	r0, fp
 80091d6:	f000 f967 	bl	80094a8 <__multadd>
 80091da:	4681      	mov	r9, r0
 80091dc:	e7ea      	b.n	80091b4 <_dtoa_r+0xb5c>
 80091de:	bf00      	nop
 80091e0:	0800d04b 	.word	0x0800d04b
 80091e4:	0800cfcf 	.word	0x0800cfcf

080091e8 <_free_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4605      	mov	r5, r0
 80091ec:	2900      	cmp	r1, #0
 80091ee:	d040      	beq.n	8009272 <_free_r+0x8a>
 80091f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f4:	1f0c      	subs	r4, r1, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	bfb8      	it	lt
 80091fa:	18e4      	addlt	r4, r4, r3
 80091fc:	f000 f8e6 	bl	80093cc <__malloc_lock>
 8009200:	4a1c      	ldr	r2, [pc, #112]	@ (8009274 <_free_r+0x8c>)
 8009202:	6813      	ldr	r3, [r2, #0]
 8009204:	b933      	cbnz	r3, 8009214 <_free_r+0x2c>
 8009206:	6063      	str	r3, [r4, #4]
 8009208:	6014      	str	r4, [r2, #0]
 800920a:	4628      	mov	r0, r5
 800920c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009210:	f000 b8e2 	b.w	80093d8 <__malloc_unlock>
 8009214:	42a3      	cmp	r3, r4
 8009216:	d908      	bls.n	800922a <_free_r+0x42>
 8009218:	6820      	ldr	r0, [r4, #0]
 800921a:	1821      	adds	r1, r4, r0
 800921c:	428b      	cmp	r3, r1
 800921e:	bf01      	itttt	eq
 8009220:	6819      	ldreq	r1, [r3, #0]
 8009222:	685b      	ldreq	r3, [r3, #4]
 8009224:	1809      	addeq	r1, r1, r0
 8009226:	6021      	streq	r1, [r4, #0]
 8009228:	e7ed      	b.n	8009206 <_free_r+0x1e>
 800922a:	461a      	mov	r2, r3
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	b10b      	cbz	r3, 8009234 <_free_r+0x4c>
 8009230:	42a3      	cmp	r3, r4
 8009232:	d9fa      	bls.n	800922a <_free_r+0x42>
 8009234:	6811      	ldr	r1, [r2, #0]
 8009236:	1850      	adds	r0, r2, r1
 8009238:	42a0      	cmp	r0, r4
 800923a:	d10b      	bne.n	8009254 <_free_r+0x6c>
 800923c:	6820      	ldr	r0, [r4, #0]
 800923e:	4401      	add	r1, r0
 8009240:	1850      	adds	r0, r2, r1
 8009242:	4283      	cmp	r3, r0
 8009244:	6011      	str	r1, [r2, #0]
 8009246:	d1e0      	bne.n	800920a <_free_r+0x22>
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	4408      	add	r0, r1
 800924e:	6010      	str	r0, [r2, #0]
 8009250:	6053      	str	r3, [r2, #4]
 8009252:	e7da      	b.n	800920a <_free_r+0x22>
 8009254:	d902      	bls.n	800925c <_free_r+0x74>
 8009256:	230c      	movs	r3, #12
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	e7d6      	b.n	800920a <_free_r+0x22>
 800925c:	6820      	ldr	r0, [r4, #0]
 800925e:	1821      	adds	r1, r4, r0
 8009260:	428b      	cmp	r3, r1
 8009262:	bf01      	itttt	eq
 8009264:	6819      	ldreq	r1, [r3, #0]
 8009266:	685b      	ldreq	r3, [r3, #4]
 8009268:	1809      	addeq	r1, r1, r0
 800926a:	6021      	streq	r1, [r4, #0]
 800926c:	6063      	str	r3, [r4, #4]
 800926e:	6054      	str	r4, [r2, #4]
 8009270:	e7cb      	b.n	800920a <_free_r+0x22>
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20000998 	.word	0x20000998

08009278 <malloc>:
 8009278:	4b02      	ldr	r3, [pc, #8]	@ (8009284 <malloc+0xc>)
 800927a:	4601      	mov	r1, r0
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	f000 b825 	b.w	80092cc <_malloc_r>
 8009282:	bf00      	nop
 8009284:	20000020 	.word	0x20000020

08009288 <sbrk_aligned>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	4e0f      	ldr	r6, [pc, #60]	@ (80092c8 <sbrk_aligned+0x40>)
 800928c:	460c      	mov	r4, r1
 800928e:	6831      	ldr	r1, [r6, #0]
 8009290:	4605      	mov	r5, r0
 8009292:	b911      	cbnz	r1, 800929a <sbrk_aligned+0x12>
 8009294:	f001 fdf6 	bl	800ae84 <_sbrk_r>
 8009298:	6030      	str	r0, [r6, #0]
 800929a:	4621      	mov	r1, r4
 800929c:	4628      	mov	r0, r5
 800929e:	f001 fdf1 	bl	800ae84 <_sbrk_r>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d103      	bne.n	80092ae <sbrk_aligned+0x26>
 80092a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80092aa:	4620      	mov	r0, r4
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	1cc4      	adds	r4, r0, #3
 80092b0:	f024 0403 	bic.w	r4, r4, #3
 80092b4:	42a0      	cmp	r0, r4
 80092b6:	d0f8      	beq.n	80092aa <sbrk_aligned+0x22>
 80092b8:	1a21      	subs	r1, r4, r0
 80092ba:	4628      	mov	r0, r5
 80092bc:	f001 fde2 	bl	800ae84 <_sbrk_r>
 80092c0:	3001      	adds	r0, #1
 80092c2:	d1f2      	bne.n	80092aa <sbrk_aligned+0x22>
 80092c4:	e7ef      	b.n	80092a6 <sbrk_aligned+0x1e>
 80092c6:	bf00      	nop
 80092c8:	20000994 	.word	0x20000994

080092cc <_malloc_r>:
 80092cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d0:	1ccd      	adds	r5, r1, #3
 80092d2:	f025 0503 	bic.w	r5, r5, #3
 80092d6:	3508      	adds	r5, #8
 80092d8:	2d0c      	cmp	r5, #12
 80092da:	bf38      	it	cc
 80092dc:	250c      	movcc	r5, #12
 80092de:	2d00      	cmp	r5, #0
 80092e0:	4606      	mov	r6, r0
 80092e2:	db01      	blt.n	80092e8 <_malloc_r+0x1c>
 80092e4:	42a9      	cmp	r1, r5
 80092e6:	d904      	bls.n	80092f2 <_malloc_r+0x26>
 80092e8:	230c      	movs	r3, #12
 80092ea:	6033      	str	r3, [r6, #0]
 80092ec:	2000      	movs	r0, #0
 80092ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093c8 <_malloc_r+0xfc>
 80092f6:	f000 f869 	bl	80093cc <__malloc_lock>
 80092fa:	f8d8 3000 	ldr.w	r3, [r8]
 80092fe:	461c      	mov	r4, r3
 8009300:	bb44      	cbnz	r4, 8009354 <_malloc_r+0x88>
 8009302:	4629      	mov	r1, r5
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff ffbf 	bl	8009288 <sbrk_aligned>
 800930a:	1c43      	adds	r3, r0, #1
 800930c:	4604      	mov	r4, r0
 800930e:	d158      	bne.n	80093c2 <_malloc_r+0xf6>
 8009310:	f8d8 4000 	ldr.w	r4, [r8]
 8009314:	4627      	mov	r7, r4
 8009316:	2f00      	cmp	r7, #0
 8009318:	d143      	bne.n	80093a2 <_malloc_r+0xd6>
 800931a:	2c00      	cmp	r4, #0
 800931c:	d04b      	beq.n	80093b6 <_malloc_r+0xea>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	4639      	mov	r1, r7
 8009322:	4630      	mov	r0, r6
 8009324:	eb04 0903 	add.w	r9, r4, r3
 8009328:	f001 fdac 	bl	800ae84 <_sbrk_r>
 800932c:	4581      	cmp	r9, r0
 800932e:	d142      	bne.n	80093b6 <_malloc_r+0xea>
 8009330:	6821      	ldr	r1, [r4, #0]
 8009332:	4630      	mov	r0, r6
 8009334:	1a6d      	subs	r5, r5, r1
 8009336:	4629      	mov	r1, r5
 8009338:	f7ff ffa6 	bl	8009288 <sbrk_aligned>
 800933c:	3001      	adds	r0, #1
 800933e:	d03a      	beq.n	80093b6 <_malloc_r+0xea>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	442b      	add	r3, r5
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	f8d8 3000 	ldr.w	r3, [r8]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	bb62      	cbnz	r2, 80093a8 <_malloc_r+0xdc>
 800934e:	f8c8 7000 	str.w	r7, [r8]
 8009352:	e00f      	b.n	8009374 <_malloc_r+0xa8>
 8009354:	6822      	ldr	r2, [r4, #0]
 8009356:	1b52      	subs	r2, r2, r5
 8009358:	d420      	bmi.n	800939c <_malloc_r+0xd0>
 800935a:	2a0b      	cmp	r2, #11
 800935c:	d917      	bls.n	800938e <_malloc_r+0xc2>
 800935e:	1961      	adds	r1, r4, r5
 8009360:	42a3      	cmp	r3, r4
 8009362:	6025      	str	r5, [r4, #0]
 8009364:	bf18      	it	ne
 8009366:	6059      	strne	r1, [r3, #4]
 8009368:	6863      	ldr	r3, [r4, #4]
 800936a:	bf08      	it	eq
 800936c:	f8c8 1000 	streq.w	r1, [r8]
 8009370:	5162      	str	r2, [r4, r5]
 8009372:	604b      	str	r3, [r1, #4]
 8009374:	4630      	mov	r0, r6
 8009376:	f000 f82f 	bl	80093d8 <__malloc_unlock>
 800937a:	f104 000b 	add.w	r0, r4, #11
 800937e:	1d23      	adds	r3, r4, #4
 8009380:	f020 0007 	bic.w	r0, r0, #7
 8009384:	1ac2      	subs	r2, r0, r3
 8009386:	bf1c      	itt	ne
 8009388:	1a1b      	subne	r3, r3, r0
 800938a:	50a3      	strne	r3, [r4, r2]
 800938c:	e7af      	b.n	80092ee <_malloc_r+0x22>
 800938e:	6862      	ldr	r2, [r4, #4]
 8009390:	42a3      	cmp	r3, r4
 8009392:	bf0c      	ite	eq
 8009394:	f8c8 2000 	streq.w	r2, [r8]
 8009398:	605a      	strne	r2, [r3, #4]
 800939a:	e7eb      	b.n	8009374 <_malloc_r+0xa8>
 800939c:	4623      	mov	r3, r4
 800939e:	6864      	ldr	r4, [r4, #4]
 80093a0:	e7ae      	b.n	8009300 <_malloc_r+0x34>
 80093a2:	463c      	mov	r4, r7
 80093a4:	687f      	ldr	r7, [r7, #4]
 80093a6:	e7b6      	b.n	8009316 <_malloc_r+0x4a>
 80093a8:	461a      	mov	r2, r3
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d1fb      	bne.n	80093a8 <_malloc_r+0xdc>
 80093b0:	2300      	movs	r3, #0
 80093b2:	6053      	str	r3, [r2, #4]
 80093b4:	e7de      	b.n	8009374 <_malloc_r+0xa8>
 80093b6:	230c      	movs	r3, #12
 80093b8:	4630      	mov	r0, r6
 80093ba:	6033      	str	r3, [r6, #0]
 80093bc:	f000 f80c 	bl	80093d8 <__malloc_unlock>
 80093c0:	e794      	b.n	80092ec <_malloc_r+0x20>
 80093c2:	6005      	str	r5, [r0, #0]
 80093c4:	e7d6      	b.n	8009374 <_malloc_r+0xa8>
 80093c6:	bf00      	nop
 80093c8:	20000998 	.word	0x20000998

080093cc <__malloc_lock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	@ (80093d4 <__malloc_lock+0x8>)
 80093ce:	f7ff b898 	b.w	8008502 <__retarget_lock_acquire_recursive>
 80093d2:	bf00      	nop
 80093d4:	20000990 	.word	0x20000990

080093d8 <__malloc_unlock>:
 80093d8:	4801      	ldr	r0, [pc, #4]	@ (80093e0 <__malloc_unlock+0x8>)
 80093da:	f7ff b893 	b.w	8008504 <__retarget_lock_release_recursive>
 80093de:	bf00      	nop
 80093e0:	20000990 	.word	0x20000990

080093e4 <_Balloc>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	69c6      	ldr	r6, [r0, #28]
 80093e8:	4604      	mov	r4, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	b976      	cbnz	r6, 800940c <_Balloc+0x28>
 80093ee:	2010      	movs	r0, #16
 80093f0:	f7ff ff42 	bl	8009278 <malloc>
 80093f4:	4602      	mov	r2, r0
 80093f6:	61e0      	str	r0, [r4, #28]
 80093f8:	b920      	cbnz	r0, 8009404 <_Balloc+0x20>
 80093fa:	216b      	movs	r1, #107	@ 0x6b
 80093fc:	4b17      	ldr	r3, [pc, #92]	@ (800945c <_Balloc+0x78>)
 80093fe:	4818      	ldr	r0, [pc, #96]	@ (8009460 <_Balloc+0x7c>)
 8009400:	f001 fd56 	bl	800aeb0 <__assert_func>
 8009404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009408:	6006      	str	r6, [r0, #0]
 800940a:	60c6      	str	r6, [r0, #12]
 800940c:	69e6      	ldr	r6, [r4, #28]
 800940e:	68f3      	ldr	r3, [r6, #12]
 8009410:	b183      	cbz	r3, 8009434 <_Balloc+0x50>
 8009412:	69e3      	ldr	r3, [r4, #28]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800941a:	b9b8      	cbnz	r0, 800944c <_Balloc+0x68>
 800941c:	2101      	movs	r1, #1
 800941e:	fa01 f605 	lsl.w	r6, r1, r5
 8009422:	1d72      	adds	r2, r6, #5
 8009424:	4620      	mov	r0, r4
 8009426:	0092      	lsls	r2, r2, #2
 8009428:	f001 fd60 	bl	800aeec <_calloc_r>
 800942c:	b160      	cbz	r0, 8009448 <_Balloc+0x64>
 800942e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009432:	e00e      	b.n	8009452 <_Balloc+0x6e>
 8009434:	2221      	movs	r2, #33	@ 0x21
 8009436:	2104      	movs	r1, #4
 8009438:	4620      	mov	r0, r4
 800943a:	f001 fd57 	bl	800aeec <_calloc_r>
 800943e:	69e3      	ldr	r3, [r4, #28]
 8009440:	60f0      	str	r0, [r6, #12]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e4      	bne.n	8009412 <_Balloc+0x2e>
 8009448:	2000      	movs	r0, #0
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	6802      	ldr	r2, [r0, #0]
 800944e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009452:	2300      	movs	r3, #0
 8009454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009458:	e7f7      	b.n	800944a <_Balloc+0x66>
 800945a:	bf00      	nop
 800945c:	0800cfdc 	.word	0x0800cfdc
 8009460:	0800d05c 	.word	0x0800d05c

08009464 <_Bfree>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	69c6      	ldr	r6, [r0, #28]
 8009468:	4605      	mov	r5, r0
 800946a:	460c      	mov	r4, r1
 800946c:	b976      	cbnz	r6, 800948c <_Bfree+0x28>
 800946e:	2010      	movs	r0, #16
 8009470:	f7ff ff02 	bl	8009278 <malloc>
 8009474:	4602      	mov	r2, r0
 8009476:	61e8      	str	r0, [r5, #28]
 8009478:	b920      	cbnz	r0, 8009484 <_Bfree+0x20>
 800947a:	218f      	movs	r1, #143	@ 0x8f
 800947c:	4b08      	ldr	r3, [pc, #32]	@ (80094a0 <_Bfree+0x3c>)
 800947e:	4809      	ldr	r0, [pc, #36]	@ (80094a4 <_Bfree+0x40>)
 8009480:	f001 fd16 	bl	800aeb0 <__assert_func>
 8009484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009488:	6006      	str	r6, [r0, #0]
 800948a:	60c6      	str	r6, [r0, #12]
 800948c:	b13c      	cbz	r4, 800949e <_Bfree+0x3a>
 800948e:	69eb      	ldr	r3, [r5, #28]
 8009490:	6862      	ldr	r2, [r4, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009498:	6021      	str	r1, [r4, #0]
 800949a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	0800cfdc 	.word	0x0800cfdc
 80094a4:	0800d05c 	.word	0x0800d05c

080094a8 <__multadd>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	4607      	mov	r7, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	461e      	mov	r6, r3
 80094b2:	2000      	movs	r0, #0
 80094b4:	690d      	ldr	r5, [r1, #16]
 80094b6:	f101 0c14 	add.w	ip, r1, #20
 80094ba:	f8dc 3000 	ldr.w	r3, [ip]
 80094be:	3001      	adds	r0, #1
 80094c0:	b299      	uxth	r1, r3
 80094c2:	fb02 6101 	mla	r1, r2, r1, r6
 80094c6:	0c1e      	lsrs	r6, r3, #16
 80094c8:	0c0b      	lsrs	r3, r1, #16
 80094ca:	fb02 3306 	mla	r3, r2, r6, r3
 80094ce:	b289      	uxth	r1, r1
 80094d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094d4:	4285      	cmp	r5, r0
 80094d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094da:	f84c 1b04 	str.w	r1, [ip], #4
 80094de:	dcec      	bgt.n	80094ba <__multadd+0x12>
 80094e0:	b30e      	cbz	r6, 8009526 <__multadd+0x7e>
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dc19      	bgt.n	800951c <__multadd+0x74>
 80094e8:	6861      	ldr	r1, [r4, #4]
 80094ea:	4638      	mov	r0, r7
 80094ec:	3101      	adds	r1, #1
 80094ee:	f7ff ff79 	bl	80093e4 <_Balloc>
 80094f2:	4680      	mov	r8, r0
 80094f4:	b928      	cbnz	r0, 8009502 <__multadd+0x5a>
 80094f6:	4602      	mov	r2, r0
 80094f8:	21ba      	movs	r1, #186	@ 0xba
 80094fa:	4b0c      	ldr	r3, [pc, #48]	@ (800952c <__multadd+0x84>)
 80094fc:	480c      	ldr	r0, [pc, #48]	@ (8009530 <__multadd+0x88>)
 80094fe:	f001 fcd7 	bl	800aeb0 <__assert_func>
 8009502:	6922      	ldr	r2, [r4, #16]
 8009504:	f104 010c 	add.w	r1, r4, #12
 8009508:	3202      	adds	r2, #2
 800950a:	0092      	lsls	r2, r2, #2
 800950c:	300c      	adds	r0, #12
 800950e:	f7ff f808 	bl	8008522 <memcpy>
 8009512:	4621      	mov	r1, r4
 8009514:	4638      	mov	r0, r7
 8009516:	f7ff ffa5 	bl	8009464 <_Bfree>
 800951a:	4644      	mov	r4, r8
 800951c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009520:	3501      	adds	r5, #1
 8009522:	615e      	str	r6, [r3, #20]
 8009524:	6125      	str	r5, [r4, #16]
 8009526:	4620      	mov	r0, r4
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952c:	0800d04b 	.word	0x0800d04b
 8009530:	0800d05c 	.word	0x0800d05c

08009534 <__s2b>:
 8009534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009538:	4615      	mov	r5, r2
 800953a:	2209      	movs	r2, #9
 800953c:	461f      	mov	r7, r3
 800953e:	3308      	adds	r3, #8
 8009540:	460c      	mov	r4, r1
 8009542:	fb93 f3f2 	sdiv	r3, r3, r2
 8009546:	4606      	mov	r6, r0
 8009548:	2201      	movs	r2, #1
 800954a:	2100      	movs	r1, #0
 800954c:	429a      	cmp	r2, r3
 800954e:	db09      	blt.n	8009564 <__s2b+0x30>
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff ff47 	bl	80093e4 <_Balloc>
 8009556:	b940      	cbnz	r0, 800956a <__s2b+0x36>
 8009558:	4602      	mov	r2, r0
 800955a:	21d3      	movs	r1, #211	@ 0xd3
 800955c:	4b18      	ldr	r3, [pc, #96]	@ (80095c0 <__s2b+0x8c>)
 800955e:	4819      	ldr	r0, [pc, #100]	@ (80095c4 <__s2b+0x90>)
 8009560:	f001 fca6 	bl	800aeb0 <__assert_func>
 8009564:	0052      	lsls	r2, r2, #1
 8009566:	3101      	adds	r1, #1
 8009568:	e7f0      	b.n	800954c <__s2b+0x18>
 800956a:	9b08      	ldr	r3, [sp, #32]
 800956c:	2d09      	cmp	r5, #9
 800956e:	6143      	str	r3, [r0, #20]
 8009570:	f04f 0301 	mov.w	r3, #1
 8009574:	6103      	str	r3, [r0, #16]
 8009576:	dd16      	ble.n	80095a6 <__s2b+0x72>
 8009578:	f104 0909 	add.w	r9, r4, #9
 800957c:	46c8      	mov	r8, r9
 800957e:	442c      	add	r4, r5
 8009580:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009584:	4601      	mov	r1, r0
 8009586:	220a      	movs	r2, #10
 8009588:	4630      	mov	r0, r6
 800958a:	3b30      	subs	r3, #48	@ 0x30
 800958c:	f7ff ff8c 	bl	80094a8 <__multadd>
 8009590:	45a0      	cmp	r8, r4
 8009592:	d1f5      	bne.n	8009580 <__s2b+0x4c>
 8009594:	f1a5 0408 	sub.w	r4, r5, #8
 8009598:	444c      	add	r4, r9
 800959a:	1b2d      	subs	r5, r5, r4
 800959c:	1963      	adds	r3, r4, r5
 800959e:	42bb      	cmp	r3, r7
 80095a0:	db04      	blt.n	80095ac <__s2b+0x78>
 80095a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a6:	2509      	movs	r5, #9
 80095a8:	340a      	adds	r4, #10
 80095aa:	e7f6      	b.n	800959a <__s2b+0x66>
 80095ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095b0:	4601      	mov	r1, r0
 80095b2:	220a      	movs	r2, #10
 80095b4:	4630      	mov	r0, r6
 80095b6:	3b30      	subs	r3, #48	@ 0x30
 80095b8:	f7ff ff76 	bl	80094a8 <__multadd>
 80095bc:	e7ee      	b.n	800959c <__s2b+0x68>
 80095be:	bf00      	nop
 80095c0:	0800d04b 	.word	0x0800d04b
 80095c4:	0800d05c 	.word	0x0800d05c

080095c8 <__hi0bits>:
 80095c8:	4603      	mov	r3, r0
 80095ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095ce:	bf3a      	itte	cc
 80095d0:	0403      	lslcc	r3, r0, #16
 80095d2:	2010      	movcc	r0, #16
 80095d4:	2000      	movcs	r0, #0
 80095d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095da:	bf3c      	itt	cc
 80095dc:	021b      	lslcc	r3, r3, #8
 80095de:	3008      	addcc	r0, #8
 80095e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095e4:	bf3c      	itt	cc
 80095e6:	011b      	lslcc	r3, r3, #4
 80095e8:	3004      	addcc	r0, #4
 80095ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ee:	bf3c      	itt	cc
 80095f0:	009b      	lslcc	r3, r3, #2
 80095f2:	3002      	addcc	r0, #2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	db05      	blt.n	8009604 <__hi0bits+0x3c>
 80095f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80095fc:	f100 0001 	add.w	r0, r0, #1
 8009600:	bf08      	it	eq
 8009602:	2020      	moveq	r0, #32
 8009604:	4770      	bx	lr

08009606 <__lo0bits>:
 8009606:	6803      	ldr	r3, [r0, #0]
 8009608:	4602      	mov	r2, r0
 800960a:	f013 0007 	ands.w	r0, r3, #7
 800960e:	d00b      	beq.n	8009628 <__lo0bits+0x22>
 8009610:	07d9      	lsls	r1, r3, #31
 8009612:	d421      	bmi.n	8009658 <__lo0bits+0x52>
 8009614:	0798      	lsls	r0, r3, #30
 8009616:	bf49      	itett	mi
 8009618:	085b      	lsrmi	r3, r3, #1
 800961a:	089b      	lsrpl	r3, r3, #2
 800961c:	2001      	movmi	r0, #1
 800961e:	6013      	strmi	r3, [r2, #0]
 8009620:	bf5c      	itt	pl
 8009622:	2002      	movpl	r0, #2
 8009624:	6013      	strpl	r3, [r2, #0]
 8009626:	4770      	bx	lr
 8009628:	b299      	uxth	r1, r3
 800962a:	b909      	cbnz	r1, 8009630 <__lo0bits+0x2a>
 800962c:	2010      	movs	r0, #16
 800962e:	0c1b      	lsrs	r3, r3, #16
 8009630:	b2d9      	uxtb	r1, r3
 8009632:	b909      	cbnz	r1, 8009638 <__lo0bits+0x32>
 8009634:	3008      	adds	r0, #8
 8009636:	0a1b      	lsrs	r3, r3, #8
 8009638:	0719      	lsls	r1, r3, #28
 800963a:	bf04      	itt	eq
 800963c:	091b      	lsreq	r3, r3, #4
 800963e:	3004      	addeq	r0, #4
 8009640:	0799      	lsls	r1, r3, #30
 8009642:	bf04      	itt	eq
 8009644:	089b      	lsreq	r3, r3, #2
 8009646:	3002      	addeq	r0, #2
 8009648:	07d9      	lsls	r1, r3, #31
 800964a:	d403      	bmi.n	8009654 <__lo0bits+0x4e>
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	f100 0001 	add.w	r0, r0, #1
 8009652:	d003      	beq.n	800965c <__lo0bits+0x56>
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	4770      	bx	lr
 8009658:	2000      	movs	r0, #0
 800965a:	4770      	bx	lr
 800965c:	2020      	movs	r0, #32
 800965e:	4770      	bx	lr

08009660 <__i2b>:
 8009660:	b510      	push	{r4, lr}
 8009662:	460c      	mov	r4, r1
 8009664:	2101      	movs	r1, #1
 8009666:	f7ff febd 	bl	80093e4 <_Balloc>
 800966a:	4602      	mov	r2, r0
 800966c:	b928      	cbnz	r0, 800967a <__i2b+0x1a>
 800966e:	f240 1145 	movw	r1, #325	@ 0x145
 8009672:	4b04      	ldr	r3, [pc, #16]	@ (8009684 <__i2b+0x24>)
 8009674:	4804      	ldr	r0, [pc, #16]	@ (8009688 <__i2b+0x28>)
 8009676:	f001 fc1b 	bl	800aeb0 <__assert_func>
 800967a:	2301      	movs	r3, #1
 800967c:	6144      	str	r4, [r0, #20]
 800967e:	6103      	str	r3, [r0, #16]
 8009680:	bd10      	pop	{r4, pc}
 8009682:	bf00      	nop
 8009684:	0800d04b 	.word	0x0800d04b
 8009688:	0800d05c 	.word	0x0800d05c

0800968c <__multiply>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	4614      	mov	r4, r2
 8009692:	690a      	ldr	r2, [r1, #16]
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	460f      	mov	r7, r1
 8009698:	429a      	cmp	r2, r3
 800969a:	bfa2      	ittt	ge
 800969c:	4623      	movge	r3, r4
 800969e:	460c      	movge	r4, r1
 80096a0:	461f      	movge	r7, r3
 80096a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80096a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	6861      	ldr	r1, [r4, #4]
 80096ae:	eb0a 0609 	add.w	r6, sl, r9
 80096b2:	42b3      	cmp	r3, r6
 80096b4:	b085      	sub	sp, #20
 80096b6:	bfb8      	it	lt
 80096b8:	3101      	addlt	r1, #1
 80096ba:	f7ff fe93 	bl	80093e4 <_Balloc>
 80096be:	b930      	cbnz	r0, 80096ce <__multiply+0x42>
 80096c0:	4602      	mov	r2, r0
 80096c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096c6:	4b43      	ldr	r3, [pc, #268]	@ (80097d4 <__multiply+0x148>)
 80096c8:	4843      	ldr	r0, [pc, #268]	@ (80097d8 <__multiply+0x14c>)
 80096ca:	f001 fbf1 	bl	800aeb0 <__assert_func>
 80096ce:	f100 0514 	add.w	r5, r0, #20
 80096d2:	462b      	mov	r3, r5
 80096d4:	2200      	movs	r2, #0
 80096d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096da:	4543      	cmp	r3, r8
 80096dc:	d321      	bcc.n	8009722 <__multiply+0x96>
 80096de:	f107 0114 	add.w	r1, r7, #20
 80096e2:	f104 0214 	add.w	r2, r4, #20
 80096e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80096ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80096ee:	9302      	str	r3, [sp, #8]
 80096f0:	1b13      	subs	r3, r2, r4
 80096f2:	3b15      	subs	r3, #21
 80096f4:	f023 0303 	bic.w	r3, r3, #3
 80096f8:	3304      	adds	r3, #4
 80096fa:	f104 0715 	add.w	r7, r4, #21
 80096fe:	42ba      	cmp	r2, r7
 8009700:	bf38      	it	cc
 8009702:	2304      	movcc	r3, #4
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	9b02      	ldr	r3, [sp, #8]
 8009708:	9103      	str	r1, [sp, #12]
 800970a:	428b      	cmp	r3, r1
 800970c:	d80c      	bhi.n	8009728 <__multiply+0x9c>
 800970e:	2e00      	cmp	r6, #0
 8009710:	dd03      	ble.n	800971a <__multiply+0x8e>
 8009712:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009716:	2b00      	cmp	r3, #0
 8009718:	d05a      	beq.n	80097d0 <__multiply+0x144>
 800971a:	6106      	str	r6, [r0, #16]
 800971c:	b005      	add	sp, #20
 800971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	f843 2b04 	str.w	r2, [r3], #4
 8009726:	e7d8      	b.n	80096da <__multiply+0x4e>
 8009728:	f8b1 a000 	ldrh.w	sl, [r1]
 800972c:	f1ba 0f00 	cmp.w	sl, #0
 8009730:	d023      	beq.n	800977a <__multiply+0xee>
 8009732:	46a9      	mov	r9, r5
 8009734:	f04f 0c00 	mov.w	ip, #0
 8009738:	f104 0e14 	add.w	lr, r4, #20
 800973c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009740:	f8d9 3000 	ldr.w	r3, [r9]
 8009744:	fa1f fb87 	uxth.w	fp, r7
 8009748:	b29b      	uxth	r3, r3
 800974a:	fb0a 330b 	mla	r3, sl, fp, r3
 800974e:	4463      	add	r3, ip
 8009750:	f8d9 c000 	ldr.w	ip, [r9]
 8009754:	0c3f      	lsrs	r7, r7, #16
 8009756:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800975a:	fb0a c707 	mla	r7, sl, r7, ip
 800975e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009762:	b29b      	uxth	r3, r3
 8009764:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009768:	4572      	cmp	r2, lr
 800976a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800976e:	f849 3b04 	str.w	r3, [r9], #4
 8009772:	d8e3      	bhi.n	800973c <__multiply+0xb0>
 8009774:	9b01      	ldr	r3, [sp, #4]
 8009776:	f845 c003 	str.w	ip, [r5, r3]
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	3104      	adds	r1, #4
 800977e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009782:	f1b9 0f00 	cmp.w	r9, #0
 8009786:	d021      	beq.n	80097cc <__multiply+0x140>
 8009788:	46ae      	mov	lr, r5
 800978a:	f04f 0a00 	mov.w	sl, #0
 800978e:	682b      	ldr	r3, [r5, #0]
 8009790:	f104 0c14 	add.w	ip, r4, #20
 8009794:	f8bc b000 	ldrh.w	fp, [ip]
 8009798:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800979c:	b29b      	uxth	r3, r3
 800979e:	fb09 770b 	mla	r7, r9, fp, r7
 80097a2:	4457      	add	r7, sl
 80097a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097a8:	f84e 3b04 	str.w	r3, [lr], #4
 80097ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097b4:	f8be 3000 	ldrh.w	r3, [lr]
 80097b8:	4562      	cmp	r2, ip
 80097ba:	fb09 330a 	mla	r3, r9, sl, r3
 80097be:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097c6:	d8e5      	bhi.n	8009794 <__multiply+0x108>
 80097c8:	9f01      	ldr	r7, [sp, #4]
 80097ca:	51eb      	str	r3, [r5, r7]
 80097cc:	3504      	adds	r5, #4
 80097ce:	e79a      	b.n	8009706 <__multiply+0x7a>
 80097d0:	3e01      	subs	r6, #1
 80097d2:	e79c      	b.n	800970e <__multiply+0x82>
 80097d4:	0800d04b 	.word	0x0800d04b
 80097d8:	0800d05c 	.word	0x0800d05c

080097dc <__pow5mult>:
 80097dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e0:	4615      	mov	r5, r2
 80097e2:	f012 0203 	ands.w	r2, r2, #3
 80097e6:	4607      	mov	r7, r0
 80097e8:	460e      	mov	r6, r1
 80097ea:	d007      	beq.n	80097fc <__pow5mult+0x20>
 80097ec:	4c25      	ldr	r4, [pc, #148]	@ (8009884 <__pow5mult+0xa8>)
 80097ee:	3a01      	subs	r2, #1
 80097f0:	2300      	movs	r3, #0
 80097f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097f6:	f7ff fe57 	bl	80094a8 <__multadd>
 80097fa:	4606      	mov	r6, r0
 80097fc:	10ad      	asrs	r5, r5, #2
 80097fe:	d03d      	beq.n	800987c <__pow5mult+0xa0>
 8009800:	69fc      	ldr	r4, [r7, #28]
 8009802:	b97c      	cbnz	r4, 8009824 <__pow5mult+0x48>
 8009804:	2010      	movs	r0, #16
 8009806:	f7ff fd37 	bl	8009278 <malloc>
 800980a:	4602      	mov	r2, r0
 800980c:	61f8      	str	r0, [r7, #28]
 800980e:	b928      	cbnz	r0, 800981c <__pow5mult+0x40>
 8009810:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009814:	4b1c      	ldr	r3, [pc, #112]	@ (8009888 <__pow5mult+0xac>)
 8009816:	481d      	ldr	r0, [pc, #116]	@ (800988c <__pow5mult+0xb0>)
 8009818:	f001 fb4a 	bl	800aeb0 <__assert_func>
 800981c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009820:	6004      	str	r4, [r0, #0]
 8009822:	60c4      	str	r4, [r0, #12]
 8009824:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800982c:	b94c      	cbnz	r4, 8009842 <__pow5mult+0x66>
 800982e:	f240 2171 	movw	r1, #625	@ 0x271
 8009832:	4638      	mov	r0, r7
 8009834:	f7ff ff14 	bl	8009660 <__i2b>
 8009838:	2300      	movs	r3, #0
 800983a:	4604      	mov	r4, r0
 800983c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009840:	6003      	str	r3, [r0, #0]
 8009842:	f04f 0900 	mov.w	r9, #0
 8009846:	07eb      	lsls	r3, r5, #31
 8009848:	d50a      	bpl.n	8009860 <__pow5mult+0x84>
 800984a:	4631      	mov	r1, r6
 800984c:	4622      	mov	r2, r4
 800984e:	4638      	mov	r0, r7
 8009850:	f7ff ff1c 	bl	800968c <__multiply>
 8009854:	4680      	mov	r8, r0
 8009856:	4631      	mov	r1, r6
 8009858:	4638      	mov	r0, r7
 800985a:	f7ff fe03 	bl	8009464 <_Bfree>
 800985e:	4646      	mov	r6, r8
 8009860:	106d      	asrs	r5, r5, #1
 8009862:	d00b      	beq.n	800987c <__pow5mult+0xa0>
 8009864:	6820      	ldr	r0, [r4, #0]
 8009866:	b938      	cbnz	r0, 8009878 <__pow5mult+0x9c>
 8009868:	4622      	mov	r2, r4
 800986a:	4621      	mov	r1, r4
 800986c:	4638      	mov	r0, r7
 800986e:	f7ff ff0d 	bl	800968c <__multiply>
 8009872:	6020      	str	r0, [r4, #0]
 8009874:	f8c0 9000 	str.w	r9, [r0]
 8009878:	4604      	mov	r4, r0
 800987a:	e7e4      	b.n	8009846 <__pow5mult+0x6a>
 800987c:	4630      	mov	r0, r6
 800987e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009882:	bf00      	nop
 8009884:	0800d0b8 	.word	0x0800d0b8
 8009888:	0800cfdc 	.word	0x0800cfdc
 800988c:	0800d05c 	.word	0x0800d05c

08009890 <__lshift>:
 8009890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009894:	460c      	mov	r4, r1
 8009896:	4607      	mov	r7, r0
 8009898:	4691      	mov	r9, r2
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	6849      	ldr	r1, [r1, #4]
 800989e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098a8:	f108 0601 	add.w	r6, r8, #1
 80098ac:	42b3      	cmp	r3, r6
 80098ae:	db0b      	blt.n	80098c8 <__lshift+0x38>
 80098b0:	4638      	mov	r0, r7
 80098b2:	f7ff fd97 	bl	80093e4 <_Balloc>
 80098b6:	4605      	mov	r5, r0
 80098b8:	b948      	cbnz	r0, 80098ce <__lshift+0x3e>
 80098ba:	4602      	mov	r2, r0
 80098bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098c0:	4b27      	ldr	r3, [pc, #156]	@ (8009960 <__lshift+0xd0>)
 80098c2:	4828      	ldr	r0, [pc, #160]	@ (8009964 <__lshift+0xd4>)
 80098c4:	f001 faf4 	bl	800aeb0 <__assert_func>
 80098c8:	3101      	adds	r1, #1
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	e7ee      	b.n	80098ac <__lshift+0x1c>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f100 0114 	add.w	r1, r0, #20
 80098d4:	f100 0210 	add.w	r2, r0, #16
 80098d8:	4618      	mov	r0, r3
 80098da:	4553      	cmp	r3, sl
 80098dc:	db33      	blt.n	8009946 <__lshift+0xb6>
 80098de:	6920      	ldr	r0, [r4, #16]
 80098e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098e4:	f104 0314 	add.w	r3, r4, #20
 80098e8:	f019 091f 	ands.w	r9, r9, #31
 80098ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098f4:	d02b      	beq.n	800994e <__lshift+0xbe>
 80098f6:	468a      	mov	sl, r1
 80098f8:	2200      	movs	r2, #0
 80098fa:	f1c9 0e20 	rsb	lr, r9, #32
 80098fe:	6818      	ldr	r0, [r3, #0]
 8009900:	fa00 f009 	lsl.w	r0, r0, r9
 8009904:	4310      	orrs	r0, r2
 8009906:	f84a 0b04 	str.w	r0, [sl], #4
 800990a:	f853 2b04 	ldr.w	r2, [r3], #4
 800990e:	459c      	cmp	ip, r3
 8009910:	fa22 f20e 	lsr.w	r2, r2, lr
 8009914:	d8f3      	bhi.n	80098fe <__lshift+0x6e>
 8009916:	ebac 0304 	sub.w	r3, ip, r4
 800991a:	3b15      	subs	r3, #21
 800991c:	f023 0303 	bic.w	r3, r3, #3
 8009920:	3304      	adds	r3, #4
 8009922:	f104 0015 	add.w	r0, r4, #21
 8009926:	4584      	cmp	ip, r0
 8009928:	bf38      	it	cc
 800992a:	2304      	movcc	r3, #4
 800992c:	50ca      	str	r2, [r1, r3]
 800992e:	b10a      	cbz	r2, 8009934 <__lshift+0xa4>
 8009930:	f108 0602 	add.w	r6, r8, #2
 8009934:	3e01      	subs	r6, #1
 8009936:	4638      	mov	r0, r7
 8009938:	4621      	mov	r1, r4
 800993a:	612e      	str	r6, [r5, #16]
 800993c:	f7ff fd92 	bl	8009464 <_Bfree>
 8009940:	4628      	mov	r0, r5
 8009942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009946:	f842 0f04 	str.w	r0, [r2, #4]!
 800994a:	3301      	adds	r3, #1
 800994c:	e7c5      	b.n	80098da <__lshift+0x4a>
 800994e:	3904      	subs	r1, #4
 8009950:	f853 2b04 	ldr.w	r2, [r3], #4
 8009954:	459c      	cmp	ip, r3
 8009956:	f841 2f04 	str.w	r2, [r1, #4]!
 800995a:	d8f9      	bhi.n	8009950 <__lshift+0xc0>
 800995c:	e7ea      	b.n	8009934 <__lshift+0xa4>
 800995e:	bf00      	nop
 8009960:	0800d04b 	.word	0x0800d04b
 8009964:	0800d05c 	.word	0x0800d05c

08009968 <__mcmp>:
 8009968:	4603      	mov	r3, r0
 800996a:	690a      	ldr	r2, [r1, #16]
 800996c:	6900      	ldr	r0, [r0, #16]
 800996e:	b530      	push	{r4, r5, lr}
 8009970:	1a80      	subs	r0, r0, r2
 8009972:	d10e      	bne.n	8009992 <__mcmp+0x2a>
 8009974:	3314      	adds	r3, #20
 8009976:	3114      	adds	r1, #20
 8009978:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800997c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009988:	4295      	cmp	r5, r2
 800998a:	d003      	beq.n	8009994 <__mcmp+0x2c>
 800998c:	d205      	bcs.n	800999a <__mcmp+0x32>
 800998e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009992:	bd30      	pop	{r4, r5, pc}
 8009994:	42a3      	cmp	r3, r4
 8009996:	d3f3      	bcc.n	8009980 <__mcmp+0x18>
 8009998:	e7fb      	b.n	8009992 <__mcmp+0x2a>
 800999a:	2001      	movs	r0, #1
 800999c:	e7f9      	b.n	8009992 <__mcmp+0x2a>
	...

080099a0 <__mdiff>:
 80099a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	4689      	mov	r9, r1
 80099a6:	4606      	mov	r6, r0
 80099a8:	4611      	mov	r1, r2
 80099aa:	4648      	mov	r0, r9
 80099ac:	4614      	mov	r4, r2
 80099ae:	f7ff ffdb 	bl	8009968 <__mcmp>
 80099b2:	1e05      	subs	r5, r0, #0
 80099b4:	d112      	bne.n	80099dc <__mdiff+0x3c>
 80099b6:	4629      	mov	r1, r5
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff fd13 	bl	80093e4 <_Balloc>
 80099be:	4602      	mov	r2, r0
 80099c0:	b928      	cbnz	r0, 80099ce <__mdiff+0x2e>
 80099c2:	f240 2137 	movw	r1, #567	@ 0x237
 80099c6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ac0 <__mdiff+0x120>)
 80099c8:	483e      	ldr	r0, [pc, #248]	@ (8009ac4 <__mdiff+0x124>)
 80099ca:	f001 fa71 	bl	800aeb0 <__assert_func>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099d4:	4610      	mov	r0, r2
 80099d6:	b003      	add	sp, #12
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099dc:	bfbc      	itt	lt
 80099de:	464b      	movlt	r3, r9
 80099e0:	46a1      	movlt	r9, r4
 80099e2:	4630      	mov	r0, r6
 80099e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099e8:	bfba      	itte	lt
 80099ea:	461c      	movlt	r4, r3
 80099ec:	2501      	movlt	r5, #1
 80099ee:	2500      	movge	r5, #0
 80099f0:	f7ff fcf8 	bl	80093e4 <_Balloc>
 80099f4:	4602      	mov	r2, r0
 80099f6:	b918      	cbnz	r0, 8009a00 <__mdiff+0x60>
 80099f8:	f240 2145 	movw	r1, #581	@ 0x245
 80099fc:	4b30      	ldr	r3, [pc, #192]	@ (8009ac0 <__mdiff+0x120>)
 80099fe:	e7e3      	b.n	80099c8 <__mdiff+0x28>
 8009a00:	f100 0b14 	add.w	fp, r0, #20
 8009a04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a08:	f109 0310 	add.w	r3, r9, #16
 8009a0c:	60c5      	str	r5, [r0, #12]
 8009a0e:	f04f 0c00 	mov.w	ip, #0
 8009a12:	f109 0514 	add.w	r5, r9, #20
 8009a16:	46d9      	mov	r9, fp
 8009a18:	6926      	ldr	r6, [r4, #16]
 8009a1a:	f104 0e14 	add.w	lr, r4, #20
 8009a1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	9b01      	ldr	r3, [sp, #4]
 8009a2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a32:	b281      	uxth	r1, r0
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	fa1f f38a 	uxth.w	r3, sl
 8009a3a:	1a5b      	subs	r3, r3, r1
 8009a3c:	0c00      	lsrs	r0, r0, #16
 8009a3e:	4463      	add	r3, ip
 8009a40:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a4e:	4576      	cmp	r6, lr
 8009a50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a54:	f849 3b04 	str.w	r3, [r9], #4
 8009a58:	d8e6      	bhi.n	8009a28 <__mdiff+0x88>
 8009a5a:	1b33      	subs	r3, r6, r4
 8009a5c:	3b15      	subs	r3, #21
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	3415      	adds	r4, #21
 8009a64:	3304      	adds	r3, #4
 8009a66:	42a6      	cmp	r6, r4
 8009a68:	bf38      	it	cc
 8009a6a:	2304      	movcc	r3, #4
 8009a6c:	441d      	add	r5, r3
 8009a6e:	445b      	add	r3, fp
 8009a70:	461e      	mov	r6, r3
 8009a72:	462c      	mov	r4, r5
 8009a74:	4544      	cmp	r4, r8
 8009a76:	d30e      	bcc.n	8009a96 <__mdiff+0xf6>
 8009a78:	f108 0103 	add.w	r1, r8, #3
 8009a7c:	1b49      	subs	r1, r1, r5
 8009a7e:	f021 0103 	bic.w	r1, r1, #3
 8009a82:	3d03      	subs	r5, #3
 8009a84:	45a8      	cmp	r8, r5
 8009a86:	bf38      	it	cc
 8009a88:	2100      	movcc	r1, #0
 8009a8a:	440b      	add	r3, r1
 8009a8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a90:	b199      	cbz	r1, 8009aba <__mdiff+0x11a>
 8009a92:	6117      	str	r7, [r2, #16]
 8009a94:	e79e      	b.n	80099d4 <__mdiff+0x34>
 8009a96:	46e6      	mov	lr, ip
 8009a98:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a9c:	fa1f fc81 	uxth.w	ip, r1
 8009aa0:	44f4      	add	ip, lr
 8009aa2:	0c08      	lsrs	r0, r1, #16
 8009aa4:	4471      	add	r1, lr
 8009aa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009aaa:	b289      	uxth	r1, r1
 8009aac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ab0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ab4:	f846 1b04 	str.w	r1, [r6], #4
 8009ab8:	e7dc      	b.n	8009a74 <__mdiff+0xd4>
 8009aba:	3f01      	subs	r7, #1
 8009abc:	e7e6      	b.n	8009a8c <__mdiff+0xec>
 8009abe:	bf00      	nop
 8009ac0:	0800d04b 	.word	0x0800d04b
 8009ac4:	0800d05c 	.word	0x0800d05c

08009ac8 <__ulp>:
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b04 <__ulp+0x3c>)
 8009aca:	400b      	ands	r3, r1
 8009acc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	dc08      	bgt.n	8009ae6 <__ulp+0x1e>
 8009ad4:	425b      	negs	r3, r3
 8009ad6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009ada:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ade:	da04      	bge.n	8009aea <__ulp+0x22>
 8009ae0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ae4:	4113      	asrs	r3, r2
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	e008      	b.n	8009afc <__ulp+0x34>
 8009aea:	f1a2 0314 	sub.w	r3, r2, #20
 8009aee:	2b1e      	cmp	r3, #30
 8009af0:	bfd6      	itet	le
 8009af2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009af6:	2201      	movgt	r2, #1
 8009af8:	40da      	lsrle	r2, r3
 8009afa:	2300      	movs	r3, #0
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	7ff00000 	.word	0x7ff00000

08009b08 <__b2d>:
 8009b08:	6902      	ldr	r2, [r0, #16]
 8009b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0c:	f100 0614 	add.w	r6, r0, #20
 8009b10:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009b14:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009b18:	4f1e      	ldr	r7, [pc, #120]	@ (8009b94 <__b2d+0x8c>)
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7ff fd54 	bl	80095c8 <__hi0bits>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f1c0 0020 	rsb	r0, r0, #32
 8009b26:	2b0a      	cmp	r3, #10
 8009b28:	f1a2 0504 	sub.w	r5, r2, #4
 8009b2c:	6008      	str	r0, [r1, #0]
 8009b2e:	dc12      	bgt.n	8009b56 <__b2d+0x4e>
 8009b30:	42ae      	cmp	r6, r5
 8009b32:	bf2c      	ite	cs
 8009b34:	2200      	movcs	r2, #0
 8009b36:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009b3a:	f1c3 0c0b 	rsb	ip, r3, #11
 8009b3e:	3315      	adds	r3, #21
 8009b40:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009b44:	fa04 f303 	lsl.w	r3, r4, r3
 8009b48:	fa22 f20c 	lsr.w	r2, r2, ip
 8009b4c:	ea4e 0107 	orr.w	r1, lr, r7
 8009b50:	431a      	orrs	r2, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b56:	42ae      	cmp	r6, r5
 8009b58:	bf36      	itet	cc
 8009b5a:	f1a2 0508 	subcc.w	r5, r2, #8
 8009b5e:	2200      	movcs	r2, #0
 8009b60:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009b64:	3b0b      	subs	r3, #11
 8009b66:	d012      	beq.n	8009b8e <__b2d+0x86>
 8009b68:	f1c3 0720 	rsb	r7, r3, #32
 8009b6c:	fa22 f107 	lsr.w	r1, r2, r7
 8009b70:	409c      	lsls	r4, r3
 8009b72:	430c      	orrs	r4, r1
 8009b74:	42b5      	cmp	r5, r6
 8009b76:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009b7a:	bf94      	ite	ls
 8009b7c:	2400      	movls	r4, #0
 8009b7e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009b82:	409a      	lsls	r2, r3
 8009b84:	40fc      	lsrs	r4, r7
 8009b86:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009b8a:	4322      	orrs	r2, r4
 8009b8c:	e7e1      	b.n	8009b52 <__b2d+0x4a>
 8009b8e:	ea44 0107 	orr.w	r1, r4, r7
 8009b92:	e7de      	b.n	8009b52 <__b2d+0x4a>
 8009b94:	3ff00000 	.word	0x3ff00000

08009b98 <__d2b>:
 8009b98:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	4690      	mov	r8, r2
 8009ba0:	4699      	mov	r9, r3
 8009ba2:	9e08      	ldr	r6, [sp, #32]
 8009ba4:	f7ff fc1e 	bl	80093e4 <_Balloc>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	b930      	cbnz	r0, 8009bba <__d2b+0x22>
 8009bac:	4602      	mov	r2, r0
 8009bae:	f240 310f 	movw	r1, #783	@ 0x30f
 8009bb2:	4b23      	ldr	r3, [pc, #140]	@ (8009c40 <__d2b+0xa8>)
 8009bb4:	4823      	ldr	r0, [pc, #140]	@ (8009c44 <__d2b+0xac>)
 8009bb6:	f001 f97b 	bl	800aeb0 <__assert_func>
 8009bba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bbe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bc2:	b10d      	cbz	r5, 8009bc8 <__d2b+0x30>
 8009bc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	f1b8 0300 	subs.w	r3, r8, #0
 8009bce:	d024      	beq.n	8009c1a <__d2b+0x82>
 8009bd0:	4668      	mov	r0, sp
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	f7ff fd17 	bl	8009606 <__lo0bits>
 8009bd8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bdc:	b1d8      	cbz	r0, 8009c16 <__d2b+0x7e>
 8009bde:	f1c0 0320 	rsb	r3, r0, #32
 8009be2:	fa02 f303 	lsl.w	r3, r2, r3
 8009be6:	430b      	orrs	r3, r1
 8009be8:	40c2      	lsrs	r2, r0
 8009bea:	6163      	str	r3, [r4, #20]
 8009bec:	9201      	str	r2, [sp, #4]
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bf0c      	ite	eq
 8009bf4:	2201      	moveq	r2, #1
 8009bf6:	2202      	movne	r2, #2
 8009bf8:	61a3      	str	r3, [r4, #24]
 8009bfa:	6122      	str	r2, [r4, #16]
 8009bfc:	b1ad      	cbz	r5, 8009c2a <__d2b+0x92>
 8009bfe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c02:	4405      	add	r5, r0
 8009c04:	6035      	str	r5, [r6, #0]
 8009c06:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0c:	6018      	str	r0, [r3, #0]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	b002      	add	sp, #8
 8009c12:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009c16:	6161      	str	r1, [r4, #20]
 8009c18:	e7e9      	b.n	8009bee <__d2b+0x56>
 8009c1a:	a801      	add	r0, sp, #4
 8009c1c:	f7ff fcf3 	bl	8009606 <__lo0bits>
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	6163      	str	r3, [r4, #20]
 8009c26:	3020      	adds	r0, #32
 8009c28:	e7e7      	b.n	8009bfa <__d2b+0x62>
 8009c2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c32:	6030      	str	r0, [r6, #0]
 8009c34:	6918      	ldr	r0, [r3, #16]
 8009c36:	f7ff fcc7 	bl	80095c8 <__hi0bits>
 8009c3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c3e:	e7e4      	b.n	8009c0a <__d2b+0x72>
 8009c40:	0800d04b 	.word	0x0800d04b
 8009c44:	0800d05c 	.word	0x0800d05c

08009c48 <__ratio>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	e9cd 1000 	strd	r1, r0, [sp]
 8009c52:	a902      	add	r1, sp, #8
 8009c54:	f7ff ff58 	bl	8009b08 <__b2d>
 8009c58:	468b      	mov	fp, r1
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460f      	mov	r7, r1
 8009c5e:	9800      	ldr	r0, [sp, #0]
 8009c60:	a903      	add	r1, sp, #12
 8009c62:	f7ff ff51 	bl	8009b08 <__b2d>
 8009c66:	460d      	mov	r5, r1
 8009c68:	9b01      	ldr	r3, [sp, #4]
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	6919      	ldr	r1, [r3, #16]
 8009c6e:	9b00      	ldr	r3, [sp, #0]
 8009c70:	4604      	mov	r4, r0
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	4630      	mov	r0, r6
 8009c76:	1ac9      	subs	r1, r1, r3
 8009c78:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bfcd      	iteet	gt
 8009c86:	463a      	movgt	r2, r7
 8009c88:	462a      	movle	r2, r5
 8009c8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c8e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009c92:	bfd8      	it	le
 8009c94:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009c98:	464b      	mov	r3, r9
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	f7f6 fd45 	bl	800072c <__aeabi_ddiv>
 8009ca2:	b005      	add	sp, #20
 8009ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ca8 <__copybits>:
 8009ca8:	3901      	subs	r1, #1
 8009caa:	b570      	push	{r4, r5, r6, lr}
 8009cac:	1149      	asrs	r1, r1, #5
 8009cae:	6914      	ldr	r4, [r2, #16]
 8009cb0:	3101      	adds	r1, #1
 8009cb2:	f102 0314 	add.w	r3, r2, #20
 8009cb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cbe:	1f05      	subs	r5, r0, #4
 8009cc0:	42a3      	cmp	r3, r4
 8009cc2:	d30c      	bcc.n	8009cde <__copybits+0x36>
 8009cc4:	1aa3      	subs	r3, r4, r2
 8009cc6:	3b11      	subs	r3, #17
 8009cc8:	f023 0303 	bic.w	r3, r3, #3
 8009ccc:	3211      	adds	r2, #17
 8009cce:	42a2      	cmp	r2, r4
 8009cd0:	bf88      	it	hi
 8009cd2:	2300      	movhi	r3, #0
 8009cd4:	4418      	add	r0, r3
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4288      	cmp	r0, r1
 8009cda:	d305      	bcc.n	8009ce8 <__copybits+0x40>
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
 8009cde:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ce2:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ce6:	e7eb      	b.n	8009cc0 <__copybits+0x18>
 8009ce8:	f840 3b04 	str.w	r3, [r0], #4
 8009cec:	e7f4      	b.n	8009cd8 <__copybits+0x30>

08009cee <__any_on>:
 8009cee:	f100 0214 	add.w	r2, r0, #20
 8009cf2:	6900      	ldr	r0, [r0, #16]
 8009cf4:	114b      	asrs	r3, r1, #5
 8009cf6:	4298      	cmp	r0, r3
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	db11      	blt.n	8009d20 <__any_on+0x32>
 8009cfc:	dd0a      	ble.n	8009d14 <__any_on+0x26>
 8009cfe:	f011 011f 	ands.w	r1, r1, #31
 8009d02:	d007      	beq.n	8009d14 <__any_on+0x26>
 8009d04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d08:	fa24 f001 	lsr.w	r0, r4, r1
 8009d0c:	fa00 f101 	lsl.w	r1, r0, r1
 8009d10:	428c      	cmp	r4, r1
 8009d12:	d10b      	bne.n	8009d2c <__any_on+0x3e>
 8009d14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d803      	bhi.n	8009d24 <__any_on+0x36>
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	bd10      	pop	{r4, pc}
 8009d20:	4603      	mov	r3, r0
 8009d22:	e7f7      	b.n	8009d14 <__any_on+0x26>
 8009d24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d0f5      	beq.n	8009d18 <__any_on+0x2a>
 8009d2c:	2001      	movs	r0, #1
 8009d2e:	e7f6      	b.n	8009d1e <__any_on+0x30>

08009d30 <sulp>:
 8009d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d34:	460f      	mov	r7, r1
 8009d36:	4690      	mov	r8, r2
 8009d38:	f7ff fec6 	bl	8009ac8 <__ulp>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	460d      	mov	r5, r1
 8009d40:	f1b8 0f00 	cmp.w	r8, #0
 8009d44:	d011      	beq.n	8009d6a <sulp+0x3a>
 8009d46:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009d4a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dd0b      	ble.n	8009d6a <sulp+0x3a>
 8009d52:	2400      	movs	r4, #0
 8009d54:	051b      	lsls	r3, r3, #20
 8009d56:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009d5a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009d5e:	4622      	mov	r2, r4
 8009d60:	462b      	mov	r3, r5
 8009d62:	f7f6 fbb9 	bl	80004d8 <__aeabi_dmul>
 8009d66:	4604      	mov	r4, r0
 8009d68:	460d      	mov	r5, r1
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d72:	0000      	movs	r0, r0
 8009d74:	0000      	movs	r0, r0
	...

08009d78 <_strtod_l>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	b09f      	sub	sp, #124	@ 0x7c
 8009d7e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009d80:	2200      	movs	r2, #0
 8009d82:	460c      	mov	r4, r1
 8009d84:	921a      	str	r2, [sp, #104]	@ 0x68
 8009d86:	f04f 0a00 	mov.w	sl, #0
 8009d8a:	f04f 0b00 	mov.w	fp, #0
 8009d8e:	460a      	mov	r2, r1
 8009d90:	9005      	str	r0, [sp, #20]
 8009d92:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d94:	7811      	ldrb	r1, [r2, #0]
 8009d96:	292b      	cmp	r1, #43	@ 0x2b
 8009d98:	d048      	beq.n	8009e2c <_strtod_l+0xb4>
 8009d9a:	d836      	bhi.n	8009e0a <_strtod_l+0x92>
 8009d9c:	290d      	cmp	r1, #13
 8009d9e:	d830      	bhi.n	8009e02 <_strtod_l+0x8a>
 8009da0:	2908      	cmp	r1, #8
 8009da2:	d830      	bhi.n	8009e06 <_strtod_l+0x8e>
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d039      	beq.n	8009e1c <_strtod_l+0xa4>
 8009da8:	2200      	movs	r2, #0
 8009daa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009dac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009dae:	782a      	ldrb	r2, [r5, #0]
 8009db0:	2a30      	cmp	r2, #48	@ 0x30
 8009db2:	f040 80b1 	bne.w	8009f18 <_strtod_l+0x1a0>
 8009db6:	786a      	ldrb	r2, [r5, #1]
 8009db8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dbc:	2a58      	cmp	r2, #88	@ 0x58
 8009dbe:	d16c      	bne.n	8009e9a <_strtod_l+0x122>
 8009dc0:	9302      	str	r3, [sp, #8]
 8009dc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dc4:	4a8e      	ldr	r2, [pc, #568]	@ (800a000 <_strtod_l+0x288>)
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	ab1a      	add	r3, sp, #104	@ 0x68
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	9805      	ldr	r0, [sp, #20]
 8009dce:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009dd0:	a919      	add	r1, sp, #100	@ 0x64
 8009dd2:	f001 f907 	bl	800afe4 <__gethex>
 8009dd6:	f010 060f 	ands.w	r6, r0, #15
 8009dda:	4604      	mov	r4, r0
 8009ddc:	d005      	beq.n	8009dea <_strtod_l+0x72>
 8009dde:	2e06      	cmp	r6, #6
 8009de0:	d126      	bne.n	8009e30 <_strtod_l+0xb8>
 8009de2:	2300      	movs	r3, #0
 8009de4:	3501      	adds	r5, #1
 8009de6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f040 8584 	bne.w	800a8fa <_strtod_l+0xb82>
 8009df2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009df4:	b1bb      	cbz	r3, 8009e26 <_strtod_l+0xae>
 8009df6:	4650      	mov	r0, sl
 8009df8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009dfc:	b01f      	add	sp, #124	@ 0x7c
 8009dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e02:	2920      	cmp	r1, #32
 8009e04:	d1d0      	bne.n	8009da8 <_strtod_l+0x30>
 8009e06:	3201      	adds	r2, #1
 8009e08:	e7c3      	b.n	8009d92 <_strtod_l+0x1a>
 8009e0a:	292d      	cmp	r1, #45	@ 0x2d
 8009e0c:	d1cc      	bne.n	8009da8 <_strtod_l+0x30>
 8009e0e:	2101      	movs	r1, #1
 8009e10:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e12:	1c51      	adds	r1, r2, #1
 8009e14:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e16:	7852      	ldrb	r2, [r2, #1]
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	d1c7      	bne.n	8009dac <_strtod_l+0x34>
 8009e1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e1e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f040 8568 	bne.w	800a8f6 <_strtod_l+0xb7e>
 8009e26:	4650      	mov	r0, sl
 8009e28:	4659      	mov	r1, fp
 8009e2a:	e7e7      	b.n	8009dfc <_strtod_l+0x84>
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	e7ef      	b.n	8009e10 <_strtod_l+0x98>
 8009e30:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e32:	b13a      	cbz	r2, 8009e44 <_strtod_l+0xcc>
 8009e34:	2135      	movs	r1, #53	@ 0x35
 8009e36:	a81c      	add	r0, sp, #112	@ 0x70
 8009e38:	f7ff ff36 	bl	8009ca8 <__copybits>
 8009e3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e3e:	9805      	ldr	r0, [sp, #20]
 8009e40:	f7ff fb10 	bl	8009464 <_Bfree>
 8009e44:	3e01      	subs	r6, #1
 8009e46:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009e48:	2e04      	cmp	r6, #4
 8009e4a:	d806      	bhi.n	8009e5a <_strtod_l+0xe2>
 8009e4c:	e8df f006 	tbb	[pc, r6]
 8009e50:	201d0314 	.word	0x201d0314
 8009e54:	14          	.byte	0x14
 8009e55:	00          	.byte	0x00
 8009e56:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009e5a:	05e1      	lsls	r1, r4, #23
 8009e5c:	bf48      	it	mi
 8009e5e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009e62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e66:	0d1b      	lsrs	r3, r3, #20
 8009e68:	051b      	lsls	r3, r3, #20
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1bd      	bne.n	8009dea <_strtod_l+0x72>
 8009e6e:	f7fe fb1d 	bl	80084ac <__errno>
 8009e72:	2322      	movs	r3, #34	@ 0x22
 8009e74:	6003      	str	r3, [r0, #0]
 8009e76:	e7b8      	b.n	8009dea <_strtod_l+0x72>
 8009e78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009e7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009e80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009e84:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e88:	e7e7      	b.n	8009e5a <_strtod_l+0xe2>
 8009e8a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a004 <_strtod_l+0x28c>
 8009e8e:	e7e4      	b.n	8009e5a <_strtod_l+0xe2>
 8009e90:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009e94:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e98:	e7df      	b.n	8009e5a <_strtod_l+0xe2>
 8009e9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b30      	cmp	r3, #48	@ 0x30
 8009ea4:	d0f9      	beq.n	8009e9a <_strtod_l+0x122>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d09f      	beq.n	8009dea <_strtod_l+0x72>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eb0:	220a      	movs	r2, #10
 8009eb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	461f      	mov	r7, r3
 8009eb8:	9308      	str	r3, [sp, #32]
 8009eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ebc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009ebe:	7805      	ldrb	r5, [r0, #0]
 8009ec0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009ec4:	b2d9      	uxtb	r1, r3
 8009ec6:	2909      	cmp	r1, #9
 8009ec8:	d928      	bls.n	8009f1c <_strtod_l+0x1a4>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	494e      	ldr	r1, [pc, #312]	@ (800a008 <_strtod_l+0x290>)
 8009ece:	f000 ffc7 	bl	800ae60 <strncmp>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d032      	beq.n	8009f3c <_strtod_l+0x1c4>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	462a      	mov	r2, r5
 8009eda:	4681      	mov	r9, r0
 8009edc:	463d      	mov	r5, r7
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2a65      	cmp	r2, #101	@ 0x65
 8009ee2:	d001      	beq.n	8009ee8 <_strtod_l+0x170>
 8009ee4:	2a45      	cmp	r2, #69	@ 0x45
 8009ee6:	d114      	bne.n	8009f12 <_strtod_l+0x19a>
 8009ee8:	b91d      	cbnz	r5, 8009ef2 <_strtod_l+0x17a>
 8009eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eec:	4302      	orrs	r2, r0
 8009eee:	d095      	beq.n	8009e1c <_strtod_l+0xa4>
 8009ef0:	2500      	movs	r5, #0
 8009ef2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009ef4:	1c62      	adds	r2, r4, #1
 8009ef6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ef8:	7862      	ldrb	r2, [r4, #1]
 8009efa:	2a2b      	cmp	r2, #43	@ 0x2b
 8009efc:	d077      	beq.n	8009fee <_strtod_l+0x276>
 8009efe:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f00:	d07b      	beq.n	8009ffa <_strtod_l+0x282>
 8009f02:	f04f 0c00 	mov.w	ip, #0
 8009f06:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f0a:	2909      	cmp	r1, #9
 8009f0c:	f240 8082 	bls.w	800a014 <_strtod_l+0x29c>
 8009f10:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f12:	f04f 0800 	mov.w	r8, #0
 8009f16:	e0a2      	b.n	800a05e <_strtod_l+0x2e6>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e7c7      	b.n	8009eac <_strtod_l+0x134>
 8009f1c:	2f08      	cmp	r7, #8
 8009f1e:	bfd5      	itete	le
 8009f20:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f22:	9908      	ldrgt	r1, [sp, #32]
 8009f24:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f2c:	f100 0001 	add.w	r0, r0, #1
 8009f30:	bfd4      	ite	le
 8009f32:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009f34:	9308      	strgt	r3, [sp, #32]
 8009f36:	3701      	adds	r7, #1
 8009f38:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f3a:	e7bf      	b.n	8009ebc <_strtod_l+0x144>
 8009f3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f42:	785a      	ldrb	r2, [r3, #1]
 8009f44:	b37f      	cbz	r7, 8009fa6 <_strtod_l+0x22e>
 8009f46:	4681      	mov	r9, r0
 8009f48:	463d      	mov	r5, r7
 8009f4a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009f4e:	2b09      	cmp	r3, #9
 8009f50:	d912      	bls.n	8009f78 <_strtod_l+0x200>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e7c4      	b.n	8009ee0 <_strtod_l+0x168>
 8009f56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f58:	3001      	adds	r0, #1
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f5e:	785a      	ldrb	r2, [r3, #1]
 8009f60:	2a30      	cmp	r2, #48	@ 0x30
 8009f62:	d0f8      	beq.n	8009f56 <_strtod_l+0x1de>
 8009f64:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	f200 84cb 	bhi.w	800a904 <_strtod_l+0xb8c>
 8009f6e:	4681      	mov	r9, r0
 8009f70:	2000      	movs	r0, #0
 8009f72:	4605      	mov	r5, r0
 8009f74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f76:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f78:	3a30      	subs	r2, #48	@ 0x30
 8009f7a:	f100 0301 	add.w	r3, r0, #1
 8009f7e:	d02a      	beq.n	8009fd6 <_strtod_l+0x25e>
 8009f80:	4499      	add	r9, r3
 8009f82:	210a      	movs	r1, #10
 8009f84:	462b      	mov	r3, r5
 8009f86:	eb00 0c05 	add.w	ip, r0, r5
 8009f8a:	4563      	cmp	r3, ip
 8009f8c:	d10d      	bne.n	8009faa <_strtod_l+0x232>
 8009f8e:	1c69      	adds	r1, r5, #1
 8009f90:	4401      	add	r1, r0
 8009f92:	4428      	add	r0, r5
 8009f94:	2808      	cmp	r0, #8
 8009f96:	dc16      	bgt.n	8009fc6 <_strtod_l+0x24e>
 8009f98:	230a      	movs	r3, #10
 8009f9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f9c:	fb03 2300 	mla	r3, r3, r0, r2
 8009fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e018      	b.n	8009fd8 <_strtod_l+0x260>
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	e7da      	b.n	8009f60 <_strtod_l+0x1e8>
 8009faa:	2b08      	cmp	r3, #8
 8009fac:	f103 0301 	add.w	r3, r3, #1
 8009fb0:	dc03      	bgt.n	8009fba <_strtod_l+0x242>
 8009fb2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009fb4:	434e      	muls	r6, r1
 8009fb6:	960a      	str	r6, [sp, #40]	@ 0x28
 8009fb8:	e7e7      	b.n	8009f8a <_strtod_l+0x212>
 8009fba:	2b10      	cmp	r3, #16
 8009fbc:	bfde      	ittt	le
 8009fbe:	9e08      	ldrle	r6, [sp, #32]
 8009fc0:	434e      	mulle	r6, r1
 8009fc2:	9608      	strle	r6, [sp, #32]
 8009fc4:	e7e1      	b.n	8009f8a <_strtod_l+0x212>
 8009fc6:	280f      	cmp	r0, #15
 8009fc8:	dceb      	bgt.n	8009fa2 <_strtod_l+0x22a>
 8009fca:	230a      	movs	r3, #10
 8009fcc:	9808      	ldr	r0, [sp, #32]
 8009fce:	fb03 2300 	mla	r3, r3, r0, r2
 8009fd2:	9308      	str	r3, [sp, #32]
 8009fd4:	e7e5      	b.n	8009fa2 <_strtod_l+0x22a>
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009fda:	460d      	mov	r5, r1
 8009fdc:	1c50      	adds	r0, r2, #1
 8009fde:	9019      	str	r0, [sp, #100]	@ 0x64
 8009fe0:	7852      	ldrb	r2, [r2, #1]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	e7b1      	b.n	8009f4a <_strtod_l+0x1d2>
 8009fe6:	f04f 0900 	mov.w	r9, #0
 8009fea:	2301      	movs	r3, #1
 8009fec:	e77d      	b.n	8009eea <_strtod_l+0x172>
 8009fee:	f04f 0c00 	mov.w	ip, #0
 8009ff2:	1ca2      	adds	r2, r4, #2
 8009ff4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ff6:	78a2      	ldrb	r2, [r4, #2]
 8009ff8:	e785      	b.n	8009f06 <_strtod_l+0x18e>
 8009ffa:	f04f 0c01 	mov.w	ip, #1
 8009ffe:	e7f8      	b.n	8009ff2 <_strtod_l+0x27a>
 800a000:	0800d1d0 	.word	0x0800d1d0
 800a004:	7ff00000 	.word	0x7ff00000
 800a008:	0800d1b8 	.word	0x0800d1b8
 800a00c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a00e:	1c51      	adds	r1, r2, #1
 800a010:	9119      	str	r1, [sp, #100]	@ 0x64
 800a012:	7852      	ldrb	r2, [r2, #1]
 800a014:	2a30      	cmp	r2, #48	@ 0x30
 800a016:	d0f9      	beq.n	800a00c <_strtod_l+0x294>
 800a018:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a01c:	2908      	cmp	r1, #8
 800a01e:	f63f af78 	bhi.w	8009f12 <_strtod_l+0x19a>
 800a022:	f04f 080a 	mov.w	r8, #10
 800a026:	3a30      	subs	r2, #48	@ 0x30
 800a028:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a02c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a02e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a030:	1c56      	adds	r6, r2, #1
 800a032:	9619      	str	r6, [sp, #100]	@ 0x64
 800a034:	7852      	ldrb	r2, [r2, #1]
 800a036:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a03a:	f1be 0f09 	cmp.w	lr, #9
 800a03e:	d939      	bls.n	800a0b4 <_strtod_l+0x33c>
 800a040:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a042:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a046:	1a76      	subs	r6, r6, r1
 800a048:	2e08      	cmp	r6, #8
 800a04a:	dc03      	bgt.n	800a054 <_strtod_l+0x2dc>
 800a04c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a04e:	4588      	cmp	r8, r1
 800a050:	bfa8      	it	ge
 800a052:	4688      	movge	r8, r1
 800a054:	f1bc 0f00 	cmp.w	ip, #0
 800a058:	d001      	beq.n	800a05e <_strtod_l+0x2e6>
 800a05a:	f1c8 0800 	rsb	r8, r8, #0
 800a05e:	2d00      	cmp	r5, #0
 800a060:	d14e      	bne.n	800a100 <_strtod_l+0x388>
 800a062:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a064:	4308      	orrs	r0, r1
 800a066:	f47f aec0 	bne.w	8009dea <_strtod_l+0x72>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f47f aed6 	bne.w	8009e1c <_strtod_l+0xa4>
 800a070:	2a69      	cmp	r2, #105	@ 0x69
 800a072:	d028      	beq.n	800a0c6 <_strtod_l+0x34e>
 800a074:	dc25      	bgt.n	800a0c2 <_strtod_l+0x34a>
 800a076:	2a49      	cmp	r2, #73	@ 0x49
 800a078:	d025      	beq.n	800a0c6 <_strtod_l+0x34e>
 800a07a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a07c:	f47f aece 	bne.w	8009e1c <_strtod_l+0xa4>
 800a080:	499a      	ldr	r1, [pc, #616]	@ (800a2ec <_strtod_l+0x574>)
 800a082:	a819      	add	r0, sp, #100	@ 0x64
 800a084:	f001 f9d0 	bl	800b428 <__match>
 800a088:	2800      	cmp	r0, #0
 800a08a:	f43f aec7 	beq.w	8009e1c <_strtod_l+0xa4>
 800a08e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b28      	cmp	r3, #40	@ 0x28
 800a094:	d12e      	bne.n	800a0f4 <_strtod_l+0x37c>
 800a096:	4996      	ldr	r1, [pc, #600]	@ (800a2f0 <_strtod_l+0x578>)
 800a098:	aa1c      	add	r2, sp, #112	@ 0x70
 800a09a:	a819      	add	r0, sp, #100	@ 0x64
 800a09c:	f001 f9d8 	bl	800b450 <__hexnan>
 800a0a0:	2805      	cmp	r0, #5
 800a0a2:	d127      	bne.n	800a0f4 <_strtod_l+0x37c>
 800a0a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a0aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a0ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a0b2:	e69a      	b.n	8009dea <_strtod_l+0x72>
 800a0b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0b6:	fb08 2101 	mla	r1, r8, r1, r2
 800a0ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a0be:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0c0:	e7b5      	b.n	800a02e <_strtod_l+0x2b6>
 800a0c2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a0c4:	e7da      	b.n	800a07c <_strtod_l+0x304>
 800a0c6:	498b      	ldr	r1, [pc, #556]	@ (800a2f4 <_strtod_l+0x57c>)
 800a0c8:	a819      	add	r0, sp, #100	@ 0x64
 800a0ca:	f001 f9ad 	bl	800b428 <__match>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f43f aea4 	beq.w	8009e1c <_strtod_l+0xa4>
 800a0d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0d6:	4988      	ldr	r1, [pc, #544]	@ (800a2f8 <_strtod_l+0x580>)
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	a819      	add	r0, sp, #100	@ 0x64
 800a0dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0de:	f001 f9a3 	bl	800b428 <__match>
 800a0e2:	b910      	cbnz	r0, 800a0ea <_strtod_l+0x372>
 800a0e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0ea:	f04f 0a00 	mov.w	sl, #0
 800a0ee:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a2fc <_strtod_l+0x584>
 800a0f2:	e67a      	b.n	8009dea <_strtod_l+0x72>
 800a0f4:	4882      	ldr	r0, [pc, #520]	@ (800a300 <_strtod_l+0x588>)
 800a0f6:	f000 fed5 	bl	800aea4 <nan>
 800a0fa:	4682      	mov	sl, r0
 800a0fc:	468b      	mov	fp, r1
 800a0fe:	e674      	b.n	8009dea <_strtod_l+0x72>
 800a100:	eba8 0309 	sub.w	r3, r8, r9
 800a104:	2f00      	cmp	r7, #0
 800a106:	bf08      	it	eq
 800a108:	462f      	moveq	r7, r5
 800a10a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a10c:	2d10      	cmp	r5, #16
 800a10e:	462c      	mov	r4, r5
 800a110:	9309      	str	r3, [sp, #36]	@ 0x24
 800a112:	bfa8      	it	ge
 800a114:	2410      	movge	r4, #16
 800a116:	f7f6 f965 	bl	80003e4 <__aeabi_ui2d>
 800a11a:	2d09      	cmp	r5, #9
 800a11c:	4682      	mov	sl, r0
 800a11e:	468b      	mov	fp, r1
 800a120:	dc11      	bgt.n	800a146 <_strtod_l+0x3ce>
 800a122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	f43f ae60 	beq.w	8009dea <_strtod_l+0x72>
 800a12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a12c:	dd76      	ble.n	800a21c <_strtod_l+0x4a4>
 800a12e:	2b16      	cmp	r3, #22
 800a130:	dc5d      	bgt.n	800a1ee <_strtod_l+0x476>
 800a132:	4974      	ldr	r1, [pc, #464]	@ (800a304 <_strtod_l+0x58c>)
 800a134:	4652      	mov	r2, sl
 800a136:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a13a:	465b      	mov	r3, fp
 800a13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a140:	f7f6 f9ca 	bl	80004d8 <__aeabi_dmul>
 800a144:	e7d9      	b.n	800a0fa <_strtod_l+0x382>
 800a146:	4b6f      	ldr	r3, [pc, #444]	@ (800a304 <_strtod_l+0x58c>)
 800a148:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a14c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a150:	f7f6 f9c2 	bl	80004d8 <__aeabi_dmul>
 800a154:	4682      	mov	sl, r0
 800a156:	9808      	ldr	r0, [sp, #32]
 800a158:	468b      	mov	fp, r1
 800a15a:	f7f6 f943 	bl	80003e4 <__aeabi_ui2d>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4650      	mov	r0, sl
 800a164:	4659      	mov	r1, fp
 800a166:	f7f6 f801 	bl	800016c <__adddf3>
 800a16a:	2d0f      	cmp	r5, #15
 800a16c:	4682      	mov	sl, r0
 800a16e:	468b      	mov	fp, r1
 800a170:	ddd7      	ble.n	800a122 <_strtod_l+0x3aa>
 800a172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a174:	1b2c      	subs	r4, r5, r4
 800a176:	441c      	add	r4, r3
 800a178:	2c00      	cmp	r4, #0
 800a17a:	f340 8096 	ble.w	800a2aa <_strtod_l+0x532>
 800a17e:	f014 030f 	ands.w	r3, r4, #15
 800a182:	d00a      	beq.n	800a19a <_strtod_l+0x422>
 800a184:	495f      	ldr	r1, [pc, #380]	@ (800a304 <_strtod_l+0x58c>)
 800a186:	4652      	mov	r2, sl
 800a188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a190:	465b      	mov	r3, fp
 800a192:	f7f6 f9a1 	bl	80004d8 <__aeabi_dmul>
 800a196:	4682      	mov	sl, r0
 800a198:	468b      	mov	fp, r1
 800a19a:	f034 040f 	bics.w	r4, r4, #15
 800a19e:	d073      	beq.n	800a288 <_strtod_l+0x510>
 800a1a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a1a4:	dd48      	ble.n	800a238 <_strtod_l+0x4c0>
 800a1a6:	2400      	movs	r4, #0
 800a1a8:	46a0      	mov	r8, r4
 800a1aa:	46a1      	mov	r9, r4
 800a1ac:	940a      	str	r4, [sp, #40]	@ 0x28
 800a1ae:	2322      	movs	r3, #34	@ 0x22
 800a1b0:	f04f 0a00 	mov.w	sl, #0
 800a1b4:	9a05      	ldr	r2, [sp, #20]
 800a1b6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a2fc <_strtod_l+0x584>
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f43f ae13 	beq.w	8009dea <_strtod_l+0x72>
 800a1c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1c6:	9805      	ldr	r0, [sp, #20]
 800a1c8:	f7ff f94c 	bl	8009464 <_Bfree>
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	9805      	ldr	r0, [sp, #20]
 800a1d0:	f7ff f948 	bl	8009464 <_Bfree>
 800a1d4:	4641      	mov	r1, r8
 800a1d6:	9805      	ldr	r0, [sp, #20]
 800a1d8:	f7ff f944 	bl	8009464 <_Bfree>
 800a1dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1de:	9805      	ldr	r0, [sp, #20]
 800a1e0:	f7ff f940 	bl	8009464 <_Bfree>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	9805      	ldr	r0, [sp, #20]
 800a1e8:	f7ff f93c 	bl	8009464 <_Bfree>
 800a1ec:	e5fd      	b.n	8009dea <_strtod_l+0x72>
 800a1ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	dbbc      	blt.n	800a172 <_strtod_l+0x3fa>
 800a1f8:	4c42      	ldr	r4, [pc, #264]	@ (800a304 <_strtod_l+0x58c>)
 800a1fa:	f1c5 050f 	rsb	r5, r5, #15
 800a1fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a202:	4652      	mov	r2, sl
 800a204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a208:	465b      	mov	r3, fp
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a210:	1b5d      	subs	r5, r3, r5
 800a212:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a216:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a21a:	e791      	b.n	800a140 <_strtod_l+0x3c8>
 800a21c:	3316      	adds	r3, #22
 800a21e:	dba8      	blt.n	800a172 <_strtod_l+0x3fa>
 800a220:	4b38      	ldr	r3, [pc, #224]	@ (800a304 <_strtod_l+0x58c>)
 800a222:	eba9 0808 	sub.w	r8, r9, r8
 800a226:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a22a:	4650      	mov	r0, sl
 800a22c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a230:	4659      	mov	r1, fp
 800a232:	f7f6 fa7b 	bl	800072c <__aeabi_ddiv>
 800a236:	e760      	b.n	800a0fa <_strtod_l+0x382>
 800a238:	4b33      	ldr	r3, [pc, #204]	@ (800a308 <_strtod_l+0x590>)
 800a23a:	4650      	mov	r0, sl
 800a23c:	9308      	str	r3, [sp, #32]
 800a23e:	2300      	movs	r3, #0
 800a240:	4659      	mov	r1, fp
 800a242:	461e      	mov	r6, r3
 800a244:	1124      	asrs	r4, r4, #4
 800a246:	2c01      	cmp	r4, #1
 800a248:	dc21      	bgt.n	800a28e <_strtod_l+0x516>
 800a24a:	b10b      	cbz	r3, 800a250 <_strtod_l+0x4d8>
 800a24c:	4682      	mov	sl, r0
 800a24e:	468b      	mov	fp, r1
 800a250:	492d      	ldr	r1, [pc, #180]	@ (800a308 <_strtod_l+0x590>)
 800a252:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a256:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a25a:	4652      	mov	r2, sl
 800a25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a260:	465b      	mov	r3, fp
 800a262:	f7f6 f939 	bl	80004d8 <__aeabi_dmul>
 800a266:	4b25      	ldr	r3, [pc, #148]	@ (800a2fc <_strtod_l+0x584>)
 800a268:	460a      	mov	r2, r1
 800a26a:	400b      	ands	r3, r1
 800a26c:	4927      	ldr	r1, [pc, #156]	@ (800a30c <_strtod_l+0x594>)
 800a26e:	4682      	mov	sl, r0
 800a270:	428b      	cmp	r3, r1
 800a272:	d898      	bhi.n	800a1a6 <_strtod_l+0x42e>
 800a274:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a278:	428b      	cmp	r3, r1
 800a27a:	bf86      	itte	hi
 800a27c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a280:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a310 <_strtod_l+0x598>
 800a284:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a288:	2300      	movs	r3, #0
 800a28a:	9308      	str	r3, [sp, #32]
 800a28c:	e07a      	b.n	800a384 <_strtod_l+0x60c>
 800a28e:	07e2      	lsls	r2, r4, #31
 800a290:	d505      	bpl.n	800a29e <_strtod_l+0x526>
 800a292:	9b08      	ldr	r3, [sp, #32]
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f6 f91e 	bl	80004d8 <__aeabi_dmul>
 800a29c:	2301      	movs	r3, #1
 800a29e:	9a08      	ldr	r2, [sp, #32]
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	3208      	adds	r2, #8
 800a2a4:	1064      	asrs	r4, r4, #1
 800a2a6:	9208      	str	r2, [sp, #32]
 800a2a8:	e7cd      	b.n	800a246 <_strtod_l+0x4ce>
 800a2aa:	d0ed      	beq.n	800a288 <_strtod_l+0x510>
 800a2ac:	4264      	negs	r4, r4
 800a2ae:	f014 020f 	ands.w	r2, r4, #15
 800a2b2:	d00a      	beq.n	800a2ca <_strtod_l+0x552>
 800a2b4:	4b13      	ldr	r3, [pc, #76]	@ (800a304 <_strtod_l+0x58c>)
 800a2b6:	4650      	mov	r0, sl
 800a2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2bc:	4659      	mov	r1, fp
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f6 fa33 	bl	800072c <__aeabi_ddiv>
 800a2c6:	4682      	mov	sl, r0
 800a2c8:	468b      	mov	fp, r1
 800a2ca:	1124      	asrs	r4, r4, #4
 800a2cc:	d0dc      	beq.n	800a288 <_strtod_l+0x510>
 800a2ce:	2c1f      	cmp	r4, #31
 800a2d0:	dd20      	ble.n	800a314 <_strtod_l+0x59c>
 800a2d2:	2400      	movs	r4, #0
 800a2d4:	46a0      	mov	r8, r4
 800a2d6:	46a1      	mov	r9, r4
 800a2d8:	940a      	str	r4, [sp, #40]	@ 0x28
 800a2da:	2322      	movs	r3, #34	@ 0x22
 800a2dc:	9a05      	ldr	r2, [sp, #20]
 800a2de:	f04f 0a00 	mov.w	sl, #0
 800a2e2:	f04f 0b00 	mov.w	fp, #0
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	e768      	b.n	800a1bc <_strtod_l+0x444>
 800a2ea:	bf00      	nop
 800a2ec:	0800cfa3 	.word	0x0800cfa3
 800a2f0:	0800d1bc 	.word	0x0800d1bc
 800a2f4:	0800cf9b 	.word	0x0800cf9b
 800a2f8:	0800cfd2 	.word	0x0800cfd2
 800a2fc:	7ff00000 	.word	0x7ff00000
 800a300:	0800d365 	.word	0x0800d365
 800a304:	0800d0f0 	.word	0x0800d0f0
 800a308:	0800d0c8 	.word	0x0800d0c8
 800a30c:	7ca00000 	.word	0x7ca00000
 800a310:	7fefffff 	.word	0x7fefffff
 800a314:	f014 0310 	ands.w	r3, r4, #16
 800a318:	bf18      	it	ne
 800a31a:	236a      	movne	r3, #106	@ 0x6a
 800a31c:	4650      	mov	r0, sl
 800a31e:	9308      	str	r3, [sp, #32]
 800a320:	4659      	mov	r1, fp
 800a322:	2300      	movs	r3, #0
 800a324:	4ea9      	ldr	r6, [pc, #676]	@ (800a5cc <_strtod_l+0x854>)
 800a326:	07e2      	lsls	r2, r4, #31
 800a328:	d504      	bpl.n	800a334 <_strtod_l+0x5bc>
 800a32a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a32e:	f7f6 f8d3 	bl	80004d8 <__aeabi_dmul>
 800a332:	2301      	movs	r3, #1
 800a334:	1064      	asrs	r4, r4, #1
 800a336:	f106 0608 	add.w	r6, r6, #8
 800a33a:	d1f4      	bne.n	800a326 <_strtod_l+0x5ae>
 800a33c:	b10b      	cbz	r3, 800a342 <_strtod_l+0x5ca>
 800a33e:	4682      	mov	sl, r0
 800a340:	468b      	mov	fp, r1
 800a342:	9b08      	ldr	r3, [sp, #32]
 800a344:	b1b3      	cbz	r3, 800a374 <_strtod_l+0x5fc>
 800a346:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a34a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a34e:	2b00      	cmp	r3, #0
 800a350:	4659      	mov	r1, fp
 800a352:	dd0f      	ble.n	800a374 <_strtod_l+0x5fc>
 800a354:	2b1f      	cmp	r3, #31
 800a356:	dd57      	ble.n	800a408 <_strtod_l+0x690>
 800a358:	2b34      	cmp	r3, #52	@ 0x34
 800a35a:	bfd8      	it	le
 800a35c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a360:	f04f 0a00 	mov.w	sl, #0
 800a364:	bfcf      	iteee	gt
 800a366:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a36a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a36e:	4093      	lslle	r3, r2
 800a370:	ea03 0b01 	andle.w	fp, r3, r1
 800a374:	2200      	movs	r2, #0
 800a376:	2300      	movs	r3, #0
 800a378:	4650      	mov	r0, sl
 800a37a:	4659      	mov	r1, fp
 800a37c:	f7f6 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 800a380:	2800      	cmp	r0, #0
 800a382:	d1a6      	bne.n	800a2d2 <_strtod_l+0x55a>
 800a384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a386:	463a      	mov	r2, r7
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a38c:	462b      	mov	r3, r5
 800a38e:	9805      	ldr	r0, [sp, #20]
 800a390:	f7ff f8d0 	bl	8009534 <__s2b>
 800a394:	900a      	str	r0, [sp, #40]	@ 0x28
 800a396:	2800      	cmp	r0, #0
 800a398:	f43f af05 	beq.w	800a1a6 <_strtod_l+0x42e>
 800a39c:	2400      	movs	r4, #0
 800a39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3a0:	eba9 0308 	sub.w	r3, r9, r8
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	bfa8      	it	ge
 800a3a8:	2300      	movge	r3, #0
 800a3aa:	46a0      	mov	r8, r4
 800a3ac:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3b2:	9316      	str	r3, [sp, #88]	@ 0x58
 800a3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3b6:	9805      	ldr	r0, [sp, #20]
 800a3b8:	6859      	ldr	r1, [r3, #4]
 800a3ba:	f7ff f813 	bl	80093e4 <_Balloc>
 800a3be:	4681      	mov	r9, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f43f aef4 	beq.w	800a1ae <_strtod_l+0x436>
 800a3c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3c8:	300c      	adds	r0, #12
 800a3ca:	691a      	ldr	r2, [r3, #16]
 800a3cc:	f103 010c 	add.w	r1, r3, #12
 800a3d0:	3202      	adds	r2, #2
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	f7fe f8a5 	bl	8008522 <memcpy>
 800a3d8:	ab1c      	add	r3, sp, #112	@ 0x70
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	4652      	mov	r2, sl
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	9805      	ldr	r0, [sp, #20]
 800a3e6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a3ea:	f7ff fbd5 	bl	8009b98 <__d2b>
 800a3ee:	901a      	str	r0, [sp, #104]	@ 0x68
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	f43f aedc 	beq.w	800a1ae <_strtod_l+0x436>
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	9805      	ldr	r0, [sp, #20]
 800a3fa:	f7ff f931 	bl	8009660 <__i2b>
 800a3fe:	4680      	mov	r8, r0
 800a400:	b948      	cbnz	r0, 800a416 <_strtod_l+0x69e>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	e6d2      	b.n	800a1ae <_strtod_l+0x436>
 800a408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a40c:	fa02 f303 	lsl.w	r3, r2, r3
 800a410:	ea03 0a0a 	and.w	sl, r3, sl
 800a414:	e7ae      	b.n	800a374 <_strtod_l+0x5fc>
 800a416:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a418:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a41a:	2d00      	cmp	r5, #0
 800a41c:	bfab      	itete	ge
 800a41e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a420:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a422:	18ef      	addge	r7, r5, r3
 800a424:	1b5e      	sublt	r6, r3, r5
 800a426:	9b08      	ldr	r3, [sp, #32]
 800a428:	bfa8      	it	ge
 800a42a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a42c:	eba5 0503 	sub.w	r5, r5, r3
 800a430:	4415      	add	r5, r2
 800a432:	4b67      	ldr	r3, [pc, #412]	@ (800a5d0 <_strtod_l+0x858>)
 800a434:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800a438:	bfb8      	it	lt
 800a43a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a43c:	429d      	cmp	r5, r3
 800a43e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a442:	da50      	bge.n	800a4e6 <_strtod_l+0x76e>
 800a444:	1b5b      	subs	r3, r3, r5
 800a446:	2b1f      	cmp	r3, #31
 800a448:	f04f 0101 	mov.w	r1, #1
 800a44c:	eba2 0203 	sub.w	r2, r2, r3
 800a450:	dc3d      	bgt.n	800a4ce <_strtod_l+0x756>
 800a452:	fa01 f303 	lsl.w	r3, r1, r3
 800a456:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a458:	2300      	movs	r3, #0
 800a45a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a45c:	18bd      	adds	r5, r7, r2
 800a45e:	9b08      	ldr	r3, [sp, #32]
 800a460:	42af      	cmp	r7, r5
 800a462:	4416      	add	r6, r2
 800a464:	441e      	add	r6, r3
 800a466:	463b      	mov	r3, r7
 800a468:	bfa8      	it	ge
 800a46a:	462b      	movge	r3, r5
 800a46c:	42b3      	cmp	r3, r6
 800a46e:	bfa8      	it	ge
 800a470:	4633      	movge	r3, r6
 800a472:	2b00      	cmp	r3, #0
 800a474:	bfc2      	ittt	gt
 800a476:	1aed      	subgt	r5, r5, r3
 800a478:	1af6      	subgt	r6, r6, r3
 800a47a:	1aff      	subgt	r7, r7, r3
 800a47c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dd16      	ble.n	800a4b0 <_strtod_l+0x738>
 800a482:	4641      	mov	r1, r8
 800a484:	461a      	mov	r2, r3
 800a486:	9805      	ldr	r0, [sp, #20]
 800a488:	f7ff f9a8 	bl	80097dc <__pow5mult>
 800a48c:	4680      	mov	r8, r0
 800a48e:	2800      	cmp	r0, #0
 800a490:	d0b7      	beq.n	800a402 <_strtod_l+0x68a>
 800a492:	4601      	mov	r1, r0
 800a494:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a496:	9805      	ldr	r0, [sp, #20]
 800a498:	f7ff f8f8 	bl	800968c <__multiply>
 800a49c:	900e      	str	r0, [sp, #56]	@ 0x38
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f ae85 	beq.w	800a1ae <_strtod_l+0x436>
 800a4a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4a6:	9805      	ldr	r0, [sp, #20]
 800a4a8:	f7fe ffdc 	bl	8009464 <_Bfree>
 800a4ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4b0:	2d00      	cmp	r5, #0
 800a4b2:	dc1d      	bgt.n	800a4f0 <_strtod_l+0x778>
 800a4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dd23      	ble.n	800a502 <_strtod_l+0x78a>
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a4be:	9805      	ldr	r0, [sp, #20]
 800a4c0:	f7ff f98c 	bl	80097dc <__pow5mult>
 800a4c4:	4681      	mov	r9, r0
 800a4c6:	b9e0      	cbnz	r0, 800a502 <_strtod_l+0x78a>
 800a4c8:	f04f 0900 	mov.w	r9, #0
 800a4cc:	e66f      	b.n	800a1ae <_strtod_l+0x436>
 800a4ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a4d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a4d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a4da:	35e2      	adds	r5, #226	@ 0xe2
 800a4dc:	fa01 f305 	lsl.w	r3, r1, r5
 800a4e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a4e4:	e7ba      	b.n	800a45c <_strtod_l+0x6e4>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4ee:	e7b5      	b.n	800a45c <_strtod_l+0x6e4>
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4f4:	9805      	ldr	r0, [sp, #20]
 800a4f6:	f7ff f9cb 	bl	8009890 <__lshift>
 800a4fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d1d9      	bne.n	800a4b4 <_strtod_l+0x73c>
 800a500:	e655      	b.n	800a1ae <_strtod_l+0x436>
 800a502:	2e00      	cmp	r6, #0
 800a504:	dd07      	ble.n	800a516 <_strtod_l+0x79e>
 800a506:	4649      	mov	r1, r9
 800a508:	4632      	mov	r2, r6
 800a50a:	9805      	ldr	r0, [sp, #20]
 800a50c:	f7ff f9c0 	bl	8009890 <__lshift>
 800a510:	4681      	mov	r9, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	d0d8      	beq.n	800a4c8 <_strtod_l+0x750>
 800a516:	2f00      	cmp	r7, #0
 800a518:	dd08      	ble.n	800a52c <_strtod_l+0x7b4>
 800a51a:	4641      	mov	r1, r8
 800a51c:	463a      	mov	r2, r7
 800a51e:	9805      	ldr	r0, [sp, #20]
 800a520:	f7ff f9b6 	bl	8009890 <__lshift>
 800a524:	4680      	mov	r8, r0
 800a526:	2800      	cmp	r0, #0
 800a528:	f43f ae41 	beq.w	800a1ae <_strtod_l+0x436>
 800a52c:	464a      	mov	r2, r9
 800a52e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a530:	9805      	ldr	r0, [sp, #20]
 800a532:	f7ff fa35 	bl	80099a0 <__mdiff>
 800a536:	4604      	mov	r4, r0
 800a538:	2800      	cmp	r0, #0
 800a53a:	f43f ae38 	beq.w	800a1ae <_strtod_l+0x436>
 800a53e:	68c3      	ldr	r3, [r0, #12]
 800a540:	4641      	mov	r1, r8
 800a542:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a544:	2300      	movs	r3, #0
 800a546:	60c3      	str	r3, [r0, #12]
 800a548:	f7ff fa0e 	bl	8009968 <__mcmp>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	da45      	bge.n	800a5dc <_strtod_l+0x864>
 800a550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a552:	ea53 030a 	orrs.w	r3, r3, sl
 800a556:	d16b      	bne.n	800a630 <_strtod_l+0x8b8>
 800a558:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d167      	bne.n	800a630 <_strtod_l+0x8b8>
 800a560:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a564:	0d1b      	lsrs	r3, r3, #20
 800a566:	051b      	lsls	r3, r3, #20
 800a568:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a56c:	d960      	bls.n	800a630 <_strtod_l+0x8b8>
 800a56e:	6963      	ldr	r3, [r4, #20]
 800a570:	b913      	cbnz	r3, 800a578 <_strtod_l+0x800>
 800a572:	6923      	ldr	r3, [r4, #16]
 800a574:	2b01      	cmp	r3, #1
 800a576:	dd5b      	ble.n	800a630 <_strtod_l+0x8b8>
 800a578:	4621      	mov	r1, r4
 800a57a:	2201      	movs	r2, #1
 800a57c:	9805      	ldr	r0, [sp, #20]
 800a57e:	f7ff f987 	bl	8009890 <__lshift>
 800a582:	4641      	mov	r1, r8
 800a584:	4604      	mov	r4, r0
 800a586:	f7ff f9ef 	bl	8009968 <__mcmp>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	dd50      	ble.n	800a630 <_strtod_l+0x8b8>
 800a58e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a592:	9a08      	ldr	r2, [sp, #32]
 800a594:	0d1b      	lsrs	r3, r3, #20
 800a596:	051b      	lsls	r3, r3, #20
 800a598:	2a00      	cmp	r2, #0
 800a59a:	d06a      	beq.n	800a672 <_strtod_l+0x8fa>
 800a59c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5a0:	d867      	bhi.n	800a672 <_strtod_l+0x8fa>
 800a5a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a5a6:	f67f ae98 	bls.w	800a2da <_strtod_l+0x562>
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	4659      	mov	r1, fp
 800a5ae:	4b09      	ldr	r3, [pc, #36]	@ (800a5d4 <_strtod_l+0x85c>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f7f5 ff91 	bl	80004d8 <__aeabi_dmul>
 800a5b6:	4b08      	ldr	r3, [pc, #32]	@ (800a5d8 <_strtod_l+0x860>)
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	400b      	ands	r3, r1
 800a5bc:	468b      	mov	fp, r1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f47f ae00 	bne.w	800a1c4 <_strtod_l+0x44c>
 800a5c4:	2322      	movs	r3, #34	@ 0x22
 800a5c6:	9a05      	ldr	r2, [sp, #20]
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	e5fb      	b.n	800a1c4 <_strtod_l+0x44c>
 800a5cc:	0800d1e8 	.word	0x0800d1e8
 800a5d0:	fffffc02 	.word	0xfffffc02
 800a5d4:	39500000 	.word	0x39500000
 800a5d8:	7ff00000 	.word	0x7ff00000
 800a5dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a5e0:	d165      	bne.n	800a6ae <_strtod_l+0x936>
 800a5e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a5e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5e8:	b35a      	cbz	r2, 800a642 <_strtod_l+0x8ca>
 800a5ea:	4a99      	ldr	r2, [pc, #612]	@ (800a850 <_strtod_l+0xad8>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d12b      	bne.n	800a648 <_strtod_l+0x8d0>
 800a5f0:	9b08      	ldr	r3, [sp, #32]
 800a5f2:	4651      	mov	r1, sl
 800a5f4:	b303      	cbz	r3, 800a638 <_strtod_l+0x8c0>
 800a5f6:	465a      	mov	r2, fp
 800a5f8:	4b96      	ldr	r3, [pc, #600]	@ (800a854 <_strtod_l+0xadc>)
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a600:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a604:	d81b      	bhi.n	800a63e <_strtod_l+0x8c6>
 800a606:	0d1b      	lsrs	r3, r3, #20
 800a608:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a60c:	fa02 f303 	lsl.w	r3, r2, r3
 800a610:	4299      	cmp	r1, r3
 800a612:	d119      	bne.n	800a648 <_strtod_l+0x8d0>
 800a614:	4b90      	ldr	r3, [pc, #576]	@ (800a858 <_strtod_l+0xae0>)
 800a616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a618:	429a      	cmp	r2, r3
 800a61a:	d102      	bne.n	800a622 <_strtod_l+0x8aa>
 800a61c:	3101      	adds	r1, #1
 800a61e:	f43f adc6 	beq.w	800a1ae <_strtod_l+0x436>
 800a622:	f04f 0a00 	mov.w	sl, #0
 800a626:	4b8b      	ldr	r3, [pc, #556]	@ (800a854 <_strtod_l+0xadc>)
 800a628:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a62a:	401a      	ands	r2, r3
 800a62c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a630:	9b08      	ldr	r3, [sp, #32]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1b9      	bne.n	800a5aa <_strtod_l+0x832>
 800a636:	e5c5      	b.n	800a1c4 <_strtod_l+0x44c>
 800a638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a63c:	e7e8      	b.n	800a610 <_strtod_l+0x898>
 800a63e:	4613      	mov	r3, r2
 800a640:	e7e6      	b.n	800a610 <_strtod_l+0x898>
 800a642:	ea53 030a 	orrs.w	r3, r3, sl
 800a646:	d0a2      	beq.n	800a58e <_strtod_l+0x816>
 800a648:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a64a:	b1db      	cbz	r3, 800a684 <_strtod_l+0x90c>
 800a64c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a64e:	4213      	tst	r3, r2
 800a650:	d0ee      	beq.n	800a630 <_strtod_l+0x8b8>
 800a652:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a654:	4650      	mov	r0, sl
 800a656:	4659      	mov	r1, fp
 800a658:	9a08      	ldr	r2, [sp, #32]
 800a65a:	b1bb      	cbz	r3, 800a68c <_strtod_l+0x914>
 800a65c:	f7ff fb68 	bl	8009d30 <sulp>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a668:	f7f5 fd80 	bl	800016c <__adddf3>
 800a66c:	4682      	mov	sl, r0
 800a66e:	468b      	mov	fp, r1
 800a670:	e7de      	b.n	800a630 <_strtod_l+0x8b8>
 800a672:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a676:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a67a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a67e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a682:	e7d5      	b.n	800a630 <_strtod_l+0x8b8>
 800a684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a686:	ea13 0f0a 	tst.w	r3, sl
 800a68a:	e7e1      	b.n	800a650 <_strtod_l+0x8d8>
 800a68c:	f7ff fb50 	bl	8009d30 <sulp>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a698:	f7f5 fd66 	bl	8000168 <__aeabi_dsub>
 800a69c:	2200      	movs	r2, #0
 800a69e:	2300      	movs	r3, #0
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	468b      	mov	fp, r1
 800a6a4:	f7f6 f980 	bl	80009a8 <__aeabi_dcmpeq>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d0c1      	beq.n	800a630 <_strtod_l+0x8b8>
 800a6ac:	e615      	b.n	800a2da <_strtod_l+0x562>
 800a6ae:	4641      	mov	r1, r8
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f7ff fac9 	bl	8009c48 <__ratio>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a6bc:	4606      	mov	r6, r0
 800a6be:	460f      	mov	r7, r1
 800a6c0:	f7f6 f986 	bl	80009d0 <__aeabi_dcmple>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d06d      	beq.n	800a7a4 <_strtod_l+0xa2c>
 800a6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d178      	bne.n	800a7c0 <_strtod_l+0xa48>
 800a6ce:	f1ba 0f00 	cmp.w	sl, #0
 800a6d2:	d156      	bne.n	800a782 <_strtod_l+0xa0a>
 800a6d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d158      	bne.n	800a790 <_strtod_l+0xa18>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	4b5d      	ldr	r3, [pc, #372]	@ (800a85c <_strtod_l+0xae4>)
 800a6e6:	f7f6 f969 	bl	80009bc <__aeabi_dcmplt>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d157      	bne.n	800a79e <_strtod_l+0xa26>
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4b5a      	ldr	r3, [pc, #360]	@ (800a860 <_strtod_l+0xae8>)
 800a6f6:	f7f5 feef 	bl	80004d8 <__aeabi_dmul>
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	460f      	mov	r7, r1
 800a6fe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a702:	9606      	str	r6, [sp, #24]
 800a704:	9307      	str	r3, [sp, #28]
 800a706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a70a:	4d52      	ldr	r5, [pc, #328]	@ (800a854 <_strtod_l+0xadc>)
 800a70c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a712:	401d      	ands	r5, r3
 800a714:	4b53      	ldr	r3, [pc, #332]	@ (800a864 <_strtod_l+0xaec>)
 800a716:	429d      	cmp	r5, r3
 800a718:	f040 80aa 	bne.w	800a870 <_strtod_l+0xaf8>
 800a71c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a71e:	4650      	mov	r0, sl
 800a720:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a724:	4659      	mov	r1, fp
 800a726:	f7ff f9cf 	bl	8009ac8 <__ulp>
 800a72a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a72e:	f7f5 fed3 	bl	80004d8 <__aeabi_dmul>
 800a732:	4652      	mov	r2, sl
 800a734:	465b      	mov	r3, fp
 800a736:	f7f5 fd19 	bl	800016c <__adddf3>
 800a73a:	460b      	mov	r3, r1
 800a73c:	4945      	ldr	r1, [pc, #276]	@ (800a854 <_strtod_l+0xadc>)
 800a73e:	4a4a      	ldr	r2, [pc, #296]	@ (800a868 <_strtod_l+0xaf0>)
 800a740:	4019      	ands	r1, r3
 800a742:	4291      	cmp	r1, r2
 800a744:	4682      	mov	sl, r0
 800a746:	d942      	bls.n	800a7ce <_strtod_l+0xa56>
 800a748:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a74a:	4b43      	ldr	r3, [pc, #268]	@ (800a858 <_strtod_l+0xae0>)
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d103      	bne.n	800a758 <_strtod_l+0x9e0>
 800a750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a752:	3301      	adds	r3, #1
 800a754:	f43f ad2b 	beq.w	800a1ae <_strtod_l+0x436>
 800a758:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a75c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a858 <_strtod_l+0xae0>
 800a760:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a762:	9805      	ldr	r0, [sp, #20]
 800a764:	f7fe fe7e 	bl	8009464 <_Bfree>
 800a768:	4649      	mov	r1, r9
 800a76a:	9805      	ldr	r0, [sp, #20]
 800a76c:	f7fe fe7a 	bl	8009464 <_Bfree>
 800a770:	4641      	mov	r1, r8
 800a772:	9805      	ldr	r0, [sp, #20]
 800a774:	f7fe fe76 	bl	8009464 <_Bfree>
 800a778:	4621      	mov	r1, r4
 800a77a:	9805      	ldr	r0, [sp, #20]
 800a77c:	f7fe fe72 	bl	8009464 <_Bfree>
 800a780:	e618      	b.n	800a3b4 <_strtod_l+0x63c>
 800a782:	f1ba 0f01 	cmp.w	sl, #1
 800a786:	d103      	bne.n	800a790 <_strtod_l+0xa18>
 800a788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f43f ada5 	beq.w	800a2da <_strtod_l+0x562>
 800a790:	2200      	movs	r2, #0
 800a792:	4b36      	ldr	r3, [pc, #216]	@ (800a86c <_strtod_l+0xaf4>)
 800a794:	2600      	movs	r6, #0
 800a796:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a79a:	4f30      	ldr	r7, [pc, #192]	@ (800a85c <_strtod_l+0xae4>)
 800a79c:	e7b3      	b.n	800a706 <_strtod_l+0x98e>
 800a79e:	2600      	movs	r6, #0
 800a7a0:	4f2f      	ldr	r7, [pc, #188]	@ (800a860 <_strtod_l+0xae8>)
 800a7a2:	e7ac      	b.n	800a6fe <_strtod_l+0x986>
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	4b2d      	ldr	r3, [pc, #180]	@ (800a860 <_strtod_l+0xae8>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f7f5 fe94 	bl	80004d8 <__aeabi_dmul>
 800a7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0a1      	beq.n	800a6fe <_strtod_l+0x986>
 800a7ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a7be:	e7a2      	b.n	800a706 <_strtod_l+0x98e>
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4b26      	ldr	r3, [pc, #152]	@ (800a85c <_strtod_l+0xae4>)
 800a7c4:	4616      	mov	r6, r2
 800a7c6:	461f      	mov	r7, r3
 800a7c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7cc:	e79b      	b.n	800a706 <_strtod_l+0x98e>
 800a7ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a7d2:	9b08      	ldr	r3, [sp, #32]
 800a7d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1c1      	bne.n	800a760 <_strtod_l+0x9e8>
 800a7dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7e0:	0d1b      	lsrs	r3, r3, #20
 800a7e2:	051b      	lsls	r3, r3, #20
 800a7e4:	429d      	cmp	r5, r3
 800a7e6:	d1bb      	bne.n	800a760 <_strtod_l+0x9e8>
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 fca8 	bl	8001140 <__aeabi_d2lz>
 800a7f0:	f7f5 fe44 	bl	800047c <__aeabi_l2d>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	f7f5 fcb4 	bl	8000168 <__aeabi_dsub>
 800a800:	460b      	mov	r3, r1
 800a802:	4602      	mov	r2, r0
 800a804:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a808:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a80e:	ea46 060a 	orr.w	r6, r6, sl
 800a812:	431e      	orrs	r6, r3
 800a814:	d069      	beq.n	800a8ea <_strtod_l+0xb72>
 800a816:	a30a      	add	r3, pc, #40	@ (adr r3, 800a840 <_strtod_l+0xac8>)
 800a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81c:	f7f6 f8ce 	bl	80009bc <__aeabi_dcmplt>
 800a820:	2800      	cmp	r0, #0
 800a822:	f47f accf 	bne.w	800a1c4 <_strtod_l+0x44c>
 800a826:	a308      	add	r3, pc, #32	@ (adr r3, 800a848 <_strtod_l+0xad0>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a830:	f7f6 f8e2 	bl	80009f8 <__aeabi_dcmpgt>
 800a834:	2800      	cmp	r0, #0
 800a836:	d093      	beq.n	800a760 <_strtod_l+0x9e8>
 800a838:	e4c4      	b.n	800a1c4 <_strtod_l+0x44c>
 800a83a:	bf00      	nop
 800a83c:	f3af 8000 	nop.w
 800a840:	94a03595 	.word	0x94a03595
 800a844:	3fdfffff 	.word	0x3fdfffff
 800a848:	35afe535 	.word	0x35afe535
 800a84c:	3fe00000 	.word	0x3fe00000
 800a850:	000fffff 	.word	0x000fffff
 800a854:	7ff00000 	.word	0x7ff00000
 800a858:	7fefffff 	.word	0x7fefffff
 800a85c:	3ff00000 	.word	0x3ff00000
 800a860:	3fe00000 	.word	0x3fe00000
 800a864:	7fe00000 	.word	0x7fe00000
 800a868:	7c9fffff 	.word	0x7c9fffff
 800a86c:	bff00000 	.word	0xbff00000
 800a870:	9b08      	ldr	r3, [sp, #32]
 800a872:	b323      	cbz	r3, 800a8be <_strtod_l+0xb46>
 800a874:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a878:	d821      	bhi.n	800a8be <_strtod_l+0xb46>
 800a87a:	a327      	add	r3, pc, #156	@ (adr r3, 800a918 <_strtod_l+0xba0>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	f7f6 f8a4 	bl	80009d0 <__aeabi_dcmple>
 800a888:	b1a0      	cbz	r0, 800a8b4 <_strtod_l+0xb3c>
 800a88a:	4639      	mov	r1, r7
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7f6 f8fb 	bl	8000a88 <__aeabi_d2uiz>
 800a892:	2801      	cmp	r0, #1
 800a894:	bf38      	it	cc
 800a896:	2001      	movcc	r0, #1
 800a898:	f7f5 fda4 	bl	80003e4 <__aeabi_ui2d>
 800a89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	b9fb      	cbnz	r3, 800a8e4 <_strtod_l+0xb6c>
 800a8a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8a8:	9014      	str	r0, [sp, #80]	@ 0x50
 800a8aa:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a8b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8b6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a8ba:	1b5b      	subs	r3, r3, r5
 800a8bc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a8be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8c2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a8c6:	f7ff f8ff 	bl	8009ac8 <__ulp>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	f7f5 fe01 	bl	80004d8 <__aeabi_dmul>
 800a8d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8da:	f7f5 fc47 	bl	800016c <__adddf3>
 800a8de:	4682      	mov	sl, r0
 800a8e0:	468b      	mov	fp, r1
 800a8e2:	e776      	b.n	800a7d2 <_strtod_l+0xa5a>
 800a8e4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a8e8:	e7e0      	b.n	800a8ac <_strtod_l+0xb34>
 800a8ea:	a30d      	add	r3, pc, #52	@ (adr r3, 800a920 <_strtod_l+0xba8>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f7f6 f864 	bl	80009bc <__aeabi_dcmplt>
 800a8f4:	e79e      	b.n	800a834 <_strtod_l+0xabc>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8fc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	f7ff ba77 	b.w	8009df2 <_strtod_l+0x7a>
 800a904:	2a65      	cmp	r2, #101	@ 0x65
 800a906:	f43f ab6e 	beq.w	8009fe6 <_strtod_l+0x26e>
 800a90a:	2a45      	cmp	r2, #69	@ 0x45
 800a90c:	f43f ab6b 	beq.w	8009fe6 <_strtod_l+0x26e>
 800a910:	2301      	movs	r3, #1
 800a912:	f7ff bba6 	b.w	800a062 <_strtod_l+0x2ea>
 800a916:	bf00      	nop
 800a918:	ffc00000 	.word	0xffc00000
 800a91c:	41dfffff 	.word	0x41dfffff
 800a920:	94a03595 	.word	0x94a03595
 800a924:	3fcfffff 	.word	0x3fcfffff

0800a928 <_strtod_r>:
 800a928:	4b01      	ldr	r3, [pc, #4]	@ (800a930 <_strtod_r+0x8>)
 800a92a:	f7ff ba25 	b.w	8009d78 <_strtod_l>
 800a92e:	bf00      	nop
 800a930:	20000070 	.word	0x20000070

0800a934 <_strtol_l.constprop.0>:
 800a934:	2b24      	cmp	r3, #36	@ 0x24
 800a936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93a:	4686      	mov	lr, r0
 800a93c:	4690      	mov	r8, r2
 800a93e:	d801      	bhi.n	800a944 <_strtol_l.constprop.0+0x10>
 800a940:	2b01      	cmp	r3, #1
 800a942:	d106      	bne.n	800a952 <_strtol_l.constprop.0+0x1e>
 800a944:	f7fd fdb2 	bl	80084ac <__errno>
 800a948:	2316      	movs	r3, #22
 800a94a:	6003      	str	r3, [r0, #0]
 800a94c:	2000      	movs	r0, #0
 800a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a952:	460d      	mov	r5, r1
 800a954:	4833      	ldr	r0, [pc, #204]	@ (800aa24 <_strtol_l.constprop.0+0xf0>)
 800a956:	462a      	mov	r2, r5
 800a958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a95c:	5d06      	ldrb	r6, [r0, r4]
 800a95e:	f016 0608 	ands.w	r6, r6, #8
 800a962:	d1f8      	bne.n	800a956 <_strtol_l.constprop.0+0x22>
 800a964:	2c2d      	cmp	r4, #45	@ 0x2d
 800a966:	d12d      	bne.n	800a9c4 <_strtol_l.constprop.0+0x90>
 800a968:	2601      	movs	r6, #1
 800a96a:	782c      	ldrb	r4, [r5, #0]
 800a96c:	1c95      	adds	r5, r2, #2
 800a96e:	f033 0210 	bics.w	r2, r3, #16
 800a972:	d109      	bne.n	800a988 <_strtol_l.constprop.0+0x54>
 800a974:	2c30      	cmp	r4, #48	@ 0x30
 800a976:	d12a      	bne.n	800a9ce <_strtol_l.constprop.0+0x9a>
 800a978:	782a      	ldrb	r2, [r5, #0]
 800a97a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a97e:	2a58      	cmp	r2, #88	@ 0x58
 800a980:	d125      	bne.n	800a9ce <_strtol_l.constprop.0+0x9a>
 800a982:	2310      	movs	r3, #16
 800a984:	786c      	ldrb	r4, [r5, #1]
 800a986:	3502      	adds	r5, #2
 800a988:	2200      	movs	r2, #0
 800a98a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a98e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a992:	fbbc f9f3 	udiv	r9, ip, r3
 800a996:	4610      	mov	r0, r2
 800a998:	fb03 ca19 	mls	sl, r3, r9, ip
 800a99c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a9a0:	2f09      	cmp	r7, #9
 800a9a2:	d81b      	bhi.n	800a9dc <_strtol_l.constprop.0+0xa8>
 800a9a4:	463c      	mov	r4, r7
 800a9a6:	42a3      	cmp	r3, r4
 800a9a8:	dd27      	ble.n	800a9fa <_strtol_l.constprop.0+0xc6>
 800a9aa:	1c57      	adds	r7, r2, #1
 800a9ac:	d007      	beq.n	800a9be <_strtol_l.constprop.0+0x8a>
 800a9ae:	4581      	cmp	r9, r0
 800a9b0:	d320      	bcc.n	800a9f4 <_strtol_l.constprop.0+0xc0>
 800a9b2:	d101      	bne.n	800a9b8 <_strtol_l.constprop.0+0x84>
 800a9b4:	45a2      	cmp	sl, r4
 800a9b6:	db1d      	blt.n	800a9f4 <_strtol_l.constprop.0+0xc0>
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	fb00 4003 	mla	r0, r0, r3, r4
 800a9be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9c2:	e7eb      	b.n	800a99c <_strtol_l.constprop.0+0x68>
 800a9c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a9c6:	bf04      	itt	eq
 800a9c8:	782c      	ldrbeq	r4, [r5, #0]
 800a9ca:	1c95      	addeq	r5, r2, #2
 800a9cc:	e7cf      	b.n	800a96e <_strtol_l.constprop.0+0x3a>
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1da      	bne.n	800a988 <_strtol_l.constprop.0+0x54>
 800a9d2:	2c30      	cmp	r4, #48	@ 0x30
 800a9d4:	bf0c      	ite	eq
 800a9d6:	2308      	moveq	r3, #8
 800a9d8:	230a      	movne	r3, #10
 800a9da:	e7d5      	b.n	800a988 <_strtol_l.constprop.0+0x54>
 800a9dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a9e0:	2f19      	cmp	r7, #25
 800a9e2:	d801      	bhi.n	800a9e8 <_strtol_l.constprop.0+0xb4>
 800a9e4:	3c37      	subs	r4, #55	@ 0x37
 800a9e6:	e7de      	b.n	800a9a6 <_strtol_l.constprop.0+0x72>
 800a9e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a9ec:	2f19      	cmp	r7, #25
 800a9ee:	d804      	bhi.n	800a9fa <_strtol_l.constprop.0+0xc6>
 800a9f0:	3c57      	subs	r4, #87	@ 0x57
 800a9f2:	e7d8      	b.n	800a9a6 <_strtol_l.constprop.0+0x72>
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9f8:	e7e1      	b.n	800a9be <_strtol_l.constprop.0+0x8a>
 800a9fa:	1c53      	adds	r3, r2, #1
 800a9fc:	d108      	bne.n	800aa10 <_strtol_l.constprop.0+0xdc>
 800a9fe:	2322      	movs	r3, #34	@ 0x22
 800aa00:	4660      	mov	r0, ip
 800aa02:	f8ce 3000 	str.w	r3, [lr]
 800aa06:	f1b8 0f00 	cmp.w	r8, #0
 800aa0a:	d0a0      	beq.n	800a94e <_strtol_l.constprop.0+0x1a>
 800aa0c:	1e69      	subs	r1, r5, #1
 800aa0e:	e006      	b.n	800aa1e <_strtol_l.constprop.0+0xea>
 800aa10:	b106      	cbz	r6, 800aa14 <_strtol_l.constprop.0+0xe0>
 800aa12:	4240      	negs	r0, r0
 800aa14:	f1b8 0f00 	cmp.w	r8, #0
 800aa18:	d099      	beq.n	800a94e <_strtol_l.constprop.0+0x1a>
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	d1f6      	bne.n	800aa0c <_strtol_l.constprop.0+0xd8>
 800aa1e:	f8c8 1000 	str.w	r1, [r8]
 800aa22:	e794      	b.n	800a94e <_strtol_l.constprop.0+0x1a>
 800aa24:	0800d211 	.word	0x0800d211

0800aa28 <_strtol_r>:
 800aa28:	f7ff bf84 	b.w	800a934 <_strtol_l.constprop.0>

0800aa2c <__ssputs_r>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	461f      	mov	r7, r3
 800aa32:	688e      	ldr	r6, [r1, #8]
 800aa34:	4682      	mov	sl, r0
 800aa36:	42be      	cmp	r6, r7
 800aa38:	460c      	mov	r4, r1
 800aa3a:	4690      	mov	r8, r2
 800aa3c:	680b      	ldr	r3, [r1, #0]
 800aa3e:	d82d      	bhi.n	800aa9c <__ssputs_r+0x70>
 800aa40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa48:	d026      	beq.n	800aa98 <__ssputs_r+0x6c>
 800aa4a:	6965      	ldr	r5, [r4, #20]
 800aa4c:	6909      	ldr	r1, [r1, #16]
 800aa4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa52:	eba3 0901 	sub.w	r9, r3, r1
 800aa56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa5a:	1c7b      	adds	r3, r7, #1
 800aa5c:	444b      	add	r3, r9
 800aa5e:	106d      	asrs	r5, r5, #1
 800aa60:	429d      	cmp	r5, r3
 800aa62:	bf38      	it	cc
 800aa64:	461d      	movcc	r5, r3
 800aa66:	0553      	lsls	r3, r2, #21
 800aa68:	d527      	bpl.n	800aaba <__ssputs_r+0x8e>
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	f7fe fc2e 	bl	80092cc <_malloc_r>
 800aa70:	4606      	mov	r6, r0
 800aa72:	b360      	cbz	r0, 800aace <__ssputs_r+0xa2>
 800aa74:	464a      	mov	r2, r9
 800aa76:	6921      	ldr	r1, [r4, #16]
 800aa78:	f7fd fd53 	bl	8008522 <memcpy>
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	6126      	str	r6, [r4, #16]
 800aa8a:	444e      	add	r6, r9
 800aa8c:	6026      	str	r6, [r4, #0]
 800aa8e:	463e      	mov	r6, r7
 800aa90:	6165      	str	r5, [r4, #20]
 800aa92:	eba5 0509 	sub.w	r5, r5, r9
 800aa96:	60a5      	str	r5, [r4, #8]
 800aa98:	42be      	cmp	r6, r7
 800aa9a:	d900      	bls.n	800aa9e <__ssputs_r+0x72>
 800aa9c:	463e      	mov	r6, r7
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	6820      	ldr	r0, [r4, #0]
 800aaa4:	f000 f9c2 	bl	800ae2c <memmove>
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	68a3      	ldr	r3, [r4, #8]
 800aaac:	1b9b      	subs	r3, r3, r6
 800aaae:	60a3      	str	r3, [r4, #8]
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	4433      	add	r3, r6
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaba:	462a      	mov	r2, r5
 800aabc:	f000 fd75 	bl	800b5aa <_realloc_r>
 800aac0:	4606      	mov	r6, r0
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d1e0      	bne.n	800aa88 <__ssputs_r+0x5c>
 800aac6:	4650      	mov	r0, sl
 800aac8:	6921      	ldr	r1, [r4, #16]
 800aaca:	f7fe fb8d 	bl	80091e8 <_free_r>
 800aace:	230c      	movs	r3, #12
 800aad0:	f8ca 3000 	str.w	r3, [sl]
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	e7e9      	b.n	800aab6 <__ssputs_r+0x8a>
	...

0800aae4 <_svfiprintf_r>:
 800aae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae8:	4698      	mov	r8, r3
 800aaea:	898b      	ldrh	r3, [r1, #12]
 800aaec:	4607      	mov	r7, r0
 800aaee:	061b      	lsls	r3, r3, #24
 800aaf0:	460d      	mov	r5, r1
 800aaf2:	4614      	mov	r4, r2
 800aaf4:	b09d      	sub	sp, #116	@ 0x74
 800aaf6:	d510      	bpl.n	800ab1a <_svfiprintf_r+0x36>
 800aaf8:	690b      	ldr	r3, [r1, #16]
 800aafa:	b973      	cbnz	r3, 800ab1a <_svfiprintf_r+0x36>
 800aafc:	2140      	movs	r1, #64	@ 0x40
 800aafe:	f7fe fbe5 	bl	80092cc <_malloc_r>
 800ab02:	6028      	str	r0, [r5, #0]
 800ab04:	6128      	str	r0, [r5, #16]
 800ab06:	b930      	cbnz	r0, 800ab16 <_svfiprintf_r+0x32>
 800ab08:	230c      	movs	r3, #12
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab10:	b01d      	add	sp, #116	@ 0x74
 800ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab16:	2340      	movs	r3, #64	@ 0x40
 800ab18:	616b      	str	r3, [r5, #20]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab1e:	2320      	movs	r3, #32
 800ab20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab24:	2330      	movs	r3, #48	@ 0x30
 800ab26:	f04f 0901 	mov.w	r9, #1
 800ab2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800acc8 <_svfiprintf_r+0x1e4>
 800ab32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab36:	4623      	mov	r3, r4
 800ab38:	469a      	mov	sl, r3
 800ab3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab3e:	b10a      	cbz	r2, 800ab44 <_svfiprintf_r+0x60>
 800ab40:	2a25      	cmp	r2, #37	@ 0x25
 800ab42:	d1f9      	bne.n	800ab38 <_svfiprintf_r+0x54>
 800ab44:	ebba 0b04 	subs.w	fp, sl, r4
 800ab48:	d00b      	beq.n	800ab62 <_svfiprintf_r+0x7e>
 800ab4a:	465b      	mov	r3, fp
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7ff ff6b 	bl	800aa2c <__ssputs_r>
 800ab56:	3001      	adds	r0, #1
 800ab58:	f000 80a7 	beq.w	800acaa <_svfiprintf_r+0x1c6>
 800ab5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab5e:	445a      	add	r2, fp
 800ab60:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab62:	f89a 3000 	ldrb.w	r3, [sl]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 809f 	beq.w	800acaa <_svfiprintf_r+0x1c6>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab76:	f10a 0a01 	add.w	sl, sl, #1
 800ab7a:	9304      	str	r3, [sp, #16]
 800ab7c:	9307      	str	r3, [sp, #28]
 800ab7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab82:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab84:	4654      	mov	r4, sl
 800ab86:	2205      	movs	r2, #5
 800ab88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8c:	484e      	ldr	r0, [pc, #312]	@ (800acc8 <_svfiprintf_r+0x1e4>)
 800ab8e:	f7fd fcba 	bl	8008506 <memchr>
 800ab92:	9a04      	ldr	r2, [sp, #16]
 800ab94:	b9d8      	cbnz	r0, 800abce <_svfiprintf_r+0xea>
 800ab96:	06d0      	lsls	r0, r2, #27
 800ab98:	bf44      	itt	mi
 800ab9a:	2320      	movmi	r3, #32
 800ab9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba0:	0711      	lsls	r1, r2, #28
 800aba2:	bf44      	itt	mi
 800aba4:	232b      	movmi	r3, #43	@ 0x2b
 800aba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abaa:	f89a 3000 	ldrb.w	r3, [sl]
 800abae:	2b2a      	cmp	r3, #42	@ 0x2a
 800abb0:	d015      	beq.n	800abde <_svfiprintf_r+0xfa>
 800abb2:	4654      	mov	r4, sl
 800abb4:	2000      	movs	r0, #0
 800abb6:	f04f 0c0a 	mov.w	ip, #10
 800abba:	9a07      	ldr	r2, [sp, #28]
 800abbc:	4621      	mov	r1, r4
 800abbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc2:	3b30      	subs	r3, #48	@ 0x30
 800abc4:	2b09      	cmp	r3, #9
 800abc6:	d94b      	bls.n	800ac60 <_svfiprintf_r+0x17c>
 800abc8:	b1b0      	cbz	r0, 800abf8 <_svfiprintf_r+0x114>
 800abca:	9207      	str	r2, [sp, #28]
 800abcc:	e014      	b.n	800abf8 <_svfiprintf_r+0x114>
 800abce:	eba0 0308 	sub.w	r3, r0, r8
 800abd2:	fa09 f303 	lsl.w	r3, r9, r3
 800abd6:	4313      	orrs	r3, r2
 800abd8:	46a2      	mov	sl, r4
 800abda:	9304      	str	r3, [sp, #16]
 800abdc:	e7d2      	b.n	800ab84 <_svfiprintf_r+0xa0>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	1d19      	adds	r1, r3, #4
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	9103      	str	r1, [sp, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfbb      	ittet	lt
 800abea:	425b      	neglt	r3, r3
 800abec:	f042 0202 	orrlt.w	r2, r2, #2
 800abf0:	9307      	strge	r3, [sp, #28]
 800abf2:	9307      	strlt	r3, [sp, #28]
 800abf4:	bfb8      	it	lt
 800abf6:	9204      	strlt	r2, [sp, #16]
 800abf8:	7823      	ldrb	r3, [r4, #0]
 800abfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800abfc:	d10a      	bne.n	800ac14 <_svfiprintf_r+0x130>
 800abfe:	7863      	ldrb	r3, [r4, #1]
 800ac00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac02:	d132      	bne.n	800ac6a <_svfiprintf_r+0x186>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	3402      	adds	r4, #2
 800ac08:	1d1a      	adds	r2, r3, #4
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	9203      	str	r2, [sp, #12]
 800ac0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac12:	9305      	str	r3, [sp, #20]
 800ac14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800accc <_svfiprintf_r+0x1e8>
 800ac18:	2203      	movs	r2, #3
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	7821      	ldrb	r1, [r4, #0]
 800ac1e:	f7fd fc72 	bl	8008506 <memchr>
 800ac22:	b138      	cbz	r0, 800ac34 <_svfiprintf_r+0x150>
 800ac24:	2240      	movs	r2, #64	@ 0x40
 800ac26:	9b04      	ldr	r3, [sp, #16]
 800ac28:	eba0 000a 	sub.w	r0, r0, sl
 800ac2c:	4082      	lsls	r2, r0
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	3401      	adds	r4, #1
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac38:	2206      	movs	r2, #6
 800ac3a:	4825      	ldr	r0, [pc, #148]	@ (800acd0 <_svfiprintf_r+0x1ec>)
 800ac3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac40:	f7fd fc61 	bl	8008506 <memchr>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d036      	beq.n	800acb6 <_svfiprintf_r+0x1d2>
 800ac48:	4b22      	ldr	r3, [pc, #136]	@ (800acd4 <_svfiprintf_r+0x1f0>)
 800ac4a:	bb1b      	cbnz	r3, 800ac94 <_svfiprintf_r+0x1b0>
 800ac4c:	9b03      	ldr	r3, [sp, #12]
 800ac4e:	3307      	adds	r3, #7
 800ac50:	f023 0307 	bic.w	r3, r3, #7
 800ac54:	3308      	adds	r3, #8
 800ac56:	9303      	str	r3, [sp, #12]
 800ac58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac5a:	4433      	add	r3, r6
 800ac5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5e:	e76a      	b.n	800ab36 <_svfiprintf_r+0x52>
 800ac60:	460c      	mov	r4, r1
 800ac62:	2001      	movs	r0, #1
 800ac64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac68:	e7a8      	b.n	800abbc <_svfiprintf_r+0xd8>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f04f 0c0a 	mov.w	ip, #10
 800ac70:	4619      	mov	r1, r3
 800ac72:	3401      	adds	r4, #1
 800ac74:	9305      	str	r3, [sp, #20]
 800ac76:	4620      	mov	r0, r4
 800ac78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac7c:	3a30      	subs	r2, #48	@ 0x30
 800ac7e:	2a09      	cmp	r2, #9
 800ac80:	d903      	bls.n	800ac8a <_svfiprintf_r+0x1a6>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d0c6      	beq.n	800ac14 <_svfiprintf_r+0x130>
 800ac86:	9105      	str	r1, [sp, #20]
 800ac88:	e7c4      	b.n	800ac14 <_svfiprintf_r+0x130>
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac92:	e7f0      	b.n	800ac76 <_svfiprintf_r+0x192>
 800ac94:	ab03      	add	r3, sp, #12
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	462a      	mov	r2, r5
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	@ (800acd8 <_svfiprintf_r+0x1f4>)
 800ac9e:	a904      	add	r1, sp, #16
 800aca0:	f7fc fcbe 	bl	8007620 <_printf_float>
 800aca4:	1c42      	adds	r2, r0, #1
 800aca6:	4606      	mov	r6, r0
 800aca8:	d1d6      	bne.n	800ac58 <_svfiprintf_r+0x174>
 800acaa:	89ab      	ldrh	r3, [r5, #12]
 800acac:	065b      	lsls	r3, r3, #25
 800acae:	f53f af2d 	bmi.w	800ab0c <_svfiprintf_r+0x28>
 800acb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acb4:	e72c      	b.n	800ab10 <_svfiprintf_r+0x2c>
 800acb6:	ab03      	add	r3, sp, #12
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	462a      	mov	r2, r5
 800acbc:	4638      	mov	r0, r7
 800acbe:	4b06      	ldr	r3, [pc, #24]	@ (800acd8 <_svfiprintf_r+0x1f4>)
 800acc0:	a904      	add	r1, sp, #16
 800acc2:	f7fc ff4b 	bl	8007b5c <_printf_i>
 800acc6:	e7ed      	b.n	800aca4 <_svfiprintf_r+0x1c0>
 800acc8:	0800d311 	.word	0x0800d311
 800accc:	0800d317 	.word	0x0800d317
 800acd0:	0800d31b 	.word	0x0800d31b
 800acd4:	08007621 	.word	0x08007621
 800acd8:	0800aa2d 	.word	0x0800aa2d

0800acdc <__sflush_r>:
 800acdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	0716      	lsls	r6, r2, #28
 800ace4:	4605      	mov	r5, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	d454      	bmi.n	800ad94 <__sflush_r+0xb8>
 800acea:	684b      	ldr	r3, [r1, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	dc02      	bgt.n	800acf6 <__sflush_r+0x1a>
 800acf0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dd48      	ble.n	800ad88 <__sflush_r+0xac>
 800acf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800acf8:	2e00      	cmp	r6, #0
 800acfa:	d045      	beq.n	800ad88 <__sflush_r+0xac>
 800acfc:	2300      	movs	r3, #0
 800acfe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad02:	682f      	ldr	r7, [r5, #0]
 800ad04:	6a21      	ldr	r1, [r4, #32]
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	d030      	beq.n	800ad6c <__sflush_r+0x90>
 800ad0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	0759      	lsls	r1, r3, #29
 800ad10:	d505      	bpl.n	800ad1e <__sflush_r+0x42>
 800ad12:	6863      	ldr	r3, [r4, #4]
 800ad14:	1ad2      	subs	r2, r2, r3
 800ad16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad18:	b10b      	cbz	r3, 800ad1e <__sflush_r+0x42>
 800ad1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad1c:	1ad2      	subs	r2, r2, r3
 800ad1e:	2300      	movs	r3, #0
 800ad20:	4628      	mov	r0, r5
 800ad22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad24:	6a21      	ldr	r1, [r4, #32]
 800ad26:	47b0      	blx	r6
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	d106      	bne.n	800ad3c <__sflush_r+0x60>
 800ad2e:	6829      	ldr	r1, [r5, #0]
 800ad30:	291d      	cmp	r1, #29
 800ad32:	d82b      	bhi.n	800ad8c <__sflush_r+0xb0>
 800ad34:	4a28      	ldr	r2, [pc, #160]	@ (800add8 <__sflush_r+0xfc>)
 800ad36:	410a      	asrs	r2, r1
 800ad38:	07d6      	lsls	r6, r2, #31
 800ad3a:	d427      	bmi.n	800ad8c <__sflush_r+0xb0>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	6062      	str	r2, [r4, #4]
 800ad40:	6922      	ldr	r2, [r4, #16]
 800ad42:	04d9      	lsls	r1, r3, #19
 800ad44:	6022      	str	r2, [r4, #0]
 800ad46:	d504      	bpl.n	800ad52 <__sflush_r+0x76>
 800ad48:	1c42      	adds	r2, r0, #1
 800ad4a:	d101      	bne.n	800ad50 <__sflush_r+0x74>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b903      	cbnz	r3, 800ad52 <__sflush_r+0x76>
 800ad50:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad54:	602f      	str	r7, [r5, #0]
 800ad56:	b1b9      	cbz	r1, 800ad88 <__sflush_r+0xac>
 800ad58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	d002      	beq.n	800ad66 <__sflush_r+0x8a>
 800ad60:	4628      	mov	r0, r5
 800ad62:	f7fe fa41 	bl	80091e8 <_free_r>
 800ad66:	2300      	movs	r3, #0
 800ad68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad6a:	e00d      	b.n	800ad88 <__sflush_r+0xac>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	4628      	mov	r0, r5
 800ad70:	47b0      	blx	r6
 800ad72:	4602      	mov	r2, r0
 800ad74:	1c50      	adds	r0, r2, #1
 800ad76:	d1c9      	bne.n	800ad0c <__sflush_r+0x30>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0c6      	beq.n	800ad0c <__sflush_r+0x30>
 800ad7e:	2b1d      	cmp	r3, #29
 800ad80:	d001      	beq.n	800ad86 <__sflush_r+0xaa>
 800ad82:	2b16      	cmp	r3, #22
 800ad84:	d11d      	bne.n	800adc2 <__sflush_r+0xe6>
 800ad86:	602f      	str	r7, [r5, #0]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e021      	b.n	800add0 <__sflush_r+0xf4>
 800ad8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad90:	b21b      	sxth	r3, r3
 800ad92:	e01a      	b.n	800adca <__sflush_r+0xee>
 800ad94:	690f      	ldr	r7, [r1, #16]
 800ad96:	2f00      	cmp	r7, #0
 800ad98:	d0f6      	beq.n	800ad88 <__sflush_r+0xac>
 800ad9a:	0793      	lsls	r3, r2, #30
 800ad9c:	bf18      	it	ne
 800ad9e:	2300      	movne	r3, #0
 800ada0:	680e      	ldr	r6, [r1, #0]
 800ada2:	bf08      	it	eq
 800ada4:	694b      	ldreq	r3, [r1, #20]
 800ada6:	1bf6      	subs	r6, r6, r7
 800ada8:	600f      	str	r7, [r1, #0]
 800adaa:	608b      	str	r3, [r1, #8]
 800adac:	2e00      	cmp	r6, #0
 800adae:	ddeb      	ble.n	800ad88 <__sflush_r+0xac>
 800adb0:	4633      	mov	r3, r6
 800adb2:	463a      	mov	r2, r7
 800adb4:	4628      	mov	r0, r5
 800adb6:	6a21      	ldr	r1, [r4, #32]
 800adb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800adbc:	47e0      	blx	ip
 800adbe:	2800      	cmp	r0, #0
 800adc0:	dc07      	bgt.n	800add2 <__sflush_r+0xf6>
 800adc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add2:	4407      	add	r7, r0
 800add4:	1a36      	subs	r6, r6, r0
 800add6:	e7e9      	b.n	800adac <__sflush_r+0xd0>
 800add8:	dfbffffe 	.word	0xdfbffffe

0800addc <_fflush_r>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	690b      	ldr	r3, [r1, #16]
 800ade0:	4605      	mov	r5, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	b913      	cbnz	r3, 800adec <_fflush_r+0x10>
 800ade6:	2500      	movs	r5, #0
 800ade8:	4628      	mov	r0, r5
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	b118      	cbz	r0, 800adf6 <_fflush_r+0x1a>
 800adee:	6a03      	ldr	r3, [r0, #32]
 800adf0:	b90b      	cbnz	r3, 800adf6 <_fflush_r+0x1a>
 800adf2:	f7fd fa6f 	bl	80082d4 <__sinit>
 800adf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0f3      	beq.n	800ade6 <_fflush_r+0xa>
 800adfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae00:	07d0      	lsls	r0, r2, #31
 800ae02:	d404      	bmi.n	800ae0e <_fflush_r+0x32>
 800ae04:	0599      	lsls	r1, r3, #22
 800ae06:	d402      	bmi.n	800ae0e <_fflush_r+0x32>
 800ae08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae0a:	f7fd fb7a 	bl	8008502 <__retarget_lock_acquire_recursive>
 800ae0e:	4628      	mov	r0, r5
 800ae10:	4621      	mov	r1, r4
 800ae12:	f7ff ff63 	bl	800acdc <__sflush_r>
 800ae16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae18:	4605      	mov	r5, r0
 800ae1a:	07da      	lsls	r2, r3, #31
 800ae1c:	d4e4      	bmi.n	800ade8 <_fflush_r+0xc>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	059b      	lsls	r3, r3, #22
 800ae22:	d4e1      	bmi.n	800ade8 <_fflush_r+0xc>
 800ae24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae26:	f7fd fb6d 	bl	8008504 <__retarget_lock_release_recursive>
 800ae2a:	e7dd      	b.n	800ade8 <_fflush_r+0xc>

0800ae2c <memmove>:
 800ae2c:	4288      	cmp	r0, r1
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	eb01 0402 	add.w	r4, r1, r2
 800ae34:	d902      	bls.n	800ae3c <memmove+0x10>
 800ae36:	4284      	cmp	r4, r0
 800ae38:	4623      	mov	r3, r4
 800ae3a:	d807      	bhi.n	800ae4c <memmove+0x20>
 800ae3c:	1e43      	subs	r3, r0, #1
 800ae3e:	42a1      	cmp	r1, r4
 800ae40:	d008      	beq.n	800ae54 <memmove+0x28>
 800ae42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae4a:	e7f8      	b.n	800ae3e <memmove+0x12>
 800ae4c:	4601      	mov	r1, r0
 800ae4e:	4402      	add	r2, r0
 800ae50:	428a      	cmp	r2, r1
 800ae52:	d100      	bne.n	800ae56 <memmove+0x2a>
 800ae54:	bd10      	pop	{r4, pc}
 800ae56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae5e:	e7f7      	b.n	800ae50 <memmove+0x24>

0800ae60 <strncmp>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	b16a      	cbz	r2, 800ae80 <strncmp+0x20>
 800ae64:	3901      	subs	r1, #1
 800ae66:	1884      	adds	r4, r0, r2
 800ae68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d103      	bne.n	800ae7c <strncmp+0x1c>
 800ae74:	42a0      	cmp	r0, r4
 800ae76:	d001      	beq.n	800ae7c <strncmp+0x1c>
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	d1f5      	bne.n	800ae68 <strncmp+0x8>
 800ae7c:	1ad0      	subs	r0, r2, r3
 800ae7e:	bd10      	pop	{r4, pc}
 800ae80:	4610      	mov	r0, r2
 800ae82:	e7fc      	b.n	800ae7e <strncmp+0x1e>

0800ae84 <_sbrk_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	2300      	movs	r3, #0
 800ae88:	4d05      	ldr	r5, [pc, #20]	@ (800aea0 <_sbrk_r+0x1c>)
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	602b      	str	r3, [r5, #0]
 800ae90:	f7f9 f872 	bl	8003f78 <_sbrk>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_sbrk_r+0x1a>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_sbrk_r+0x1a>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	2000098c 	.word	0x2000098c

0800aea4 <nan>:
 800aea4:	2000      	movs	r0, #0
 800aea6:	4901      	ldr	r1, [pc, #4]	@ (800aeac <nan+0x8>)
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	7ff80000 	.word	0x7ff80000

0800aeb0 <__assert_func>:
 800aeb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeb2:	4614      	mov	r4, r2
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	4b09      	ldr	r3, [pc, #36]	@ (800aedc <__assert_func+0x2c>)
 800aeb8:	4605      	mov	r5, r0
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68d8      	ldr	r0, [r3, #12]
 800aebe:	b954      	cbnz	r4, 800aed6 <__assert_func+0x26>
 800aec0:	4b07      	ldr	r3, [pc, #28]	@ (800aee0 <__assert_func+0x30>)
 800aec2:	461c      	mov	r4, r3
 800aec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aec8:	9100      	str	r1, [sp, #0]
 800aeca:	462b      	mov	r3, r5
 800aecc:	4905      	ldr	r1, [pc, #20]	@ (800aee4 <__assert_func+0x34>)
 800aece:	f000 fba7 	bl	800b620 <fiprintf>
 800aed2:	f000 fbb7 	bl	800b644 <abort>
 800aed6:	4b04      	ldr	r3, [pc, #16]	@ (800aee8 <__assert_func+0x38>)
 800aed8:	e7f4      	b.n	800aec4 <__assert_func+0x14>
 800aeda:	bf00      	nop
 800aedc:	20000020 	.word	0x20000020
 800aee0:	0800d365 	.word	0x0800d365
 800aee4:	0800d337 	.word	0x0800d337
 800aee8:	0800d32a 	.word	0x0800d32a

0800aeec <_calloc_r>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	fba1 5402 	umull	r5, r4, r1, r2
 800aef2:	b93c      	cbnz	r4, 800af04 <_calloc_r+0x18>
 800aef4:	4629      	mov	r1, r5
 800aef6:	f7fe f9e9 	bl	80092cc <_malloc_r>
 800aefa:	4606      	mov	r6, r0
 800aefc:	b928      	cbnz	r0, 800af0a <_calloc_r+0x1e>
 800aefe:	2600      	movs	r6, #0
 800af00:	4630      	mov	r0, r6
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	220c      	movs	r2, #12
 800af06:	6002      	str	r2, [r0, #0]
 800af08:	e7f9      	b.n	800aefe <_calloc_r+0x12>
 800af0a:	462a      	mov	r2, r5
 800af0c:	4621      	mov	r1, r4
 800af0e:	f7fd fa7a 	bl	8008406 <memset>
 800af12:	e7f5      	b.n	800af00 <_calloc_r+0x14>

0800af14 <rshift>:
 800af14:	6903      	ldr	r3, [r0, #16]
 800af16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af1e:	f100 0414 	add.w	r4, r0, #20
 800af22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af26:	dd46      	ble.n	800afb6 <rshift+0xa2>
 800af28:	f011 011f 	ands.w	r1, r1, #31
 800af2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af34:	d10c      	bne.n	800af50 <rshift+0x3c>
 800af36:	4629      	mov	r1, r5
 800af38:	f100 0710 	add.w	r7, r0, #16
 800af3c:	42b1      	cmp	r1, r6
 800af3e:	d335      	bcc.n	800afac <rshift+0x98>
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	1eea      	subs	r2, r5, #3
 800af46:	4296      	cmp	r6, r2
 800af48:	bf38      	it	cc
 800af4a:	2300      	movcc	r3, #0
 800af4c:	4423      	add	r3, r4
 800af4e:	e015      	b.n	800af7c <rshift+0x68>
 800af50:	46a1      	mov	r9, r4
 800af52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af56:	f1c1 0820 	rsb	r8, r1, #32
 800af5a:	40cf      	lsrs	r7, r1
 800af5c:	f105 0e04 	add.w	lr, r5, #4
 800af60:	4576      	cmp	r6, lr
 800af62:	46f4      	mov	ip, lr
 800af64:	d816      	bhi.n	800af94 <rshift+0x80>
 800af66:	1a9a      	subs	r2, r3, r2
 800af68:	0092      	lsls	r2, r2, #2
 800af6a:	3a04      	subs	r2, #4
 800af6c:	3501      	adds	r5, #1
 800af6e:	42ae      	cmp	r6, r5
 800af70:	bf38      	it	cc
 800af72:	2200      	movcc	r2, #0
 800af74:	18a3      	adds	r3, r4, r2
 800af76:	50a7      	str	r7, [r4, r2]
 800af78:	b107      	cbz	r7, 800af7c <rshift+0x68>
 800af7a:	3304      	adds	r3, #4
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	eba3 0204 	sub.w	r2, r3, r4
 800af82:	bf08      	it	eq
 800af84:	2300      	moveq	r3, #0
 800af86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af8a:	6102      	str	r2, [r0, #16]
 800af8c:	bf08      	it	eq
 800af8e:	6143      	streq	r3, [r0, #20]
 800af90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af94:	f8dc c000 	ldr.w	ip, [ip]
 800af98:	fa0c fc08 	lsl.w	ip, ip, r8
 800af9c:	ea4c 0707 	orr.w	r7, ip, r7
 800afa0:	f849 7b04 	str.w	r7, [r9], #4
 800afa4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afa8:	40cf      	lsrs	r7, r1
 800afaa:	e7d9      	b.n	800af60 <rshift+0x4c>
 800afac:	f851 cb04 	ldr.w	ip, [r1], #4
 800afb0:	f847 cf04 	str.w	ip, [r7, #4]!
 800afb4:	e7c2      	b.n	800af3c <rshift+0x28>
 800afb6:	4623      	mov	r3, r4
 800afb8:	e7e0      	b.n	800af7c <rshift+0x68>

0800afba <__hexdig_fun>:
 800afba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800afbe:	2b09      	cmp	r3, #9
 800afc0:	d802      	bhi.n	800afc8 <__hexdig_fun+0xe>
 800afc2:	3820      	subs	r0, #32
 800afc4:	b2c0      	uxtb	r0, r0
 800afc6:	4770      	bx	lr
 800afc8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800afcc:	2b05      	cmp	r3, #5
 800afce:	d801      	bhi.n	800afd4 <__hexdig_fun+0x1a>
 800afd0:	3847      	subs	r0, #71	@ 0x47
 800afd2:	e7f7      	b.n	800afc4 <__hexdig_fun+0xa>
 800afd4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800afd8:	2b05      	cmp	r3, #5
 800afda:	d801      	bhi.n	800afe0 <__hexdig_fun+0x26>
 800afdc:	3827      	subs	r0, #39	@ 0x27
 800afde:	e7f1      	b.n	800afc4 <__hexdig_fun+0xa>
 800afe0:	2000      	movs	r0, #0
 800afe2:	4770      	bx	lr

0800afe4 <__gethex>:
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	468a      	mov	sl, r1
 800afea:	4690      	mov	r8, r2
 800afec:	b085      	sub	sp, #20
 800afee:	9302      	str	r3, [sp, #8]
 800aff0:	680b      	ldr	r3, [r1, #0]
 800aff2:	9001      	str	r0, [sp, #4]
 800aff4:	1c9c      	adds	r4, r3, #2
 800aff6:	46a1      	mov	r9, r4
 800aff8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800affc:	2830      	cmp	r0, #48	@ 0x30
 800affe:	d0fa      	beq.n	800aff6 <__gethex+0x12>
 800b000:	eba9 0303 	sub.w	r3, r9, r3
 800b004:	f1a3 0b02 	sub.w	fp, r3, #2
 800b008:	f7ff ffd7 	bl	800afba <__hexdig_fun>
 800b00c:	4605      	mov	r5, r0
 800b00e:	2800      	cmp	r0, #0
 800b010:	d168      	bne.n	800b0e4 <__gethex+0x100>
 800b012:	2201      	movs	r2, #1
 800b014:	4648      	mov	r0, r9
 800b016:	499f      	ldr	r1, [pc, #636]	@ (800b294 <__gethex+0x2b0>)
 800b018:	f7ff ff22 	bl	800ae60 <strncmp>
 800b01c:	4607      	mov	r7, r0
 800b01e:	2800      	cmp	r0, #0
 800b020:	d167      	bne.n	800b0f2 <__gethex+0x10e>
 800b022:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b026:	4626      	mov	r6, r4
 800b028:	f7ff ffc7 	bl	800afba <__hexdig_fun>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d062      	beq.n	800b0f6 <__gethex+0x112>
 800b030:	4623      	mov	r3, r4
 800b032:	7818      	ldrb	r0, [r3, #0]
 800b034:	4699      	mov	r9, r3
 800b036:	2830      	cmp	r0, #48	@ 0x30
 800b038:	f103 0301 	add.w	r3, r3, #1
 800b03c:	d0f9      	beq.n	800b032 <__gethex+0x4e>
 800b03e:	f7ff ffbc 	bl	800afba <__hexdig_fun>
 800b042:	fab0 f580 	clz	r5, r0
 800b046:	f04f 0b01 	mov.w	fp, #1
 800b04a:	096d      	lsrs	r5, r5, #5
 800b04c:	464a      	mov	r2, r9
 800b04e:	4616      	mov	r6, r2
 800b050:	7830      	ldrb	r0, [r6, #0]
 800b052:	3201      	adds	r2, #1
 800b054:	f7ff ffb1 	bl	800afba <__hexdig_fun>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d1f8      	bne.n	800b04e <__gethex+0x6a>
 800b05c:	2201      	movs	r2, #1
 800b05e:	4630      	mov	r0, r6
 800b060:	498c      	ldr	r1, [pc, #560]	@ (800b294 <__gethex+0x2b0>)
 800b062:	f7ff fefd 	bl	800ae60 <strncmp>
 800b066:	2800      	cmp	r0, #0
 800b068:	d13f      	bne.n	800b0ea <__gethex+0x106>
 800b06a:	b944      	cbnz	r4, 800b07e <__gethex+0x9a>
 800b06c:	1c74      	adds	r4, r6, #1
 800b06e:	4622      	mov	r2, r4
 800b070:	4616      	mov	r6, r2
 800b072:	7830      	ldrb	r0, [r6, #0]
 800b074:	3201      	adds	r2, #1
 800b076:	f7ff ffa0 	bl	800afba <__hexdig_fun>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d1f8      	bne.n	800b070 <__gethex+0x8c>
 800b07e:	1ba4      	subs	r4, r4, r6
 800b080:	00a7      	lsls	r7, r4, #2
 800b082:	7833      	ldrb	r3, [r6, #0]
 800b084:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b088:	2b50      	cmp	r3, #80	@ 0x50
 800b08a:	d13e      	bne.n	800b10a <__gethex+0x126>
 800b08c:	7873      	ldrb	r3, [r6, #1]
 800b08e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b090:	d033      	beq.n	800b0fa <__gethex+0x116>
 800b092:	2b2d      	cmp	r3, #45	@ 0x2d
 800b094:	d034      	beq.n	800b100 <__gethex+0x11c>
 800b096:	2400      	movs	r4, #0
 800b098:	1c71      	adds	r1, r6, #1
 800b09a:	7808      	ldrb	r0, [r1, #0]
 800b09c:	f7ff ff8d 	bl	800afba <__hexdig_fun>
 800b0a0:	1e43      	subs	r3, r0, #1
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b18      	cmp	r3, #24
 800b0a6:	d830      	bhi.n	800b10a <__gethex+0x126>
 800b0a8:	f1a0 0210 	sub.w	r2, r0, #16
 800b0ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0b0:	f7ff ff83 	bl	800afba <__hexdig_fun>
 800b0b4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b0b8:	fa5f fc8c 	uxtb.w	ip, ip
 800b0bc:	f1bc 0f18 	cmp.w	ip, #24
 800b0c0:	f04f 030a 	mov.w	r3, #10
 800b0c4:	d91e      	bls.n	800b104 <__gethex+0x120>
 800b0c6:	b104      	cbz	r4, 800b0ca <__gethex+0xe6>
 800b0c8:	4252      	negs	r2, r2
 800b0ca:	4417      	add	r7, r2
 800b0cc:	f8ca 1000 	str.w	r1, [sl]
 800b0d0:	b1ed      	cbz	r5, 800b10e <__gethex+0x12a>
 800b0d2:	f1bb 0f00 	cmp.w	fp, #0
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2506      	moveq	r5, #6
 800b0da:	2500      	movne	r5, #0
 800b0dc:	4628      	mov	r0, r5
 800b0de:	b005      	add	sp, #20
 800b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e4:	2500      	movs	r5, #0
 800b0e6:	462c      	mov	r4, r5
 800b0e8:	e7b0      	b.n	800b04c <__gethex+0x68>
 800b0ea:	2c00      	cmp	r4, #0
 800b0ec:	d1c7      	bne.n	800b07e <__gethex+0x9a>
 800b0ee:	4627      	mov	r7, r4
 800b0f0:	e7c7      	b.n	800b082 <__gethex+0x9e>
 800b0f2:	464e      	mov	r6, r9
 800b0f4:	462f      	mov	r7, r5
 800b0f6:	2501      	movs	r5, #1
 800b0f8:	e7c3      	b.n	800b082 <__gethex+0x9e>
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	1cb1      	adds	r1, r6, #2
 800b0fe:	e7cc      	b.n	800b09a <__gethex+0xb6>
 800b100:	2401      	movs	r4, #1
 800b102:	e7fb      	b.n	800b0fc <__gethex+0x118>
 800b104:	fb03 0002 	mla	r0, r3, r2, r0
 800b108:	e7ce      	b.n	800b0a8 <__gethex+0xc4>
 800b10a:	4631      	mov	r1, r6
 800b10c:	e7de      	b.n	800b0cc <__gethex+0xe8>
 800b10e:	4629      	mov	r1, r5
 800b110:	eba6 0309 	sub.w	r3, r6, r9
 800b114:	3b01      	subs	r3, #1
 800b116:	2b07      	cmp	r3, #7
 800b118:	dc0a      	bgt.n	800b130 <__gethex+0x14c>
 800b11a:	9801      	ldr	r0, [sp, #4]
 800b11c:	f7fe f962 	bl	80093e4 <_Balloc>
 800b120:	4604      	mov	r4, r0
 800b122:	b940      	cbnz	r0, 800b136 <__gethex+0x152>
 800b124:	4602      	mov	r2, r0
 800b126:	21e4      	movs	r1, #228	@ 0xe4
 800b128:	4b5b      	ldr	r3, [pc, #364]	@ (800b298 <__gethex+0x2b4>)
 800b12a:	485c      	ldr	r0, [pc, #368]	@ (800b29c <__gethex+0x2b8>)
 800b12c:	f7ff fec0 	bl	800aeb0 <__assert_func>
 800b130:	3101      	adds	r1, #1
 800b132:	105b      	asrs	r3, r3, #1
 800b134:	e7ef      	b.n	800b116 <__gethex+0x132>
 800b136:	2300      	movs	r3, #0
 800b138:	f100 0a14 	add.w	sl, r0, #20
 800b13c:	4655      	mov	r5, sl
 800b13e:	469b      	mov	fp, r3
 800b140:	45b1      	cmp	r9, r6
 800b142:	d337      	bcc.n	800b1b4 <__gethex+0x1d0>
 800b144:	f845 bb04 	str.w	fp, [r5], #4
 800b148:	eba5 050a 	sub.w	r5, r5, sl
 800b14c:	10ad      	asrs	r5, r5, #2
 800b14e:	6125      	str	r5, [r4, #16]
 800b150:	4658      	mov	r0, fp
 800b152:	f7fe fa39 	bl	80095c8 <__hi0bits>
 800b156:	016d      	lsls	r5, r5, #5
 800b158:	f8d8 6000 	ldr.w	r6, [r8]
 800b15c:	1a2d      	subs	r5, r5, r0
 800b15e:	42b5      	cmp	r5, r6
 800b160:	dd54      	ble.n	800b20c <__gethex+0x228>
 800b162:	1bad      	subs	r5, r5, r6
 800b164:	4629      	mov	r1, r5
 800b166:	4620      	mov	r0, r4
 800b168:	f7fe fdc1 	bl	8009cee <__any_on>
 800b16c:	4681      	mov	r9, r0
 800b16e:	b178      	cbz	r0, 800b190 <__gethex+0x1ac>
 800b170:	f04f 0901 	mov.w	r9, #1
 800b174:	1e6b      	subs	r3, r5, #1
 800b176:	1159      	asrs	r1, r3, #5
 800b178:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b17c:	f003 021f 	and.w	r2, r3, #31
 800b180:	fa09 f202 	lsl.w	r2, r9, r2
 800b184:	420a      	tst	r2, r1
 800b186:	d003      	beq.n	800b190 <__gethex+0x1ac>
 800b188:	454b      	cmp	r3, r9
 800b18a:	dc36      	bgt.n	800b1fa <__gethex+0x216>
 800b18c:	f04f 0902 	mov.w	r9, #2
 800b190:	4629      	mov	r1, r5
 800b192:	4620      	mov	r0, r4
 800b194:	f7ff febe 	bl	800af14 <rshift>
 800b198:	442f      	add	r7, r5
 800b19a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b19e:	42bb      	cmp	r3, r7
 800b1a0:	da42      	bge.n	800b228 <__gethex+0x244>
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	9801      	ldr	r0, [sp, #4]
 800b1a6:	f7fe f95d 	bl	8009464 <_Bfree>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1ae:	25a3      	movs	r5, #163	@ 0xa3
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	e793      	b.n	800b0dc <__gethex+0xf8>
 800b1b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b1b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b1ba:	d012      	beq.n	800b1e2 <__gethex+0x1fe>
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d104      	bne.n	800b1ca <__gethex+0x1e6>
 800b1c0:	f845 bb04 	str.w	fp, [r5], #4
 800b1c4:	f04f 0b00 	mov.w	fp, #0
 800b1c8:	465b      	mov	r3, fp
 800b1ca:	7830      	ldrb	r0, [r6, #0]
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	f7ff fef4 	bl	800afba <__hexdig_fun>
 800b1d2:	9b03      	ldr	r3, [sp, #12]
 800b1d4:	f000 000f 	and.w	r0, r0, #15
 800b1d8:	4098      	lsls	r0, r3
 800b1da:	ea4b 0b00 	orr.w	fp, fp, r0
 800b1de:	3304      	adds	r3, #4
 800b1e0:	e7ae      	b.n	800b140 <__gethex+0x15c>
 800b1e2:	45b1      	cmp	r9, r6
 800b1e4:	d8ea      	bhi.n	800b1bc <__gethex+0x1d8>
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	492a      	ldr	r1, [pc, #168]	@ (800b294 <__gethex+0x2b0>)
 800b1ec:	9303      	str	r3, [sp, #12]
 800b1ee:	f7ff fe37 	bl	800ae60 <strncmp>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d1e1      	bne.n	800b1bc <__gethex+0x1d8>
 800b1f8:	e7a2      	b.n	800b140 <__gethex+0x15c>
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	1ea9      	subs	r1, r5, #2
 800b1fe:	f7fe fd76 	bl	8009cee <__any_on>
 800b202:	2800      	cmp	r0, #0
 800b204:	d0c2      	beq.n	800b18c <__gethex+0x1a8>
 800b206:	f04f 0903 	mov.w	r9, #3
 800b20a:	e7c1      	b.n	800b190 <__gethex+0x1ac>
 800b20c:	da09      	bge.n	800b222 <__gethex+0x23e>
 800b20e:	1b75      	subs	r5, r6, r5
 800b210:	4621      	mov	r1, r4
 800b212:	462a      	mov	r2, r5
 800b214:	9801      	ldr	r0, [sp, #4]
 800b216:	f7fe fb3b 	bl	8009890 <__lshift>
 800b21a:	4604      	mov	r4, r0
 800b21c:	1b7f      	subs	r7, r7, r5
 800b21e:	f100 0a14 	add.w	sl, r0, #20
 800b222:	f04f 0900 	mov.w	r9, #0
 800b226:	e7b8      	b.n	800b19a <__gethex+0x1b6>
 800b228:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b22c:	42bd      	cmp	r5, r7
 800b22e:	dd6f      	ble.n	800b310 <__gethex+0x32c>
 800b230:	1bed      	subs	r5, r5, r7
 800b232:	42ae      	cmp	r6, r5
 800b234:	dc34      	bgt.n	800b2a0 <__gethex+0x2bc>
 800b236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d022      	beq.n	800b284 <__gethex+0x2a0>
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d024      	beq.n	800b28c <__gethex+0x2a8>
 800b242:	2b01      	cmp	r3, #1
 800b244:	d115      	bne.n	800b272 <__gethex+0x28e>
 800b246:	42ae      	cmp	r6, r5
 800b248:	d113      	bne.n	800b272 <__gethex+0x28e>
 800b24a:	2e01      	cmp	r6, #1
 800b24c:	d10b      	bne.n	800b266 <__gethex+0x282>
 800b24e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b252:	9a02      	ldr	r2, [sp, #8]
 800b254:	2562      	movs	r5, #98	@ 0x62
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	2301      	movs	r3, #1
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	f8ca 3000 	str.w	r3, [sl]
 800b260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b262:	601c      	str	r4, [r3, #0]
 800b264:	e73a      	b.n	800b0dc <__gethex+0xf8>
 800b266:	4620      	mov	r0, r4
 800b268:	1e71      	subs	r1, r6, #1
 800b26a:	f7fe fd40 	bl	8009cee <__any_on>
 800b26e:	2800      	cmp	r0, #0
 800b270:	d1ed      	bne.n	800b24e <__gethex+0x26a>
 800b272:	4621      	mov	r1, r4
 800b274:	9801      	ldr	r0, [sp, #4]
 800b276:	f7fe f8f5 	bl	8009464 <_Bfree>
 800b27a:	2300      	movs	r3, #0
 800b27c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b27e:	2550      	movs	r5, #80	@ 0x50
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	e72b      	b.n	800b0dc <__gethex+0xf8>
 800b284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f3      	bne.n	800b272 <__gethex+0x28e>
 800b28a:	e7e0      	b.n	800b24e <__gethex+0x26a>
 800b28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1dd      	bne.n	800b24e <__gethex+0x26a>
 800b292:	e7ee      	b.n	800b272 <__gethex+0x28e>
 800b294:	0800d1b8 	.word	0x0800d1b8
 800b298:	0800d04b 	.word	0x0800d04b
 800b29c:	0800d366 	.word	0x0800d366
 800b2a0:	1e6f      	subs	r7, r5, #1
 800b2a2:	f1b9 0f00 	cmp.w	r9, #0
 800b2a6:	d130      	bne.n	800b30a <__gethex+0x326>
 800b2a8:	b127      	cbz	r7, 800b2b4 <__gethex+0x2d0>
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f7fe fd1e 	bl	8009cee <__any_on>
 800b2b2:	4681      	mov	r9, r0
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	1b76      	subs	r6, r6, r5
 800b2ba:	2502      	movs	r5, #2
 800b2bc:	117a      	asrs	r2, r7, #5
 800b2be:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b2c2:	f007 071f 	and.w	r7, r7, #31
 800b2c6:	40bb      	lsls	r3, r7
 800b2c8:	4213      	tst	r3, r2
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	bf18      	it	ne
 800b2ce:	f049 0902 	orrne.w	r9, r9, #2
 800b2d2:	f7ff fe1f 	bl	800af14 <rshift>
 800b2d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b2da:	f1b9 0f00 	cmp.w	r9, #0
 800b2de:	d047      	beq.n	800b370 <__gethex+0x38c>
 800b2e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d015      	beq.n	800b314 <__gethex+0x330>
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d017      	beq.n	800b31c <__gethex+0x338>
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d109      	bne.n	800b304 <__gethex+0x320>
 800b2f0:	f019 0f02 	tst.w	r9, #2
 800b2f4:	d006      	beq.n	800b304 <__gethex+0x320>
 800b2f6:	f8da 3000 	ldr.w	r3, [sl]
 800b2fa:	ea49 0903 	orr.w	r9, r9, r3
 800b2fe:	f019 0f01 	tst.w	r9, #1
 800b302:	d10e      	bne.n	800b322 <__gethex+0x33e>
 800b304:	f045 0510 	orr.w	r5, r5, #16
 800b308:	e032      	b.n	800b370 <__gethex+0x38c>
 800b30a:	f04f 0901 	mov.w	r9, #1
 800b30e:	e7d1      	b.n	800b2b4 <__gethex+0x2d0>
 800b310:	2501      	movs	r5, #1
 800b312:	e7e2      	b.n	800b2da <__gethex+0x2f6>
 800b314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b316:	f1c3 0301 	rsb	r3, r3, #1
 800b31a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0f0      	beq.n	800b304 <__gethex+0x320>
 800b322:	f04f 0c00 	mov.w	ip, #0
 800b326:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b32a:	f104 0314 	add.w	r3, r4, #20
 800b32e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b332:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b336:	4618      	mov	r0, r3
 800b338:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b340:	d01b      	beq.n	800b37a <__gethex+0x396>
 800b342:	3201      	adds	r2, #1
 800b344:	6002      	str	r2, [r0, #0]
 800b346:	2d02      	cmp	r5, #2
 800b348:	f104 0314 	add.w	r3, r4, #20
 800b34c:	d13c      	bne.n	800b3c8 <__gethex+0x3e4>
 800b34e:	f8d8 2000 	ldr.w	r2, [r8]
 800b352:	3a01      	subs	r2, #1
 800b354:	42b2      	cmp	r2, r6
 800b356:	d109      	bne.n	800b36c <__gethex+0x388>
 800b358:	2201      	movs	r2, #1
 800b35a:	1171      	asrs	r1, r6, #5
 800b35c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b360:	f006 061f 	and.w	r6, r6, #31
 800b364:	fa02 f606 	lsl.w	r6, r2, r6
 800b368:	421e      	tst	r6, r3
 800b36a:	d13a      	bne.n	800b3e2 <__gethex+0x3fe>
 800b36c:	f045 0520 	orr.w	r5, r5, #32
 800b370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b372:	601c      	str	r4, [r3, #0]
 800b374:	9b02      	ldr	r3, [sp, #8]
 800b376:	601f      	str	r7, [r3, #0]
 800b378:	e6b0      	b.n	800b0dc <__gethex+0xf8>
 800b37a:	4299      	cmp	r1, r3
 800b37c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b380:	d8d9      	bhi.n	800b336 <__gethex+0x352>
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	459b      	cmp	fp, r3
 800b386:	db17      	blt.n	800b3b8 <__gethex+0x3d4>
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	9801      	ldr	r0, [sp, #4]
 800b38c:	3101      	adds	r1, #1
 800b38e:	f7fe f829 	bl	80093e4 <_Balloc>
 800b392:	4681      	mov	r9, r0
 800b394:	b918      	cbnz	r0, 800b39e <__gethex+0x3ba>
 800b396:	4602      	mov	r2, r0
 800b398:	2184      	movs	r1, #132	@ 0x84
 800b39a:	4b19      	ldr	r3, [pc, #100]	@ (800b400 <__gethex+0x41c>)
 800b39c:	e6c5      	b.n	800b12a <__gethex+0x146>
 800b39e:	6922      	ldr	r2, [r4, #16]
 800b3a0:	f104 010c 	add.w	r1, r4, #12
 800b3a4:	3202      	adds	r2, #2
 800b3a6:	0092      	lsls	r2, r2, #2
 800b3a8:	300c      	adds	r0, #12
 800b3aa:	f7fd f8ba 	bl	8008522 <memcpy>
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	9801      	ldr	r0, [sp, #4]
 800b3b2:	f7fe f857 	bl	8009464 <_Bfree>
 800b3b6:	464c      	mov	r4, r9
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	6122      	str	r2, [r4, #16]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3c4:	615a      	str	r2, [r3, #20]
 800b3c6:	e7be      	b.n	800b346 <__gethex+0x362>
 800b3c8:	6922      	ldr	r2, [r4, #16]
 800b3ca:	455a      	cmp	r2, fp
 800b3cc:	dd0b      	ble.n	800b3e6 <__gethex+0x402>
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7ff fd9f 	bl	800af14 <rshift>
 800b3d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3da:	3701      	adds	r7, #1
 800b3dc:	42bb      	cmp	r3, r7
 800b3de:	f6ff aee0 	blt.w	800b1a2 <__gethex+0x1be>
 800b3e2:	2501      	movs	r5, #1
 800b3e4:	e7c2      	b.n	800b36c <__gethex+0x388>
 800b3e6:	f016 061f 	ands.w	r6, r6, #31
 800b3ea:	d0fa      	beq.n	800b3e2 <__gethex+0x3fe>
 800b3ec:	4453      	add	r3, sl
 800b3ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3f2:	f7fe f8e9 	bl	80095c8 <__hi0bits>
 800b3f6:	f1c6 0620 	rsb	r6, r6, #32
 800b3fa:	42b0      	cmp	r0, r6
 800b3fc:	dbe7      	blt.n	800b3ce <__gethex+0x3ea>
 800b3fe:	e7f0      	b.n	800b3e2 <__gethex+0x3fe>
 800b400:	0800d04b 	.word	0x0800d04b

0800b404 <L_shift>:
 800b404:	f1c2 0208 	rsb	r2, r2, #8
 800b408:	0092      	lsls	r2, r2, #2
 800b40a:	b570      	push	{r4, r5, r6, lr}
 800b40c:	f1c2 0620 	rsb	r6, r2, #32
 800b410:	6843      	ldr	r3, [r0, #4]
 800b412:	6804      	ldr	r4, [r0, #0]
 800b414:	fa03 f506 	lsl.w	r5, r3, r6
 800b418:	432c      	orrs	r4, r5
 800b41a:	40d3      	lsrs	r3, r2
 800b41c:	6004      	str	r4, [r0, #0]
 800b41e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b422:	4288      	cmp	r0, r1
 800b424:	d3f4      	bcc.n	800b410 <L_shift+0xc>
 800b426:	bd70      	pop	{r4, r5, r6, pc}

0800b428 <__match>:
 800b428:	b530      	push	{r4, r5, lr}
 800b42a:	6803      	ldr	r3, [r0, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b432:	b914      	cbnz	r4, 800b43a <__match+0x12>
 800b434:	6003      	str	r3, [r0, #0]
 800b436:	2001      	movs	r0, #1
 800b438:	bd30      	pop	{r4, r5, pc}
 800b43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b43e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b442:	2d19      	cmp	r5, #25
 800b444:	bf98      	it	ls
 800b446:	3220      	addls	r2, #32
 800b448:	42a2      	cmp	r2, r4
 800b44a:	d0f0      	beq.n	800b42e <__match+0x6>
 800b44c:	2000      	movs	r0, #0
 800b44e:	e7f3      	b.n	800b438 <__match+0x10>

0800b450 <__hexnan>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	2500      	movs	r5, #0
 800b456:	680b      	ldr	r3, [r1, #0]
 800b458:	4682      	mov	sl, r0
 800b45a:	115e      	asrs	r6, r3, #5
 800b45c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b460:	f013 031f 	ands.w	r3, r3, #31
 800b464:	bf18      	it	ne
 800b466:	3604      	addne	r6, #4
 800b468:	1f37      	subs	r7, r6, #4
 800b46a:	4690      	mov	r8, r2
 800b46c:	46b9      	mov	r9, r7
 800b46e:	463c      	mov	r4, r7
 800b470:	46ab      	mov	fp, r5
 800b472:	b087      	sub	sp, #28
 800b474:	6801      	ldr	r1, [r0, #0]
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	f846 5c04 	str.w	r5, [r6, #-4]
 800b47c:	9502      	str	r5, [sp, #8]
 800b47e:	784a      	ldrb	r2, [r1, #1]
 800b480:	1c4b      	adds	r3, r1, #1
 800b482:	9303      	str	r3, [sp, #12]
 800b484:	b342      	cbz	r2, 800b4d8 <__hexnan+0x88>
 800b486:	4610      	mov	r0, r2
 800b488:	9105      	str	r1, [sp, #20]
 800b48a:	9204      	str	r2, [sp, #16]
 800b48c:	f7ff fd95 	bl	800afba <__hexdig_fun>
 800b490:	2800      	cmp	r0, #0
 800b492:	d151      	bne.n	800b538 <__hexnan+0xe8>
 800b494:	9a04      	ldr	r2, [sp, #16]
 800b496:	9905      	ldr	r1, [sp, #20]
 800b498:	2a20      	cmp	r2, #32
 800b49a:	d818      	bhi.n	800b4ce <__hexnan+0x7e>
 800b49c:	9b02      	ldr	r3, [sp, #8]
 800b49e:	459b      	cmp	fp, r3
 800b4a0:	dd13      	ble.n	800b4ca <__hexnan+0x7a>
 800b4a2:	454c      	cmp	r4, r9
 800b4a4:	d206      	bcs.n	800b4b4 <__hexnan+0x64>
 800b4a6:	2d07      	cmp	r5, #7
 800b4a8:	dc04      	bgt.n	800b4b4 <__hexnan+0x64>
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff ffa8 	bl	800b404 <L_shift>
 800b4b4:	4544      	cmp	r4, r8
 800b4b6:	d952      	bls.n	800b55e <__hexnan+0x10e>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f1a4 0904 	sub.w	r9, r4, #4
 800b4be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4c2:	461d      	mov	r5, r3
 800b4c4:	464c      	mov	r4, r9
 800b4c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b4ca:	9903      	ldr	r1, [sp, #12]
 800b4cc:	e7d7      	b.n	800b47e <__hexnan+0x2e>
 800b4ce:	2a29      	cmp	r2, #41	@ 0x29
 800b4d0:	d157      	bne.n	800b582 <__hexnan+0x132>
 800b4d2:	3102      	adds	r1, #2
 800b4d4:	f8ca 1000 	str.w	r1, [sl]
 800b4d8:	f1bb 0f00 	cmp.w	fp, #0
 800b4dc:	d051      	beq.n	800b582 <__hexnan+0x132>
 800b4de:	454c      	cmp	r4, r9
 800b4e0:	d206      	bcs.n	800b4f0 <__hexnan+0xa0>
 800b4e2:	2d07      	cmp	r5, #7
 800b4e4:	dc04      	bgt.n	800b4f0 <__hexnan+0xa0>
 800b4e6:	462a      	mov	r2, r5
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f7ff ff8a 	bl	800b404 <L_shift>
 800b4f0:	4544      	cmp	r4, r8
 800b4f2:	d936      	bls.n	800b562 <__hexnan+0x112>
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	f1a8 0204 	sub.w	r2, r8, #4
 800b4fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4fe:	429f      	cmp	r7, r3
 800b500:	f842 1f04 	str.w	r1, [r2, #4]!
 800b504:	d2f9      	bcs.n	800b4fa <__hexnan+0xaa>
 800b506:	1b3b      	subs	r3, r7, r4
 800b508:	f023 0303 	bic.w	r3, r3, #3
 800b50c:	3304      	adds	r3, #4
 800b50e:	3401      	adds	r4, #1
 800b510:	3e03      	subs	r6, #3
 800b512:	42b4      	cmp	r4, r6
 800b514:	bf88      	it	hi
 800b516:	2304      	movhi	r3, #4
 800b518:	2200      	movs	r2, #0
 800b51a:	4443      	add	r3, r8
 800b51c:	f843 2b04 	str.w	r2, [r3], #4
 800b520:	429f      	cmp	r7, r3
 800b522:	d2fb      	bcs.n	800b51c <__hexnan+0xcc>
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	b91b      	cbnz	r3, 800b530 <__hexnan+0xe0>
 800b528:	4547      	cmp	r7, r8
 800b52a:	d128      	bne.n	800b57e <__hexnan+0x12e>
 800b52c:	2301      	movs	r3, #1
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	2005      	movs	r0, #5
 800b532:	b007      	add	sp, #28
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	3501      	adds	r5, #1
 800b53a:	2d08      	cmp	r5, #8
 800b53c:	f10b 0b01 	add.w	fp, fp, #1
 800b540:	dd06      	ble.n	800b550 <__hexnan+0x100>
 800b542:	4544      	cmp	r4, r8
 800b544:	d9c1      	bls.n	800b4ca <__hexnan+0x7a>
 800b546:	2300      	movs	r3, #0
 800b548:	2501      	movs	r5, #1
 800b54a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b54e:	3c04      	subs	r4, #4
 800b550:	6822      	ldr	r2, [r4, #0]
 800b552:	f000 000f 	and.w	r0, r0, #15
 800b556:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b55a:	6020      	str	r0, [r4, #0]
 800b55c:	e7b5      	b.n	800b4ca <__hexnan+0x7a>
 800b55e:	2508      	movs	r5, #8
 800b560:	e7b3      	b.n	800b4ca <__hexnan+0x7a>
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0dd      	beq.n	800b524 <__hexnan+0xd4>
 800b568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b56c:	f1c3 0320 	rsb	r3, r3, #32
 800b570:	40da      	lsrs	r2, r3
 800b572:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b576:	4013      	ands	r3, r2
 800b578:	f846 3c04 	str.w	r3, [r6, #-4]
 800b57c:	e7d2      	b.n	800b524 <__hexnan+0xd4>
 800b57e:	3f04      	subs	r7, #4
 800b580:	e7d0      	b.n	800b524 <__hexnan+0xd4>
 800b582:	2004      	movs	r0, #4
 800b584:	e7d5      	b.n	800b532 <__hexnan+0xe2>

0800b586 <__ascii_mbtowc>:
 800b586:	b082      	sub	sp, #8
 800b588:	b901      	cbnz	r1, 800b58c <__ascii_mbtowc+0x6>
 800b58a:	a901      	add	r1, sp, #4
 800b58c:	b142      	cbz	r2, 800b5a0 <__ascii_mbtowc+0x1a>
 800b58e:	b14b      	cbz	r3, 800b5a4 <__ascii_mbtowc+0x1e>
 800b590:	7813      	ldrb	r3, [r2, #0]
 800b592:	600b      	str	r3, [r1, #0]
 800b594:	7812      	ldrb	r2, [r2, #0]
 800b596:	1e10      	subs	r0, r2, #0
 800b598:	bf18      	it	ne
 800b59a:	2001      	movne	r0, #1
 800b59c:	b002      	add	sp, #8
 800b59e:	4770      	bx	lr
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	e7fb      	b.n	800b59c <__ascii_mbtowc+0x16>
 800b5a4:	f06f 0001 	mvn.w	r0, #1
 800b5a8:	e7f8      	b.n	800b59c <__ascii_mbtowc+0x16>

0800b5aa <_realloc_r>:
 800b5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	4615      	mov	r5, r2
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	b921      	cbnz	r1, 800b5c0 <_realloc_r+0x16>
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5bc:	f7fd be86 	b.w	80092cc <_malloc_r>
 800b5c0:	b92a      	cbnz	r2, 800b5ce <_realloc_r+0x24>
 800b5c2:	f7fd fe11 	bl	80091e8 <_free_r>
 800b5c6:	2400      	movs	r4, #0
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ce:	f000 f840 	bl	800b652 <_malloc_usable_size_r>
 800b5d2:	4285      	cmp	r5, r0
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	d802      	bhi.n	800b5de <_realloc_r+0x34>
 800b5d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b5dc:	d8f4      	bhi.n	800b5c8 <_realloc_r+0x1e>
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	f7fd fe73 	bl	80092cc <_malloc_r>
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d0ec      	beq.n	800b5c6 <_realloc_r+0x1c>
 800b5ec:	42b5      	cmp	r5, r6
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	bf28      	it	cs
 800b5f4:	4632      	movcs	r2, r6
 800b5f6:	f7fc ff94 	bl	8008522 <memcpy>
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	f7fd fdf3 	bl	80091e8 <_free_r>
 800b602:	463c      	mov	r4, r7
 800b604:	e7e0      	b.n	800b5c8 <_realloc_r+0x1e>

0800b606 <__ascii_wctomb>:
 800b606:	4603      	mov	r3, r0
 800b608:	4608      	mov	r0, r1
 800b60a:	b141      	cbz	r1, 800b61e <__ascii_wctomb+0x18>
 800b60c:	2aff      	cmp	r2, #255	@ 0xff
 800b60e:	d904      	bls.n	800b61a <__ascii_wctomb+0x14>
 800b610:	228a      	movs	r2, #138	@ 0x8a
 800b612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	4770      	bx	lr
 800b61a:	2001      	movs	r0, #1
 800b61c:	700a      	strb	r2, [r1, #0]
 800b61e:	4770      	bx	lr

0800b620 <fiprintf>:
 800b620:	b40e      	push	{r1, r2, r3}
 800b622:	b503      	push	{r0, r1, lr}
 800b624:	4601      	mov	r1, r0
 800b626:	ab03      	add	r3, sp, #12
 800b628:	4805      	ldr	r0, [pc, #20]	@ (800b640 <fiprintf+0x20>)
 800b62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b62e:	6800      	ldr	r0, [r0, #0]
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	f000 f83d 	bl	800b6b0 <_vfiprintf_r>
 800b636:	b002      	add	sp, #8
 800b638:	f85d eb04 	ldr.w	lr, [sp], #4
 800b63c:	b003      	add	sp, #12
 800b63e:	4770      	bx	lr
 800b640:	20000020 	.word	0x20000020

0800b644 <abort>:
 800b644:	2006      	movs	r0, #6
 800b646:	b508      	push	{r3, lr}
 800b648:	f000 fa06 	bl	800ba58 <raise>
 800b64c:	2001      	movs	r0, #1
 800b64e:	f7f8 fc1e 	bl	8003e8e <_exit>

0800b652 <_malloc_usable_size_r>:
 800b652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b656:	1f18      	subs	r0, r3, #4
 800b658:	2b00      	cmp	r3, #0
 800b65a:	bfbc      	itt	lt
 800b65c:	580b      	ldrlt	r3, [r1, r0]
 800b65e:	18c0      	addlt	r0, r0, r3
 800b660:	4770      	bx	lr

0800b662 <__sfputc_r>:
 800b662:	6893      	ldr	r3, [r2, #8]
 800b664:	b410      	push	{r4}
 800b666:	3b01      	subs	r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	6093      	str	r3, [r2, #8]
 800b66c:	da07      	bge.n	800b67e <__sfputc_r+0x1c>
 800b66e:	6994      	ldr	r4, [r2, #24]
 800b670:	42a3      	cmp	r3, r4
 800b672:	db01      	blt.n	800b678 <__sfputc_r+0x16>
 800b674:	290a      	cmp	r1, #10
 800b676:	d102      	bne.n	800b67e <__sfputc_r+0x1c>
 800b678:	bc10      	pop	{r4}
 800b67a:	f000 b931 	b.w	800b8e0 <__swbuf_r>
 800b67e:	6813      	ldr	r3, [r2, #0]
 800b680:	1c58      	adds	r0, r3, #1
 800b682:	6010      	str	r0, [r2, #0]
 800b684:	7019      	strb	r1, [r3, #0]
 800b686:	4608      	mov	r0, r1
 800b688:	bc10      	pop	{r4}
 800b68a:	4770      	bx	lr

0800b68c <__sfputs_r>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	4614      	mov	r4, r2
 800b694:	18d5      	adds	r5, r2, r3
 800b696:	42ac      	cmp	r4, r5
 800b698:	d101      	bne.n	800b69e <__sfputs_r+0x12>
 800b69a:	2000      	movs	r0, #0
 800b69c:	e007      	b.n	800b6ae <__sfputs_r+0x22>
 800b69e:	463a      	mov	r2, r7
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a6:	f7ff ffdc 	bl	800b662 <__sfputc_r>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d1f3      	bne.n	800b696 <__sfputs_r+0xa>
 800b6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6b0 <_vfiprintf_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	4698      	mov	r8, r3
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	b09d      	sub	sp, #116	@ 0x74
 800b6be:	b118      	cbz	r0, 800b6c8 <_vfiprintf_r+0x18>
 800b6c0:	6a03      	ldr	r3, [r0, #32]
 800b6c2:	b90b      	cbnz	r3, 800b6c8 <_vfiprintf_r+0x18>
 800b6c4:	f7fc fe06 	bl	80082d4 <__sinit>
 800b6c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6ca:	07d9      	lsls	r1, r3, #31
 800b6cc:	d405      	bmi.n	800b6da <_vfiprintf_r+0x2a>
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	059a      	lsls	r2, r3, #22
 800b6d2:	d402      	bmi.n	800b6da <_vfiprintf_r+0x2a>
 800b6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6d6:	f7fc ff14 	bl	8008502 <__retarget_lock_acquire_recursive>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	071b      	lsls	r3, r3, #28
 800b6de:	d501      	bpl.n	800b6e4 <_vfiprintf_r+0x34>
 800b6e0:	692b      	ldr	r3, [r5, #16]
 800b6e2:	b99b      	cbnz	r3, 800b70c <_vfiprintf_r+0x5c>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f000 f938 	bl	800b95c <__swsetup_r>
 800b6ec:	b170      	cbz	r0, 800b70c <_vfiprintf_r+0x5c>
 800b6ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6f0:	07dc      	lsls	r4, r3, #31
 800b6f2:	d504      	bpl.n	800b6fe <_vfiprintf_r+0x4e>
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6f8:	b01d      	add	sp, #116	@ 0x74
 800b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	0598      	lsls	r0, r3, #22
 800b702:	d4f7      	bmi.n	800b6f4 <_vfiprintf_r+0x44>
 800b704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b706:	f7fc fefd 	bl	8008504 <__retarget_lock_release_recursive>
 800b70a:	e7f3      	b.n	800b6f4 <_vfiprintf_r+0x44>
 800b70c:	2300      	movs	r3, #0
 800b70e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b710:	2320      	movs	r3, #32
 800b712:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b716:	2330      	movs	r3, #48	@ 0x30
 800b718:	f04f 0901 	mov.w	r9, #1
 800b71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b720:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b8cc <_vfiprintf_r+0x21c>
 800b724:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b728:	4623      	mov	r3, r4
 800b72a:	469a      	mov	sl, r3
 800b72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b730:	b10a      	cbz	r2, 800b736 <_vfiprintf_r+0x86>
 800b732:	2a25      	cmp	r2, #37	@ 0x25
 800b734:	d1f9      	bne.n	800b72a <_vfiprintf_r+0x7a>
 800b736:	ebba 0b04 	subs.w	fp, sl, r4
 800b73a:	d00b      	beq.n	800b754 <_vfiprintf_r+0xa4>
 800b73c:	465b      	mov	r3, fp
 800b73e:	4622      	mov	r2, r4
 800b740:	4629      	mov	r1, r5
 800b742:	4630      	mov	r0, r6
 800b744:	f7ff ffa2 	bl	800b68c <__sfputs_r>
 800b748:	3001      	adds	r0, #1
 800b74a:	f000 80a7 	beq.w	800b89c <_vfiprintf_r+0x1ec>
 800b74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b750:	445a      	add	r2, fp
 800b752:	9209      	str	r2, [sp, #36]	@ 0x24
 800b754:	f89a 3000 	ldrb.w	r3, [sl]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 809f 	beq.w	800b89c <_vfiprintf_r+0x1ec>
 800b75e:	2300      	movs	r3, #0
 800b760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b768:	f10a 0a01 	add.w	sl, sl, #1
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	9307      	str	r3, [sp, #28]
 800b770:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b774:	931a      	str	r3, [sp, #104]	@ 0x68
 800b776:	4654      	mov	r4, sl
 800b778:	2205      	movs	r2, #5
 800b77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77e:	4853      	ldr	r0, [pc, #332]	@ (800b8cc <_vfiprintf_r+0x21c>)
 800b780:	f7fc fec1 	bl	8008506 <memchr>
 800b784:	9a04      	ldr	r2, [sp, #16]
 800b786:	b9d8      	cbnz	r0, 800b7c0 <_vfiprintf_r+0x110>
 800b788:	06d1      	lsls	r1, r2, #27
 800b78a:	bf44      	itt	mi
 800b78c:	2320      	movmi	r3, #32
 800b78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b792:	0713      	lsls	r3, r2, #28
 800b794:	bf44      	itt	mi
 800b796:	232b      	movmi	r3, #43	@ 0x2b
 800b798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b79c:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7a2:	d015      	beq.n	800b7d0 <_vfiprintf_r+0x120>
 800b7a4:	4654      	mov	r4, sl
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f04f 0c0a 	mov.w	ip, #10
 800b7ac:	9a07      	ldr	r2, [sp, #28]
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7b4:	3b30      	subs	r3, #48	@ 0x30
 800b7b6:	2b09      	cmp	r3, #9
 800b7b8:	d94b      	bls.n	800b852 <_vfiprintf_r+0x1a2>
 800b7ba:	b1b0      	cbz	r0, 800b7ea <_vfiprintf_r+0x13a>
 800b7bc:	9207      	str	r2, [sp, #28]
 800b7be:	e014      	b.n	800b7ea <_vfiprintf_r+0x13a>
 800b7c0:	eba0 0308 	sub.w	r3, r0, r8
 800b7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	46a2      	mov	sl, r4
 800b7cc:	9304      	str	r3, [sp, #16]
 800b7ce:	e7d2      	b.n	800b776 <_vfiprintf_r+0xc6>
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	1d19      	adds	r1, r3, #4
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	9103      	str	r1, [sp, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	bfbb      	ittet	lt
 800b7dc:	425b      	neglt	r3, r3
 800b7de:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e2:	9307      	strge	r3, [sp, #28]
 800b7e4:	9307      	strlt	r3, [sp, #28]
 800b7e6:	bfb8      	it	lt
 800b7e8:	9204      	strlt	r2, [sp, #16]
 800b7ea:	7823      	ldrb	r3, [r4, #0]
 800b7ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7ee:	d10a      	bne.n	800b806 <_vfiprintf_r+0x156>
 800b7f0:	7863      	ldrb	r3, [r4, #1]
 800b7f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7f4:	d132      	bne.n	800b85c <_vfiprintf_r+0x1ac>
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	3402      	adds	r4, #2
 800b7fa:	1d1a      	adds	r2, r3, #4
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	9203      	str	r2, [sp, #12]
 800b800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b804:	9305      	str	r3, [sp, #20]
 800b806:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b8d0 <_vfiprintf_r+0x220>
 800b80a:	2203      	movs	r2, #3
 800b80c:	4650      	mov	r0, sl
 800b80e:	7821      	ldrb	r1, [r4, #0]
 800b810:	f7fc fe79 	bl	8008506 <memchr>
 800b814:	b138      	cbz	r0, 800b826 <_vfiprintf_r+0x176>
 800b816:	2240      	movs	r2, #64	@ 0x40
 800b818:	9b04      	ldr	r3, [sp, #16]
 800b81a:	eba0 000a 	sub.w	r0, r0, sl
 800b81e:	4082      	lsls	r2, r0
 800b820:	4313      	orrs	r3, r2
 800b822:	3401      	adds	r4, #1
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82a:	2206      	movs	r2, #6
 800b82c:	4829      	ldr	r0, [pc, #164]	@ (800b8d4 <_vfiprintf_r+0x224>)
 800b82e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b832:	f7fc fe68 	bl	8008506 <memchr>
 800b836:	2800      	cmp	r0, #0
 800b838:	d03f      	beq.n	800b8ba <_vfiprintf_r+0x20a>
 800b83a:	4b27      	ldr	r3, [pc, #156]	@ (800b8d8 <_vfiprintf_r+0x228>)
 800b83c:	bb1b      	cbnz	r3, 800b886 <_vfiprintf_r+0x1d6>
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	3307      	adds	r3, #7
 800b842:	f023 0307 	bic.w	r3, r3, #7
 800b846:	3308      	adds	r3, #8
 800b848:	9303      	str	r3, [sp, #12]
 800b84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b84c:	443b      	add	r3, r7
 800b84e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b850:	e76a      	b.n	800b728 <_vfiprintf_r+0x78>
 800b852:	460c      	mov	r4, r1
 800b854:	2001      	movs	r0, #1
 800b856:	fb0c 3202 	mla	r2, ip, r2, r3
 800b85a:	e7a8      	b.n	800b7ae <_vfiprintf_r+0xfe>
 800b85c:	2300      	movs	r3, #0
 800b85e:	f04f 0c0a 	mov.w	ip, #10
 800b862:	4619      	mov	r1, r3
 800b864:	3401      	adds	r4, #1
 800b866:	9305      	str	r3, [sp, #20]
 800b868:	4620      	mov	r0, r4
 800b86a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b86e:	3a30      	subs	r2, #48	@ 0x30
 800b870:	2a09      	cmp	r2, #9
 800b872:	d903      	bls.n	800b87c <_vfiprintf_r+0x1cc>
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0c6      	beq.n	800b806 <_vfiprintf_r+0x156>
 800b878:	9105      	str	r1, [sp, #20]
 800b87a:	e7c4      	b.n	800b806 <_vfiprintf_r+0x156>
 800b87c:	4604      	mov	r4, r0
 800b87e:	2301      	movs	r3, #1
 800b880:	fb0c 2101 	mla	r1, ip, r1, r2
 800b884:	e7f0      	b.n	800b868 <_vfiprintf_r+0x1b8>
 800b886:	ab03      	add	r3, sp, #12
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	462a      	mov	r2, r5
 800b88c:	4630      	mov	r0, r6
 800b88e:	4b13      	ldr	r3, [pc, #76]	@ (800b8dc <_vfiprintf_r+0x22c>)
 800b890:	a904      	add	r1, sp, #16
 800b892:	f7fb fec5 	bl	8007620 <_printf_float>
 800b896:	4607      	mov	r7, r0
 800b898:	1c78      	adds	r0, r7, #1
 800b89a:	d1d6      	bne.n	800b84a <_vfiprintf_r+0x19a>
 800b89c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b89e:	07d9      	lsls	r1, r3, #31
 800b8a0:	d405      	bmi.n	800b8ae <_vfiprintf_r+0x1fe>
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	059a      	lsls	r2, r3, #22
 800b8a6:	d402      	bmi.n	800b8ae <_vfiprintf_r+0x1fe>
 800b8a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8aa:	f7fc fe2b 	bl	8008504 <__retarget_lock_release_recursive>
 800b8ae:	89ab      	ldrh	r3, [r5, #12]
 800b8b0:	065b      	lsls	r3, r3, #25
 800b8b2:	f53f af1f 	bmi.w	800b6f4 <_vfiprintf_r+0x44>
 800b8b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8b8:	e71e      	b.n	800b6f8 <_vfiprintf_r+0x48>
 800b8ba:	ab03      	add	r3, sp, #12
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	462a      	mov	r2, r5
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4b06      	ldr	r3, [pc, #24]	@ (800b8dc <_vfiprintf_r+0x22c>)
 800b8c4:	a904      	add	r1, sp, #16
 800b8c6:	f7fc f949 	bl	8007b5c <_printf_i>
 800b8ca:	e7e4      	b.n	800b896 <_vfiprintf_r+0x1e6>
 800b8cc:	0800d311 	.word	0x0800d311
 800b8d0:	0800d317 	.word	0x0800d317
 800b8d4:	0800d31b 	.word	0x0800d31b
 800b8d8:	08007621 	.word	0x08007621
 800b8dc:	0800b68d 	.word	0x0800b68d

0800b8e0 <__swbuf_r>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	460e      	mov	r6, r1
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	b118      	cbz	r0, 800b8f2 <__swbuf_r+0x12>
 800b8ea:	6a03      	ldr	r3, [r0, #32]
 800b8ec:	b90b      	cbnz	r3, 800b8f2 <__swbuf_r+0x12>
 800b8ee:	f7fc fcf1 	bl	80082d4 <__sinit>
 800b8f2:	69a3      	ldr	r3, [r4, #24]
 800b8f4:	60a3      	str	r3, [r4, #8]
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	071a      	lsls	r2, r3, #28
 800b8fa:	d501      	bpl.n	800b900 <__swbuf_r+0x20>
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	b943      	cbnz	r3, 800b912 <__swbuf_r+0x32>
 800b900:	4621      	mov	r1, r4
 800b902:	4628      	mov	r0, r5
 800b904:	f000 f82a 	bl	800b95c <__swsetup_r>
 800b908:	b118      	cbz	r0, 800b912 <__swbuf_r+0x32>
 800b90a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b90e:	4638      	mov	r0, r7
 800b910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	6922      	ldr	r2, [r4, #16]
 800b916:	b2f6      	uxtb	r6, r6
 800b918:	1a98      	subs	r0, r3, r2
 800b91a:	6963      	ldr	r3, [r4, #20]
 800b91c:	4637      	mov	r7, r6
 800b91e:	4283      	cmp	r3, r0
 800b920:	dc05      	bgt.n	800b92e <__swbuf_r+0x4e>
 800b922:	4621      	mov	r1, r4
 800b924:	4628      	mov	r0, r5
 800b926:	f7ff fa59 	bl	800addc <_fflush_r>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d1ed      	bne.n	800b90a <__swbuf_r+0x2a>
 800b92e:	68a3      	ldr	r3, [r4, #8]
 800b930:	3b01      	subs	r3, #1
 800b932:	60a3      	str	r3, [r4, #8]
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	1c5a      	adds	r2, r3, #1
 800b938:	6022      	str	r2, [r4, #0]
 800b93a:	701e      	strb	r6, [r3, #0]
 800b93c:	6962      	ldr	r2, [r4, #20]
 800b93e:	1c43      	adds	r3, r0, #1
 800b940:	429a      	cmp	r2, r3
 800b942:	d004      	beq.n	800b94e <__swbuf_r+0x6e>
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	07db      	lsls	r3, r3, #31
 800b948:	d5e1      	bpl.n	800b90e <__swbuf_r+0x2e>
 800b94a:	2e0a      	cmp	r6, #10
 800b94c:	d1df      	bne.n	800b90e <__swbuf_r+0x2e>
 800b94e:	4621      	mov	r1, r4
 800b950:	4628      	mov	r0, r5
 800b952:	f7ff fa43 	bl	800addc <_fflush_r>
 800b956:	2800      	cmp	r0, #0
 800b958:	d0d9      	beq.n	800b90e <__swbuf_r+0x2e>
 800b95a:	e7d6      	b.n	800b90a <__swbuf_r+0x2a>

0800b95c <__swsetup_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4b29      	ldr	r3, [pc, #164]	@ (800ba04 <__swsetup_r+0xa8>)
 800b960:	4605      	mov	r5, r0
 800b962:	6818      	ldr	r0, [r3, #0]
 800b964:	460c      	mov	r4, r1
 800b966:	b118      	cbz	r0, 800b970 <__swsetup_r+0x14>
 800b968:	6a03      	ldr	r3, [r0, #32]
 800b96a:	b90b      	cbnz	r3, 800b970 <__swsetup_r+0x14>
 800b96c:	f7fc fcb2 	bl	80082d4 <__sinit>
 800b970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b974:	0719      	lsls	r1, r3, #28
 800b976:	d422      	bmi.n	800b9be <__swsetup_r+0x62>
 800b978:	06da      	lsls	r2, r3, #27
 800b97a:	d407      	bmi.n	800b98c <__swsetup_r+0x30>
 800b97c:	2209      	movs	r2, #9
 800b97e:	602a      	str	r2, [r5, #0]
 800b980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b988:	81a3      	strh	r3, [r4, #12]
 800b98a:	e033      	b.n	800b9f4 <__swsetup_r+0x98>
 800b98c:	0758      	lsls	r0, r3, #29
 800b98e:	d512      	bpl.n	800b9b6 <__swsetup_r+0x5a>
 800b990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b992:	b141      	cbz	r1, 800b9a6 <__swsetup_r+0x4a>
 800b994:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b998:	4299      	cmp	r1, r3
 800b99a:	d002      	beq.n	800b9a2 <__swsetup_r+0x46>
 800b99c:	4628      	mov	r0, r5
 800b99e:	f7fd fc23 	bl	80091e8 <_free_r>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6063      	str	r3, [r4, #4]
 800b9b2:	6923      	ldr	r3, [r4, #16]
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f043 0308 	orr.w	r3, r3, #8
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	b94b      	cbnz	r3, 800b9d6 <__swsetup_r+0x7a>
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9cc:	d003      	beq.n	800b9d6 <__swsetup_r+0x7a>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 f882 	bl	800bada <__smakebuf_r>
 800b9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9da:	f013 0201 	ands.w	r2, r3, #1
 800b9de:	d00a      	beq.n	800b9f6 <__swsetup_r+0x9a>
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	60a2      	str	r2, [r4, #8]
 800b9e4:	6962      	ldr	r2, [r4, #20]
 800b9e6:	4252      	negs	r2, r2
 800b9e8:	61a2      	str	r2, [r4, #24]
 800b9ea:	6922      	ldr	r2, [r4, #16]
 800b9ec:	b942      	cbnz	r2, 800ba00 <__swsetup_r+0xa4>
 800b9ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9f2:	d1c5      	bne.n	800b980 <__swsetup_r+0x24>
 800b9f4:	bd38      	pop	{r3, r4, r5, pc}
 800b9f6:	0799      	lsls	r1, r3, #30
 800b9f8:	bf58      	it	pl
 800b9fa:	6962      	ldrpl	r2, [r4, #20]
 800b9fc:	60a2      	str	r2, [r4, #8]
 800b9fe:	e7f4      	b.n	800b9ea <__swsetup_r+0x8e>
 800ba00:	2000      	movs	r0, #0
 800ba02:	e7f7      	b.n	800b9f4 <__swsetup_r+0x98>
 800ba04:	20000020 	.word	0x20000020

0800ba08 <_raise_r>:
 800ba08:	291f      	cmp	r1, #31
 800ba0a:	b538      	push	{r3, r4, r5, lr}
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	d904      	bls.n	800ba1c <_raise_r+0x14>
 800ba12:	2316      	movs	r3, #22
 800ba14:	6003      	str	r3, [r0, #0]
 800ba16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba1e:	b112      	cbz	r2, 800ba26 <_raise_r+0x1e>
 800ba20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba24:	b94b      	cbnz	r3, 800ba3a <_raise_r+0x32>
 800ba26:	4628      	mov	r0, r5
 800ba28:	f000 f830 	bl	800ba8c <_getpid_r>
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	4601      	mov	r1, r0
 800ba30:	4628      	mov	r0, r5
 800ba32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba36:	f000 b817 	b.w	800ba68 <_kill_r>
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d00a      	beq.n	800ba54 <_raise_r+0x4c>
 800ba3e:	1c59      	adds	r1, r3, #1
 800ba40:	d103      	bne.n	800ba4a <_raise_r+0x42>
 800ba42:	2316      	movs	r3, #22
 800ba44:	6003      	str	r3, [r0, #0]
 800ba46:	2001      	movs	r0, #1
 800ba48:	e7e7      	b.n	800ba1a <_raise_r+0x12>
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba52:	4798      	blx	r3
 800ba54:	2000      	movs	r0, #0
 800ba56:	e7e0      	b.n	800ba1a <_raise_r+0x12>

0800ba58 <raise>:
 800ba58:	4b02      	ldr	r3, [pc, #8]	@ (800ba64 <raise+0xc>)
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	f7ff bfd3 	b.w	800ba08 <_raise_r>
 800ba62:	bf00      	nop
 800ba64:	20000020 	.word	0x20000020

0800ba68 <_kill_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	4d06      	ldr	r5, [pc, #24]	@ (800ba88 <_kill_r+0x20>)
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	4611      	mov	r1, r2
 800ba74:	602b      	str	r3, [r5, #0]
 800ba76:	f7f8 f9fa 	bl	8003e6e <_kill>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	d102      	bne.n	800ba84 <_kill_r+0x1c>
 800ba7e:	682b      	ldr	r3, [r5, #0]
 800ba80:	b103      	cbz	r3, 800ba84 <_kill_r+0x1c>
 800ba82:	6023      	str	r3, [r4, #0]
 800ba84:	bd38      	pop	{r3, r4, r5, pc}
 800ba86:	bf00      	nop
 800ba88:	2000098c 	.word	0x2000098c

0800ba8c <_getpid_r>:
 800ba8c:	f7f8 b9e8 	b.w	8003e60 <_getpid>

0800ba90 <__swhatbuf_r>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	460c      	mov	r4, r1
 800ba94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba98:	4615      	mov	r5, r2
 800ba9a:	2900      	cmp	r1, #0
 800ba9c:	461e      	mov	r6, r3
 800ba9e:	b096      	sub	sp, #88	@ 0x58
 800baa0:	da0c      	bge.n	800babc <__swhatbuf_r+0x2c>
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	2100      	movs	r1, #0
 800baa6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800baaa:	bf14      	ite	ne
 800baac:	2340      	movne	r3, #64	@ 0x40
 800baae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bab2:	2000      	movs	r0, #0
 800bab4:	6031      	str	r1, [r6, #0]
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	b016      	add	sp, #88	@ 0x58
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	466a      	mov	r2, sp
 800babe:	f000 f849 	bl	800bb54 <_fstat_r>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	dbed      	blt.n	800baa2 <__swhatbuf_r+0x12>
 800bac6:	9901      	ldr	r1, [sp, #4]
 800bac8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bacc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bad0:	4259      	negs	r1, r3
 800bad2:	4159      	adcs	r1, r3
 800bad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bad8:	e7eb      	b.n	800bab2 <__swhatbuf_r+0x22>

0800bada <__smakebuf_r>:
 800bada:	898b      	ldrh	r3, [r1, #12]
 800badc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bade:	079d      	lsls	r5, r3, #30
 800bae0:	4606      	mov	r6, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	d507      	bpl.n	800baf6 <__smakebuf_r+0x1c>
 800bae6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800baea:	6023      	str	r3, [r4, #0]
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	2301      	movs	r3, #1
 800baf0:	6163      	str	r3, [r4, #20]
 800baf2:	b003      	add	sp, #12
 800baf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf6:	466a      	mov	r2, sp
 800baf8:	ab01      	add	r3, sp, #4
 800bafa:	f7ff ffc9 	bl	800ba90 <__swhatbuf_r>
 800bafe:	9f00      	ldr	r7, [sp, #0]
 800bb00:	4605      	mov	r5, r0
 800bb02:	4639      	mov	r1, r7
 800bb04:	4630      	mov	r0, r6
 800bb06:	f7fd fbe1 	bl	80092cc <_malloc_r>
 800bb0a:	b948      	cbnz	r0, 800bb20 <__smakebuf_r+0x46>
 800bb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb10:	059a      	lsls	r2, r3, #22
 800bb12:	d4ee      	bmi.n	800baf2 <__smakebuf_r+0x18>
 800bb14:	f023 0303 	bic.w	r3, r3, #3
 800bb18:	f043 0302 	orr.w	r3, r3, #2
 800bb1c:	81a3      	strh	r3, [r4, #12]
 800bb1e:	e7e2      	b.n	800bae6 <__smakebuf_r+0xc>
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	6020      	str	r0, [r4, #0]
 800bb30:	b15b      	cbz	r3, 800bb4a <__smakebuf_r+0x70>
 800bb32:	4630      	mov	r0, r6
 800bb34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb38:	f000 f81e 	bl	800bb78 <_isatty_r>
 800bb3c:	b128      	cbz	r0, 800bb4a <__smakebuf_r+0x70>
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f023 0303 	bic.w	r3, r3, #3
 800bb44:	f043 0301 	orr.w	r3, r3, #1
 800bb48:	81a3      	strh	r3, [r4, #12]
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	431d      	orrs	r5, r3
 800bb4e:	81a5      	strh	r5, [r4, #12]
 800bb50:	e7cf      	b.n	800baf2 <__smakebuf_r+0x18>
	...

0800bb54 <_fstat_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	2300      	movs	r3, #0
 800bb58:	4d06      	ldr	r5, [pc, #24]	@ (800bb74 <_fstat_r+0x20>)
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	4611      	mov	r1, r2
 800bb60:	602b      	str	r3, [r5, #0]
 800bb62:	f7f8 f9e3 	bl	8003f2c <_fstat>
 800bb66:	1c43      	adds	r3, r0, #1
 800bb68:	d102      	bne.n	800bb70 <_fstat_r+0x1c>
 800bb6a:	682b      	ldr	r3, [r5, #0]
 800bb6c:	b103      	cbz	r3, 800bb70 <_fstat_r+0x1c>
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	bd38      	pop	{r3, r4, r5, pc}
 800bb72:	bf00      	nop
 800bb74:	2000098c 	.word	0x2000098c

0800bb78 <_isatty_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	4d05      	ldr	r5, [pc, #20]	@ (800bb94 <_isatty_r+0x1c>)
 800bb7e:	4604      	mov	r4, r0
 800bb80:	4608      	mov	r0, r1
 800bb82:	602b      	str	r3, [r5, #0]
 800bb84:	f7f8 f9e1 	bl	8003f4a <_isatty>
 800bb88:	1c43      	adds	r3, r0, #1
 800bb8a:	d102      	bne.n	800bb92 <_isatty_r+0x1a>
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	b103      	cbz	r3, 800bb92 <_isatty_r+0x1a>
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	bd38      	pop	{r3, r4, r5, pc}
 800bb94:	2000098c 	.word	0x2000098c

0800bb98 <_init>:
 800bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9a:	bf00      	nop
 800bb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9e:	bc08      	pop	{r3}
 800bba0:	469e      	mov	lr, r3
 800bba2:	4770      	bx	lr

0800bba4 <_fini>:
 800bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba6:	bf00      	nop
 800bba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbaa:	bc08      	pop	{r3}
 800bbac:	469e      	mov	lr, r3
 800bbae:	4770      	bx	lr
