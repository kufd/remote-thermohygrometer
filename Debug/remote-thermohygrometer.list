
remote-thermohygrometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb98  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001820  0800bca8  0800bca8  0000cca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000168  0800d4c8  0800d4c8  0000e4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001c0  0800d630  0800d630  0000e630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7f0  0800d7f0  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7f0  0800d7f0  0000e7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7f4  0800d7f4  0000e7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800d7f8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  200001e0  0800d9d4  0000f1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  0800d9d4  0000f99c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001828f  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366d  00000000  00000000  00027494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0002ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e65  00000000  00000000  0002bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6b5  00000000  00000000  0002cbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016726  00000000  00000000  0004a2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c016  00000000  00000000  000609d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc9e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006730  00000000  00000000  000fca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc90 	.word	0x0800bc90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800bc90 	.word	0x0800bc90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_uldivmod>:
 8001110:	b953      	cbnz	r3, 8001128 <__aeabi_uldivmod+0x18>
 8001112:	b94a      	cbnz	r2, 8001128 <__aeabi_uldivmod+0x18>
 8001114:	2900      	cmp	r1, #0
 8001116:	bf08      	it	eq
 8001118:	2800      	cmpeq	r0, #0
 800111a:	bf1c      	itt	ne
 800111c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001120:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001124:	f001 b932 	b.w	800238c <__aeabi_idiv0>
 8001128:	f1ad 0c08 	sub.w	ip, sp, #8
 800112c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001130:	f000 f83c 	bl	80011ac <__udivmoddi4>
 8001134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr

08001140 <__aeabi_d2lz>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x1c>
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4620      	mov	r0, r4
 800115e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	460c      	mov	r4, r1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d14e      	bne.n	8001256 <__udivmoddi4+0xaa>
 80011b8:	4694      	mov	ip, r2
 80011ba:	458c      	cmp	ip, r1
 80011bc:	4686      	mov	lr, r0
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	d962      	bls.n	800128a <__udivmoddi4+0xde>
 80011c4:	b14a      	cbz	r2, 80011da <__udivmoddi4+0x2e>
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	4091      	lsls	r1, r2
 80011cc:	fa20 f303 	lsr.w	r3, r0, r3
 80011d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d4:	4319      	orrs	r1, r3
 80011d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011de:	fbb1 f4f7 	udiv	r4, r1, r7
 80011e2:	fb07 1114 	mls	r1, r7, r4, r1
 80011e6:	fa1f f68c 	uxth.w	r6, ip
 80011ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f2:	fb04 f106 	mul.w	r1, r4, r6
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x64>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001202:	f080 8110 	bcs.w	8001426 <__udivmoddi4+0x27a>
 8001206:	4299      	cmp	r1, r3
 8001208:	f240 810d 	bls.w	8001426 <__udivmoddi4+0x27a>
 800120c:	3c02      	subs	r4, #2
 800120e:	4463      	add	r3, ip
 8001210:	1a59      	subs	r1, r3, r1
 8001212:	fbb1 f0f7 	udiv	r0, r1, r7
 8001216:	fb07 1110 	mls	r1, r7, r0, r1
 800121a:	fb00 f606 	mul.w	r6, r0, r6
 800121e:	fa1f f38e 	uxth.w	r3, lr
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	429e      	cmp	r6, r3
 8001228:	d90a      	bls.n	8001240 <__udivmoddi4+0x94>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001232:	f080 80fa 	bcs.w	800142a <__udivmoddi4+0x27e>
 8001236:	429e      	cmp	r6, r3
 8001238:	f240 80f7 	bls.w	800142a <__udivmoddi4+0x27e>
 800123c:	4463      	add	r3, ip
 800123e:	3802      	subs	r0, #2
 8001240:	2100      	movs	r1, #0
 8001242:	1b9b      	subs	r3, r3, r6
 8001244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001248:	b11d      	cbz	r5, 8001252 <__udivmoddi4+0xa6>
 800124a:	40d3      	lsrs	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	e9c5 3200 	strd	r3, r2, [r5]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d905      	bls.n	8001266 <__udivmoddi4+0xba>
 800125a:	b10d      	cbz	r5, 8001260 <__udivmoddi4+0xb4>
 800125c:	e9c5 0100 	strd	r0, r1, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	4608      	mov	r0, r1
 8001264:	e7f5      	b.n	8001252 <__udivmoddi4+0xa6>
 8001266:	fab3 f183 	clz	r1, r3
 800126a:	2900      	cmp	r1, #0
 800126c:	d146      	bne.n	80012fc <__udivmoddi4+0x150>
 800126e:	42a3      	cmp	r3, r4
 8001270:	d302      	bcc.n	8001278 <__udivmoddi4+0xcc>
 8001272:	4290      	cmp	r0, r2
 8001274:	f0c0 80ee 	bcc.w	8001454 <__udivmoddi4+0x2a8>
 8001278:	1a86      	subs	r6, r0, r2
 800127a:	eb64 0303 	sbc.w	r3, r4, r3
 800127e:	2001      	movs	r0, #1
 8001280:	2d00      	cmp	r5, #0
 8001282:	d0e6      	beq.n	8001252 <__udivmoddi4+0xa6>
 8001284:	e9c5 6300 	strd	r6, r3, [r5]
 8001288:	e7e3      	b.n	8001252 <__udivmoddi4+0xa6>
 800128a:	2a00      	cmp	r2, #0
 800128c:	f040 808f 	bne.w	80013ae <__udivmoddi4+0x202>
 8001290:	eba1 040c 	sub.w	r4, r1, ip
 8001294:	2101      	movs	r1, #1
 8001296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800129a:	fa1f f78c 	uxth.w	r7, ip
 800129e:	fbb4 f6f8 	udiv	r6, r4, r8
 80012a2:	fb08 4416 	mls	r4, r8, r6, r4
 80012a6:	fb07 f006 	mul.w	r0, r7, r6
 80012aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x11c>
 80012b6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80012be:	d202      	bcs.n	80012c6 <__udivmoddi4+0x11a>
 80012c0:	4298      	cmp	r0, r3
 80012c2:	f200 80cb 	bhi.w	800145c <__udivmoddi4+0x2b0>
 80012c6:	4626      	mov	r6, r4
 80012c8:	1a1c      	subs	r4, r3, r0
 80012ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ce:	fb08 4410 	mls	r4, r8, r0, r4
 80012d2:	fb00 f707 	mul.w	r7, r0, r7
 80012d6:	fa1f f38e 	uxth.w	r3, lr
 80012da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012de:	429f      	cmp	r7, r3
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x148>
 80012e2:	eb1c 0303 	adds.w	r3, ip, r3
 80012e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80012ea:	d202      	bcs.n	80012f2 <__udivmoddi4+0x146>
 80012ec:	429f      	cmp	r7, r3
 80012ee:	f200 80ae 	bhi.w	800144e <__udivmoddi4+0x2a2>
 80012f2:	4620      	mov	r0, r4
 80012f4:	1bdb      	subs	r3, r3, r7
 80012f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012fa:	e7a5      	b.n	8001248 <__udivmoddi4+0x9c>
 80012fc:	f1c1 0720 	rsb	r7, r1, #32
 8001300:	408b      	lsls	r3, r1
 8001302:	fa22 fc07 	lsr.w	ip, r2, r7
 8001306:	ea4c 0c03 	orr.w	ip, ip, r3
 800130a:	fa24 f607 	lsr.w	r6, r4, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fbb6 f8f9 	udiv	r8, r6, r9
 8001316:	fa1f fe8c 	uxth.w	lr, ip
 800131a:	fb09 6618 	mls	r6, r9, r8, r6
 800131e:	fa20 f307 	lsr.w	r3, r0, r7
 8001322:	408c      	lsls	r4, r1
 8001324:	fa00 fa01 	lsl.w	sl, r0, r1
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	431c      	orrs	r4, r3
 800132e:	0c23      	lsrs	r3, r4, #16
 8001330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001334:	4298      	cmp	r0, r3
 8001336:	fa02 f201 	lsl.w	r2, r2, r1
 800133a:	d90a      	bls.n	8001352 <__udivmoddi4+0x1a6>
 800133c:	eb1c 0303 	adds.w	r3, ip, r3
 8001340:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8001344:	f080 8081 	bcs.w	800144a <__udivmoddi4+0x29e>
 8001348:	4298      	cmp	r0, r3
 800134a:	d97e      	bls.n	800144a <__udivmoddi4+0x29e>
 800134c:	f1a8 0802 	sub.w	r8, r8, #2
 8001350:	4463      	add	r3, ip
 8001352:	1a1e      	subs	r6, r3, r0
 8001354:	fbb6 f3f9 	udiv	r3, r6, r9
 8001358:	fb09 6613 	mls	r6, r9, r3, r6
 800135c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001366:	45a6      	cmp	lr, r4
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x1d0>
 800136a:	eb1c 0404 	adds.w	r4, ip, r4
 800136e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001372:	d266      	bcs.n	8001442 <__udivmoddi4+0x296>
 8001374:	45a6      	cmp	lr, r4
 8001376:	d964      	bls.n	8001442 <__udivmoddi4+0x296>
 8001378:	3b02      	subs	r3, #2
 800137a:	4464      	add	r4, ip
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	fba0 8302 	umull	r8, r3, r0, r2
 8001384:	eba4 040e 	sub.w	r4, r4, lr
 8001388:	429c      	cmp	r4, r3
 800138a:	46c6      	mov	lr, r8
 800138c:	461e      	mov	r6, r3
 800138e:	d350      	bcc.n	8001432 <__udivmoddi4+0x286>
 8001390:	d04d      	beq.n	800142e <__udivmoddi4+0x282>
 8001392:	b155      	cbz	r5, 80013aa <__udivmoddi4+0x1fe>
 8001394:	ebba 030e 	subs.w	r3, sl, lr
 8001398:	eb64 0406 	sbc.w	r4, r4, r6
 800139c:	fa04 f707 	lsl.w	r7, r4, r7
 80013a0:	40cb      	lsrs	r3, r1
 80013a2:	431f      	orrs	r7, r3
 80013a4:	40cc      	lsrs	r4, r1
 80013a6:	e9c5 7400 	strd	r7, r4, [r5]
 80013aa:	2100      	movs	r1, #0
 80013ac:	e751      	b.n	8001252 <__udivmoddi4+0xa6>
 80013ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b2:	f1c2 0320 	rsb	r3, r2, #32
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013bc:	fa20 f303 	lsr.w	r3, r0, r3
 80013c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013c8:	fb08 1110 	mls	r1, r8, r0, r1
 80013cc:	4094      	lsls	r4, r2
 80013ce:	431c      	orrs	r4, r3
 80013d0:	fa1f f78c 	uxth.w	r7, ip
 80013d4:	0c23      	lsrs	r3, r4, #16
 80013d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013da:	fb00 f107 	mul.w	r1, r0, r7
 80013de:	4299      	cmp	r1, r3
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x248>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80013ea:	d22c      	bcs.n	8001446 <__udivmoddi4+0x29a>
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d92a      	bls.n	8001446 <__udivmoddi4+0x29a>
 80013f0:	3802      	subs	r0, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a5b      	subs	r3, r3, r1
 80013f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013fa:	fb08 3311 	mls	r3, r8, r1, r3
 80013fe:	b2a4      	uxth	r4, r4
 8001400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001404:	fb01 f307 	mul.w	r3, r1, r7
 8001408:	42a3      	cmp	r3, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x272>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001414:	d213      	bcs.n	800143e <__udivmoddi4+0x292>
 8001416:	42a3      	cmp	r3, r4
 8001418:	d911      	bls.n	800143e <__udivmoddi4+0x292>
 800141a:	3902      	subs	r1, #2
 800141c:	4464      	add	r4, ip
 800141e:	1ae4      	subs	r4, r4, r3
 8001420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001424:	e73b      	b.n	800129e <__udivmoddi4+0xf2>
 8001426:	4604      	mov	r4, r0
 8001428:	e6f2      	b.n	8001210 <__udivmoddi4+0x64>
 800142a:	4608      	mov	r0, r1
 800142c:	e708      	b.n	8001240 <__udivmoddi4+0x94>
 800142e:	45c2      	cmp	sl, r8
 8001430:	d2af      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 8001432:	ebb8 0e02 	subs.w	lr, r8, r2
 8001436:	eb63 060c 	sbc.w	r6, r3, ip
 800143a:	3801      	subs	r0, #1
 800143c:	e7a9      	b.n	8001392 <__udivmoddi4+0x1e6>
 800143e:	4631      	mov	r1, r6
 8001440:	e7ed      	b.n	800141e <__udivmoddi4+0x272>
 8001442:	4603      	mov	r3, r0
 8001444:	e79a      	b.n	800137c <__udivmoddi4+0x1d0>
 8001446:	4630      	mov	r0, r6
 8001448:	e7d4      	b.n	80013f4 <__udivmoddi4+0x248>
 800144a:	46b0      	mov	r8, r6
 800144c:	e781      	b.n	8001352 <__udivmoddi4+0x1a6>
 800144e:	4463      	add	r3, ip
 8001450:	3802      	subs	r0, #2
 8001452:	e74f      	b.n	80012f4 <__udivmoddi4+0x148>
 8001454:	4606      	mov	r6, r0
 8001456:	4623      	mov	r3, r4
 8001458:	4608      	mov	r0, r1
 800145a:	e711      	b.n	8001280 <__udivmoddi4+0xd4>
 800145c:	3e02      	subs	r6, #2
 800145e:	4463      	add	r3, ip
 8001460:	e732      	b.n	80012c8 <__udivmoddi4+0x11c>
 8001462:	bf00      	nop

08001464 <selfrel_offset31>:
 8001464:	6803      	ldr	r3, [r0, #0]
 8001466:	005a      	lsls	r2, r3, #1
 8001468:	bf4c      	ite	mi
 800146a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800146e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8001472:	4418      	add	r0, r3
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <search_EIT_table>:
 8001478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800147c:	b341      	cbz	r1, 80014d0 <search_EIT_table+0x58>
 800147e:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8001482:	4605      	mov	r5, r0
 8001484:	4616      	mov	r6, r2
 8001486:	4647      	mov	r7, r8
 8001488:	2400      	movs	r4, #0
 800148a:	19e1      	adds	r1, r4, r7
 800148c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001490:	1049      	asrs	r1, r1, #1
 8001492:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 8001496:	4648      	mov	r0, r9
 8001498:	f7ff ffe4 	bl	8001464 <selfrel_offset31>
 800149c:	4588      	cmp	r8, r1
 800149e:	4603      	mov	r3, r0
 80014a0:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 80014a4:	d00e      	beq.n	80014c4 <search_EIT_table+0x4c>
 80014a6:	f102 0008 	add.w	r0, r2, #8
 80014aa:	42b3      	cmp	r3, r6
 80014ac:	4428      	add	r0, r5
 80014ae:	d80b      	bhi.n	80014c8 <search_EIT_table+0x50>
 80014b0:	f7ff ffd8 	bl	8001464 <selfrel_offset31>
 80014b4:	3801      	subs	r0, #1
 80014b6:	42b0      	cmp	r0, r6
 80014b8:	f101 0401 	add.w	r4, r1, #1
 80014bc:	d3e5      	bcc.n	800148a <search_EIT_table+0x12>
 80014be:	4648      	mov	r0, r9
 80014c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014c4:	42b0      	cmp	r0, r6
 80014c6:	d9fa      	bls.n	80014be <search_EIT_table+0x46>
 80014c8:	428c      	cmp	r4, r1
 80014ca:	d001      	beq.n	80014d0 <search_EIT_table+0x58>
 80014cc:	1e4f      	subs	r7, r1, #1
 80014ce:	e7dc      	b.n	800148a <search_EIT_table+0x12>
 80014d0:	f04f 0900 	mov.w	r9, #0
 80014d4:	4648      	mov	r0, r9
 80014d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014da:	bf00      	nop

080014dc <__gnu_unwind_get_pr_addr>:
 80014dc:	2801      	cmp	r0, #1
 80014de:	d007      	beq.n	80014f0 <__gnu_unwind_get_pr_addr+0x14>
 80014e0:	2802      	cmp	r0, #2
 80014e2:	d007      	beq.n	80014f4 <__gnu_unwind_get_pr_addr+0x18>
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <__gnu_unwind_get_pr_addr+0x1c>)
 80014e6:	2800      	cmp	r0, #0
 80014e8:	bf0c      	ite	eq
 80014ea:	4618      	moveq	r0, r3
 80014ec:	2000      	movne	r0, #0
 80014ee:	4770      	bx	lr
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <__gnu_unwind_get_pr_addr+0x20>)
 80014f2:	4770      	bx	lr
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <__gnu_unwind_get_pr_addr+0x24>)
 80014f6:	4770      	bx	lr
 80014f8:	08001bb9 	.word	0x08001bb9
 80014fc:	08001bbd 	.word	0x08001bbd
 8001500:	08001bc1 	.word	0x08001bc1

08001504 <get_eit_entry>:
 8001504:	b530      	push	{r4, r5, lr}
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <get_eit_entry+0x88>)
 8001508:	4604      	mov	r4, r0
 800150a:	b083      	sub	sp, #12
 800150c:	1e8d      	subs	r5, r1, #2
 800150e:	b31b      	cbz	r3, 8001558 <get_eit_entry+0x54>
 8001510:	4628      	mov	r0, r5
 8001512:	a901      	add	r1, sp, #4
 8001514:	f3af 8000 	nop.w
 8001518:	b388      	cbz	r0, 800157e <get_eit_entry+0x7a>
 800151a:	9901      	ldr	r1, [sp, #4]
 800151c:	462a      	mov	r2, r5
 800151e:	f7ff ffab 	bl	8001478 <search_EIT_table>
 8001522:	4601      	mov	r1, r0
 8001524:	b358      	cbz	r0, 800157e <get_eit_entry+0x7a>
 8001526:	f7ff ff9d 	bl	8001464 <selfrel_offset31>
 800152a:	684b      	ldr	r3, [r1, #4]
 800152c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800152e:	2b01      	cmp	r3, #1
 8001530:	d028      	beq.n	8001584 <get_eit_entry+0x80>
 8001532:	2b00      	cmp	r3, #0
 8001534:	f101 0004 	add.w	r0, r1, #4
 8001538:	db1f      	blt.n	800157a <get_eit_entry+0x76>
 800153a:	f7ff ff93 	bl	8001464 <selfrel_offset31>
 800153e:	2300      	movs	r3, #0
 8001540:	6523      	str	r3, [r4, #80]	@ 0x50
 8001542:	6803      	ldr	r3, [r0, #0]
 8001544:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0d      	blt.n	8001566 <get_eit_entry+0x62>
 800154a:	f7ff ff8b 	bl	8001464 <selfrel_offset31>
 800154e:	4603      	mov	r3, r0
 8001550:	2000      	movs	r0, #0
 8001552:	6123      	str	r3, [r4, #16]
 8001554:	b003      	add	sp, #12
 8001556:	bd30      	pop	{r4, r5, pc}
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <get_eit_entry+0x8c>)
 800155a:	490e      	ldr	r1, [pc, #56]	@ (8001594 <get_eit_entry+0x90>)
 800155c:	4618      	mov	r0, r3
 800155e:	1ac9      	subs	r1, r1, r3
 8001560:	10c9      	asrs	r1, r1, #3
 8001562:	9101      	str	r1, [sp, #4]
 8001564:	e7da      	b.n	800151c <get_eit_entry+0x18>
 8001566:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800156a:	f7ff ffb7 	bl	80014dc <__gnu_unwind_get_pr_addr>
 800156e:	4603      	mov	r3, r0
 8001570:	b128      	cbz	r0, 800157e <get_eit_entry+0x7a>
 8001572:	2000      	movs	r0, #0
 8001574:	6123      	str	r3, [r4, #16]
 8001576:	b003      	add	sp, #12
 8001578:	bd30      	pop	{r4, r5, pc}
 800157a:	2301      	movs	r3, #1
 800157c:	e7e0      	b.n	8001540 <get_eit_entry+0x3c>
 800157e:	2300      	movs	r3, #0
 8001580:	2009      	movs	r0, #9
 8001582:	e7e6      	b.n	8001552 <get_eit_entry+0x4e>
 8001584:	2300      	movs	r3, #0
 8001586:	2005      	movs	r0, #5
 8001588:	e7e3      	b.n	8001552 <get_eit_entry+0x4e>
 800158a:	bf00      	nop
 800158c:	00000000 	.word	0x00000000
 8001590:	0800d630 	.word	0x0800d630
 8001594:	0800d7f0 	.word	0x0800d7f0

08001598 <restore_non_core_regs>:
 8001598:	6803      	ldr	r3, [r0, #0]
 800159a:	b510      	push	{r4, lr}
 800159c:	07da      	lsls	r2, r3, #31
 800159e:	4604      	mov	r4, r0
 80015a0:	d406      	bmi.n	80015b0 <restore_non_core_regs+0x18>
 80015a2:	079b      	lsls	r3, r3, #30
 80015a4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80015a8:	d509      	bpl.n	80015be <restore_non_core_regs+0x26>
 80015aa:	f000 fc6f 	bl	8001e8c <__gnu_Unwind_Restore_VFP_D>
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	0759      	lsls	r1, r3, #29
 80015b2:	d509      	bpl.n	80015c8 <restore_non_core_regs+0x30>
 80015b4:	071a      	lsls	r2, r3, #28
 80015b6:	d50e      	bpl.n	80015d6 <restore_non_core_regs+0x3e>
 80015b8:	06db      	lsls	r3, r3, #27
 80015ba:	d513      	bpl.n	80015e4 <restore_non_core_regs+0x4c>
 80015bc:	bd10      	pop	{r4, pc}
 80015be:	f000 fc5d 	bl	8001e7c <__gnu_Unwind_Restore_VFP>
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	0759      	lsls	r1, r3, #29
 80015c6:	d4f5      	bmi.n	80015b4 <restore_non_core_regs+0x1c>
 80015c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80015cc:	f000 fc66 	bl	8001e9c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	071a      	lsls	r2, r3, #28
 80015d4:	d4f0      	bmi.n	80015b8 <restore_non_core_regs+0x20>
 80015d6:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80015da:	f000 fc67 	bl	8001eac <__gnu_Unwind_Restore_WMMXD>
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	06db      	lsls	r3, r3, #27
 80015e2:	d4eb      	bmi.n	80015bc <restore_non_core_regs+0x24>
 80015e4:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 80015e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015ec:	f000 bca2 	b.w	8001f34 <__gnu_Unwind_Restore_WMMXC>

080015f0 <__gnu_unwind_24bit.constprop.0>:
 80015f0:	2009      	movs	r0, #9
 80015f2:	4770      	bx	lr

080015f4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80015f4:	4603      	mov	r3, r0
 80015f6:	6800      	ldr	r0, [r0, #0]
 80015f8:	b100      	cbz	r0, 80015fc <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80015fa:	4418      	add	r0, r3
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <_Unwind_DebugHook>:
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <unwind_phase2>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	4604      	mov	r4, r0
 8001608:	460e      	mov	r6, r1
 800160a:	4620      	mov	r0, r4
 800160c:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800160e:	f7ff ff79 	bl	8001504 <get_eit_entry>
 8001612:	4605      	mov	r5, r0
 8001614:	b998      	cbnz	r0, 800163e <unwind_phase2+0x3a>
 8001616:	f8d6 c040 	ldr.w	ip, [r6, #64]	@ 0x40
 800161a:	4632      	mov	r2, r6
 800161c:	4621      	mov	r1, r4
 800161e:	2001      	movs	r0, #1
 8001620:	6923      	ldr	r3, [r4, #16]
 8001622:	f8c4 c014 	str.w	ip, [r4, #20]
 8001626:	4798      	blx	r3
 8001628:	2808      	cmp	r0, #8
 800162a:	d0ee      	beq.n	800160a <unwind_phase2+0x6>
 800162c:	2807      	cmp	r0, #7
 800162e:	d106      	bne.n	800163e <unwind_phase2+0x3a>
 8001630:	4628      	mov	r0, r5
 8001632:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001634:	f7ff ffe4 	bl	8001600 <_Unwind_DebugHook>
 8001638:	1d30      	adds	r0, r6, #4
 800163a:	f000 fc13 	bl	8001e64 <__restore_core_regs>
 800163e:	f00a f87d 	bl	800b73c <abort>
 8001642:	bf00      	nop

08001644 <unwind_phase2_forced>:
 8001644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001648:	f04f 0a00 	mov.w	sl, #0
 800164c:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001650:	f10d 0e0c 	add.w	lr, sp, #12
 8001654:	f101 0c04 	add.w	ip, r1, #4
 8001658:	68c7      	ldr	r7, [r0, #12]
 800165a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800165e:	4606      	mov	r6, r0
 8001660:	4614      	mov	r4, r2
 8001662:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001666:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800166a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800166e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001672:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001676:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800167a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800167e:	ad02      	add	r5, sp, #8
 8001680:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001684:	f8c5 a000 	str.w	sl, [r5]
 8001688:	e021      	b.n	80016ce <unwind_phase2_forced+0x8a>
 800168a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800168c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001690:	4629      	mov	r1, r5
 8001692:	6173      	str	r3, [r6, #20]
 8001694:	a87a      	add	r0, sp, #488	@ 0x1e8
 8001696:	f006 ffbe 	bl	8008616 <memcpy>
 800169a:	4631      	mov	r1, r6
 800169c:	4650      	mov	r0, sl
 800169e:	6933      	ldr	r3, [r6, #16]
 80016a0:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80016a2:	4798      	blx	r3
 80016a4:	9c88      	ldr	r4, [sp, #544]	@ 0x220
 80016a6:	4682      	mov	sl, r0
 80016a8:	646c      	str	r4, [r5, #68]	@ 0x44
 80016aa:	4633      	mov	r3, r6
 80016ac:	4632      	mov	r2, r6
 80016ae:	4649      	mov	r1, r9
 80016b0:	2001      	movs	r0, #1
 80016b2:	e9cd 5800 	strd	r5, r8, [sp]
 80016b6:	47b8      	blx	r7
 80016b8:	4604      	mov	r4, r0
 80016ba:	bb30      	cbnz	r0, 800170a <unwind_phase2_forced+0xc6>
 80016bc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80016c0:	4628      	mov	r0, r5
 80016c2:	a97a      	add	r1, sp, #488	@ 0x1e8
 80016c4:	f006 ffa7 	bl	8008616 <memcpy>
 80016c8:	f1ba 0f08 	cmp.w	sl, #8
 80016cc:	d11a      	bne.n	8001704 <unwind_phase2_forced+0xc0>
 80016ce:	4630      	mov	r0, r6
 80016d0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80016d2:	f7ff ff17 	bl	8001504 <get_eit_entry>
 80016d6:	f104 0909 	add.w	r9, r4, #9
 80016da:	fa5f fa89 	uxtb.w	sl, r9
 80016de:	4604      	mov	r4, r0
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d0d2      	beq.n	800168a <unwind_phase2_forced+0x46>
 80016e4:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80016e6:	4633      	mov	r3, r6
 80016e8:	6469      	str	r1, [r5, #68]	@ 0x44
 80016ea:	4632      	mov	r2, r6
 80016ec:	2001      	movs	r0, #1
 80016ee:	e9cd 5800 	strd	r5, r8, [sp]
 80016f2:	f04a 0110 	orr.w	r1, sl, #16
 80016f6:	47b8      	blx	r7
 80016f8:	b938      	cbnz	r0, 800170a <unwind_phase2_forced+0xc6>
 80016fa:	4620      	mov	r0, r4
 80016fc:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001704:	f1ba 0f07 	cmp.w	sl, #7
 8001708:	d005      	beq.n	8001716 <unwind_phase2_forced+0xd2>
 800170a:	2409      	movs	r4, #9
 800170c:	4620      	mov	r0, r4
 800170e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001716:	4620      	mov	r0, r4
 8001718:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800171a:	f7ff ff71 	bl	8001600 <_Unwind_DebugHook>
 800171e:	a803      	add	r0, sp, #12
 8001720:	f000 fba0 	bl	8001e64 <__restore_core_regs>

08001724 <_Unwind_GetCFA>:
 8001724:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001726:	4770      	bx	lr

08001728 <__gnu_Unwind_RaiseException>:
 8001728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800172e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8001730:	b0f9      	sub	sp, #484	@ 0x1e4
 8001732:	640b      	str	r3, [r1, #64]	@ 0x40
 8001734:	ac01      	add	r4, sp, #4
 8001736:	f101 0c04 	add.w	ip, r1, #4
 800173a:	460e      	mov	r6, r1
 800173c:	4605      	mov	r5, r0
 800173e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001744:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001750:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001758:	9700      	str	r7, [sp, #0]
 800175a:	e006      	b.n	800176a <__gnu_Unwind_RaiseException+0x42>
 800175c:	466a      	mov	r2, sp
 800175e:	4629      	mov	r1, r5
 8001760:	692b      	ldr	r3, [r5, #16]
 8001762:	4798      	blx	r3
 8001764:	2808      	cmp	r0, #8
 8001766:	4604      	mov	r4, r0
 8001768:	d108      	bne.n	800177c <__gnu_Unwind_RaiseException+0x54>
 800176a:	4628      	mov	r0, r5
 800176c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800176e:	f7ff fec9 	bl	8001504 <get_eit_entry>
 8001772:	2800      	cmp	r0, #0
 8001774:	d0f2      	beq.n	800175c <__gnu_Unwind_RaiseException+0x34>
 8001776:	2009      	movs	r0, #9
 8001778:	b079      	add	sp, #484	@ 0x1e4
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	4668      	mov	r0, sp
 800177e:	f7ff ff0b 	bl	8001598 <restore_non_core_regs>
 8001782:	2c06      	cmp	r4, #6
 8001784:	d1f7      	bne.n	8001776 <__gnu_Unwind_RaiseException+0x4e>
 8001786:	4631      	mov	r1, r6
 8001788:	4628      	mov	r0, r5
 800178a:	f7ff ff3b 	bl	8001604 <unwind_phase2>
 800178e:	bf00      	nop

08001790 <__gnu_Unwind_ForcedUnwind>:
 8001790:	b410      	push	{r4}
 8001792:	4614      	mov	r4, r2
 8001794:	6184      	str	r4, [r0, #24]
 8001796:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001798:	60c1      	str	r1, [r0, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	641c      	str	r4, [r3, #64]	@ 0x40
 800179e:	4619      	mov	r1, r3
 80017a0:	bc10      	pop	{r4}
 80017a2:	e74f      	b.n	8001644 <unwind_phase2_forced>

080017a4 <__gnu_Unwind_Resume>:
 80017a4:	b570      	push	{r4, r5, r6, lr}
 80017a6:	6943      	ldr	r3, [r0, #20]
 80017a8:	68c6      	ldr	r6, [r0, #12]
 80017aa:	640b      	str	r3, [r1, #64]	@ 0x40
 80017ac:	b9ae      	cbnz	r6, 80017da <__gnu_Unwind_Resume+0x36>
 80017ae:	460a      	mov	r2, r1
 80017b0:	6903      	ldr	r3, [r0, #16]
 80017b2:	4604      	mov	r4, r0
 80017b4:	460d      	mov	r5, r1
 80017b6:	4601      	mov	r1, r0
 80017b8:	2002      	movs	r0, #2
 80017ba:	4798      	blx	r3
 80017bc:	2807      	cmp	r0, #7
 80017be:	d005      	beq.n	80017cc <__gnu_Unwind_Resume+0x28>
 80017c0:	2808      	cmp	r0, #8
 80017c2:	d10f      	bne.n	80017e4 <__gnu_Unwind_Resume+0x40>
 80017c4:	4629      	mov	r1, r5
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff ff1c 	bl	8001604 <unwind_phase2>
 80017cc:	4630      	mov	r0, r6
 80017ce:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80017d0:	f7ff ff16 	bl	8001600 <_Unwind_DebugHook>
 80017d4:	1d28      	adds	r0, r5, #4
 80017d6:	f000 fb45 	bl	8001e64 <__restore_core_regs>
 80017da:	2201      	movs	r2, #1
 80017dc:	f7ff ff32 	bl	8001644 <unwind_phase2_forced>
 80017e0:	f009 ffac 	bl	800b73c <abort>
 80017e4:	f009 ffaa 	bl	800b73c <abort>

080017e8 <__gnu_Unwind_Resume_or_Rethrow>:
 80017e8:	68c2      	ldr	r2, [r0, #12]
 80017ea:	b12a      	cbz	r2, 80017f8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80017ec:	f8d1 c03c 	ldr.w	ip, [r1, #60]	@ 0x3c
 80017f0:	2200      	movs	r2, #0
 80017f2:	f8c1 c040 	str.w	ip, [r1, #64]	@ 0x40
 80017f6:	e725      	b.n	8001644 <unwind_phase2_forced>
 80017f8:	e796      	b.n	8001728 <__gnu_Unwind_RaiseException>
 80017fa:	bf00      	nop

080017fc <_Unwind_Complete>:
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <_Unwind_DeleteException>:
 8001800:	6883      	ldr	r3, [r0, #8]
 8001802:	4601      	mov	r1, r0
 8001804:	b10b      	cbz	r3, 800180a <_Unwind_DeleteException+0xa>
 8001806:	2001      	movs	r0, #1
 8001808:	4718      	bx	r3
 800180a:	4770      	bx	lr

0800180c <_Unwind_VRS_Get>:
 800180c:	2901      	cmp	r1, #1
 800180e:	d010      	beq.n	8001832 <_Unwind_VRS_Get+0x26>
 8001810:	d809      	bhi.n	8001826 <_Unwind_VRS_Get+0x1a>
 8001812:	b983      	cbnz	r3, 8001836 <_Unwind_VRS_Get+0x2a>
 8001814:	2a0f      	cmp	r2, #15
 8001816:	d80e      	bhi.n	8001836 <_Unwind_VRS_Get+0x2a>
 8001818:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800181c:	6852      	ldr	r2, [r2, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	9b00      	ldr	r3, [sp, #0]
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4770      	bx	lr
 8001826:	3903      	subs	r1, #3
 8001828:	2901      	cmp	r1, #1
 800182a:	bf8c      	ite	hi
 800182c:	2002      	movhi	r0, #2
 800182e:	2001      	movls	r0, #1
 8001830:	4770      	bx	lr
 8001832:	4608      	mov	r0, r1
 8001834:	4770      	bx	lr
 8001836:	2002      	movs	r0, #2
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <_Unwind_GetGR>:
 800183c:	2300      	movs	r3, #0
 800183e:	b500      	push	{lr}
 8001840:	b085      	sub	sp, #20
 8001842:	460a      	mov	r2, r1
 8001844:	a903      	add	r1, sp, #12
 8001846:	9100      	str	r1, [sp, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff ffdf 	bl	800180c <_Unwind_VRS_Get>
 800184e:	9803      	ldr	r0, [sp, #12]
 8001850:	b005      	add	sp, #20
 8001852:	f85d fb04 	ldr.w	pc, [sp], #4
 8001856:	bf00      	nop

08001858 <_Unwind_VRS_Set>:
 8001858:	2901      	cmp	r1, #1
 800185a:	d010      	beq.n	800187e <_Unwind_VRS_Set+0x26>
 800185c:	d809      	bhi.n	8001872 <_Unwind_VRS_Set+0x1a>
 800185e:	b983      	cbnz	r3, 8001882 <_Unwind_VRS_Set+0x2a>
 8001860:	2a0f      	cmp	r2, #15
 8001862:	d80e      	bhi.n	8001882 <_Unwind_VRS_Set+0x2a>
 8001864:	9900      	ldr	r1, [sp, #0]
 8001866:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	6051      	str	r1, [r2, #4]
 8001870:	4770      	bx	lr
 8001872:	3903      	subs	r1, #3
 8001874:	2901      	cmp	r1, #1
 8001876:	bf8c      	ite	hi
 8001878:	2002      	movhi	r0, #2
 800187a:	2001      	movls	r0, #1
 800187c:	4770      	bx	lr
 800187e:	4608      	mov	r0, r1
 8001880:	4770      	bx	lr
 8001882:	2002      	movs	r0, #2
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <_Unwind_SetGR>:
 8001888:	2300      	movs	r3, #0
 800188a:	b510      	push	{r4, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	ac03      	add	r4, sp, #12
 8001890:	9203      	str	r2, [sp, #12]
 8001892:	9400      	str	r4, [sp, #0]
 8001894:	460a      	mov	r2, r1
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff ffde 	bl	8001858 <_Unwind_VRS_Set>
 800189c:	b004      	add	sp, #16
 800189e:	bd10      	pop	{r4, pc}

080018a0 <__gnu_Unwind_Backtrace>:
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80018a6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80018a8:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80018b2:	f102 0c04 	add.w	ip, r2, #4
 80018b6:	4605      	mov	r5, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80018c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80018ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80018d2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80018d6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80018da:	9616      	str	r6, [sp, #88]	@ 0x58
 80018dc:	e012      	b.n	8001904 <__gnu_Unwind_Backtrace+0x64>
 80018de:	210c      	movs	r1, #12
 80018e0:	a816      	add	r0, sp, #88	@ 0x58
 80018e2:	466a      	mov	r2, sp
 80018e4:	f7ff ffd0 	bl	8001888 <_Unwind_SetGR>
 80018e8:	4621      	mov	r1, r4
 80018ea:	a816      	add	r0, sp, #88	@ 0x58
 80018ec:	47a8      	blx	r5
 80018ee:	b978      	cbnz	r0, 8001910 <__gnu_Unwind_Backtrace+0x70>
 80018f0:	4669      	mov	r1, sp
 80018f2:	2008      	movs	r0, #8
 80018f4:	9b04      	ldr	r3, [sp, #16]
 80018f6:	aa16      	add	r2, sp, #88	@ 0x58
 80018f8:	4798      	blx	r3
 80018fa:	2805      	cmp	r0, #5
 80018fc:	4606      	mov	r6, r0
 80018fe:	d008      	beq.n	8001912 <__gnu_Unwind_Backtrace+0x72>
 8001900:	2809      	cmp	r0, #9
 8001902:	d005      	beq.n	8001910 <__gnu_Unwind_Backtrace+0x70>
 8001904:	4668      	mov	r0, sp
 8001906:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8001908:	f7ff fdfc 	bl	8001504 <get_eit_entry>
 800190c:	2800      	cmp	r0, #0
 800190e:	d0e6      	beq.n	80018de <__gnu_Unwind_Backtrace+0x3e>
 8001910:	2609      	movs	r6, #9
 8001912:	a816      	add	r0, sp, #88	@ 0x58
 8001914:	f7ff fe40 	bl	8001598 <restore_non_core_regs>
 8001918:	4630      	mov	r0, r6
 800191a:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800191e:	bd70      	pop	{r4, r5, r6, pc}

08001920 <__gnu_unwind_pr_common>:
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	4693      	mov	fp, r2
 8001926:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001928:	460d      	mov	r5, r1
 800192a:	f852 1b04 	ldr.w	r1, [r2], #4
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	f000 0c03 	and.w	ip, r0, #3
 8001934:	9206      	str	r2, [sp, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d079      	beq.n	8001a2e <__gnu_unwind_pr_common+0x10e>
 800193a:	2402      	movs	r4, #2
 800193c:	0c0e      	lsrs	r6, r1, #16
 800193e:	f88d 601d 	strb.w	r6, [sp, #29]
 8001942:	0409      	lsls	r1, r1, #16
 8001944:	b2f6      	uxtb	r6, r6
 8001946:	9105      	str	r1, [sp, #20]
 8001948:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800194c:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800194e:	f1bc 0f02 	cmp.w	ip, #2
 8001952:	bf08      	it	eq
 8001954:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001956:	f017 0701 	ands.w	r7, r7, #1
 800195a:	f88d 401c 	strb.w	r4, [sp, #28]
 800195e:	d00c      	beq.n	800197a <__gnu_unwind_pr_common+0x5a>
 8001960:	4658      	mov	r0, fp
 8001962:	a905      	add	r1, sp, #20
 8001964:	f000 fb80 	bl	8002068 <__gnu_unwind_execute>
 8001968:	b918      	cbnz	r0, 8001972 <__gnu_unwind_pr_common+0x52>
 800196a:	2008      	movs	r0, #8
 800196c:	b009      	add	sp, #36	@ 0x24
 800196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001972:	2009      	movs	r0, #9
 8001974:	b009      	add	sp, #36	@ 0x24
 8001976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197a:	6816      	ldr	r6, [r2, #0]
 800197c:	2e00      	cmp	r6, #0
 800197e:	d0ef      	beq.n	8001960 <__gnu_unwind_pr_common+0x40>
 8001980:	46b2      	mov	sl, r6
 8001982:	4664      	mov	r4, ip
 8001984:	4699      	mov	r9, r3
 8001986:	f000 0108 	and.w	r1, r0, #8
 800198a:	9101      	str	r1, [sp, #4]
 800198c:	9702      	str	r7, [sp, #8]
 800198e:	f1b9 0f02 	cmp.w	r9, #2
 8001992:	d048      	beq.n	8001a26 <__gnu_unwind_pr_common+0x106>
 8001994:	f8b2 a000 	ldrh.w	sl, [r2]
 8001998:	8856      	ldrh	r6, [r2, #2]
 800199a:	f102 0804 	add.w	r8, r2, #4
 800199e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80019a0:	f026 0201 	bic.w	r2, r6, #1
 80019a4:	210f      	movs	r1, #15
 80019a6:	4658      	mov	r0, fp
 80019a8:	18d7      	adds	r7, r2, r3
 80019aa:	f7ff ff47 	bl	800183c <_Unwind_GetGR>
 80019ae:	4287      	cmp	r7, r0
 80019b0:	d837      	bhi.n	8001a22 <__gnu_unwind_pr_common+0x102>
 80019b2:	f02a 0201 	bic.w	r2, sl, #1
 80019b6:	443a      	add	r2, r7
 80019b8:	4282      	cmp	r2, r0
 80019ba:	bf94      	ite	ls
 80019bc:	2200      	movls	r2, #0
 80019be:	2201      	movhi	r2, #1
 80019c0:	0076      	lsls	r6, r6, #1
 80019c2:	f006 0302 	and.w	r3, r6, #2
 80019c6:	f00a 0a01 	and.w	sl, sl, #1
 80019ca:	ea43 030a 	orr.w	r3, r3, sl
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d047      	beq.n	8001a62 <__gnu_unwind_pr_common+0x142>
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d031      	beq.n	8001a3a <__gnu_unwind_pr_common+0x11a>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1cb      	bne.n	8001972 <__gnu_unwind_pr_common+0x52>
 80019da:	b114      	cbz	r4, 80019e2 <__gnu_unwind_pr_common+0xc2>
 80019dc:	2a00      	cmp	r2, #0
 80019de:	f040 80ca 	bne.w	8001b76 <__gnu_unwind_pr_common+0x256>
 80019e2:	f108 0204 	add.w	r2, r8, #4
 80019e6:	f8d2 a000 	ldr.w	sl, [r2]
 80019ea:	f1ba 0f00 	cmp.w	sl, #0
 80019ee:	d1ce      	bne.n	800198e <__gnu_unwind_pr_common+0x6e>
 80019f0:	4658      	mov	r0, fp
 80019f2:	a905      	add	r1, sp, #20
 80019f4:	9f02      	ldr	r7, [sp, #8]
 80019f6:	f000 fb37 	bl	8002068 <__gnu_unwind_execute>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d1b9      	bne.n	8001972 <__gnu_unwind_pr_common+0x52>
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d0b3      	beq.n	800196a <__gnu_unwind_pr_common+0x4a>
 8001a02:	210f      	movs	r1, #15
 8001a04:	4658      	mov	r0, fp
 8001a06:	f7ff ff19 	bl	800183c <_Unwind_GetGR>
 8001a0a:	210e      	movs	r1, #14
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4658      	mov	r0, fp
 8001a10:	f7ff ff3a 	bl	8001888 <_Unwind_SetGR>
 8001a14:	210f      	movs	r1, #15
 8001a16:	4658      	mov	r0, fp
 8001a18:	4a66      	ldr	r2, [pc, #408]	@ (8001bb4 <__gnu_unwind_pr_common+0x294>)
 8001a1a:	f7ff ff35 	bl	8001888 <_Unwind_SetGR>
 8001a1e:	2007      	movs	r0, #7
 8001a20:	e7a8      	b.n	8001974 <__gnu_unwind_pr_common+0x54>
 8001a22:	2200      	movs	r2, #0
 8001a24:	e7cc      	b.n	80019c0 <__gnu_unwind_pr_common+0xa0>
 8001a26:	6856      	ldr	r6, [r2, #4]
 8001a28:	f102 0808 	add.w	r8, r2, #8
 8001a2c:	e7b7      	b.n	800199e <__gnu_unwind_pr_common+0x7e>
 8001a2e:	0209      	lsls	r1, r1, #8
 8001a30:	2403      	movs	r4, #3
 8001a32:	9105      	str	r1, [sp, #20]
 8001a34:	f88d 301d 	strb.w	r3, [sp, #29]
 8001a38:	e788      	b.n	800194c <__gnu_unwind_pr_common+0x2c>
 8001a3a:	f8d8 6000 	ldr.w	r6, [r8]
 8001a3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8001a42:	2c00      	cmp	r4, #0
 8001a44:	d144      	bne.n	8001ad0 <__gnu_unwind_pr_common+0x1b0>
 8001a46:	b122      	cbz	r2, 8001a52 <__gnu_unwind_pr_common+0x132>
 8001a48:	9a01      	ldr	r2, [sp, #4]
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d05a      	beq.n	8001b04 <__gnu_unwind_pr_common+0x1e4>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d058      	beq.n	8001b04 <__gnu_unwind_pr_common+0x1e4>
 8001a52:	2e00      	cmp	r6, #0
 8001a54:	da01      	bge.n	8001a5a <__gnu_unwind_pr_common+0x13a>
 8001a56:	f108 0804 	add.w	r8, r8, #4
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8001a60:	e7c1      	b.n	80019e6 <__gnu_unwind_pr_common+0xc6>
 8001a62:	b9ec      	cbnz	r4, 8001aa0 <__gnu_unwind_pr_common+0x180>
 8001a64:	b1ca      	cbz	r2, 8001a9a <__gnu_unwind_pr_common+0x17a>
 8001a66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001a6a:	f8d8 2000 	ldr.w	r2, [r8]
 8001a6e:	1c99      	adds	r1, r3, #2
 8001a70:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001a74:	f43f af7d 	beq.w	8001972 <__gnu_unwind_pr_common+0x52>
 8001a78:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	9104      	str	r1, [sp, #16]
 8001a80:	f000 808c 	beq.w	8001b9c <__gnu_unwind_pr_common+0x27c>
 8001a84:	f108 0004 	add.w	r0, r8, #4
 8001a88:	f7ff fdb4 	bl	80015f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001a8c:	ab04      	add	r3, sp, #16
 8001a8e:	4601      	mov	r1, r0
 8001a90:	4628      	mov	r0, r5
 8001a92:	f3af 8000 	nop.w
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d157      	bne.n	8001b4a <__gnu_unwind_pr_common+0x22a>
 8001a9a:	f108 0208 	add.w	r2, r8, #8
 8001a9e:	e7a2      	b.n	80019e6 <__gnu_unwind_pr_common+0xc6>
 8001aa0:	210d      	movs	r1, #13
 8001aa2:	4658      	mov	r0, fp
 8001aa4:	f7ff feca 	bl	800183c <_Unwind_GetGR>
 8001aa8:	6a2b      	ldr	r3, [r5, #32]
 8001aaa:	4283      	cmp	r3, r0
 8001aac:	d1f5      	bne.n	8001a9a <__gnu_unwind_pr_common+0x17a>
 8001aae:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001ab0:	4598      	cmp	r8, r3
 8001ab2:	d1f2      	bne.n	8001a9a <__gnu_unwind_pr_common+0x17a>
 8001ab4:	4640      	mov	r0, r8
 8001ab6:	f7ff fcd5 	bl	8001464 <selfrel_offset31>
 8001aba:	210f      	movs	r1, #15
 8001abc:	4602      	mov	r2, r0
 8001abe:	4658      	mov	r0, fp
 8001ac0:	f7ff fee2 	bl	8001888 <_Unwind_SetGR>
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4658      	mov	r0, fp
 8001aca:	f7ff fedd 	bl	8001888 <_Unwind_SetGR>
 8001ace:	e7a6      	b.n	8001a1e <__gnu_unwind_pr_common+0xfe>
 8001ad0:	210d      	movs	r1, #13
 8001ad2:	4658      	mov	r0, fp
 8001ad4:	9303      	str	r3, [sp, #12]
 8001ad6:	f7ff feb1 	bl	800183c <_Unwind_GetGR>
 8001ada:	6a2a      	ldr	r2, [r5, #32]
 8001adc:	9b03      	ldr	r3, [sp, #12]
 8001ade:	4282      	cmp	r2, r0
 8001ae0:	d1b7      	bne.n	8001a52 <__gnu_unwind_pr_common+0x132>
 8001ae2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001ae4:	4590      	cmp	r8, r2
 8001ae6:	d1b4      	bne.n	8001a52 <__gnu_unwind_pr_common+0x132>
 8001ae8:	2700      	movs	r7, #0
 8001aea:	2204      	movs	r2, #4
 8001aec:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8001af0:	4442      	add	r2, r8
 8001af2:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001af4:	636a      	str	r2, [r5, #52]	@ 0x34
 8001af6:	f8d8 2000 	ldr.w	r2, [r8]
 8001afa:	42ba      	cmp	r2, r7
 8001afc:	db56      	blt.n	8001bac <__gnu_unwind_pr_common+0x28c>
 8001afe:	2201      	movs	r2, #1
 8001b00:	9202      	str	r2, [sp, #8]
 8001b02:	e7aa      	b.n	8001a5a <__gnu_unwind_pr_common+0x13a>
 8001b04:	9403      	str	r4, [sp, #12]
 8001b06:	2600      	movs	r6, #0
 8001b08:	461c      	mov	r4, r3
 8001b0a:	f108 0a04 	add.w	sl, r8, #4
 8001b0e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8001b12:	e00d      	b.n	8001b30 <__gnu_unwind_pr_common+0x210>
 8001b14:	4650      	mov	r0, sl
 8001b16:	9704      	str	r7, [sp, #16]
 8001b18:	f7ff fd6c 	bl	80015f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4601      	mov	r1, r0
 8001b20:	ab04      	add	r3, sp, #16
 8001b22:	4628      	mov	r0, r5
 8001b24:	3601      	adds	r6, #1
 8001b26:	f10a 0a04 	add.w	sl, sl, #4
 8001b2a:	f3af 8000 	nop.w
 8001b2e:	b9e8      	cbnz	r0, 8001b6c <__gnu_unwind_pr_common+0x24c>
 8001b30:	42a6      	cmp	r6, r4
 8001b32:	d1ef      	bne.n	8001b14 <__gnu_unwind_pr_common+0x1f4>
 8001b34:	210d      	movs	r1, #13
 8001b36:	4658      	mov	r0, fp
 8001b38:	f7ff fe80 	bl	800183c <_Unwind_GetGR>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	9a04      	ldr	r2, [sp, #16]
 8001b40:	2006      	movs	r0, #6
 8001b42:	e9c5 2809 	strd	r2, r8, [r5, #36]	@ 0x24
 8001b46:	622b      	str	r3, [r5, #32]
 8001b48:	e714      	b.n	8001974 <__gnu_unwind_pr_common+0x54>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	210d      	movs	r1, #13
 8001b4e:	4658      	mov	r0, fp
 8001b50:	f7ff fe74 	bl	800183c <_Unwind_GetGR>
 8001b54:	9e04      	ldr	r6, [sp, #16]
 8001b56:	2c02      	cmp	r4, #2
 8001b58:	bf08      	it	eq
 8001b5a:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8001b5c:	6228      	str	r0, [r5, #32]
 8001b5e:	bf08      	it	eq
 8001b60:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8001b64:	2006      	movs	r0, #6
 8001b66:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001b6a:	e703      	b.n	8001974 <__gnu_unwind_pr_common+0x54>
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	f8d8 6000 	ldr.w	r6, [r8]
 8001b72:	9c03      	ldr	r4, [sp, #12]
 8001b74:	e76d      	b.n	8001a52 <__gnu_unwind_pr_common+0x132>
 8001b76:	4640      	mov	r0, r8
 8001b78:	f7ff fc74 	bl	8001464 <selfrel_offset31>
 8001b7c:	f108 0204 	add.w	r2, r8, #4
 8001b80:	4604      	mov	r4, r0
 8001b82:	63aa      	str	r2, [r5, #56]	@ 0x38
 8001b84:	4628      	mov	r0, r5
 8001b86:	f3af 8000 	nop.w
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	f43f aef1 	beq.w	8001972 <__gnu_unwind_pr_common+0x52>
 8001b90:	4622      	mov	r2, r4
 8001b92:	210f      	movs	r1, #15
 8001b94:	4658      	mov	r0, fp
 8001b96:	f7ff fe77 	bl	8001888 <_Unwind_SetGR>
 8001b9a:	e740      	b.n	8001a1e <__gnu_unwind_pr_common+0xfe>
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	4658      	mov	r0, fp
 8001ba0:	210d      	movs	r1, #13
 8001ba2:	f7ff fe4b 	bl	800183c <_Unwind_GetGR>
 8001ba6:	4626      	mov	r6, r4
 8001ba8:	6228      	str	r0, [r5, #32]
 8001baa:	e7db      	b.n	8001b64 <__gnu_unwind_pr_common+0x244>
 8001bac:	1c58      	adds	r0, r3, #1
 8001bae:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8001bb2:	e780      	b.n	8001ab6 <__gnu_unwind_pr_common+0x196>
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <__aeabi_unwind_cpp_pr0>:
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e6b1      	b.n	8001920 <__gnu_unwind_pr_common>

08001bbc <__aeabi_unwind_cpp_pr1>:
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e6af      	b.n	8001920 <__gnu_unwind_pr_common>

08001bc0 <__aeabi_unwind_cpp_pr2>:
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e6ad      	b.n	8001920 <__gnu_unwind_pr_common>

08001bc4 <_Unwind_VRS_Pop>:
 8001bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc8:	4606      	mov	r6, r0
 8001bca:	4615      	mov	r5, r2
 8001bcc:	461c      	mov	r4, r3
 8001bce:	b0c3      	sub	sp, #268	@ 0x10c
 8001bd0:	2904      	cmp	r1, #4
 8001bd2:	f200 80cd 	bhi.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001bd6:	e8df f001 	tbb	[pc, r1]
 8001bda:	51ac      	.short	0x51ac
 8001bdc:	2acb      	.short	0x2acb
 8001bde:	03          	.byte	0x03
 8001bdf:	00          	.byte	0x00
 8001be0:	2c00      	cmp	r4, #0
 8001be2:	f040 80c5 	bne.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001be6:	2a10      	cmp	r2, #16
 8001be8:	f200 80c2 	bhi.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	06dc      	lsls	r4, r3, #27
 8001bf0:	f100 80e3 	bmi.w	8001dba <_Unwind_VRS_Pop+0x1f6>
 8001bf4:	af20      	add	r7, sp, #128	@ 0x80
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	f000 f9a6 	bl	8001f48 <__gnu_Unwind_Save_WMMXC>
 8001bfc:	2401      	movs	r4, #1
 8001bfe:	4638      	mov	r0, r7
 8001c00:	2300      	movs	r3, #0
 8001c02:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8001c04:	fa04 f203 	lsl.w	r2, r4, r3
 8001c08:	422a      	tst	r2, r5
 8001c0a:	f103 0301 	add.w	r3, r3, #1
 8001c0e:	d005      	beq.n	8001c1c <_Unwind_VRS_Pop+0x58>
 8001c10:	460a      	mov	r2, r1
 8001c12:	f852 cb04 	ldr.w	ip, [r2], #4
 8001c16:	4611      	mov	r1, r2
 8001c18:	f8c0 c000 	str.w	ip, [r0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	f100 0004 	add.w	r0, r0, #4
 8001c22:	d1ef      	bne.n	8001c04 <_Unwind_VRS_Pop+0x40>
 8001c24:	4638      	mov	r0, r7
 8001c26:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001c28:	f000 f984 	bl	8001f34 <__gnu_Unwind_Restore_WMMXC>
 8001c2c:	e095      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001c2e:	2c03      	cmp	r4, #3
 8001c30:	f040 809e 	bne.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c34:	b294      	uxth	r4, r2
 8001c36:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8001c40:	f200 8096 	bhi.w	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c44:	6803      	ldr	r3, [r0, #0]
 8001c46:	071f      	lsls	r7, r3, #28
 8001c48:	f100 80bf 	bmi.w	8001dca <_Unwind_VRS_Pop+0x206>
 8001c4c:	af20      	add	r7, sp, #128	@ 0x80
 8001c4e:	4638      	mov	r0, r7
 8001c50:	f000 f94e 	bl	8001ef0 <__gnu_Unwind_Save_WMMXD>
 8001c54:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001c56:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001c5a:	b154      	cbz	r4, 8001c72 <_Unwind_VRS_Pop+0xae>
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001c62:	1ad0      	subs	r0, r2, r3
 8001c64:	00e4      	lsls	r4, r4, #3
 8001c66:	581d      	ldr	r5, [r3, r0]
 8001c68:	f843 5b04 	str.w	r5, [r3], #4
 8001c6c:	428b      	cmp	r3, r1
 8001c6e:	d1fa      	bne.n	8001c66 <_Unwind_VRS_Pop+0xa2>
 8001c70:	4422      	add	r2, r4
 8001c72:	4638      	mov	r0, r7
 8001c74:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001c76:	f000 f919 	bl	8001eac <__gnu_Unwind_Restore_WMMXD>
 8001c7a:	e06e      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001c7c:	2c01      	cmp	r4, #1
 8001c7e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001c82:	b295      	uxth	r5, r2
 8001c84:	d06d      	beq.n	8001d62 <_Unwind_VRS_Pop+0x19e>
 8001c86:	2c05      	cmp	r4, #5
 8001c88:	d172      	bne.n	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c8a:	eb08 0905 	add.w	r9, r8, r5
 8001c8e:	f1b9 0f20 	cmp.w	r9, #32
 8001c92:	d86d      	bhi.n	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001c94:	f1b8 0f0f 	cmp.w	r8, #15
 8001c98:	d86e      	bhi.n	8001d78 <_Unwind_VRS_Pop+0x1b4>
 8001c9a:	f1b9 0f10 	cmp.w	r9, #16
 8001c9e:	6803      	ldr	r3, [r0, #0]
 8001ca0:	f200 809b 	bhi.w	8001dda <_Unwind_VRS_Pop+0x216>
 8001ca4:	07d9      	lsls	r1, r3, #31
 8001ca6:	d508      	bpl.n	8001cba <_Unwind_VRS_Pop+0xf6>
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	f840 3b48 	str.w	r3, [r0], #72
 8001cb6:	f000 f8ed 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001cba:	af20      	add	r7, sp, #128	@ 0x80
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	f000 f8e9 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001cc2:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001cc4:	2d00      	cmp	r5, #0
 8001cc6:	f000 80b5 	beq.w	8001e34 <_Unwind_VRS_Pop+0x270>
 8001cca:	006d      	lsls	r5, r5, #1
 8001ccc:	1e6a      	subs	r2, r5, #1
 8001cce:	2500      	movs	r5, #0
 8001cd0:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001cd4:	3201      	adds	r2, #1
 8001cd6:	3904      	subs	r1, #4
 8001cd8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001cdc:	f853 0b04 	ldr.w	r0, [r3], #4
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	f841 0f04 	str.w	r0, [r1, #4]!
 8001ce6:	d1f9      	bne.n	8001cdc <_Unwind_VRS_Pop+0x118>
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	f000 809d 	beq.w	8001e28 <_Unwind_VRS_Pop+0x264>
 8001cee:	4641      	mov	r1, r8
 8001cf0:	2910      	cmp	r1, #16
 8001cf2:	bf38      	it	cc
 8001cf4:	2110      	movcc	r1, #16
 8001cf6:	466f      	mov	r7, sp
 8001cf8:	006b      	lsls	r3, r5, #1
 8001cfa:	3910      	subs	r1, #16
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001d02:	3301      	adds	r3, #1
 8001d04:	3904      	subs	r1, #4
 8001d06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001d0a:	f852 0b04 	ldr.w	r0, [r2], #4
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	f841 0f04 	str.w	r0, [r1, #4]!
 8001d14:	d1f9      	bne.n	8001d0a <_Unwind_VRS_Pop+0x146>
 8001d16:	2c01      	cmp	r4, #1
 8001d18:	f000 8084 	beq.w	8001e24 <_Unwind_VRS_Pop+0x260>
 8001d1c:	f1b8 0f0f 	cmp.w	r8, #15
 8001d20:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001d22:	d802      	bhi.n	8001d2a <_Unwind_VRS_Pop+0x166>
 8001d24:	a820      	add	r0, sp, #128	@ 0x80
 8001d26:	f000 f8b1 	bl	8001e8c <__gnu_Unwind_Restore_VFP_D>
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	f000 f8b6 	bl	8001e9c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001d30:	e013      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001d32:	b9ec      	cbnz	r4, 8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001d34:	4623      	mov	r3, r4
 8001d36:	2401      	movs	r4, #1
 8001d38:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001d3a:	1d37      	adds	r7, r6, #4
 8001d3c:	b290      	uxth	r0, r2
 8001d3e:	fa04 f203 	lsl.w	r2, r4, r3
 8001d42:	4202      	tst	r2, r0
 8001d44:	bf1c      	itt	ne
 8001d46:	f851 2b04 	ldrne.w	r2, [r1], #4
 8001d4a:	f847 2023 	strne.w	r2, [r7, r3, lsl #2]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d1f4      	bne.n	8001d3e <_Unwind_VRS_Pop+0x17a>
 8001d54:	04a8      	lsls	r0, r5, #18
 8001d56:	d400      	bmi.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001d58:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	b043      	add	sp, #268	@ 0x10c
 8001d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d62:	eb08 0305 	add.w	r3, r8, r5
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d802      	bhi.n	8001d70 <_Unwind_VRS_Pop+0x1ac>
 8001d6a:	f1b8 0f10 	cmp.w	r8, #16
 8001d6e:	d114      	bne.n	8001d9a <_Unwind_VRS_Pop+0x1d6>
 8001d70:	2002      	movs	r0, #2
 8001d72:	b043      	add	sp, #268	@ 0x10c
 8001d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d78:	2d00      	cmp	r5, #0
 8001d7a:	d0ee      	beq.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001d7c:	6803      	ldr	r3, [r0, #0]
 8001d7e:	075a      	lsls	r2, r3, #29
 8001d80:	d45c      	bmi.n	8001e3c <_Unwind_VRS_Pop+0x278>
 8001d82:	466f      	mov	r7, sp
 8001d84:	4638      	mov	r0, r7
 8001d86:	f000 f88d 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001d8a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001d8c:	006b      	lsls	r3, r5, #1
 8001d8e:	f1a8 0110 	sub.w	r1, r8, #16
 8001d92:	3b01      	subs	r3, #1
 8001d94:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001d98:	e7b3      	b.n	8001d02 <_Unwind_VRS_Pop+0x13e>
 8001d9a:	6803      	ldr	r3, [r0, #0]
 8001d9c:	07da      	lsls	r2, r3, #31
 8001d9e:	d459      	bmi.n	8001e54 <_Unwind_VRS_Pop+0x290>
 8001da0:	af20      	add	r7, sp, #128	@ 0x80
 8001da2:	4638      	mov	r0, r7
 8001da4:	f000 f86e 	bl	8001e84 <__gnu_Unwind_Save_VFP>
 8001da8:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	d18d      	bne.n	8001cca <_Unwind_VRS_Pop+0x106>
 8001dae:	3304      	adds	r3, #4
 8001db0:	4638      	mov	r0, r7
 8001db2:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001db4:	f000 f862 	bl	8001e7c <__gnu_Unwind_Restore_VFP>
 8001db8:	e7cf      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001dba:	f023 0310 	bic.w	r3, r3, #16
 8001dbe:	6003      	str	r3, [r0, #0]
 8001dc0:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001dc4:	f000 f8c0 	bl	8001f48 <__gnu_Unwind_Save_WMMXC>
 8001dc8:	e714      	b.n	8001bf4 <_Unwind_VRS_Pop+0x30>
 8001dca:	f023 0308 	bic.w	r3, r3, #8
 8001dce:	6003      	str	r3, [r0, #0]
 8001dd0:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001dd4:	f000 f88c 	bl	8001ef0 <__gnu_Unwind_Save_WMMXD>
 8001dd8:	e738      	b.n	8001c4c <_Unwind_VRS_Pop+0x88>
 8001dda:	07d9      	lsls	r1, r3, #31
 8001ddc:	d508      	bpl.n	8001df0 <_Unwind_VRS_Pop+0x22c>
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	f840 3b48 	str.w	r3, [r0], #72
 8001dea:	f000 f853 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001dee:	6833      	ldr	r3, [r6, #0]
 8001df0:	0758      	lsls	r0, r3, #29
 8001df2:	d506      	bpl.n	8001e02 <_Unwind_VRS_Pop+0x23e>
 8001df4:	4630      	mov	r0, r6
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	f840 3bd0 	str.w	r3, [r0], #208
 8001dfe:	f000 f851 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e02:	af20      	add	r7, sp, #128	@ 0x80
 8001e04:	4638      	mov	r0, r7
 8001e06:	f000 f845 	bl	8001e94 <__gnu_Unwind_Save_VFP_D>
 8001e0a:	4668      	mov	r0, sp
 8001e0c:	f000 f84a 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e10:	f1c8 0210 	rsb	r2, r8, #16
 8001e14:	0052      	lsls	r2, r2, #1
 8001e16:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001e18:	f1a9 0510 	sub.w	r5, r9, #16
 8001e1c:	3a01      	subs	r2, #1
 8001e1e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001e22:	e757      	b.n	8001cd4 <_Unwind_VRS_Pop+0x110>
 8001e24:	af20      	add	r7, sp, #128	@ 0x80
 8001e26:	e7c2      	b.n	8001dae <_Unwind_VRS_Pop+0x1ea>
 8001e28:	2c01      	cmp	r4, #1
 8001e2a:	d0c0      	beq.n	8001dae <_Unwind_VRS_Pop+0x1ea>
 8001e2c:	f1b8 0f0f 	cmp.w	r8, #15
 8001e30:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001e32:	d892      	bhi.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001e34:	4638      	mov	r0, r7
 8001e36:	f000 f829 	bl	8001e8c <__gnu_Unwind_Restore_VFP_D>
 8001e3a:	e78e      	b.n	8001d5a <_Unwind_VRS_Pop+0x196>
 8001e3c:	466f      	mov	r7, sp
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	f840 3bd0 	str.w	r3, [r0], #208
 8001e46:	f000 f82d 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e4a:	4638      	mov	r0, r7
 8001e4c:	f000 f82a 	bl	8001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e50:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001e52:	e79b      	b.n	8001d8c <_Unwind_VRS_Pop+0x1c8>
 8001e54:	4630      	mov	r0, r6
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	f840 3b48 	str.w	r3, [r0], #72
 8001e5e:	f000 f811 	bl	8001e84 <__gnu_Unwind_Save_VFP>
 8001e62:	e79d      	b.n	8001da0 <_Unwind_VRS_Pop+0x1dc>

08001e64 <__restore_core_regs>:
 8001e64:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8001e68:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001e6c:	469c      	mov	ip, r3
 8001e6e:	46a6      	mov	lr, r4
 8001e70:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001e74:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001e78:	46e5      	mov	sp, ip
 8001e7a:	bd00      	pop	{pc}

08001e7c <__gnu_Unwind_Restore_VFP>:
 8001e7c:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <__gnu_Unwind_Save_VFP>:
 8001e84:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <__gnu_Unwind_Restore_VFP_D>:
 8001e8c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <__gnu_Unwind_Save_VFP_D>:
 8001e94:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001e9c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001ea4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <__gnu_Unwind_Restore_WMMXD>:
 8001eac:	ecf0 0102 	ldfe	f0, [r0], #8
 8001eb0:	ecf0 1102 	ldfe	f1, [r0], #8
 8001eb4:	ecf0 2102 	ldfe	f2, [r0], #8
 8001eb8:	ecf0 3102 	ldfe	f3, [r0], #8
 8001ebc:	ecf0 4102 	ldfe	f4, [r0], #8
 8001ec0:	ecf0 5102 	ldfe	f5, [r0], #8
 8001ec4:	ecf0 6102 	ldfe	f6, [r0], #8
 8001ec8:	ecf0 7102 	ldfe	f7, [r0], #8
 8001ecc:	ecf0 8102 	ldfp	f0, [r0], #8
 8001ed0:	ecf0 9102 	ldfp	f1, [r0], #8
 8001ed4:	ecf0 a102 	ldfp	f2, [r0], #8
 8001ed8:	ecf0 b102 	ldfp	f3, [r0], #8
 8001edc:	ecf0 c102 	ldfp	f4, [r0], #8
 8001ee0:	ecf0 d102 	ldfp	f5, [r0], #8
 8001ee4:	ecf0 e102 	ldfp	f6, [r0], #8
 8001ee8:	ecf0 f102 	ldfp	f7, [r0], #8
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <__gnu_Unwind_Save_WMMXD>:
 8001ef0:	ece0 0102 	stfe	f0, [r0], #8
 8001ef4:	ece0 1102 	stfe	f1, [r0], #8
 8001ef8:	ece0 2102 	stfe	f2, [r0], #8
 8001efc:	ece0 3102 	stfe	f3, [r0], #8
 8001f00:	ece0 4102 	stfe	f4, [r0], #8
 8001f04:	ece0 5102 	stfe	f5, [r0], #8
 8001f08:	ece0 6102 	stfe	f6, [r0], #8
 8001f0c:	ece0 7102 	stfe	f7, [r0], #8
 8001f10:	ece0 8102 	stfp	f0, [r0], #8
 8001f14:	ece0 9102 	stfp	f1, [r0], #8
 8001f18:	ece0 a102 	stfp	f2, [r0], #8
 8001f1c:	ece0 b102 	stfp	f3, [r0], #8
 8001f20:	ece0 c102 	stfp	f4, [r0], #8
 8001f24:	ece0 d102 	stfp	f5, [r0], #8
 8001f28:	ece0 e102 	stfp	f6, [r0], #8
 8001f2c:	ece0 f102 	stfp	f7, [r0], #8
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop

08001f34 <__gnu_Unwind_Restore_WMMXC>:
 8001f34:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001f38:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001f3c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001f40:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <__gnu_Unwind_Save_WMMXC>:
 8001f48:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001f4c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001f50:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001f54:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <_Unwind_RaiseException>:
 8001f5c:	46ec      	mov	ip, sp
 8001f5e:	b500      	push	{lr}
 8001f60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001f64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001f70:	a901      	add	r1, sp, #4
 8001f72:	f7ff fbd9 	bl	8001728 <__gnu_Unwind_RaiseException>
 8001f76:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001f7a:	b012      	add	sp, #72	@ 0x48
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <_Unwind_Resume>:
 8001f80:	46ec      	mov	ip, sp
 8001f82:	b500      	push	{lr}
 8001f84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001f88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001f94:	a901      	add	r1, sp, #4
 8001f96:	f7ff fc05 	bl	80017a4 <__gnu_Unwind_Resume>
 8001f9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001f9e:	b012      	add	sp, #72	@ 0x48
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <_Unwind_Resume_or_Rethrow>:
 8001fa4:	46ec      	mov	ip, sp
 8001fa6:	b500      	push	{lr}
 8001fa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001fac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001fb8:	a901      	add	r1, sp, #4
 8001fba:	f7ff fc15 	bl	80017e8 <__gnu_Unwind_Resume_or_Rethrow>
 8001fbe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001fc2:	b012      	add	sp, #72	@ 0x48
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <_Unwind_ForcedUnwind>:
 8001fc8:	46ec      	mov	ip, sp
 8001fca:	b500      	push	{lr}
 8001fcc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001fd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001fdc:	ab01      	add	r3, sp, #4
 8001fde:	f7ff fbd7 	bl	8001790 <__gnu_Unwind_ForcedUnwind>
 8001fe2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001fe6:	b012      	add	sp, #72	@ 0x48
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <_Unwind_Backtrace>:
 8001fec:	46ec      	mov	ip, sp
 8001fee:	b500      	push	{lr}
 8001ff0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ff4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002000:	aa01      	add	r2, sp, #4
 8002002:	f7ff fc4d 	bl	80018a0 <__gnu_Unwind_Backtrace>
 8002006:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800200a:	b012      	add	sp, #72	@ 0x48
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop

08002010 <next_unwind_byte>:
 8002010:	7a02      	ldrb	r2, [r0, #8]
 8002012:	4603      	mov	r3, r0
 8002014:	b97a      	cbnz	r2, 8002036 <next_unwind_byte+0x26>
 8002016:	7a42      	ldrb	r2, [r0, #9]
 8002018:	b1a2      	cbz	r2, 8002044 <next_unwind_byte+0x34>
 800201a:	f04f 0c03 	mov.w	ip, #3
 800201e:	6841      	ldr	r1, [r0, #4]
 8002020:	3a01      	subs	r2, #1
 8002022:	7242      	strb	r2, [r0, #9]
 8002024:	6808      	ldr	r0, [r1, #0]
 8002026:	1d0a      	adds	r2, r1, #4
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	0202      	lsls	r2, r0, #8
 800202c:	f883 c008 	strb.w	ip, [r3, #8]
 8002030:	0e00      	lsrs	r0, r0, #24
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	4770      	bx	lr
 8002036:	6800      	ldr	r0, [r0, #0]
 8002038:	3a01      	subs	r2, #1
 800203a:	721a      	strb	r2, [r3, #8]
 800203c:	0202      	lsls	r2, r0, #8
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	0e00      	lsrs	r0, r0, #24
 8002042:	4770      	bx	lr
 8002044:	20b0      	movs	r0, #176	@ 0xb0
 8002046:	4770      	bx	lr

08002048 <_Unwind_GetGR.constprop.0>:
 8002048:	2300      	movs	r3, #0
 800204a:	b500      	push	{lr}
 800204c:	b085      	sub	sp, #20
 800204e:	a903      	add	r1, sp, #12
 8002050:	9100      	str	r1, [sp, #0]
 8002052:	220c      	movs	r2, #12
 8002054:	4619      	mov	r1, r3
 8002056:	f7ff fbd9 	bl	800180c <_Unwind_VRS_Get>
 800205a:	9803      	ldr	r0, [sp, #12]
 800205c:	b005      	add	sp, #20
 800205e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002062:	bf00      	nop

08002064 <unwind_UCB_from_context>:
 8002064:	e7f0      	b.n	8002048 <_Unwind_GetGR.constprop.0>
 8002066:	bf00      	nop

08002068 <__gnu_unwind_execute>:
 8002068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800206c:	f04f 0800 	mov.w	r8, #0
 8002070:	4606      	mov	r6, r0
 8002072:	460d      	mov	r5, r1
 8002074:	b085      	sub	sp, #20
 8002076:	4628      	mov	r0, r5
 8002078:	f7ff ffca 	bl	8002010 <next_unwind_byte>
 800207c:	28b0      	cmp	r0, #176	@ 0xb0
 800207e:	4604      	mov	r4, r0
 8002080:	f000 80dc 	beq.w	800223c <__gnu_unwind_execute+0x1d4>
 8002084:	0607      	lsls	r7, r0, #24
 8002086:	d547      	bpl.n	8002118 <__gnu_unwind_execute+0xb0>
 8002088:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800208c:	2b80      	cmp	r3, #128	@ 0x80
 800208e:	d05f      	beq.n	8002150 <__gnu_unwind_execute+0xe8>
 8002090:	2bb0      	cmp	r3, #176	@ 0xb0
 8002092:	d074      	beq.n	800217e <__gnu_unwind_execute+0x116>
 8002094:	d81b      	bhi.n	80020ce <__gnu_unwind_execute+0x66>
 8002096:	2b90      	cmp	r3, #144	@ 0x90
 8002098:	f000 809c 	beq.w	80021d4 <__gnu_unwind_execute+0x16c>
 800209c:	2ba0      	cmp	r3, #160	@ 0xa0
 800209e:	d112      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 80020a0:	43c3      	mvns	r3, r0
 80020a2:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	411a      	asrs	r2, r3
 80020ac:	0701      	lsls	r1, r0, #28
 80020ae:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 80020b2:	d501      	bpl.n	80020b8 <__gnu_unwind_execute+0x50>
 80020b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020b8:	2300      	movs	r3, #0
 80020ba:	4630      	mov	r0, r6
 80020bc:	4619      	mov	r1, r3
 80020be:	f7ff fd81 	bl	8001bc4 <_Unwind_VRS_Pop>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d0d7      	beq.n	8002076 <__gnu_unwind_execute+0xe>
 80020c6:	2009      	movs	r0, #9
 80020c8:	b005      	add	sp, #20
 80020ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80020d0:	d16e      	bne.n	80021b0 <__gnu_unwind_execute+0x148>
 80020d2:	28c6      	cmp	r0, #198	@ 0xc6
 80020d4:	f000 8094 	beq.w	8002200 <__gnu_unwind_execute+0x198>
 80020d8:	28c7      	cmp	r0, #199	@ 0xc7
 80020da:	f000 80b4 	beq.w	8002246 <__gnu_unwind_execute+0x1de>
 80020de:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80020e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80020e4:	f000 80c9 	beq.w	800227a <__gnu_unwind_execute+0x212>
 80020e8:	28c8      	cmp	r0, #200	@ 0xc8
 80020ea:	f000 80d4 	beq.w	8002296 <__gnu_unwind_execute+0x22e>
 80020ee:	28c9      	cmp	r0, #201	@ 0xc9
 80020f0:	d1e9      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 80020f2:	4628      	mov	r0, r5
 80020f4:	f7ff ff8c 	bl	8002010 <next_unwind_byte>
 80020f8:	2305      	movs	r3, #5
 80020fa:	4604      	mov	r4, r0
 80020fc:	2101      	movs	r1, #1
 80020fe:	4630      	mov	r0, r6
 8002100:	0322      	lsls	r2, r4, #12
 8002102:	f004 040f 	and.w	r4, r4, #15
 8002106:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800210a:	440c      	add	r4, r1
 800210c:	4322      	orrs	r2, r4
 800210e:	f7ff fd59 	bl	8001bc4 <_Unwind_VRS_Pop>
 8002112:	2800      	cmp	r0, #0
 8002114:	d0af      	beq.n	8002076 <__gnu_unwind_execute+0xe>
 8002116:	e7d6      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002118:	0083      	lsls	r3, r0, #2
 800211a:	b2db      	uxtb	r3, r3
 800211c:	1d1f      	adds	r7, r3, #4
 800211e:	2300      	movs	r3, #0
 8002120:	f10d 090c 	add.w	r9, sp, #12
 8002124:	4619      	mov	r1, r3
 8002126:	220d      	movs	r2, #13
 8002128:	4630      	mov	r0, r6
 800212a:	f8cd 9000 	str.w	r9, [sp]
 800212e:	f7ff fb6d 	bl	800180c <_Unwind_VRS_Get>
 8002132:	9b03      	ldr	r3, [sp, #12]
 8002134:	0660      	lsls	r0, r4, #25
 8002136:	bf4c      	ite	mi
 8002138:	1bdf      	submi	r7, r3, r7
 800213a:	18ff      	addpl	r7, r7, r3
 800213c:	2300      	movs	r3, #0
 800213e:	220d      	movs	r2, #13
 8002140:	4630      	mov	r0, r6
 8002142:	4619      	mov	r1, r3
 8002144:	f8cd 9000 	str.w	r9, [sp]
 8002148:	9703      	str	r7, [sp, #12]
 800214a:	f7ff fb85 	bl	8001858 <_Unwind_VRS_Set>
 800214e:	e792      	b.n	8002076 <__gnu_unwind_execute+0xe>
 8002150:	4628      	mov	r0, r5
 8002152:	f7ff ff5d 	bl	8002010 <next_unwind_byte>
 8002156:	0224      	lsls	r4, r4, #8
 8002158:	4320      	orrs	r0, r4
 800215a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800215e:	d0b2      	beq.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002160:	2300      	movs	r3, #0
 8002162:	0104      	lsls	r4, r0, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4630      	mov	r0, r6
 8002168:	b2a2      	uxth	r2, r4
 800216a:	f7ff fd2b 	bl	8001bc4 <_Unwind_VRS_Pop>
 800216e:	2800      	cmp	r0, #0
 8002170:	d1a9      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002172:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8002176:	bf18      	it	ne
 8002178:	f04f 0801 	movne.w	r8, #1
 800217c:	e77b      	b.n	8002076 <__gnu_unwind_execute+0xe>
 800217e:	28b1      	cmp	r0, #177	@ 0xb1
 8002180:	d052      	beq.n	8002228 <__gnu_unwind_execute+0x1c0>
 8002182:	28b2      	cmp	r0, #178	@ 0xb2
 8002184:	f000 80ac 	beq.w	80022e0 <__gnu_unwind_execute+0x278>
 8002188:	28b3      	cmp	r0, #179	@ 0xb3
 800218a:	d06e      	beq.n	800226a <__gnu_unwind_execute+0x202>
 800218c:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8002190:	2bb4      	cmp	r3, #180	@ 0xb4
 8002192:	d098      	beq.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002194:	2301      	movs	r3, #1
 8002196:	f000 0207 	and.w	r2, r0, #7
 800219a:	441a      	add	r2, r3
 800219c:	4630      	mov	r0, r6
 800219e:	4619      	mov	r1, r3
 80021a0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80021a4:	f7ff fd0e 	bl	8001bc4 <_Unwind_VRS_Pop>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	f43f af64 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 80021ae:	e78a      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 80021b0:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80021b4:	2bd0      	cmp	r3, #208	@ 0xd0
 80021b6:	d186      	bne.n	80020c6 <__gnu_unwind_execute+0x5e>
 80021b8:	f000 0207 	and.w	r2, r0, #7
 80021bc:	3201      	adds	r2, #1
 80021be:	2305      	movs	r3, #5
 80021c0:	2101      	movs	r1, #1
 80021c2:	4630      	mov	r0, r6
 80021c4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80021c8:	f7ff fcfc 	bl	8001bc4 <_Unwind_VRS_Pop>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	f43f af52 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 80021d2:	e778      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 80021d4:	f000 030d 	and.w	r3, r0, #13
 80021d8:	2b0d      	cmp	r3, #13
 80021da:	f43f af74 	beq.w	80020c6 <__gnu_unwind_execute+0x5e>
 80021de:	2300      	movs	r3, #0
 80021e0:	af03      	add	r7, sp, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	f000 020f 	and.w	r2, r0, #15
 80021e8:	9700      	str	r7, [sp, #0]
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7ff fb0e 	bl	800180c <_Unwind_VRS_Get>
 80021f0:	2300      	movs	r3, #0
 80021f2:	220d      	movs	r2, #13
 80021f4:	4630      	mov	r0, r6
 80021f6:	4619      	mov	r1, r3
 80021f8:	9700      	str	r7, [sp, #0]
 80021fa:	f7ff fb2d 	bl	8001858 <_Unwind_VRS_Set>
 80021fe:	e73a      	b.n	8002076 <__gnu_unwind_execute+0xe>
 8002200:	4628      	mov	r0, r5
 8002202:	f7ff ff05 	bl	8002010 <next_unwind_byte>
 8002206:	4604      	mov	r4, r0
 8002208:	2303      	movs	r3, #3
 800220a:	0322      	lsls	r2, r4, #12
 800220c:	f004 040f 	and.w	r4, r4, #15
 8002210:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8002214:	3401      	adds	r4, #1
 8002216:	4630      	mov	r0, r6
 8002218:	4619      	mov	r1, r3
 800221a:	4322      	orrs	r2, r4
 800221c:	f7ff fcd2 	bl	8001bc4 <_Unwind_VRS_Pop>
 8002220:	2800      	cmp	r0, #0
 8002222:	f43f af28 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 8002226:	e74e      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002228:	4628      	mov	r0, r5
 800222a:	f7ff fef1 	bl	8002010 <next_unwind_byte>
 800222e:	1e43      	subs	r3, r0, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b0e      	cmp	r3, #14
 8002234:	4602      	mov	r2, r0
 8002236:	f67f af3f 	bls.w	80020b8 <__gnu_unwind_execute+0x50>
 800223a:	e744      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 800223c:	f1b8 0f00 	cmp.w	r8, #0
 8002240:	d03e      	beq.n	80022c0 <__gnu_unwind_execute+0x258>
 8002242:	2000      	movs	r0, #0
 8002244:	e740      	b.n	80020c8 <__gnu_unwind_execute+0x60>
 8002246:	4628      	mov	r0, r5
 8002248:	f7ff fee2 	bl	8002010 <next_unwind_byte>
 800224c:	1e43      	subs	r3, r0, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b0e      	cmp	r3, #14
 8002252:	4602      	mov	r2, r0
 8002254:	f63f af37 	bhi.w	80020c6 <__gnu_unwind_execute+0x5e>
 8002258:	2300      	movs	r3, #0
 800225a:	2104      	movs	r1, #4
 800225c:	4630      	mov	r0, r6
 800225e:	f7ff fcb1 	bl	8001bc4 <_Unwind_VRS_Pop>
 8002262:	2800      	cmp	r0, #0
 8002264:	f43f af07 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 8002268:	e72d      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 800226a:	4628      	mov	r0, r5
 800226c:	f7ff fed0 	bl	8002010 <next_unwind_byte>
 8002270:	2301      	movs	r3, #1
 8002272:	4604      	mov	r4, r0
 8002274:	4619      	mov	r1, r3
 8002276:	4630      	mov	r0, r6
 8002278:	e742      	b.n	8002100 <__gnu_unwind_execute+0x98>
 800227a:	2303      	movs	r3, #3
 800227c:	f000 020f 	and.w	r2, r0, #15
 8002280:	3201      	adds	r2, #1
 8002282:	4630      	mov	r0, r6
 8002284:	4619      	mov	r1, r3
 8002286:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 800228a:	f7ff fc9b 	bl	8001bc4 <_Unwind_VRS_Pop>
 800228e:	2800      	cmp	r0, #0
 8002290:	f43f aef1 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 8002294:	e717      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 8002296:	4628      	mov	r0, r5
 8002298:	f7ff feba 	bl	8002010 <next_unwind_byte>
 800229c:	4602      	mov	r2, r0
 800229e:	2101      	movs	r1, #1
 80022a0:	f002 04f0 	and.w	r4, r2, #240	@ 0xf0
 80022a4:	f002 020f 	and.w	r2, r2, #15
 80022a8:	3410      	adds	r4, #16
 80022aa:	440a      	add	r2, r1
 80022ac:	2305      	movs	r3, #5
 80022ae:	4630      	mov	r0, r6
 80022b0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80022b4:	f7ff fc86 	bl	8001bc4 <_Unwind_VRS_Pop>
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f43f aedc 	beq.w	8002076 <__gnu_unwind_execute+0xe>
 80022be:	e702      	b.n	80020c6 <__gnu_unwind_execute+0x5e>
 80022c0:	ac03      	add	r4, sp, #12
 80022c2:	4643      	mov	r3, r8
 80022c4:	4641      	mov	r1, r8
 80022c6:	220e      	movs	r2, #14
 80022c8:	4630      	mov	r0, r6
 80022ca:	9400      	str	r4, [sp, #0]
 80022cc:	f7ff fa9e 	bl	800180c <_Unwind_VRS_Get>
 80022d0:	4643      	mov	r3, r8
 80022d2:	220f      	movs	r2, #15
 80022d4:	4641      	mov	r1, r8
 80022d6:	4630      	mov	r0, r6
 80022d8:	9400      	str	r4, [sp, #0]
 80022da:	f7ff fabd 	bl	8001858 <_Unwind_VRS_Set>
 80022de:	e7b0      	b.n	8002242 <__gnu_unwind_execute+0x1da>
 80022e0:	2300      	movs	r3, #0
 80022e2:	f10d 090c 	add.w	r9, sp, #12
 80022e6:	220d      	movs	r2, #13
 80022e8:	4619      	mov	r1, r3
 80022ea:	4630      	mov	r0, r6
 80022ec:	f8cd 9000 	str.w	r9, [sp]
 80022f0:	f7ff fa8c 	bl	800180c <_Unwind_VRS_Get>
 80022f4:	4628      	mov	r0, r5
 80022f6:	f7ff fe8b 	bl	8002010 <next_unwind_byte>
 80022fa:	0602      	lsls	r2, r0, #24
 80022fc:	f04f 0702 	mov.w	r7, #2
 8002300:	9c03      	ldr	r4, [sp, #12]
 8002302:	d50b      	bpl.n	800231c <__gnu_unwind_execute+0x2b4>
 8002304:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002308:	40b8      	lsls	r0, r7
 800230a:	4404      	add	r4, r0
 800230c:	4628      	mov	r0, r5
 800230e:	9403      	str	r4, [sp, #12]
 8002310:	f7ff fe7e 	bl	8002010 <next_unwind_byte>
 8002314:	0603      	lsls	r3, r0, #24
 8002316:	f107 0707 	add.w	r7, r7, #7
 800231a:	d4f3      	bmi.n	8002304 <__gnu_unwind_execute+0x29c>
 800231c:	2300      	movs	r3, #0
 800231e:	fa00 f207 	lsl.w	r2, r0, r7
 8002322:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8002326:	4422      	add	r2, r4
 8002328:	9203      	str	r2, [sp, #12]
 800232a:	4630      	mov	r0, r6
 800232c:	220d      	movs	r2, #13
 800232e:	4619      	mov	r1, r3
 8002330:	f8cd 9000 	str.w	r9, [sp]
 8002334:	f7ff fa90 	bl	8001858 <_Unwind_VRS_Set>
 8002338:	e69d      	b.n	8002076 <__gnu_unwind_execute+0xe>
 800233a:	bf00      	nop

0800233c <__gnu_unwind_frame>:
 800233c:	460b      	mov	r3, r1
 800233e:	f04f 0c03 	mov.w	ip, #3
 8002342:	b500      	push	{lr}
 8002344:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002346:	4618      	mov	r0, r3
 8002348:	6853      	ldr	r3, [r2, #4]
 800234a:	b085      	sub	sp, #20
 800234c:	3208      	adds	r2, #8
 800234e:	9202      	str	r2, [sp, #8]
 8002350:	a901      	add	r1, sp, #4
 8002352:	0e1a      	lsrs	r2, r3, #24
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	f88d c00c 	strb.w	ip, [sp, #12]
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f88d 200d 	strb.w	r2, [sp, #13]
 8002360:	f7ff fe82 	bl	8002068 <__gnu_unwind_execute>
 8002364:	b005      	add	sp, #20
 8002366:	f85d fb04 	ldr.w	pc, [sp], #4
 800236a:	bf00      	nop

0800236c <_Unwind_GetRegionStart>:
 800236c:	b508      	push	{r3, lr}
 800236e:	f7ff fe79 	bl	8002064 <unwind_UCB_from_context>
 8002372:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8002374:	bd08      	pop	{r3, pc}
 8002376:	bf00      	nop

08002378 <_Unwind_GetLanguageSpecificData>:
 8002378:	b508      	push	{r3, lr}
 800237a:	f7ff fe73 	bl	8002064 <unwind_UCB_from_context>
 800237e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8002380:	79c3      	ldrb	r3, [r0, #7]
 8002382:	3302      	adds	r3, #2
 8002384:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002388:	bd08      	pop	{r3, pc}
 800238a:	bf00      	nop

0800238c <__aeabi_idiv0>:
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <_Z14SX1278_SPIReadP8SX1278_th>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fad8 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 faf8 	bl	80029a4 <_Z21SX1278_hw_SPIReadByteP11SX1278_hw_t>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fa90 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	return tmp;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <_Z15SX1278_SPIWriteP8SX1278_thh>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
 80023da:	4613      	mov	r3, r2
 80023dc:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fa7d 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f000 faae 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
	SX1278_hw_SPICommand(module->hw, cmd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	78ba      	ldrb	r2, [r7, #2]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f000 faa7 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
	SX1278_hw_SetNSS(module->hw, 1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fa66 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	72fb      	strb	r3, [r7, #11]
 8002430:	4613      	mov	r3, r2
 8002432:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8002434:	7abb      	ldrb	r3, [r7, #10]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d929      	bls.n	800248e <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fa4f 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f000 fa80 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
		for (i = 0; i < length; i++) {
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	e00b      	b.n	8002478 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f000 fa74 	bl	800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>
		for (i = 0; i < length; i++) {
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	3301      	adds	r3, #1
 8002476:	75fb      	strb	r3, [r7, #23]
 8002478:	7dfa      	ldrb	r2, [r7, #23]
 800247a:	7abb      	ldrb	r3, [r7, #10]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3ef      	bcc.n	8002460 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa2c 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
 800248c:	e000      	b.n	8002490 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh+0x70>
		return;
 800248e:	bf00      	nop
	}
}
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <_Z13SX1278_configP8SX1278_t>:

void SX1278_config(SX1278_t *module) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f90d 	bl	80026c0 <_Z12SX1278_sleepP8SX1278_t>
	SX1278_hw_DelayMs(15);
 80024a6:	200f      	movs	r0, #15
 80024a8:	f000 faa7 	bl	80029fa <_Z17SX1278_hw_DelayMsm>

	SX1278_entryLoRa(module);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f917 	bl	80026e0 <_Z16SX1278_entryLoRaP8SX1278_t>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024b8:	f04f 0000 	mov.w	r0, #0
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	04d9      	lsls	r1, r3, #19
 80024c2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80024c6:	04d0      	lsls	r0, r2, #19
 80024c8:	4a6f      	ldr	r2, [pc, #444]	@ (8002688 <_Z13SX1278_configP8SX1278_t+0x1f0>)
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	f7fe fe1f 	bl	8001110 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80024da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	0c02      	lsrs	r2, r0, #16
 80024e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024ec:	0c0b      	lsrs	r3, r1, #16
 80024ee:	b2d3      	uxtb	r3, r2
 80024f0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80024f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	0a02      	lsrs	r2, r0, #8
 8002500:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002504:	0a0b      	lsrs	r3, r1, #8
 8002506:	b2d3      	uxtb	r3, r2
 8002508:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800250a:	7c3b      	ldrb	r3, [r7, #16]
 800250c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800250e:	f107 020c 	add.w	r2, r7, #12
 8002512:	2303      	movs	r3, #3
 8002514:	2106      	movs	r1, #6
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff82 	bl	8002420 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800251c:	2234      	movs	r2, #52	@ 0x34
 800251e:	2139      	movs	r1, #57	@ 0x39
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff54 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7c1b      	ldrb	r3, [r3, #16]
 800252a:	461a      	mov	r2, r3
 800252c:	4b57      	ldr	r3, [pc, #348]	@ (800268c <_Z13SX1278_configP8SX1278_t+0x1f4>)
 800252e:	5c9b      	ldrb	r3, [r3, r2]
 8002530:	461a      	mov	r2, r3
 8002532:	2109      	movs	r1, #9
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff4a 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800253a:	220b      	movs	r2, #11
 800253c:	210b      	movs	r1, #11
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff45 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002544:	2223      	movs	r2, #35	@ 0x23
 8002546:	210c      	movs	r1, #12
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff40 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7c5b      	ldrb	r3, [r3, #17]
 8002552:	461a      	mov	r2, r3
 8002554:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <_Z13SX1278_configP8SX1278_t+0x1f8>)
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b06      	cmp	r3, #6
 800255a:	d147      	bne.n	80025ec <_Z13SX1278_configP8SX1278_t+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7c9b      	ldrb	r3, [r3, #18]
 8002560:	461a      	mov	r2, r3
 8002562:	4b4c      	ldr	r3, [pc, #304]	@ (8002694 <_Z13SX1278_configP8SX1278_t+0x1fc>)
 8002564:	5c9b      	ldrb	r3, [r3, r2]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7cdb      	ldrb	r3, [r3, #19]
 800256e:	4619      	mov	r1, r3
 8002570:	4b49      	ldr	r3, [pc, #292]	@ (8002698 <_Z13SX1278_configP8SX1278_t+0x200>)
 8002572:	5c5b      	ldrb	r3, [r3, r1]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4413      	add	r3, r2
 800257a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800257c:	3301      	adds	r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	211d      	movs	r1, #29
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff22 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7c5b      	ldrb	r3, [r3, #17]
 800258e:	461a      	mov	r2, r3
 8002590:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <_Z13SX1278_configP8SX1278_t+0x1f8>)
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7d1b      	ldrb	r3, [r3, #20]
 800259c:	4619      	mov	r1, r3
 800259e:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <_Z13SX1278_configP8SX1278_t+0x204>)
 80025a0:	5c5b      	ldrb	r3, [r3, r1]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80025aa:	3303      	adds	r3, #3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	211e      	movs	r1, #30
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ff0b 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

		tmp = SX1278_SPIRead(module, 0x31);
 80025b8:	2131      	movs	r1, #49	@ 0x31
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fee8 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	f023 0307 	bic.w	r3, r3, #7
 80025ca:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	f043 0305 	orr.w	r3, r3, #5
 80025d2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2131      	movs	r1, #49	@ 0x31
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fef7 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80025e0:	220c      	movs	r2, #12
 80025e2:	2137      	movs	r1, #55	@ 0x37
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff fef2 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
 80025ea:	e029      	b.n	8002640 <_Z13SX1278_configP8SX1278_t+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7c9b      	ldrb	r3, [r3, #18]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <_Z13SX1278_configP8SX1278_t+0x1fc>)
 80025f4:	5c9b      	ldrb	r3, [r3, r2]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7cdb      	ldrb	r3, [r3, #19]
 80025fe:	4619      	mov	r1, r3
 8002600:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <_Z13SX1278_configP8SX1278_t+0x200>)
 8002602:	5c5b      	ldrb	r3, [r3, r1]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002608:	4413      	add	r3, r2
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	211d      	movs	r1, #29
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fedc 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7c5b      	ldrb	r3, [r3, #17]
 800261a:	461a      	mov	r2, r3
 800261c:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <_Z13SX1278_configP8SX1278_t+0x1f8>)
 800261e:	5c9b      	ldrb	r3, [r3, r2]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7d1b      	ldrb	r3, [r3, #20]
 8002628:	4619      	mov	r1, r3
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <_Z13SX1278_configP8SX1278_t+0x204>)
 800262c:	5c5b      	ldrb	r3, [r3, r1]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002632:	4413      	add	r3, r2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	211e      	movs	r1, #30
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fec7 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8002640:	2204      	movs	r2, #4
 8002642:	2126      	movs	r1, #38	@ 0x26
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff fec2 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800264a:	2208      	movs	r2, #8
 800264c:	211f      	movs	r1, #31
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff febd 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002654:	2200      	movs	r2, #0
 8002656:	2120      	movs	r1, #32
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff feb8 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800265e:	2208      	movs	r2, #8
 8002660:	2121      	movs	r1, #33	@ 0x21
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff feb3 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002668:	2201      	movs	r2, #1
 800266a:	2141      	movs	r1, #65	@ 0x41
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff feae 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	module->readBytes = 0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f810 	bl	80026a0 <_Z14SX1278_standbyP8SX1278_t>
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	01e84800 	.word	0x01e84800
 800268c:	0800bce4 	.word	0x0800bce4
 8002690:	0800bce8 	.word	0x0800bce8
 8002694:	0800bcf0 	.word	0x0800bcf0
 8002698:	0800bcfc 	.word	0x0800bcfc
 800269c:	0800bd00 	.word	0x0800bd00

080026a0 <_Z14SX1278_standbyP8SX1278_t>:

void SX1278_standby(SX1278_t *module) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80026a8:	2209      	movs	r2, #9
 80026aa:	2101      	movs	r1, #1
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fe8e 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	module->status = STANDBY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	759a      	strb	r2, [r3, #22]
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_Z12SX1278_sleepP8SX1278_t>:

void SX1278_sleep(SX1278_t *module) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80026c8:	2208      	movs	r2, #8
 80026ca:	2101      	movs	r1, #1
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fe7e 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	module->status = SLEEP;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	759a      	strb	r2, [r3, #22]
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_Z16SX1278_entryLoRaP8SX1278_t>:

void SX1278_entryLoRa(SX1278_t *module) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80026e8:	2288      	movs	r2, #136	@ 0x88
 80026ea:	2101      	movs	r1, #1
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fe6e 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_Z19SX1278_clearLoRaIrqP8SX1278_t>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002702:	22ff      	movs	r2, #255	@ 0xff
 8002704:	2112      	movs	r1, #18
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fe61 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_Z18SX1278_LoRaEntryTxP8SX1278_thm>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	460b      	mov	r3, r1
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	7afa      	ldrb	r2, [r7, #11]
 8002726:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff feb5 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800272e:	2287      	movs	r2, #135	@ 0x87
 8002730:	214d      	movs	r1, #77	@ 0x4d
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff fe4b 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8002738:	2200      	movs	r2, #0
 800273a:	2124      	movs	r1, #36	@ 0x24
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff fe46 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8002742:	2241      	movs	r2, #65	@ 0x41
 8002744:	2140      	movs	r1, #64	@ 0x40
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fe41 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_clearLoRaIrq(module);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff ffd4 	bl	80026fa <_Z19SX1278_clearLoRaIrqP8SX1278_t>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8002752:	22f7      	movs	r2, #247	@ 0xf7
 8002754:	2111      	movs	r1, #17
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fe39 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	461a      	mov	r2, r3
 8002760:	2122      	movs	r1, #34	@ 0x22
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff fe33 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8002768:	210e      	movs	r1, #14
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff fe10 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
 8002770:	4603      	mov	r3, r0
 8002772:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	461a      	mov	r2, r3
 8002778:	210d      	movs	r1, #13
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff fe27 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8002780:	2122      	movs	r1, #34	@ 0x22
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7ff fe04 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
 8002788:	4603      	mov	r3, r0
 800278a:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800278c:	7dba      	ldrb	r2, [r7, #22]
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	429a      	cmp	r2, r3
 8002792:	d104      	bne.n	800279e <_Z18SX1278_LoRaEntryTxP8SX1278_thm+0x8a>
			module->status = TX;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2202      	movs	r2, #2
 8002798:	759a      	strb	r2, [r3, #22]
			return 1;
 800279a:	2301      	movs	r3, #1
 800279c:	e013      	b.n	80027c6 <_Z18SX1278_LoRaEntryTxP8SX1278_thm+0xb2>
		}

		if (--timeout == 0) {
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0e5      	beq.n	8002780 <_Z18SX1278_LoRaEntryTxP8SX1278_thm+0x6c>
			SX1278_hw_Reset(module->hw);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f8aa 	bl	8002912 <_Z15SX1278_hw_ResetP11SX1278_hw_t>
			SX1278_config(module);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff fe6a 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
			return 0;
 80027c4:	2300      	movs	r3, #0
		}
	}
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	2100      	movs	r1, #0
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe1b 	bl	8002420 <_Z20SX1278_SPIBurstWriteP8SX1278_thPhh>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80027ea:	228b      	movs	r2, #139	@ 0x8b
 80027ec:	2101      	movs	r1, #1
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff fded 	bl	80023ce <_Z15SX1278_SPIWriteP8SX1278_thh>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f909 	bl	8002a10 <_Z17SX1278_hw_GetDIO0P11SX1278_hw_t>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x58>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800280e:	2112      	movs	r1, #18
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fdbd 	bl	8002390 <_Z14SX1278_SPIReadP8SX1278_th>
			SX1278_clearLoRaIrq(module); //Clear irq
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff ff6f 	bl	80026fa <_Z19SX1278_clearLoRaIrqP8SX1278_t>
			SX1278_standby(module); //Entry Standby mode
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff ff3f 	bl	80026a0 <_Z14SX1278_standbyP8SX1278_t>
			return 1;
 8002822:	2301      	movs	r3, #1
 8002824:	e018      	b.n	8002858 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x8a>
		}

		if (--timeout == 0) {
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	3b01      	subs	r3, #1
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x82>
			SX1278_hw_Reset(module->hw);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f866 	bl	8002912 <_Z15SX1278_hw_ResetP11SX1278_hw_t>
			SX1278_config(module);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fe26 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
			return 0;
 800284c:	2300      	movs	r3, #0
 800284e:	e003      	b.n	8002858 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x8a>
		}
		SX1278_hw_DelayMs(1);
 8002850:	2001      	movs	r0, #1
 8002852:	f000 f8d2 	bl	80029fa <_Z17SX1278_hw_DelayMsm>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002856:	e7cd      	b.n	80027f4 <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm+0x26>
	}
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_Z11SX1278_initP8SX1278_tyhhhhhh>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f000 f822 	bl	80028ba <_Z14SX1278_hw_initP11SX1278_hw_t>
	module->frequency = frequency;
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800287c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	7e3a      	ldrb	r2, [r7, #24]
 8002884:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	7f3a      	ldrb	r2, [r7, #28]
 800288a:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002892:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800289a:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80028a2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80028aa:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff fdf3 	bl	8002498 <_Z13SX1278_configP8SX1278_t>
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_Z14SX1278_hw_initP11SX1278_hw_t>:
#include "SX1278_hw.h"
#include <string.h>

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80028c2:	2101      	movs	r1, #1
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f80d 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6858      	ldr	r0, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2201      	movs	r2, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	f001 ff17 	bl	800470a <HAL_GPIO_WritePin>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6958      	ldr	r0, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	b299      	uxth	r1, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti+0x1e>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti+0x20>
 8002902:	2300      	movs	r3, #0
 8002904:	461a      	mov	r2, r3
 8002906:	f001 ff00 	bl	800470a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_Z15SX1278_hw_ResetP11SX1278_hw_t>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800291a:	2101      	movs	r1, #1
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffe1 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6858      	ldr	r0, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	2200      	movs	r2, #0
 800292e:	4619      	mov	r1, r3
 8002930:	f001 feeb 	bl	800470a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8002934:	2001      	movs	r0, #1
 8002936:	f000 f860 	bl	80029fa <_Z17SX1278_hw_DelayMsm>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6858      	ldr	r0, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	2201      	movs	r2, #1
 8002946:	4619      	mov	r1, r3
 8002948:	f001 fedf 	bl	800470a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800294c:	2064      	movs	r0, #100	@ 0x64
 800294e:	f000 f854 	bl	80029fa <_Z17SX1278_hw_DelayMsm>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_Z20SX1278_hw_SPICommandP11SX1278_hw_th>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8002966:	2100      	movs	r1, #0
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffbb 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6998      	ldr	r0, [r3, #24]
 8002972:	1cf9      	adds	r1, r7, #3
 8002974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002978:	2201      	movs	r2, #1
 800297a:	f003 ffb7 	bl	80068ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800297e:	bf00      	nop
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4618      	mov	r0, r3
 8002986:	f004 fa9e 	bl	8006ec6 <HAL_SPI_GetState>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f2      	bne.n	8002980 <_Z20SX1278_hw_SPICommandP11SX1278_hw_th+0x26>
		;
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_Z21SX1278_hw_SPIReadByteP11SX1278_hw_t>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff94 	bl	80028e4 <_Z16SX1278_hw_SetNSSP11SX1278_hw_ti>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6998      	ldr	r0, [r3, #24]
 80029c0:	f107 020e 	add.w	r2, r7, #14
 80029c4:	f107 010f 	add.w	r1, r7, #15
 80029c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2301      	movs	r3, #1
 80029d0:	f004 f8d0 	bl	8006b74 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80029d4:	bf00      	nop
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fa73 	bl	8006ec6 <HAL_SPI_GetState>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f2      	bne.n	80029d6 <_Z21SX1278_hw_SPIReadByteP11SX1278_hw_t+0x32>
		;
	return rxByte;
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_Z17SX1278_hw_DelayMsm>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f001 fbde 	bl	80041c4 <HAL_Delay>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_Z17SX1278_hw_GetDIO0P11SX1278_hw_t>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f001 fe59 	bl	80046dc <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <_ZN21EnvironmentConditions9isSimilarERS_>:
	bool isSame(EnvironmentConditions &that)
	{
		return fabs(this->tempC - that.tempC) <= 0.01 && fabs(this->humidity - that.humidity) <= 0.01 && this->isValid == that.isValid;
	}

	bool isSimilar(EnvironmentConditions &that)
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	{
	    return fabs(this->tempC - that.tempC) <= 0.1 && fabs(this->humidity - that.humidity) <= 1.0 && this->isValid == that.isValid;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7fe f88b 	bl	8000b70 <__aeabi_fsub>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fce1 	bl	8000428 <__aeabi_f2d>
 8002a66:	a314      	add	r3, pc, #80	@ (adr r3, 8002ab8 <_ZN21EnvironmentConditions9isSimilarERS_+0x78>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd ffb0 	bl	80009d0 <__aeabi_dcmple>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01a      	beq.n	8002aac <_ZN21EnvironmentConditions9isSimilarERS_+0x6c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7fe f875 	bl	8000b70 <__aeabi_fsub>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe fb1f 	bl	80010d4 <__aeabi_fcmple>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <_ZN21EnvironmentConditions9isSimilarERS_+0x6c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7a1a      	ldrb	r2, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	7a1b      	ldrb	r3, [r3, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d101      	bne.n	8002aac <_ZN21EnvironmentConditions9isSimilarERS_+0x6c>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <_ZN21EnvironmentConditions9isSimilarERS_+0x6e>
 8002aac:	2300      	movs	r3, #0
	}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	9999999a 	.word	0x9999999a
 8002abc:	3fb99999 	.word	0x3fb99999

08002ac0 <appMain>:
void displayState(float tempC, float humidity);
void sendState(const char* deviceSerialNumber, float tempC, float humidity, const char* dateTime);
void initSX1278();

void appMain(I2C_HandleTypeDef *carrierLcdI2C, SPI_HandleTypeDef *carrierLoRaSPI)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	@ 0x38
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SENSORS_POWER_GPIO_Port, SENSORS_POWER_Pin, GPIO_PIN_SET);
 8002aca:	2201      	movs	r2, #1
 8002acc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ad0:	4859      	ldr	r0, [pc, #356]	@ (8002c38 <appMain+0x178>)
 8002ad2:	f001 fe1a 	bl	800470a <HAL_GPIO_WritePin>

    lcdI2C = carrierLcdI2C;
 8002ad6:	4a59      	ldr	r2, [pc, #356]	@ (8002c3c <appMain+0x17c>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6013      	str	r3, [r2, #0]
    loRaSPI = carrierLoRaSPI;
 8002adc:	4a58      	ldr	r2, [pc, #352]	@ (8002c40 <appMain+0x180>)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6013      	str	r3, [r2, #0]

    initSX1278();
 8002ae2:	f000 f8b5 	bl	8002c50 <_Z10initSX1278v>

    DTH22 dth22(DTH_22_GPIO_Port, DTH_22_Pin);
 8002ae6:	f107 0320 	add.w	r3, r7, #32
 8002aea:	2210      	movs	r2, #16
 8002aec:	4955      	ldr	r1, [pc, #340]	@ (8002c44 <appMain+0x184>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f9d0 	bl	8002e94 <_ZN5DTH22C1EP12GPIO_TypeDeft>

    bool isDisplayTurnedOn = false;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (uint32_t cycleCounter = 1; ;cycleCounter++)
 8002afa:	2301      	movs	r3, #1
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
	{
	    GPIO_PinState systemWakeupButtonPressed = HAL_GPIO_ReadPin(SYSTEM_WAKEUP_GPIO_Port, SYSTEM_WAKEUP_Pin);
 8002afe:	2101      	movs	r1, #1
 8002b00:	4850      	ldr	r0, [pc, #320]	@ (8002c44 <appMain+0x184>)
 8002b02:	f001 fdeb 	bl	80046dc <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	    //TODO known issue: when release button and push it again very fast - display does not turn on
	    if (systemWakeupButtonPressed && !isDisplayTurnedOn)
 8002b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d014      	beq.n	8002b3e <appMain+0x7e>
 8002b14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b18:	f083 0301 	eor.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <appMain+0x7e>
        {
	        isDisplayTurnedOn = true;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, GPIO_PIN_SET);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b2e:	4842      	ldr	r0, [pc, #264]	@ (8002c38 <appMain+0x178>)
 8002b30:	f001 fdeb 	bl	800470a <HAL_GPIO_WritePin>
            ssd1306_Init(lcdI2C);
 8002b34:	4b41      	ldr	r3, [pc, #260]	@ (8002c3c <appMain+0x17c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fbb3 	bl	80032a4 <_Z12ssd1306_InitP17I2C_HandleTypeDef>
        }

	    if (!systemWakeupButtonPressed && isDisplayTurnedOn)
 8002b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <appMain+0x94>
 8002b46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <appMain+0x94>
	    {
	        isDisplayTurnedOn = false;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }

	    HAL_Delay(200);
 8002b54:	20c8      	movs	r0, #200	@ 0xc8
 8002b56:	f001 fb35 	bl	80041c4 <HAL_Delay>

	    if (isDisplayTurnedOn)
 8002b5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <appMain+0xa8>
	    {
	        displayStateCalculationProgress(cycleCounter);
 8002b62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b64:	f000 f92c 	bl	8002dc0 <_Z31displayStateCalculationProgressm>
	    }

	    EnvironmentConditions environmentConditions = dth22.read();
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	f107 0220 	add.w	r2, r7, #32
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f9ae 	bl	8002ed4 <_ZN5DTH224readEv>
	    if (!environmentConditions.isValid)
 8002b78:	7f3b      	ldrb	r3, [r7, #28]
 8002b7a:	f083 0301 	eor.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d14c      	bne.n	8002c1e <appMain+0x15e>
	    {
	        continue;
	    }

	    HAL_Delay(200);
 8002b84:	20c8      	movs	r0, #200	@ 0xc8
 8002b86:	f001 fb1d 	bl	80041c4 <HAL_Delay>

	    EnvironmentConditions environmentConditionsVarification = dth22.read();
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	f107 0220 	add.w	r2, r7, #32
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f99d 	bl	8002ed4 <_ZN5DTH224readEv>
        if (!environmentConditionsVarification.isValid)
 8002b9a:	7c3b      	ldrb	r3, [r7, #16]
 8002b9c:	f083 0301 	eor.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d13d      	bne.n	8002c22 <appMain+0x162>
        {
            continue;
        }

        //if environmentConditions measured nearly at the same time are not similar then try to measure them again
        if (!environmentConditions.isSimilar(environmentConditionsVarification))
 8002ba6:	f107 0208 	add.w	r2, r7, #8
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff45 	bl	8002a40 <_ZN21EnvironmentConditions9isSimilarERS_>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d131      	bne.n	8002c26 <appMain+0x166>
        {
            continue;
        }

	    if (isDisplayTurnedOn)
 8002bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <appMain+0x116>
	    {
	        displayState(environmentConditions.tempC, environmentConditions.humidity);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f91b 	bl	8002e0c <_Z12displayStateff>
	    }

        sendState(deviceSerialNumber, environmentConditions.tempC, environmentConditions.humidity, "10:00 12.03");
 8002bd6:	6979      	ldr	r1, [r7, #20]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <appMain+0x188>)
 8002bdc:	481b      	ldr	r0, [pc, #108]	@ (8002c4c <appMain+0x18c>)
 8002bde:	f000 f87b 	bl	8002cd8 <_Z9sendStatePKcffS0_>

        //keep on when SYSTEM WAKEUP button is pressed
        while(isDisplayTurnedOn && HAL_GPIO_ReadPin(SYSTEM_WAKEUP_GPIO_Port, SYSTEM_WAKEUP_Pin) == GPIO_PIN_SET);
 8002be2:	bf00      	nop
 8002be4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <appMain+0x13e>
 8002bec:	2101      	movs	r1, #1
 8002bee:	4815      	ldr	r0, [pc, #84]	@ (8002c44 <appMain+0x184>)
 8002bf0:	f001 fd74 	bl	80046dc <HAL_GPIO_ReadPin>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <appMain+0x13e>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <appMain+0x140>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ef      	bne.n	8002be4 <appMain+0x124>

        break;
	}

	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, GPIO_PIN_RESET);
 8002c04:	2200      	movs	r2, #0
 8002c06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c0a:	480b      	ldr	r0, [pc, #44]	@ (8002c38 <appMain+0x178>)
 8002c0c:	f001 fd7d 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENSORS_POWER_GPIO_Port, SENSORS_POWER_Pin, GPIO_PIN_RESET);
 8002c10:	2200      	movs	r2, #0
 8002c12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c16:	4808      	ldr	r0, [pc, #32]	@ (8002c38 <appMain+0x178>)
 8002c18:	f001 fd77 	bl	800470a <HAL_GPIO_WritePin>
}
 8002c1c:	e008      	b.n	8002c30 <appMain+0x170>
	        continue;
 8002c1e:	bf00      	nop
 8002c20:	e002      	b.n	8002c28 <appMain+0x168>
            continue;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <appMain+0x168>
            continue;
 8002c26:	bf00      	nop
	for (uint32_t cycleCounter = 1; ;cycleCounter++)
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
	}
 8002c2e:	e766      	b.n	8002afe <appMain+0x3e>
}
 8002c30:	3738      	adds	r7, #56	@ 0x38
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40010c00 	.word	0x40010c00
 8002c3c:	200001fc 	.word	0x200001fc
 8002c40:	20000200 	.word	0x20000200
 8002c44:	40010800 	.word	0x40010800
 8002c48:	0800bca8 	.word	0x0800bca8
 8002c4c:	0800bd04 	.word	0x0800bd04

08002c50 <_Z10initSX1278v>:

void initSX1278()
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af06      	add	r7, sp, #24
    SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002c56:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c58:	4a1c      	ldr	r2, [pc, #112]	@ (8002ccc <_Z10initSX1278v+0x7c>)
 8002c5a:	60da      	str	r2, [r3, #12]
    SX1278_hw.dio0.pin = DIO0_Pin;
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c5e:	2220      	movs	r2, #32
 8002c60:	609a      	str	r2, [r3, #8]
    SX1278_hw.nss.port = NSS_GPIO_Port;
 8002c62:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <_Z10initSX1278v+0x7c>)
 8002c66:	615a      	str	r2, [r3, #20]
    SX1278_hw.nss.pin = NSS_Pin;
 8002c68:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	611a      	str	r2, [r3, #16]
    SX1278_hw.reset.port = RESET_GPIO_Port;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c70:	4a16      	ldr	r2, [pc, #88]	@ (8002ccc <_Z10initSX1278v+0x7c>)
 8002c72:	605a      	str	r2, [r3, #4]
    SX1278_hw.reset.pin = RESET_Pin;
 8002c74:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c76:	2240      	movs	r2, #64	@ 0x40
 8002c78:	601a      	str	r2, [r3, #0]
    SX1278_hw.spi = loRaSPI;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <_Z10initSX1278v+0x80>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c80:	6193      	str	r3, [r2, #24]

    SX1278.hw = &SX1278_hw;
 8002c82:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <_Z10initSX1278v+0x84>)
 8002c84:	4a10      	ldr	r2, [pc, #64]	@ (8002cc8 <_Z10initSX1278v+0x78>)
 8002c86:	601a      	str	r2, [r3, #0]

    SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
 8002c88:	230a      	movs	r3, #10
 8002c8a:	9305      	str	r3, [sp, #20]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9304      	str	r3, [sp, #16]
 8002c90:	2300      	movs	r3, #0
 8002c92:	9303      	str	r3, [sp, #12]
 8002c94:	2307      	movs	r3, #7
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	2301      	movs	r3, #1
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	a307      	add	r3, pc, #28	@ (adr r3, 8002cc0 <_Z10initSX1278v+0x70>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	480b      	ldr	r0, [pc, #44]	@ (8002cd4 <_Z10initSX1278v+0x84>)
 8002ca8:	f7ff fdda 	bl	8002860 <_Z11SX1278_initP8SX1278_tyhhhhhh>

    SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8002cac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002cb0:	2110      	movs	r1, #16
 8002cb2:	4808      	ldr	r0, [pc, #32]	@ (8002cd4 <_Z10initSX1278v+0x84>)
 8002cb4:	f7ff fd2e 	bl	8002714 <_Z18SX1278_LoRaEntryTxP8SX1278_thm>
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	19de5080 	.word	0x19de5080
 8002cc4:	00000000 	.word	0x00000000
 8002cc8:	20000204 	.word	0x20000204
 8002ccc:	40010c00 	.word	0x40010c00
 8002cd0:	20000200 	.word	0x20000200
 8002cd4:	20000220 	.word	0x20000220

08002cd8 <_Z9sendStatePKcffS0_>:

void sendState(const char* deviceSerialNumber, float tempC, float humidity, const char* dateTime)
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b0c6      	sub	sp, #280	@ 0x118
 8002cdc:	af06      	add	r7, sp, #24
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8002ce8:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8002cec:	6013      	str	r3, [r2, #0]
    char payload[100];
    uint8_t payloadLength = sprintf(payload, "%s,%.1f,%.1f,%s", deviceSerialNumber, tempC, humidity, "10:00 12.03");
 8002cee:	68b8      	ldr	r0, [r7, #8]
 8002cf0:	f7fd fb9a 	bl	8000428 <__aeabi_f2d>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fd fb95 	bl	8000428 <__aeabi_f2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002d06:	492a      	ldr	r1, [pc, #168]	@ (8002db0 <_Z9sendStatePKcffS0_+0xd8>)
 8002d08:	9104      	str	r1, [sp, #16]
 8002d0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d0e:	e9cd 4500 	strd	r4, r5, [sp]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4927      	ldr	r1, [pc, #156]	@ (8002db4 <_Z9sendStatePKcffS0_+0xdc>)
 8002d16:	f005 fb8d 	bl	8008434 <siprintf>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc

    uint16_t checkSum = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    for (uint8_t i=0; i<payloadLength; i++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
 8002d2c:	e011      	b.n	8002d52 <_Z9sendStatePKcffS0_+0x7a>
        checkSum += payload[i];
 8002d2e:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8002d32:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d36:	443b      	add	r3, r7
 8002d38:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8002d42:	4413      	add	r3, r2
 8002d44:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    for (uint8_t i=0; i<payloadLength; i++) {
 8002d48:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
 8002d52:	f897 20fd 	ldrb.w	r2, [r7, #253]	@ 0xfd
 8002d56:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d3e7      	bcc.n	8002d2e <_Z9sendStatePKcffS0_+0x56>
    }

    char message[128];
    int messageLength = sprintf(message, "%s,%d", payload, checkSum);
 8002d5e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8002d62:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002d66:	f107 0014 	add.w	r0, r7, #20
 8002d6a:	4913      	ldr	r1, [pc, #76]	@ (8002db8 <_Z9sendStatePKcffS0_+0xe0>)
 8002d6c:	f005 fb62 	bl	8008434 <siprintf>
 8002d70:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    SX1278_standby(&SX1278);
 8002d74:	4811      	ldr	r0, [pc, #68]	@ (8002dbc <_Z9sendStatePKcffS0_+0xe4>)
 8002d76:	f7ff fc93 	bl	80026a0 <_Z14SX1278_standbyP8SX1278_t>

    SX1278_LoRaEntryTx(&SX1278, messageLength, 2000);
 8002d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d84:	4619      	mov	r1, r3
 8002d86:	480d      	ldr	r0, [pc, #52]	@ (8002dbc <_Z9sendStatePKcffS0_+0xe4>)
 8002d88:	f7ff fcc4 	bl	8002714 <_Z18SX1278_LoRaEntryTxP8SX1278_thm>
    SX1278_LoRaTxPacket(&SX1278, (uint8_t*) message, messageLength, 2000);
 8002d8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	f107 0114 	add.w	r1, r7, #20
 8002d96:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d9a:	4808      	ldr	r0, [pc, #32]	@ (8002dbc <_Z9sendStatePKcffS0_+0xe4>)
 8002d9c:	f7ff fd17 	bl	80027ce <_Z19SX1278_LoRaTxPacketP8SX1278_tPhhm>

    SX1278_sleep(&SX1278);
 8002da0:	4806      	ldr	r0, [pc, #24]	@ (8002dbc <_Z9sendStatePKcffS0_+0xe4>)
 8002da2:	f7ff fc8d 	bl	80026c0 <_Z12SX1278_sleepP8SX1278_t>
}
 8002da6:	bf00      	nop
 8002da8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}
 8002db0:	0800bca8 	.word	0x0800bca8
 8002db4:	0800bcb4 	.word	0x0800bcb4
 8002db8:	0800bcc4 	.word	0x0800bcc4
 8002dbc:	20000220 	.word	0x20000220

08002dc0 <_Z31displayStateCalculationProgressm>:

void displayStateCalculationProgress(uint32_t counter)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
//    ssd1306_WriteString(tempDisplay, Font_16x26, White);
//    ssd1306_UpdateScreen(lcdI2C);



    ssd1306_SetCursor(20, 30);
 8002dc8:	211e      	movs	r1, #30
 8002dca:	2014      	movs	r0, #20
 8002dcc:	f000 fcea 	bl	80037a4 <_Z17ssd1306_SetCursorhh>

    if (counter % 2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <_Z31displayStateCalculationProgressm+0x28>
    {
       ssd1306_WriteString("*****", Font_16x26, White);
 8002dda:	4a09      	ldr	r2, [pc, #36]	@ (8002e00 <_Z31displayStateCalculationProgressm+0x40>)
 8002ddc:	2301      	movs	r3, #1
 8002dde:	ca06      	ldmia	r2, {r1, r2}
 8002de0:	4808      	ldr	r0, [pc, #32]	@ (8002e04 <_Z31displayStateCalculationProgressm+0x44>)
 8002de2:	f000 fcb3 	bl	800374c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
 8002de6:	e002      	b.n	8002dee <_Z31displayStateCalculationProgressm+0x2e>
    }
    else
    {
        ssd1306_Fill(Black);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f000 fb7b 	bl	80034e4 <_Z12ssd1306_Fill13SSD1306_COLOR>
    }

    ssd1306_UpdateScreen(lcdI2C);
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <_Z31displayStateCalculationProgressm+0x48>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fb98 	bl	8003528 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000000 	.word	0x20000000
 8002e04:	0800bccc 	.word	0x0800bccc
 8002e08:	200001fc 	.word	0x200001fc

08002e0c <_Z12displayStateff>:

void displayState(float tempC, float humidity)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	@ 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
    char tempDisplay[20];
    sprintf(tempDisplay, "%.1fC", tempC);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd fb06 	bl	8000428 <__aeabi_f2d>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	f107 001c 	add.w	r0, r7, #28
 8002e24:	4917      	ldr	r1, [pc, #92]	@ (8002e84 <_Z12displayStateff+0x78>)
 8002e26:	f005 fb05 	bl	8008434 <siprintf>

    char humidityDisplay[20];
    sprintf(humidityDisplay, "%.1f%%", humidity);
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	f7fd fafc 	bl	8000428 <__aeabi_f2d>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	f107 0008 	add.w	r0, r7, #8
 8002e38:	4913      	ldr	r1, [pc, #76]	@ (8002e88 <_Z12displayStateff+0x7c>)
 8002e3a:	f005 fafb 	bl	8008434 <siprintf>

    ssd1306_Fill(Black);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f000 fb50 	bl	80034e4 <_Z12ssd1306_Fill13SSD1306_COLOR>

    ssd1306_SetCursor(20, 0);
 8002e44:	2100      	movs	r1, #0
 8002e46:	2014      	movs	r0, #20
 8002e48:	f000 fcac 	bl	80037a4 <_Z17ssd1306_SetCursorhh>
    ssd1306_WriteString(tempDisplay, Font_16x26, White);
 8002e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e8c <_Z12displayStateff+0x80>)
 8002e4e:	f107 001c 	add.w	r0, r7, #28
 8002e52:	2301      	movs	r3, #1
 8002e54:	ca06      	ldmia	r2, {r1, r2}
 8002e56:	f000 fc79 	bl	800374c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>

    ssd1306_SetCursor(20, 35);
 8002e5a:	2123      	movs	r1, #35	@ 0x23
 8002e5c:	2014      	movs	r0, #20
 8002e5e:	f000 fca1 	bl	80037a4 <_Z17ssd1306_SetCursorhh>
    ssd1306_WriteString(humidityDisplay, Font_16x26, White);
 8002e62:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <_Z12displayStateff+0x80>)
 8002e64:	f107 0008 	add.w	r0, r7, #8
 8002e68:	2301      	movs	r3, #1
 8002e6a:	ca06      	ldmia	r2, {r1, r2}
 8002e6c:	f000 fc6e 	bl	800374c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>

    ssd1306_UpdateScreen(lcdI2C);
 8002e70:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <_Z12displayStateff+0x84>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fb57 	bl	8003528 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>
}
 8002e7a:	bf00      	nop
 8002e7c:	3730      	adds	r7, #48	@ 0x30
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	0800bcd4 	.word	0x0800bcd4
 8002e88:	0800bcdc 	.word	0x0800bcdc
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	200001fc 	.word	0x200001fc

08002e94 <_ZN5DTH22C1EP12GPIO_TypeDeft>:
#include "dth22.class.h"

DTH22::DTH22(GPIO_TypeDef *gpio, uint16_t gpioPin)
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	22d8      	movs	r2, #216	@ 0xd8
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2250      	movs	r2, #80	@ 0x50
 8002eac:	705a      	strb	r2, [r3, #1]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	709a      	strb	r2, [r3, #2]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2264      	movs	r2, #100	@ 0x64
 8002eb8:	70da      	strb	r2, [r3, #3]
{
	this->gpio = gpio;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	605a      	str	r2, [r3, #4]
	this->gpioPin = gpioPin;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	811a      	strh	r2, [r3, #8]
}
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <_ZN5DTH224readEv>:

EnvironmentConditions DTH22::read()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
	if(!dht22Start())
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	f000 f8ac 	bl	800303c <_ZN5DTH2210dht22StartEv>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f083 0301 	eor.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <_ZN5DTH224readEv+0x34>
	{
	    return EnvironmentConditions {0, 0, false};
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	721a      	strb	r2, [r3, #8]
 8002f06:	e093      	b.n	8003030 <_ZN5DTH224readEv+0x15c>
	}

	uint8_t hum1 = dht22ReadByte();
 8002f08:	6838      	ldr	r0, [r7, #0]
 8002f0a:	f000 f92f 	bl	800316c <_ZN5DTH2213dht22ReadByteEv>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	77fb      	strb	r3, [r7, #31]
	uint8_t hum2 = dht22ReadByte();
 8002f12:	6838      	ldr	r0, [r7, #0]
 8002f14:	f000 f92a 	bl	800316c <_ZN5DTH2213dht22ReadByteEv>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	77bb      	strb	r3, [r7, #30]
	uint8_t tempC1 = dht22ReadByte();
 8002f1c:	6838      	ldr	r0, [r7, #0]
 8002f1e:	f000 f925 	bl	800316c <_ZN5DTH2213dht22ReadByteEv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	777b      	strb	r3, [r7, #29]
	uint8_t tempC2 = dht22ReadByte();
 8002f26:	6838      	ldr	r0, [r7, #0]
 8002f28:	f000 f920 	bl	800316c <_ZN5DTH2213dht22ReadByteEv>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	773b      	strb	r3, [r7, #28]
	uint8_t checkSumReceived = dht22ReadByte();
 8002f30:	6838      	ldr	r0, [r7, #0]
 8002f32:	f000 f91b 	bl	800316c <_ZN5DTH2213dht22ReadByteEv>
 8002f36:	4603      	mov	r3, r0
 8002f38:	76fb      	strb	r3, [r7, #27]
	uint8_t checkSumCalculated = hum1 + hum2 + tempC1 + tempC2;
 8002f3a:	7ffa      	ldrb	r2, [r7, #31]
 8002f3c:	7fbb      	ldrb	r3, [r7, #30]
 8002f3e:	4413      	add	r3, r2
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	7f7b      	ldrb	r3, [r7, #29]
 8002f44:	4413      	add	r3, r2
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	7f3b      	ldrb	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	76bb      	strb	r3, [r7, #26]

	if (checkSumCalculated != checkSumReceived)
 8002f4e:	7eba      	ldrb	r2, [r7, #26]
 8002f50:	7efb      	ldrb	r3, [r7, #27]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d00b      	beq.n	8002f6e <_ZN5DTH224readEv+0x9a>
	{
	    return EnvironmentConditions {0, 0, false};
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	721a      	strb	r2, [r3, #8]
 8002f6c:	e060      	b.n	8003030 <_ZN5DTH224readEv+0x15c>
	}

	float tempC = (float) ((tempC1<<8)|tempC2)/10;
 8002f6e:	7f7b      	ldrb	r3, [r7, #29]
 8002f70:	021a      	lsls	r2, r3, #8
 8002f72:	7f3b      	ldrb	r3, [r7, #28]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd feb0 	bl	8000cdc <__aeabi_i2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	492e      	ldr	r1, [pc, #184]	@ (8003038 <_ZN5DTH224readEv+0x164>)
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd ffb3 	bl	8000eec <__aeabi_fdiv>
 8002f86:	4603      	mov	r3, r0
 8002f88:	617b      	str	r3, [r7, #20]
	float humidity =(float) ((hum1<<8)|hum2)/10;
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
 8002f8c:	021a      	lsls	r2, r3, #8
 8002f8e:	7fbb      	ldrb	r3, [r7, #30]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fea2 	bl	8000cdc <__aeabi_i2f>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4927      	ldr	r1, [pc, #156]	@ (8003038 <_ZN5DTH224readEv+0x164>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd ffa5 	bl	8000eec <__aeabi_fdiv>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	613b      	str	r3, [r7, #16]
	bool isValid = tempC >= MIN_TEMP_C && tempC <= MAX_TEMP_C && humidity >= MIN_HUMIDITY_PERCENT && humidity <= MAX_HUMIDITY_PERCENT;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fe95 	bl	8000cdc <__aeabi_i2f>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7fe f896 	bl	80010e8 <__aeabi_fcmpge>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02b      	beq.n	800301a <_ZN5DTH224readEv+0x146>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fe87 	bl	8000cdc <__aeabi_i2f>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f7fe f87e 	bl	80010d4 <__aeabi_fcmple>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01d      	beq.n	800301a <_ZN5DTH224readEv+0x146>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fe79 	bl	8000cdc <__aeabi_i2f>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4619      	mov	r1, r3
 8002fee:	6938      	ldr	r0, [r7, #16]
 8002ff0:	f7fe f87a 	bl	80010e8 <__aeabi_fcmpge>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00f      	beq.n	800301a <_ZN5DTH224readEv+0x146>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fe6b 	bl	8000cdc <__aeabi_i2f>
 8003006:	4603      	mov	r3, r0
 8003008:	4619      	mov	r1, r3
 800300a:	6938      	ldr	r0, [r7, #16]
 800300c:	f7fe f862 	bl	80010d4 <__aeabi_fcmple>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <_ZN5DTH224readEv+0x146>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <_ZN5DTH224readEv+0x148>
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]

	return EnvironmentConditions {tempC, humidity, isValid};
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	721a      	strb	r2, [r3, #8]
}
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	41200000 	.word	0x41200000

0800303c <_ZN5DTH2210dht22StartEv>:

bool DTH22::dht22Start()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	uint8_t response = false;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	//make GPIO output
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = gpioPin;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	891b      	ldrh	r3, [r3, #8]
 800305c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800305e:	2301      	movs	r3, #1
 8003060:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2302      	movs	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(gpio, &GPIO_InitStructPrivate);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f107 020c 	add.w	r2, r7, #12
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f001 f9ad 	bl	80043d4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin (gpio, gpioPin, GPIO_PIN_RESET);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6858      	ldr	r0, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	891b      	ldrh	r3, [r3, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	4619      	mov	r1, r3
 8003086:	f001 fb40 	bl	800470a <HAL_GPIO_WritePin>
	microDelay (1300);
 800308a:	f240 5014 	movw	r0, #1300	@ 0x514
 800308e:	f000 fe03 	bl	8003c98 <microDelay>

	HAL_GPIO_WritePin (gpio, gpioPin, GPIO_PIN_SET);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6858      	ldr	r0, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	891b      	ldrh	r3, [r3, #8]
 800309a:	2201      	movs	r2, #1
 800309c:	4619      	mov	r1, r3
 800309e:	f001 fb34 	bl	800470a <HAL_GPIO_WritePin>
	microDelay (30);
 80030a2:	201e      	movs	r0, #30
 80030a4:	f000 fdf8 	bl	8003c98 <microDelay>

	//make GPIO input
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(gpio, &GPIO_InitStructPrivate);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f107 020c 	add.w	r2, r7, #12
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 f98a 	bl	80043d4 <HAL_GPIO_Init>
	microDelay (40);
 80030c0:	2028      	movs	r0, #40	@ 0x28
 80030c2:	f000 fde9 	bl	8003c98 <microDelay>

	if (!(HAL_GPIO_ReadPin (gpio, gpioPin)))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	891b      	ldrh	r3, [r3, #8]
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f001 fb03 	bl	80046dc <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d015      	beq.n	8003112 <_ZN5DTH2210dht22StartEv+0xd6>
	{
		microDelay (80);
 80030e6:	2050      	movs	r0, #80	@ 0x50
 80030e8:	f000 fdd6 	bl	8003c98 <microDelay>
		if ((HAL_GPIO_ReadPin (gpio, gpioPin)))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	891b      	ldrh	r3, [r3, #8]
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f001 faf0 	bl	80046dc <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <_ZN5DTH2210dht22StartEv+0xd6>
		{
			 response = true;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	uint32_t pMillis = HAL_GetTick();
 8003112:	f001 f84d 	bl	80041b0 <HAL_GetTick>
 8003116:	4603      	mov	r3, r0
 8003118:	61fb      	str	r3, [r7, #28]
	uint32_t cMillis = HAL_GetTick();
 800311a:	f001 f849 	bl	80041b0 <HAL_GetTick>
 800311e:	4603      	mov	r3, r0
 8003120:	623b      	str	r3, [r7, #32]

	//wait until pin is low
	while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 8003122:	e003      	b.n	800312c <_ZN5DTH2210dht22StartEv+0xf0>
	{
		cMillis = HAL_GetTick();
 8003124:	f001 f844 	bl	80041b0 <HAL_GetTick>
 8003128:	4603      	mov	r3, r0
 800312a:	623b      	str	r3, [r7, #32]
	while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	891b      	ldrh	r3, [r3, #8]
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f001 fad0 	bl	80046dc <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <_ZN5DTH2210dht22StartEv+0x114>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3302      	adds	r3, #2
 8003146:	6a3a      	ldr	r2, [r7, #32]
 8003148:	429a      	cmp	r2, r3
 800314a:	d201      	bcs.n	8003150 <_ZN5DTH2210dht22StartEv+0x114>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <_ZN5DTH2210dht22StartEv+0x116>
 8003150:	2300      	movs	r3, #0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e6      	bne.n	8003124 <_ZN5DTH2210dht22StartEv+0xe8>
	}

	return response;
 8003156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	3728      	adds	r7, #40	@ 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <_ZN5DTH2213dht22ReadByteEv>:


uint8_t DTH22::dht22ReadByte()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	uint8_t byte;

	for (uint8_t bitNumber=0;bitNumber<8;bitNumber++)
 8003174:	2300      	movs	r3, #0
 8003176:	75bb      	strb	r3, [r7, #22]
 8003178:	e074      	b.n	8003264 <_ZN5DTH2213dht22ReadByteEv+0xf8>
	{
		uint32_t pMillis = HAL_GetTick();
 800317a:	f001 f819 	bl	80041b0 <HAL_GetTick>
 800317e:	4603      	mov	r3, r0
 8003180:	60fb      	str	r3, [r7, #12]
		uint32_t cMillis = HAL_GetTick();
 8003182:	f001 f815 	bl	80041b0 <HAL_GetTick>
 8003186:	4603      	mov	r3, r0
 8003188:	613b      	str	r3, [r7, #16]
		while (!(HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 800318a:	e003      	b.n	8003194 <_ZN5DTH2213dht22ReadByteEv+0x28>
		{
			cMillis = HAL_GetTick();
 800318c:	f001 f810 	bl	80041b0 <HAL_GetTick>
 8003190:	4603      	mov	r3, r0
 8003192:	613b      	str	r3, [r7, #16]
		while (!(HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	891b      	ldrh	r3, [r3, #8]
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f001 fa9c 	bl	80046dc <HAL_GPIO_ReadPin>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <_ZN5DTH2213dht22ReadByteEv+0x4c>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3302      	adds	r3, #2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d201      	bcs.n	80031b8 <_ZN5DTH2213dht22ReadByteEv+0x4c>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <_ZN5DTH2213dht22ReadByteEv+0x4e>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <_ZN5DTH2213dht22ReadByteEv+0x20>
		}

		microDelay (40);
 80031be:	2028      	movs	r0, #40	@ 0x28
 80031c0:	f000 fd6a 	bl	8003c98 <microDelay>

		if (HAL_GPIO_ReadPin(gpio, gpioPin))   // if the pin is low
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	891b      	ldrh	r3, [r3, #8]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f001 fa84 	bl	80046dc <HAL_GPIO_ReadPin>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00c      	beq.n	80031fe <_ZN5DTH2213dht22ReadByteEv+0x92>
		{
			byte|= (1<<(7-bitNumber));
 80031e4:	7dbb      	ldrb	r3, [r7, #22]
 80031e6:	f1c3 0307 	rsb	r3, r3, #7
 80031ea:	2201      	movs	r2, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	b25a      	sxtb	r2, r3
 80031f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b25b      	sxtb	r3, r3
 80031fa:	75fb      	strb	r3, [r7, #23]
 80031fc:	e00d      	b.n	800321a <_ZN5DTH2213dht22ReadByteEv+0xae>
		}
		else
		{
			byte&= ~(1<<(7-bitNumber));
 80031fe:	7dbb      	ldrb	r3, [r7, #22]
 8003200:	f1c3 0307 	rsb	r3, r3, #7
 8003204:	2201      	movs	r2, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	b25b      	sxtb	r3, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	b25a      	sxtb	r2, r3
 8003210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003214:	4013      	ands	r3, r2
 8003216:	b25b      	sxtb	r3, r3
 8003218:	75fb      	strb	r3, [r7, #23]
		}

		pMillis = HAL_GetTick();
 800321a:	f000 ffc9 	bl	80041b0 <HAL_GetTick>
 800321e:	4603      	mov	r3, r0
 8003220:	60fb      	str	r3, [r7, #12]
		cMillis = HAL_GetTick();
 8003222:	f000 ffc5 	bl	80041b0 <HAL_GetTick>
 8003226:	4603      	mov	r3, r0
 8003228:	613b      	str	r3, [r7, #16]
		// wait for the pin to go low
		while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 800322a:	e003      	b.n	8003234 <_ZN5DTH2213dht22ReadByteEv+0xc8>
		{
			cMillis = HAL_GetTick();
 800322c:	f000 ffc0 	bl	80041b0 <HAL_GetTick>
 8003230:	4603      	mov	r3, r0
 8003232:	613b      	str	r3, [r7, #16]
		while ((HAL_GPIO_ReadPin (gpio, gpioPin)) && pMillis + 2 > cMillis)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	891b      	ldrh	r3, [r3, #8]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f001 fa4c 	bl	80046dc <HAL_GPIO_ReadPin>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <_ZN5DTH2213dht22ReadByteEv+0xec>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3302      	adds	r3, #2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d201      	bcs.n	8003258 <_ZN5DTH2213dht22ReadByteEv+0xec>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <_ZN5DTH2213dht22ReadByteEv+0xee>
 8003258:	2300      	movs	r3, #0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e6      	bne.n	800322c <_ZN5DTH2213dht22ReadByteEv+0xc0>
	for (uint8_t bitNumber=0;bitNumber<8;bitNumber++)
 800325e:	7dbb      	ldrb	r3, [r7, #22]
 8003260:	3301      	adds	r3, #1
 8003262:	75bb      	strb	r3, [r7, #22]
 8003264:	7dbb      	ldrb	r3, [r7, #22]
 8003266:	2b07      	cmp	r3, #7
 8003268:	d987      	bls.n	800317a <_ZN5DTH2213dht22ReadByteEv+0xe>
		}
	}

	return byte;
 800326a:	7dfb      	ldrb	r3, [r7, #23]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af04      	add	r7, sp, #16
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003280:	230a      	movs	r3, #10
 8003282:	9302      	str	r3, [sp, #8]
 8003284:	2301      	movs	r3, #1
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	1cfb      	adds	r3, r7, #3
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2301      	movs	r3, #1
 800328e:	2200      	movs	r2, #0
 8003290:	2178      	movs	r1, #120	@ 0x78
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f001 fb96 	bl	80049c4 <HAL_I2C_Mem_Write>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <_Z12ssd1306_InitP17I2C_HandleTypeDef>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80032ac:	2064      	movs	r0, #100	@ 0x64
 80032ae:	f000 ff89 	bl	80041c4 <HAL_Delay>
    int status = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80032b6:	21ae      	movs	r1, #174	@ 0xae
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffdb 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4413      	add	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80032c8:	2120      	movs	r1, #32
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffd2 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80032da:	2110      	movs	r1, #16
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffc9 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80032ec:	21b0      	movs	r1, #176	@ 0xb0
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ffc0 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80032fe:	21c8      	movs	r1, #200	@ 0xc8
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ffb7 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8003310:	2100      	movs	r1, #0
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffae 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8003322:	2110      	movs	r1, #16
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffa5 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8003334:	2140      	movs	r1, #64	@ 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ff9c 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8003346:	2181      	movs	r1, #129	@ 0x81
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff93 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4413      	add	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8003358:	21ff      	movs	r1, #255	@ 0xff
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff8a 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800336a:	21a1      	movs	r1, #161	@ 0xa1
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff81 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003372:	4603      	mov	r3, r0
 8003374:	461a      	mov	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 800337c:	21a6      	movs	r1, #166	@ 0xa6
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff78 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800338e:	21a8      	movs	r1, #168	@ 0xa8
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff6f 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80033a0:	213f      	movs	r1, #63	@ 0x3f
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ff66 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80033b2:	21a4      	movs	r1, #164	@ 0xa4
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff5d 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80033c4:	21d3      	movs	r1, #211	@ 0xd3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ff54 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80033d6:	2100      	movs	r1, #0
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff4b 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80033e8:	21d5      	movs	r1, #213	@ 0xd5
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff42 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80033fa:	21f0      	movs	r1, #240	@ 0xf0
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff39 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4413      	add	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 800340c:	21d9      	movs	r1, #217	@ 0xd9
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ff30 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800341e:	2122      	movs	r1, #34	@ 0x22
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff27 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8003430:	21da      	movs	r1, #218	@ 0xda
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ff1e 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8003442:	2112      	movs	r1, #18
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ff15 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003454:	21db      	movs	r1, #219	@ 0xdb
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ff0c 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8003466:	2120      	movs	r1, #32
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff03 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8003478:	218d      	movs	r1, #141	@ 0x8d
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fefa 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800348a:	2114      	movs	r1, #20
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fef1 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 800349c:	21af      	movs	r1, #175	@ 0xaf
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fee8 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x214>
        return 1;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e00f      	b.n	80034d8 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80034b8:	2000      	movs	r0, #0
 80034ba:	f000 f813 	bl	80034e4 <_Z12ssd1306_Fill13SSD1306_COLOR>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f832 	bl	8003528 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80034ca:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80034d0:	4b03      	ldr	r3, [pc, #12]	@ (80034e0 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	715a      	strb	r2, [r3, #5]

    return 0;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000738 	.word	0x20000738

080034e4 <_Z12ssd1306_Fill13SSD1306_COLOR>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e00d      	b.n	8003510 <_Z12ssd1306_Fill13SSD1306_COLOR+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <_Z12ssd1306_Fill13SSD1306_COLOR+0x1a>
 80034fa:	2100      	movs	r1, #0
 80034fc:	e000      	b.n	8003500 <_Z12ssd1306_Fill13SSD1306_COLOR+0x1c>
 80034fe:	21ff      	movs	r1, #255	@ 0xff
 8003500:	4a08      	ldr	r2, [pc, #32]	@ (8003524 <_Z12ssd1306_Fill13SSD1306_COLOR+0x40>)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	460a      	mov	r2, r1
 8003508:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3301      	adds	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003516:	d3ed      	bcc.n	80034f4 <_Z12ssd1306_Fill13SSD1306_COLOR+0x10>
    }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	20000338 	.word	0x20000338

08003528 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af04      	add	r7, sp, #16
 800352e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e020      	b.n	8003578 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	3b50      	subs	r3, #80	@ 0x50
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fe98 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
        ssd1306_WriteCommand(hi2c, 0x00);
 8003544:	2100      	movs	r1, #0
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe94 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
        ssd1306_WriteCommand(hi2c, 0x10);
 800354c:	2110      	movs	r1, #16
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fe90 	bl	8003274 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	01db      	lsls	r3, r3, #7
 8003558:	4a0b      	ldr	r2, [pc, #44]	@ (8003588 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0x60>)
 800355a:	4413      	add	r3, r2
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	9202      	str	r2, [sp, #8]
 8003560:	2280      	movs	r2, #128	@ 0x80
 8003562:	9201      	str	r2, [sp, #4]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2301      	movs	r3, #1
 8003568:	2240      	movs	r2, #64	@ 0x40
 800356a:	2178      	movs	r1, #120	@ 0x78
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 fa29 	bl	80049c4 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3301      	adds	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b07      	cmp	r3, #7
 800357c:	d9db      	bls.n	8003536 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0xe>
    }
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000338 	.word	0x20000338

0800358c <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
 8003596:	460b      	mov	r3, r1
 8003598:	71bb      	strb	r3, [r7, #6]
 800359a:	4613      	mov	r3, r2
 800359c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	db48      	blt.n	8003638 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xac>
 80035a6:	79bb      	ldrb	r3, [r7, #6]
 80035a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80035aa:	d845      	bhi.n	8003638 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xb8>)
 80035ae:	791b      	ldrb	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80035b4:	797b      	ldrb	r3, [r7, #5]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80035c2:	797b      	ldrb	r3, [r7, #5]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11a      	bne.n	80035fe <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035c8:	79fa      	ldrb	r2, [r7, #7]
 80035ca:	79bb      	ldrb	r3, [r7, #6]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	b2d8      	uxtb	r0, r3
 80035d0:	4603      	mov	r3, r0
 80035d2:	01db      	lsls	r3, r3, #7
 80035d4:	4413      	add	r3, r2
 80035d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003648 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	b25a      	sxtb	r2, r3
 80035dc:	79bb      	ldrb	r3, [r7, #6]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b259      	sxtb	r1, r3
 80035ee:	79fa      	ldrb	r2, [r7, #7]
 80035f0:	4603      	mov	r3, r0
 80035f2:	01db      	lsls	r3, r3, #7
 80035f4:	4413      	add	r3, r2
 80035f6:	b2c9      	uxtb	r1, r1
 80035f8:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 80035fa:	54d1      	strb	r1, [r2, r3]
 80035fc:	e01d      	b.n	800363a <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035fe:	79fa      	ldrb	r2, [r7, #7]
 8003600:	79bb      	ldrb	r3, [r7, #6]
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	b2d8      	uxtb	r0, r3
 8003606:	4603      	mov	r3, r0
 8003608:	01db      	lsls	r3, r3, #7
 800360a:	4413      	add	r3, r2
 800360c:	4a0e      	ldr	r2, [pc, #56]	@ (8003648 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	b25a      	sxtb	r2, r3
 8003612:	79bb      	ldrb	r3, [r7, #6]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	b25b      	sxtb	r3, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	b25b      	sxtb	r3, r3
 8003624:	4013      	ands	r3, r2
 8003626:	b259      	sxtb	r1, r3
 8003628:	79fa      	ldrb	r2, [r7, #7]
 800362a:	4603      	mov	r3, r0
 800362c:	01db      	lsls	r3, r3, #7
 800362e:	4413      	add	r3, r2
 8003630:	b2c9      	uxtb	r1, r1
 8003632:	4a05      	ldr	r2, [pc, #20]	@ (8003648 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 8003634:	54d1      	strb	r1, [r2, r3]
 8003636:	e000      	b.n	800363a <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xae>
        return;
 8003638:	bf00      	nop
    }
}
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000738 	.word	0x20000738
 8003648:	20000338 	.word	0x20000338

0800364c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b089      	sub	sp, #36	@ 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	4604      	mov	r4, r0
 8003654:	1d38      	adds	r0, r7, #4
 8003656:	e880 0006 	stmia.w	r0, {r1, r2}
 800365a:	461a      	mov	r2, r3
 800365c:	4623      	mov	r3, r4
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	4613      	mov	r3, r2
 8003662:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003664:	4b38      	ldr	r3, [pc, #224]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	793b      	ldrb	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003670:	dc06      	bgt.n	8003680 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003672:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8003674:	885b      	ldrh	r3, [r3, #2]
 8003676:	461a      	mov	r2, r3
 8003678:	797b      	ldrb	r3, [r7, #5]
 800367a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800367c:	2b3f      	cmp	r3, #63	@ 0x3f
 800367e:	dd01      	ble.n	8003684 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x38>
    {
        // Not enough space on current line
        return 0;
 8003680:	2300      	movs	r3, #0
 8003682:	e05c      	b.n	800373e <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e04c      	b.n	8003724 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	3b20      	subs	r3, #32
 8003690:	7979      	ldrb	r1, [r7, #5]
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4619      	mov	r1, r3
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	440b      	add	r3, r1
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e034      	b.n	8003714 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xc8>
        {
            if ((b << j) & 0x8000)
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d012      	beq.n	80036e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80036ba:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	b2d8      	uxtb	r0, r3
 80036c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80036ca:	885b      	ldrh	r3, [r3, #2]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	7bba      	ldrb	r2, [r7, #14]
 80036d8:	4619      	mov	r1, r3
 80036da:	f7ff ff57 	bl	800358c <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
 80036de:	e016      	b.n	800370e <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80036e0:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	b2d8      	uxtb	r0, r3
 80036ee:	4b16      	ldr	r3, [pc, #88]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80036f0:	885b      	ldrh	r3, [r3, #2]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	b2d9      	uxtb	r1, r3
 80036fc:	7bbb      	ldrb	r3, [r7, #14]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	f7ff ff3f 	bl	800358c <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
        for (j = 0; j < Font.FontWidth; j++)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	3301      	adds	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	793b      	ldrb	r3, [r7, #4]
 8003716:	461a      	mov	r2, r3
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4293      	cmp	r3, r2
 800371c:	d3c5      	bcc.n	80036aa <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	797b      	ldrb	r3, [r7, #5]
 8003726:	461a      	mov	r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4293      	cmp	r3, r2
 800372c:	d3ad      	bcc.n	800368a <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800372e:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	793a      	ldrb	r2, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	b29a      	uxth	r2, r3
 8003738:	4b03      	ldr	r3, [pc, #12]	@ (8003748 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 800373a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	@ 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd90      	pop	{r4, r7, pc}
 8003746:	bf00      	nop
 8003748:	20000738 	.word	0x20000738

0800374c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	1d38      	adds	r0, r7, #4
 8003756:	e880 0006 	stmia.w	r0, {r1, r2}
 800375a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800375c:	e017      	b.n	800378e <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x42>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	7818      	ldrb	r0, [r3, #0]
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	1d3a      	adds	r2, r7, #4
 8003766:	ca06      	ldmia	r2, {r1, r2}
 8003768:	f7ff ff70 	bl	800364c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x3c>
        {
            // Char could not be written
            return *str;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	e008      	b.n	800379a <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x4e>
        }

        // Next char
        str++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3301      	adds	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
    while (*str)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e3      	bne.n	800375e <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x12>
    }

    // Everything ok
    return *str;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	781b      	ldrb	r3, [r3, #0]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <_Z17ssd1306_SetCursorhh>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	460a      	mov	r2, r1
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <_Z17ssd1306_SetCursorhh+0x2c>)
 80037ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80037bc:	79bb      	ldrb	r3, [r7, #6]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <_Z17ssd1306_SetCursorhh+0x2c>)
 80037c2:	805a      	strh	r2, [r3, #2]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000738 	.word	0x20000738

080037d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037d8:	f3bf 8f4f 	dsb	sy
}
 80037dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <__NVIC_SystemReset+0x24>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80037e6:	4904      	ldr	r1, [pc, #16]	@ (80037f8 <__NVIC_SystemReset+0x24>)
 80037e8:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <__NVIC_SystemReset+0x28>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037ee:	f3bf 8f4f 	dsb	sy
}
 80037f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <__NVIC_SystemReset+0x20>
 80037f8:	e000ed00 	.word	0xe000ed00
 80037fc:	05fa0004 	.word	0x05fa0004

08003800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003804:	f000 fc7c 	bl	8004100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003808:	f000 f828 	bl	800385c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800380c:	f000 f998 	bl	8003b40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003810:	f000 f910 	bl	8003a34 <MX_SPI1_Init>
  MX_I2C2_Init();
 8003814:	f000 f87c 	bl	8003910 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003818:	f000 f942 	bl	8003aa0 <MX_TIM1_Init>
  MX_RTC_Init();
 800381c:	f000 f8a6 	bl	800396c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003820:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <main+0x4c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a09      	ldr	r2, [pc, #36]	@ (800384c <main+0x4c>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start(&htim1);
 800382c:	4808      	ldr	r0, [pc, #32]	@ (8003850 <main+0x50>)
 800382e:	f003 fc5f 	bl	80070f0 <HAL_TIM_Base_Start>
  appMain(&hi2c2, &hspi1);
 8003832:	4908      	ldr	r1, [pc, #32]	@ (8003854 <main+0x54>)
 8003834:	4808      	ldr	r0, [pc, #32]	@ (8003858 <main+0x58>)
 8003836:	f7ff f943 	bl	8002ac0 <appMain>

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800383a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800383e:	f001 fc35 	bl	80050ac <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_EnterSTANDBYMode();
 8003842:	f001 fc4f 	bl	80050e4 <HAL_PWR_EnterSTANDBYMode>
  //wake up with RTC alert
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003846:	bf00      	nop
 8003848:	e7fd      	b.n	8003846 <main+0x46>
 800384a:	bf00      	nop
 800384c:	40007000 	.word	0x40007000
 8003850:	20000800 	.word	0x20000800
 8003854:	200007a8 	.word	0x200007a8
 8003858:	20000740 	.word	0x20000740

0800385c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b094      	sub	sp, #80	@ 0x50
 8003860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003862:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003866:	2228      	movs	r2, #40	@ 0x28
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f004 fe45 	bl	80084fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800388c:	230a      	movs	r3, #10
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003890:	2301      	movs	r3, #1
 8003892:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003894:	2310      	movs	r3, #16
 8003896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003898:	2301      	movs	r3, #1
 800389a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800389c:	2302      	movs	r3, #2
 800389e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80038a0:	2300      	movs	r3, #0
 80038a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80038a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80038a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fc30 	bl	8005114 <HAL_RCC_OscConfig>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <SystemClock_Config+0x62>
  {
    Error_Handler();
 80038ba:	f000 fa05 	bl	8003cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038be:	230f      	movs	r3, #15
 80038c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c2:	2302      	movs	r3, #2
 80038c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 fe9c 	bl	8005618 <HAL_RCC_ClockConfig>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80038e6:	f000 f9ef 	bl	8003cc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038ea:	2301      	movs	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038f2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 f81c 	bl	8005934 <HAL_RCCEx_PeriphCLKConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003902:	f000 f9e1 	bl	8003cc8 <Error_Handler>
  }
}
 8003906:	bf00      	nop
 8003908:	3750      	adds	r7, #80	@ 0x50
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003914:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <MX_I2C2_Init+0x50>)
 8003916:	4a13      	ldr	r2, [pc, #76]	@ (8003964 <MX_I2C2_Init+0x54>)
 8003918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800391a:	4b11      	ldr	r3, [pc, #68]	@ (8003960 <MX_I2C2_Init+0x50>)
 800391c:	4a12      	ldr	r2, [pc, #72]	@ (8003968 <MX_I2C2_Init+0x58>)
 800391e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003920:	4b0f      	ldr	r3, [pc, #60]	@ (8003960 <MX_I2C2_Init+0x50>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003926:	4b0e      	ldr	r3, [pc, #56]	@ (8003960 <MX_I2C2_Init+0x50>)
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800392c:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <MX_I2C2_Init+0x50>)
 800392e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003932:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003934:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <MX_I2C2_Init+0x50>)
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800393a:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <MX_I2C2_Init+0x50>)
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003940:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <MX_I2C2_Init+0x50>)
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <MX_I2C2_Init+0x50>)
 8003948:	2200      	movs	r2, #0
 800394a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800394c:	4804      	ldr	r0, [pc, #16]	@ (8003960 <MX_I2C2_Init+0x50>)
 800394e:	f000 fef5 	bl	800473c <HAL_I2C_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003958:	f000 f9b6 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000740 	.word	0x20000740
 8003964:	40005800 	.word	0x40005800
 8003968:	000186a0 	.word	0x000186a0

0800396c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	2100      	movs	r1, #0
 8003978:	460a      	mov	r2, r1
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	460a      	mov	r2, r1
 800397e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003980:	2300      	movs	r3, #0
 8003982:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8003984:	463b      	mov	r3, r7
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800398c:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <MX_RTC_Init+0xc0>)
 800398e:	4a28      	ldr	r2, [pc, #160]	@ (8003a30 <MX_RTC_Init+0xc4>)
 8003990:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003992:	4b26      	ldr	r3, [pc, #152]	@ (8003a2c <MX_RTC_Init+0xc0>)
 8003994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003998:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800399a:	4b24      	ldr	r3, [pc, #144]	@ (8003a2c <MX_RTC_Init+0xc0>)
 800399c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039a0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039a2:	4822      	ldr	r0, [pc, #136]	@ (8003a2c <MX_RTC_Init+0xc0>)
 80039a4:	f002 f932 	bl	8005c0c <HAL_RTC_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80039ae:	f000 f98b 	bl	8003cc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80039be:	f107 030c 	add.w	r3, r7, #12
 80039c2:	2201      	movs	r2, #1
 80039c4:	4619      	mov	r1, r3
 80039c6:	4819      	ldr	r0, [pc, #100]	@ (8003a2c <MX_RTC_Init+0xc0>)
 80039c8:	f002 f9ac 	bl	8005d24 <HAL_RTC_SetTime>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80039d2:	f000 f979 	bl	8003cc8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80039d6:	2301      	movs	r3, #1
 80039d8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80039da:	2301      	movs	r3, #1
 80039dc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80039de:	2301      	movs	r3, #1
 80039e0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80039e6:	f107 0308 	add.w	r3, r7, #8
 80039ea:	2201      	movs	r2, #1
 80039ec:	4619      	mov	r1, r3
 80039ee:	480f      	ldr	r0, [pc, #60]	@ (8003a2c <MX_RTC_Init+0xc0>)
 80039f0:	f002 fb08 	bl	8006004 <HAL_RTC_SetDate>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80039fa:	f000 f965 	bl	8003cc8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003a0e:	463b      	mov	r3, r7
 8003a10:	2201      	movs	r2, #1
 8003a12:	4619      	mov	r1, r3
 8003a14:	4805      	ldr	r0, [pc, #20]	@ (8003a2c <MX_RTC_Init+0xc0>)
 8003a16:	f002 fbab 	bl	8006170 <HAL_RTC_SetAlarm>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8003a20:	f000 f952 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000794 	.word	0x20000794
 8003a30:	40002800 	.word	0x40002800

08003a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a38:	4b17      	ldr	r3, [pc, #92]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a3a:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <MX_SPI1_Init+0x68>)
 8003a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a46:	4b14      	ldr	r3, [pc, #80]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a4c:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a52:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a58:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a66:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a68:	2220      	movs	r2, #32
 8003a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a72:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a78:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a80:	220a      	movs	r2, #10
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a84:	4804      	ldr	r0, [pc, #16]	@ (8003a98 <MX_SPI1_Init+0x64>)
 8003a86:	f002 fead 	bl	80067e4 <HAL_SPI_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a90:	f000 f91a 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	200007a8 	.word	0x200007a8
 8003a9c:	40013000 	.word	0x40013000

08003aa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aa6:	f107 0308 	add.w	r3, r7, #8
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003abc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003abe:	4a1f      	ldr	r2, [pc, #124]	@ (8003b3c <MX_TIM1_Init+0x9c>)
 8003ac0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ace:	4b1a      	ldr	r3, [pc, #104]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ad4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad6:	4b18      	ldr	r3, [pc, #96]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003adc:	4b16      	ldr	r3, [pc, #88]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae2:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ae8:	4813      	ldr	r0, [pc, #76]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003aea:	f003 fab2 	bl	8007052 <HAL_TIM_Base_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003af4:	f000 f8e8 	bl	8003cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	4619      	mov	r1, r3
 8003b04:	480c      	ldr	r0, [pc, #48]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003b06:	f003 fb3d 	bl	8007184 <HAL_TIM_ConfigClockSource>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003b10:	f000 f8da 	bl	8003cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4805      	ldr	r0, [pc, #20]	@ (8003b38 <MX_TIM1_Init+0x98>)
 8003b22:	f003 fcfb 	bl	800751c <HAL_TIMEx_MasterConfigSynchronization>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003b2c:	f000 f8cc 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000800 	.word	0x20000800
 8003b3c:	40012c00 	.word	0x40012c00

08003b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b46:	f107 0310 	add.w	r3, r7, #16
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b54:	4b4c      	ldr	r3, [pc, #304]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a4b      	ldr	r2, [pc, #300]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b5a:	f043 0310 	orr.w	r3, r3, #16
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b49      	ldr	r3, [pc, #292]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b6c:	4b46      	ldr	r3, [pc, #280]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	4a45      	ldr	r2, [pc, #276]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	6193      	str	r3, [r2, #24]
 8003b78:	4b43      	ldr	r3, [pc, #268]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b84:	4b40      	ldr	r3, [pc, #256]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	4a3f      	ldr	r2, [pc, #252]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	6193      	str	r3, [r2, #24]
 8003b90:	4b3d      	ldr	r3, [pc, #244]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	4a39      	ldr	r2, [pc, #228]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003ba2:	f043 0308 	orr.w	r3, r3, #8
 8003ba6:	6193      	str	r3, [r2, #24]
 8003ba8:	4b37      	ldr	r3, [pc, #220]	@ (8003c88 <MX_GPIO_Init+0x148>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTH_22_GPIO_Port, DTH_22_Pin, GPIO_PIN_RESET);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	4834      	ldr	r0, [pc, #208]	@ (8003c8c <MX_GPIO_Init+0x14c>)
 8003bba:	f000 fda6 	bl	800470a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSORS_POWER_Pin|DISPLAY_POWER_Pin, GPIO_PIN_RESET);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003bc4:	4832      	ldr	r0, [pc, #200]	@ (8003c90 <MX_GPIO_Init+0x150>)
 8003bc6:	f000 fda0 	bl	800470a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2148      	movs	r1, #72	@ 0x48
 8003bce:	4830      	ldr	r0, [pc, #192]	@ (8003c90 <MX_GPIO_Init+0x150>)
 8003bd0:	f000 fd9b 	bl	800470a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003bd4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bde:	f107 0310 	add.w	r3, r7, #16
 8003be2:	4619      	mov	r1, r3
 8003be4:	482b      	ldr	r0, [pc, #172]	@ (8003c94 <MX_GPIO_Init+0x154>)
 8003be6:	f000 fbf5 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8003bea:	f649 730e 	movw	r3, #40718	@ 0x9f0e
 8003bee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4824      	ldr	r0, [pc, #144]	@ (8003c8c <MX_GPIO_Init+0x14c>)
 8003bfc:	f000 fbea 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DTH_22_Pin */
  GPIO_InitStruct.Pin = DTH_22_Pin;
 8003c00:	2310      	movs	r3, #16
 8003c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c04:	2301      	movs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DTH_22_GPIO_Port, &GPIO_InitStruct);
 8003c10:	f107 0310 	add.w	r3, r7, #16
 8003c14:	4619      	mov	r1, r3
 8003c16:	481d      	ldr	r0, [pc, #116]	@ (8003c8c <MX_GPIO_Init+0x14c>)
 8003c18:	f000 fbdc 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB15 PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8003c1c:	f24c 3317 	movw	r3, #49943	@ 0xc317
 8003c20:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c22:	2303      	movs	r3, #3
 8003c24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4818      	ldr	r0, [pc, #96]	@ (8003c90 <MX_GPIO_Init+0x150>)
 8003c2e:	f000 fbd1 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSORS_POWER_Pin DISPLAY_POWER_Pin NSS_Pin RESET_Pin */
  GPIO_InitStruct.Pin = SENSORS_POWER_Pin|DISPLAY_POWER_Pin|NSS_Pin|RESET_Pin;
 8003c32:	f243 0348 	movw	r3, #12360	@ 0x3048
 8003c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c40:	2302      	movs	r3, #2
 8003c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4811      	ldr	r0, [pc, #68]	@ (8003c90 <MX_GPIO_Init+0x150>)
 8003c4c:	f000 fbc2 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003c50:	2320      	movs	r3, #32
 8003c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8003c5c:	f107 0310 	add.w	r3, r7, #16
 8003c60:	4619      	mov	r1, r3
 8003c62:	480b      	ldr	r0, [pc, #44]	@ (8003c90 <MX_GPIO_Init+0x150>)
 8003c64:	f000 fbb6 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c70:	2302      	movs	r3, #2
 8003c72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8003c74:	f107 0310 	add.w	r3, r7, #16
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4805      	ldr	r0, [pc, #20]	@ (8003c90 <MX_GPIO_Init+0x150>)
 8003c7c:	f000 fbaa 	bl	80043d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c80:	bf00      	nop
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40010800 	.word	0x40010800
 8003c90:	40010c00 	.word	0x40010c00
 8003c94:	40011000 	.word	0x40011000

08003c98 <microDelay>:

/* USER CODE BEGIN 4 */
void microDelay(uint32_t microSeconds)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8003ca0:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <microDelay+0x2c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < microSeconds);
 8003ca8:	bf00      	nop
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <microDelay+0x2c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d8f9      	bhi.n	8003caa <microDelay+0x12>
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000800 	.word	0x20000800

08003cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    NVIC_SystemReset();
 8003ccc:	f7ff fd82 	bl	80037d4 <__NVIC_SystemReset>

08003cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <HAL_MspInit+0x5c>)
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4a14      	ldr	r2, [pc, #80]	@ (8003d2c <HAL_MspInit+0x5c>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6193      	str	r3, [r2, #24]
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <HAL_MspInit+0x5c>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <HAL_MspInit+0x5c>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8003d2c <HAL_MspInit+0x5c>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	61d3      	str	r3, [r2, #28]
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003d2c <HAL_MspInit+0x5c>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d06:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <HAL_MspInit+0x60>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	@ (8003d30 <HAL_MspInit+0x60>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40010000 	.word	0x40010000

08003d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	f107 0310 	add.w	r3, r7, #16
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a16      	ldr	r2, [pc, #88]	@ (8003da8 <HAL_I2C_MspInit+0x74>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d124      	bne.n	8003d9e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d54:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <HAL_I2C_MspInit+0x78>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4a14      	ldr	r2, [pc, #80]	@ (8003dac <HAL_I2C_MspInit+0x78>)
 8003d5a:	f043 0308 	orr.w	r3, r3, #8
 8003d5e:	6193      	str	r3, [r2, #24]
 8003d60:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <HAL_I2C_MspInit+0x78>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d72:	2312      	movs	r3, #18
 8003d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d76:	2303      	movs	r3, #3
 8003d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	f107 0310 	add.w	r3, r7, #16
 8003d7e:	4619      	mov	r1, r3
 8003d80:	480b      	ldr	r0, [pc, #44]	@ (8003db0 <HAL_I2C_MspInit+0x7c>)
 8003d82:	f000 fb27 	bl	80043d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d86:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <HAL_I2C_MspInit+0x78>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a08      	ldr	r2, [pc, #32]	@ (8003dac <HAL_I2C_MspInit+0x78>)
 8003d8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d90:	61d3      	str	r3, [r2, #28]
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_I2C_MspInit+0x78>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003d9e:	bf00      	nop
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40005800 	.word	0x40005800
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40010c00 	.word	0x40010c00

08003db4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003df0 <HAL_RTC_MspInit+0x3c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d110      	bne.n	8003de8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003dc6:	f001 f965 	bl	8005094 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003dca:	4b0a      	ldr	r3, [pc, #40]	@ (8003df4 <HAL_RTC_MspInit+0x40>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <HAL_RTC_MspInit+0x40>)
 8003dd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003dd4:	61d3      	str	r3, [r2, #28]
 8003dd6:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <HAL_RTC_MspInit+0x40>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003de2:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RTC_MspInit+0x44>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40002800 	.word	0x40002800
 8003df4:	40021000 	.word	0x40021000
 8003df8:	4242043c 	.word	0x4242043c

08003dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e04:	f107 0310 	add.w	r3, r7, #16
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1b      	ldr	r2, [pc, #108]	@ (8003e84 <HAL_SPI_MspInit+0x88>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d12f      	bne.n	8003e7c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <HAL_SPI_MspInit+0x8c>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <HAL_SPI_MspInit+0x8c>)
 8003e22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e26:	6193      	str	r3, [r2, #24]
 8003e28:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <HAL_SPI_MspInit+0x8c>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e34:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <HAL_SPI_MspInit+0x8c>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <HAL_SPI_MspInit+0x8c>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6193      	str	r3, [r2, #24]
 8003e40:	4b11      	ldr	r3, [pc, #68]	@ (8003e88 <HAL_SPI_MspInit+0x8c>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin|LORA_MOSI_Pin;
 8003e4c:	23a0      	movs	r3, #160	@ 0xa0
 8003e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	480b      	ldr	r0, [pc, #44]	@ (8003e8c <HAL_SPI_MspInit+0x90>)
 8003e60:	f000 fab8 	bl	80043d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin;
 8003e64:	2340      	movs	r3, #64	@ 0x40
 8003e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LORA_MISO_GPIO_Port, &GPIO_InitStruct);
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	4619      	mov	r1, r3
 8003e76:	4805      	ldr	r0, [pc, #20]	@ (8003e8c <HAL_SPI_MspInit+0x90>)
 8003e78:	f000 faac 	bl	80043d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003e7c:	bf00      	nop
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40013000 	.word	0x40013000
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40010800 	.word	0x40010800

08003e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a09      	ldr	r2, [pc, #36]	@ (8003ec4 <HAL_TIM_Base_MspInit+0x34>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10b      	bne.n	8003eba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ea2:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <HAL_TIM_Base_MspInit+0x38>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	4a08      	ldr	r2, [pc, #32]	@ (8003ec8 <HAL_TIM_Base_MspInit+0x38>)
 8003ea8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003eac:	6193      	str	r3, [r2, #24]
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_TIM_Base_MspInit+0x38>)
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40021000 	.word	0x40021000

08003ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <NMI_Handler+0x4>

08003ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <HardFault_Handler+0x4>

08003edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <MemManage_Handler+0x4>

08003ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <BusFault_Handler+0x4>

08003eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <UsageFault_Handler+0x4>

08003ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f1c:	f000 f936 	bl	800418c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return 1;
 8003f28:	2301      	movs	r3, #1
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <_kill>:

int _kill(int pid, int sig)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f3c:	f004 fb30 	bl	80085a0 <__errno>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2216      	movs	r2, #22
 8003f44:	601a      	str	r2, [r3, #0]
  return -1;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <_exit>:

void _exit (int status)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ffe7 	bl	8003f32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <_exit+0x12>

08003f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e00a      	b.n	8003f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f7a:	f3af 8000 	nop.w
 8003f7e:	4601      	mov	r1, r0
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	60ba      	str	r2, [r7, #8]
 8003f86:	b2ca      	uxtb	r2, r1
 8003f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	dbf0      	blt.n	8003f7a <_read+0x12>
  }

  return len;
 8003f98:	687b      	ldr	r3, [r7, #4]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e009      	b.n	8003fc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	60ba      	str	r2, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	dbf1      	blt.n	8003fb4 <_write+0x12>
  }
  return len;
 8003fd0:	687b      	ldr	r3, [r7, #4]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <_close>:

int _close(int file)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004000:	605a      	str	r2, [r3, #4]
  return 0;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <_isatty>:

int _isatty(int file)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004016:	2301      	movs	r3, #1
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
	...

0800403c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004044:	4a14      	ldr	r2, [pc, #80]	@ (8004098 <_sbrk+0x5c>)
 8004046:	4b15      	ldr	r3, [pc, #84]	@ (800409c <_sbrk+0x60>)
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004050:	4b13      	ldr	r3, [pc, #76]	@ (80040a0 <_sbrk+0x64>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <_sbrk+0x64>)
 800405a:	4a12      	ldr	r2, [pc, #72]	@ (80040a4 <_sbrk+0x68>)
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <_sbrk+0x64>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d207      	bcs.n	800407c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800406c:	f004 fa98 	bl	80085a0 <__errno>
 8004070:	4603      	mov	r3, r0
 8004072:	220c      	movs	r2, #12
 8004074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800407a:	e009      	b.n	8004090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800407c:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <_sbrk+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004082:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <_sbrk+0x64>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <_sbrk+0x64>)
 800408c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20005000 	.word	0x20005000
 800409c:	00000400 	.word	0x00000400
 80040a0:	20000848 	.word	0x20000848
 80040a4:	200009a0 	.word	0x200009a0

080040a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040b4:	f7ff fff8 	bl	80040a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040b8:	480b      	ldr	r0, [pc, #44]	@ (80040e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80040ba:	490c      	ldr	r1, [pc, #48]	@ (80040ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80040bc:	4a0c      	ldr	r2, [pc, #48]	@ (80040f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c0:	e002      	b.n	80040c8 <LoopCopyDataInit>

080040c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040c6:	3304      	adds	r3, #4

080040c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040cc:	d3f9      	bcc.n	80040c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ce:	4a09      	ldr	r2, [pc, #36]	@ (80040f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040d0:	4c09      	ldr	r4, [pc, #36]	@ (80040f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d4:	e001      	b.n	80040da <LoopFillZerobss>

080040d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d8:	3204      	adds	r2, #4

080040da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040dc:	d3fb      	bcc.n	80040d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040de:	f004 fa65 	bl	80085ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040e2:	f7ff fb8d 	bl	8003800 <main>
  bx lr
 80040e6:	4770      	bx	lr
  ldr r0, =_sdata
 80040e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80040f0:	0800d7f8 	.word	0x0800d7f8
  ldr r2, =_sbss
 80040f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80040f8:	2000099c 	.word	0x2000099c

080040fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040fc:	e7fe      	b.n	80040fc <ADC1_2_IRQHandler>
	...

08004100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004104:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <HAL_Init+0x28>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a07      	ldr	r2, [pc, #28]	@ (8004128 <HAL_Init+0x28>)
 800410a:	f043 0310 	orr.w	r3, r3, #16
 800410e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004110:	2003      	movs	r0, #3
 8004112:	f000 f92b 	bl	800436c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004116:	200f      	movs	r0, #15
 8004118:	f000 f808 	bl	800412c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800411c:	f7ff fdd8 	bl	8003cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40022000 	.word	0x40022000

0800412c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <HAL_InitTick+0x54>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <HAL_InitTick+0x58>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004142:	fbb3 f3f1 	udiv	r3, r3, r1
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f935 	bl	80043ba <HAL_SYSTICK_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e00e      	b.n	8004178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b0f      	cmp	r3, #15
 800415e:	d80a      	bhi.n	8004176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004160:	2200      	movs	r2, #0
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004168:	f000 f90b 	bl	8004382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800416c:	4a06      	ldr	r2, [pc, #24]	@ (8004188 <HAL_InitTick+0x5c>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000008 	.word	0x20000008
 8004184:	20000010 	.word	0x20000010
 8004188:	2000000c 	.word	0x2000000c

0800418c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_IncTick+0x1c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_IncTick+0x20>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4413      	add	r3, r2
 800419c:	4a03      	ldr	r2, [pc, #12]	@ (80041ac <HAL_IncTick+0x20>)
 800419e:	6013      	str	r3, [r2, #0]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	20000010 	.word	0x20000010
 80041ac:	2000084c 	.word	0x2000084c

080041b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return uwTick;
 80041b4:	4b02      	ldr	r3, [pc, #8]	@ (80041c0 <HAL_GetTick+0x10>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	2000084c 	.word	0x2000084c

080041c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_GetTick>
 80041d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041dc:	d005      	beq.n	80041ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041de:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <HAL_Delay+0x44>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ea:	bf00      	nop
 80041ec:	f7ff ffe0 	bl	80041b0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d8f7      	bhi.n	80041ec <HAL_Delay+0x28>
  {
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000010 	.word	0x20000010

0800420c <__NVIC_SetPriorityGrouping>:
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800421c:	4b0c      	ldr	r3, [pc, #48]	@ (8004250 <__NVIC_SetPriorityGrouping+0x44>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004228:	4013      	ands	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800423c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800423e:	4a04      	ldr	r2, [pc, #16]	@ (8004250 <__NVIC_SetPriorityGrouping+0x44>)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	60d3      	str	r3, [r2, #12]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <__NVIC_GetPriorityGrouping>:
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004258:	4b04      	ldr	r3, [pc, #16]	@ (800426c <__NVIC_GetPriorityGrouping+0x18>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	f003 0307 	and.w	r3, r3, #7
}
 8004262:	4618      	mov	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <__NVIC_SetPriority>:
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db0a      	blt.n	800429a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	490c      	ldr	r1, [pc, #48]	@ (80042bc <__NVIC_SetPriority+0x4c>)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	0112      	lsls	r2, r2, #4
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	440b      	add	r3, r1
 8004294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004298:	e00a      	b.n	80042b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4908      	ldr	r1, [pc, #32]	@ (80042c0 <__NVIC_SetPriority+0x50>)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3b04      	subs	r3, #4
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	440b      	add	r3, r1
 80042ae:	761a      	strb	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <NVIC_EncodePriority>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	@ 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f1c3 0307 	rsb	r3, r3, #7
 80042de:	2b04      	cmp	r3, #4
 80042e0:	bf28      	it	cs
 80042e2:	2304      	movcs	r3, #4
 80042e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d902      	bls.n	80042f4 <NVIC_EncodePriority+0x30>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3b03      	subs	r3, #3
 80042f2:	e000      	b.n	80042f6 <NVIC_EncodePriority+0x32>
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	401a      	ands	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800430c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43d9      	mvns	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800431c:	4313      	orrs	r3, r2
}
 800431e:	4618      	mov	r0, r3
 8004320:	3724      	adds	r7, #36	@ 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004338:	d301      	bcc.n	800433e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800433a:	2301      	movs	r3, #1
 800433c:	e00f      	b.n	800435e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <SysTick_Config+0x40>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004346:	210f      	movs	r1, #15
 8004348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800434c:	f7ff ff90 	bl	8004270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <SysTick_Config+0x40>)
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004356:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <SysTick_Config+0x40>)
 8004358:	2207      	movs	r2, #7
 800435a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000e010 	.word	0xe000e010

0800436c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff49 	bl	800420c <__NVIC_SetPriorityGrouping>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004394:	f7ff ff5e 	bl	8004254 <__NVIC_GetPriorityGrouping>
 8004398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	6978      	ldr	r0, [r7, #20]
 80043a0:	f7ff ff90 	bl	80042c4 <NVIC_EncodePriority>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff5f 	bl	8004270 <__NVIC_SetPriority>
}
 80043b2:	bf00      	nop
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ffb0 	bl	8004328 <SysTick_Config>
 80043c8:	4603      	mov	r3, r0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b08b      	sub	sp, #44	@ 0x2c
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043e2:	2300      	movs	r3, #0
 80043e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e6:	e169      	b.n	80046bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043e8:	2201      	movs	r2, #1
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	429a      	cmp	r2, r3
 8004402:	f040 8158 	bne.w	80046b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a9a      	ldr	r2, [pc, #616]	@ (8004674 <HAL_GPIO_Init+0x2a0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d05e      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004410:	4a98      	ldr	r2, [pc, #608]	@ (8004674 <HAL_GPIO_Init+0x2a0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d875      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 8004416:	4a98      	ldr	r2, [pc, #608]	@ (8004678 <HAL_GPIO_Init+0x2a4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d058      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 800441c:	4a96      	ldr	r2, [pc, #600]	@ (8004678 <HAL_GPIO_Init+0x2a4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d86f      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 8004422:	4a96      	ldr	r2, [pc, #600]	@ (800467c <HAL_GPIO_Init+0x2a8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d052      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004428:	4a94      	ldr	r2, [pc, #592]	@ (800467c <HAL_GPIO_Init+0x2a8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d869      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 800442e:	4a94      	ldr	r2, [pc, #592]	@ (8004680 <HAL_GPIO_Init+0x2ac>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d04c      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004434:	4a92      	ldr	r2, [pc, #584]	@ (8004680 <HAL_GPIO_Init+0x2ac>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d863      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 800443a:	4a92      	ldr	r2, [pc, #584]	@ (8004684 <HAL_GPIO_Init+0x2b0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d046      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004440:	4a90      	ldr	r2, [pc, #576]	@ (8004684 <HAL_GPIO_Init+0x2b0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d85d      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 8004446:	2b12      	cmp	r3, #18
 8004448:	d82a      	bhi.n	80044a0 <HAL_GPIO_Init+0xcc>
 800444a:	2b12      	cmp	r3, #18
 800444c:	d859      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <HAL_GPIO_Init+0x80>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	080044cf 	.word	0x080044cf
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044bb 	.word	0x080044bb
 8004460:	080044fd 	.word	0x080044fd
 8004464:	08004503 	.word	0x08004503
 8004468:	08004503 	.word	0x08004503
 800446c:	08004503 	.word	0x08004503
 8004470:	08004503 	.word	0x08004503
 8004474:	08004503 	.word	0x08004503
 8004478:	08004503 	.word	0x08004503
 800447c:	08004503 	.word	0x08004503
 8004480:	08004503 	.word	0x08004503
 8004484:	08004503 	.word	0x08004503
 8004488:	08004503 	.word	0x08004503
 800448c:	08004503 	.word	0x08004503
 8004490:	08004503 	.word	0x08004503
 8004494:	08004503 	.word	0x08004503
 8004498:	080044b1 	.word	0x080044b1
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	4a79      	ldr	r2, [pc, #484]	@ (8004688 <HAL_GPIO_Init+0x2b4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044a6:	e02c      	b.n	8004502 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	623b      	str	r3, [r7, #32]
          break;
 80044ae:	e029      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	3304      	adds	r3, #4
 80044b6:	623b      	str	r3, [r7, #32]
          break;
 80044b8:	e024      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	3308      	adds	r3, #8
 80044c0:	623b      	str	r3, [r7, #32]
          break;
 80044c2:	e01f      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	330c      	adds	r3, #12
 80044ca:	623b      	str	r3, [r7, #32]
          break;
 80044cc:	e01a      	b.n	8004504 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044d6:	2304      	movs	r3, #4
 80044d8:	623b      	str	r3, [r7, #32]
          break;
 80044da:	e013      	b.n	8004504 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044e4:	2308      	movs	r3, #8
 80044e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	611a      	str	r2, [r3, #16]
          break;
 80044ee:	e009      	b.n	8004504 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044f0:	2308      	movs	r3, #8
 80044f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	615a      	str	r2, [r3, #20]
          break;
 80044fa:	e003      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044fc:	2300      	movs	r3, #0
 80044fe:	623b      	str	r3, [r7, #32]
          break;
 8004500:	e000      	b.n	8004504 <HAL_GPIO_Init+0x130>
          break;
 8004502:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2bff      	cmp	r3, #255	@ 0xff
 8004508:	d801      	bhi.n	800450e <HAL_GPIO_Init+0x13a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	e001      	b.n	8004512 <HAL_GPIO_Init+0x13e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2bff      	cmp	r3, #255	@ 0xff
 8004518:	d802      	bhi.n	8004520 <HAL_GPIO_Init+0x14c>
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	e002      	b.n	8004526 <HAL_GPIO_Init+0x152>
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	3b08      	subs	r3, #8
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	210f      	movs	r1, #15
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	6a39      	ldr	r1, [r7, #32]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80b1 	beq.w	80046b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004554:	4b4d      	ldr	r3, [pc, #308]	@ (800468c <HAL_GPIO_Init+0x2b8>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4a4c      	ldr	r2, [pc, #304]	@ (800468c <HAL_GPIO_Init+0x2b8>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6193      	str	r3, [r2, #24]
 8004560:	4b4a      	ldr	r3, [pc, #296]	@ (800468c <HAL_GPIO_Init+0x2b8>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800456c:	4a48      	ldr	r2, [pc, #288]	@ (8004690 <HAL_GPIO_Init+0x2bc>)
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	3302      	adds	r3, #2
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	220f      	movs	r2, #15
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a40      	ldr	r2, [pc, #256]	@ (8004694 <HAL_GPIO_Init+0x2c0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_GPIO_Init+0x1ec>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a3f      	ldr	r2, [pc, #252]	@ (8004698 <HAL_GPIO_Init+0x2c4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00d      	beq.n	80045bc <HAL_GPIO_Init+0x1e8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a3e      	ldr	r2, [pc, #248]	@ (800469c <HAL_GPIO_Init+0x2c8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <HAL_GPIO_Init+0x1e4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3d      	ldr	r2, [pc, #244]	@ (80046a0 <HAL_GPIO_Init+0x2cc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <HAL_GPIO_Init+0x1e0>
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045b4:	2304      	movs	r3, #4
 80045b6:	e004      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e002      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045c0:	2300      	movs	r3, #0
 80045c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c4:	f002 0203 	and.w	r2, r2, #3
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	4093      	lsls	r3, r2
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045d2:	492f      	ldr	r1, [pc, #188]	@ (8004690 <HAL_GPIO_Init+0x2bc>)
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	3302      	adds	r3, #2
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045ec:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	492c      	ldr	r1, [pc, #176]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
 80045f8:	e006      	b.n	8004608 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045fa:	4b2a      	ldr	r3, [pc, #168]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	43db      	mvns	r3, r3
 8004602:	4928      	ldr	r1, [pc, #160]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004604:	4013      	ands	r3, r2
 8004606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004614:	4b23      	ldr	r3, [pc, #140]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4922      	ldr	r1, [pc, #136]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]
 8004620:	e006      	b.n	8004630 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004622:	4b20      	ldr	r3, [pc, #128]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	43db      	mvns	r3, r3
 800462a:	491e      	ldr	r1, [pc, #120]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 800462c:	4013      	ands	r3, r2
 800462e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d006      	beq.n	800464a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800463c:	4b19      	ldr	r3, [pc, #100]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	4918      	ldr	r1, [pc, #96]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
 8004648:	e006      	b.n	8004658 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800464a:	4b16      	ldr	r3, [pc, #88]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	43db      	mvns	r3, r3
 8004652:	4914      	ldr	r1, [pc, #80]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004654:	4013      	ands	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d021      	beq.n	80046a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004664:	4b0f      	ldr	r3, [pc, #60]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	490e      	ldr	r1, [pc, #56]	@ (80046a4 <HAL_GPIO_Init+0x2d0>)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
 8004670:	e021      	b.n	80046b6 <HAL_GPIO_Init+0x2e2>
 8004672:	bf00      	nop
 8004674:	10320000 	.word	0x10320000
 8004678:	10310000 	.word	0x10310000
 800467c:	10220000 	.word	0x10220000
 8004680:	10210000 	.word	0x10210000
 8004684:	10120000 	.word	0x10120000
 8004688:	10110000 	.word	0x10110000
 800468c:	40021000 	.word	0x40021000
 8004690:	40010000 	.word	0x40010000
 8004694:	40010800 	.word	0x40010800
 8004698:	40010c00 	.word	0x40010c00
 800469c:	40011000 	.word	0x40011000
 80046a0:	40011400 	.word	0x40011400
 80046a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046a8:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <HAL_GPIO_Init+0x304>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	4909      	ldr	r1, [pc, #36]	@ (80046d8 <HAL_GPIO_Init+0x304>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	3301      	adds	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f47f ae8e 	bne.w	80043e8 <HAL_GPIO_Init+0x14>
  }
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	372c      	adds	r7, #44	@ 0x2c
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40010400 	.word	0x40010400

080046dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e001      	b.n	80046fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	807b      	strh	r3, [r7, #2]
 8004716:	4613      	mov	r3, r2
 8004718:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800471a:	787b      	ldrb	r3, [r7, #1]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004726:	e003      	b.n	8004730 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	041a      	lsls	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
	...

0800473c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e12b      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fae6 	bl	8003d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	@ 0x24
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800478e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800479e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047a0:	f001 f882 	bl	80058a8 <HAL_RCC_GetPCLK1Freq>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a81      	ldr	r2, [pc, #516]	@ (80049b0 <HAL_I2C_Init+0x274>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d807      	bhi.n	80047c0 <HAL_I2C_Init+0x84>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a80      	ldr	r2, [pc, #512]	@ (80049b4 <HAL_I2C_Init+0x278>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf94      	ite	ls
 80047b8:	2301      	movls	r3, #1
 80047ba:	2300      	movhi	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e006      	b.n	80047ce <HAL_I2C_Init+0x92>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	@ (80049b8 <HAL_I2C_Init+0x27c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0e7      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a78      	ldr	r2, [pc, #480]	@ (80049bc <HAL_I2C_Init+0x280>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	0c9b      	lsrs	r3, r3, #18
 80047e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a6a      	ldr	r2, [pc, #424]	@ (80049b0 <HAL_I2C_Init+0x274>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d802      	bhi.n	8004810 <HAL_I2C_Init+0xd4>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	e009      	b.n	8004824 <HAL_I2C_Init+0xe8>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	4a69      	ldr	r2, [pc, #420]	@ (80049c0 <HAL_I2C_Init+0x284>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	3301      	adds	r3, #1
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	430b      	orrs	r3, r1
 800482a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004836:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	495c      	ldr	r1, [pc, #368]	@ (80049b0 <HAL_I2C_Init+0x274>)
 8004840:	428b      	cmp	r3, r1
 8004842:	d819      	bhi.n	8004878 <HAL_I2C_Init+0x13c>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e59      	subs	r1, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004858:	400b      	ands	r3, r1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_I2C_Init+0x138>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e59      	subs	r1, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fbb1 f3f3 	udiv	r3, r1, r3
 800486c:	3301      	adds	r3, #1
 800486e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004872:	e051      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004874:	2304      	movs	r3, #4
 8004876:	e04f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d111      	bne.n	80048a4 <HAL_I2C_Init+0x168>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e58      	subs	r0, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e012      	b.n	80048ca <HAL_I2C_Init+0x18e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1e58      	subs	r0, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	0099      	lsls	r1, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Init+0x196>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e022      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <HAL_I2C_Init+0x1bc>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1e58      	subs	r0, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	440b      	add	r3, r1
 80048e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e58      	subs	r0, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	0099      	lsls	r1, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	6809      	ldr	r1, [r1, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004946:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6911      	ldr	r1, [r2, #16]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	430b      	orrs	r3, r1
 800495a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	000186a0 	.word	0x000186a0
 80049b4:	001e847f 	.word	0x001e847f
 80049b8:	003d08ff 	.word	0x003d08ff
 80049bc:	431bde83 	.word	0x431bde83
 80049c0:	10624dd3 	.word	0x10624dd3

080049c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	4608      	mov	r0, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	817b      	strh	r3, [r7, #10]
 80049d6:	460b      	mov	r3, r1
 80049d8:	813b      	strh	r3, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049de:	f7ff fbe7 	bl	80041b0 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	f040 80d9 	bne.w	8004ba4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	2319      	movs	r3, #25
 80049f8:	2201      	movs	r2, #1
 80049fa:	496d      	ldr	r1, [pc, #436]	@ (8004bb0 <HAL_I2C_Mem_Write+0x1ec>)
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f971 	bl	8004ce4 <I2C_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e0cc      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_I2C_Mem_Write+0x56>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e0c5      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d007      	beq.n	8004a40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2221      	movs	r2, #33	@ 0x21
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2240      	movs	r2, #64	@ 0x40
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a4d      	ldr	r2, [pc, #308]	@ (8004bb4 <HAL_I2C_Mem_Write+0x1f0>)
 8004a80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a82:	88f8      	ldrh	r0, [r7, #6]
 8004a84:	893a      	ldrh	r2, [r7, #8]
 8004a86:	8979      	ldrh	r1, [r7, #10]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4603      	mov	r3, r0
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f890 	bl	8004bb8 <I2C_RequestMemoryWrite>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d052      	beq.n	8004b44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e081      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa36 	bl	8004f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d107      	bne.n	8004aca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06b      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d11b      	bne.n	8004b44 <HAL_I2C_Mem_Write+0x180>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1aa      	bne.n	8004aa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa29 	bl	8004fa8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d107      	bne.n	8004b74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e016      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	00100002 	.word	0x00100002
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	817b      	strh	r3, [r7, #10]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	813b      	strh	r3, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004be0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f878 	bl	8004ce4 <I2C_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c08:	d103      	bne.n	8004c12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e05f      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	492d      	ldr	r1, [pc, #180]	@ (8004ce0 <I2C_RequestMemoryWrite+0x128>)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f8d3 	bl	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e04c      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c54:	6a39      	ldr	r1, [r7, #32]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f95e 	bl	8004f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d107      	bne.n	8004c7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e02b      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	611a      	str	r2, [r3, #16]
 8004c8e:	e021      	b.n	8004cd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c90:	893b      	ldrh	r3, [r7, #8]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca0:	6a39      	ldr	r1, [r7, #32]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f938 	bl	8004f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d107      	bne.n	8004cc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e005      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cca:	893b      	ldrh	r3, [r7, #8]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	00010002 	.word	0x00010002

08004ce4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf4:	e048      	b.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cfc:	d044      	beq.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfe:	f7ff fa57 	bl	80041b0 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d139      	bne.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d10d      	bne.n	8004d3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	e00c      	b.n	8004d54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	43da      	mvns	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d116      	bne.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e023      	b.n	8004dd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d10d      	bne.n	8004dae <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	e00c      	b.n	8004dc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d093      	beq.n	8004cf6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de6:	e071      	b.n	8004ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d123      	bne.n	8004e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2c:	f043 0204 	orr.w	r2, r3, #4
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e067      	b.n	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e46:	d041      	beq.n	8004ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e48:	f7ff f9b2 	bl	80041b0 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d302      	bcc.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d136      	bne.n	8004ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10c      	bne.n	8004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	e00b      	b.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e021      	b.n	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10c      	bne.n	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	43da      	mvns	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e00b      	b.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f af6d 	bne.w	8004de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f24:	e034      	b.n	8004f90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f886 	bl	8005038 <I2C_IsAcknowledgeFailed>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e034      	b.n	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f3c:	d028      	beq.n	8004f90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7ff f937 	bl	80041b0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d11d      	bne.n	8004f90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	2b80      	cmp	r3, #128	@ 0x80
 8004f60:	d016      	beq.n	8004f90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e007      	b.n	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b80      	cmp	r3, #128	@ 0x80
 8004f9c:	d1c3      	bne.n	8004f26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb4:	e034      	b.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f83e 	bl	8005038 <I2C_IsAcknowledgeFailed>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e034      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fcc:	d028      	beq.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7ff f8ef 	bl	80041b0 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11d      	bne.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d016      	beq.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e007      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d1c3      	bne.n	8004fb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504e:	d11b      	bne.n	8005088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	f043 0204 	orr.w	r2, r3, #4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005098:	4b03      	ldr	r3, [pc, #12]	@ (80050a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]
}
 800509e:	bf00      	nop
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	420e0020 	.word	0x420e0020

080050ac <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050c0:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_PWR_EnableWakeUpPin+0x34>)
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	461a      	mov	r2, r3
 80050d2:	2301      	movs	r3, #1
 80050d4:	6013      	str	r3, [r2, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	10838020 	.word	0x10838020

080050e4 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80050e8:	4b08      	ldr	r3, [pc, #32]	@ (800510c <HAL_PWR_EnterSTANDBYMode+0x28>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a07      	ldr	r2, [pc, #28]	@ (800510c <HAL_PWR_EnterSTANDBYMode+0x28>)
 80050ee:	f043 0302 	orr.w	r3, r3, #2
 80050f2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050f4:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	4a05      	ldr	r2, [pc, #20]	@ (8005110 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005100:	bf30      	wfi
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40007000 	.word	0x40007000
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e272      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8087 	beq.w	8005242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005134:	4b92      	ldr	r3, [pc, #584]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b04      	cmp	r3, #4
 800513e:	d00c      	beq.n	800515a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005140:	4b8f      	ldr	r3, [pc, #572]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b08      	cmp	r3, #8
 800514a:	d112      	bne.n	8005172 <HAL_RCC_OscConfig+0x5e>
 800514c:	4b8c      	ldr	r3, [pc, #560]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005158:	d10b      	bne.n	8005172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515a:	4b89      	ldr	r3, [pc, #548]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d06c      	beq.n	8005240 <HAL_RCC_OscConfig+0x12c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d168      	bne.n	8005240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e24c      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x76>
 800517c:	4b80      	ldr	r3, [pc, #512]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a7f      	ldr	r2, [pc, #508]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	e02e      	b.n	80051e8 <HAL_RCC_OscConfig+0xd4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0x98>
 8005192:	4b7b      	ldr	r3, [pc, #492]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a7a      	ldr	r2, [pc, #488]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b78      	ldr	r3, [pc, #480]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a77      	ldr	r2, [pc, #476]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e01d      	b.n	80051e8 <HAL_RCC_OscConfig+0xd4>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCC_OscConfig+0xbc>
 80051b6:	4b72      	ldr	r3, [pc, #456]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a71      	ldr	r2, [pc, #452]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a6e      	ldr	r2, [pc, #440]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e00b      	b.n	80051e8 <HAL_RCC_OscConfig+0xd4>
 80051d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4b68      	ldr	r3, [pc, #416]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a67      	ldr	r2, [pc, #412]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80051e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d013      	beq.n	8005218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fe ffde 	bl	80041b0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fe ffda 	bl	80041b0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	@ 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e200      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520a:	4b5d      	ldr	r3, [pc, #372]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0xe4>
 8005216:	e014      	b.n	8005242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fe ffca 	bl	80041b0 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005220:	f7fe ffc6 	bl	80041b0 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	@ 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1ec      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005232:	4b53      	ldr	r3, [pc, #332]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x10c>
 800523e:	e000      	b.n	8005242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d063      	beq.n	8005316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800524e:	4b4c      	ldr	r3, [pc, #304]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 030c 	and.w	r3, r3, #12
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800525a:	4b49      	ldr	r3, [pc, #292]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b08      	cmp	r3, #8
 8005264:	d11c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x18c>
 8005266:	4b46      	ldr	r3, [pc, #280]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d116      	bne.n	80052a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005272:	4b43      	ldr	r3, [pc, #268]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_RCC_OscConfig+0x176>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e1c0      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528a:	4b3d      	ldr	r3, [pc, #244]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4939      	ldr	r1, [pc, #228]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529e:	e03a      	b.n	8005316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d020      	beq.n	80052ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a8:	4b36      	ldr	r3, [pc, #216]	@ (8005384 <HAL_RCC_OscConfig+0x270>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ae:	f7fe ff7f 	bl	80041b0 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b6:	f7fe ff7b 	bl	80041b0 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e1a1      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4927      	ldr	r1, [pc, #156]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	600b      	str	r3, [r1, #0]
 80052e8:	e015      	b.n	8005316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ea:	4b26      	ldr	r3, [pc, #152]	@ (8005384 <HAL_RCC_OscConfig+0x270>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fe ff5e 	bl	80041b0 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f8:	f7fe ff5a 	bl	80041b0 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e180      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800530a:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d03a      	beq.n	8005398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d019      	beq.n	800535e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800532a:	4b17      	ldr	r3, [pc, #92]	@ (8005388 <HAL_RCC_OscConfig+0x274>)
 800532c:	2201      	movs	r2, #1
 800532e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005330:	f7fe ff3e 	bl	80041b0 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005338:	f7fe ff3a 	bl	80041b0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e160      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800534a:	4b0d      	ldr	r3, [pc, #52]	@ (8005380 <HAL_RCC_OscConfig+0x26c>)
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005356:	2001      	movs	r0, #1
 8005358:	f000 face 	bl	80058f8 <RCC_Delay>
 800535c:	e01c      	b.n	8005398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800535e:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <HAL_RCC_OscConfig+0x274>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005364:	f7fe ff24 	bl	80041b0 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800536a:	e00f      	b.n	800538c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800536c:	f7fe ff20 	bl	80041b0 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d908      	bls.n	800538c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e146      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
 800537e:	bf00      	nop
 8005380:	40021000 	.word	0x40021000
 8005384:	42420000 	.word	0x42420000
 8005388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800538c:	4b92      	ldr	r3, [pc, #584]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e9      	bne.n	800536c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80a6 	beq.w	80054f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053aa:	4b8b      	ldr	r3, [pc, #556]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b6:	4b88      	ldr	r3, [pc, #544]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	4a87      	ldr	r2, [pc, #540]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c0:	61d3      	str	r3, [r2, #28]
 80053c2:	4b85      	ldr	r3, [pc, #532]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ca:	60bb      	str	r3, [r7, #8]
 80053cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d2:	4b82      	ldr	r3, [pc, #520]	@ (80055dc <HAL_RCC_OscConfig+0x4c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d118      	bne.n	8005410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053de:	4b7f      	ldr	r3, [pc, #508]	@ (80055dc <HAL_RCC_OscConfig+0x4c8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7e      	ldr	r2, [pc, #504]	@ (80055dc <HAL_RCC_OscConfig+0x4c8>)
 80053e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ea:	f7fe fee1 	bl	80041b0 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f2:	f7fe fedd 	bl	80041b0 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b64      	cmp	r3, #100	@ 0x64
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e103      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005404:	4b75      	ldr	r3, [pc, #468]	@ (80055dc <HAL_RCC_OscConfig+0x4c8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f0      	beq.n	80053f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d106      	bne.n	8005426 <HAL_RCC_OscConfig+0x312>
 8005418:	4b6f      	ldr	r3, [pc, #444]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	4a6e      	ldr	r2, [pc, #440]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	6213      	str	r3, [r2, #32]
 8005424:	e02d      	b.n	8005482 <HAL_RCC_OscConfig+0x36e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0x334>
 800542e:	4b6a      	ldr	r3, [pc, #424]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	4a69      	ldr	r2, [pc, #420]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	6213      	str	r3, [r2, #32]
 800543a:	4b67      	ldr	r3, [pc, #412]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4a66      	ldr	r2, [pc, #408]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005440:	f023 0304 	bic.w	r3, r3, #4
 8005444:	6213      	str	r3, [r2, #32]
 8005446:	e01c      	b.n	8005482 <HAL_RCC_OscConfig+0x36e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b05      	cmp	r3, #5
 800544e:	d10c      	bne.n	800546a <HAL_RCC_OscConfig+0x356>
 8005450:	4b61      	ldr	r3, [pc, #388]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	4a60      	ldr	r2, [pc, #384]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005456:	f043 0304 	orr.w	r3, r3, #4
 800545a:	6213      	str	r3, [r2, #32]
 800545c:	4b5e      	ldr	r3, [pc, #376]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	4a5d      	ldr	r2, [pc, #372]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6213      	str	r3, [r2, #32]
 8005468:	e00b      	b.n	8005482 <HAL_RCC_OscConfig+0x36e>
 800546a:	4b5b      	ldr	r3, [pc, #364]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	4a5a      	ldr	r2, [pc, #360]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	6213      	str	r3, [r2, #32]
 8005476:	4b58      	ldr	r3, [pc, #352]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	4a57      	ldr	r2, [pc, #348]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800547c:	f023 0304 	bic.w	r3, r3, #4
 8005480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d015      	beq.n	80054b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548a:	f7fe fe91 	bl	80041b0 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005490:	e00a      	b.n	80054a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005492:	f7fe fe8d 	bl	80041b0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0b1      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a8:	4b4b      	ldr	r3, [pc, #300]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ee      	beq.n	8005492 <HAL_RCC_OscConfig+0x37e>
 80054b4:	e014      	b.n	80054e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b6:	f7fe fe7b 	bl	80041b0 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054be:	f7fe fe77 	bl	80041b0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e09b      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d4:	4b40      	ldr	r3, [pc, #256]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ee      	bne.n	80054be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d105      	bne.n	80054f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4b3c      	ldr	r3, [pc, #240]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	4a3b      	ldr	r2, [pc, #236]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8087 	beq.w	800560a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054fc:	4b36      	ldr	r3, [pc, #216]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 030c 	and.w	r3, r3, #12
 8005504:	2b08      	cmp	r3, #8
 8005506:	d061      	beq.n	80055cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d146      	bne.n	800559e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005510:	4b33      	ldr	r3, [pc, #204]	@ (80055e0 <HAL_RCC_OscConfig+0x4cc>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005516:	f7fe fe4b 	bl	80041b0 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551e:	f7fe fe47 	bl	80041b0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e06d      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005530:	4b29      	ldr	r3, [pc, #164]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005544:	d108      	bne.n	8005558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005546:	4b24      	ldr	r3, [pc, #144]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	4921      	ldr	r1, [pc, #132]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005558:	4b1f      	ldr	r3, [pc, #124]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a19      	ldr	r1, [r3, #32]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	430b      	orrs	r3, r1
 800556a:	491b      	ldr	r1, [pc, #108]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 800556c:	4313      	orrs	r3, r2
 800556e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005570:	4b1b      	ldr	r3, [pc, #108]	@ (80055e0 <HAL_RCC_OscConfig+0x4cc>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005576:	f7fe fe1b 	bl	80041b0 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557e:	f7fe fe17 	bl	80041b0 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e03d      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005590:	4b11      	ldr	r3, [pc, #68]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x46a>
 800559c:	e035      	b.n	800560a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <HAL_RCC_OscConfig+0x4cc>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fe fe04 	bl	80041b0 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fe fe00 	bl	80041b0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e026      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055be:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x498>
 80055ca:	e01e      	b.n	800560a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e019      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40007000 	.word	0x40007000
 80055e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <HAL_RCC_OscConfig+0x500>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d106      	bne.n	8005606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d001      	beq.n	800560a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000

08005618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0d0      	b.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800562c:	4b6a      	ldr	r3, [pc, #424]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d910      	bls.n	800565c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b67      	ldr	r3, [pc, #412]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 0207 	bic.w	r2, r3, #7
 8005642:	4965      	ldr	r1, [pc, #404]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564a:	4b63      	ldr	r3, [pc, #396]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d001      	beq.n	800565c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0b8      	b.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005674:	4b59      	ldr	r3, [pc, #356]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a58      	ldr	r2, [pc, #352]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 800567a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800567e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800568c:	4b53      	ldr	r3, [pc, #332]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4a52      	ldr	r2, [pc, #328]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 8005692:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005698:	4b50      	ldr	r3, [pc, #320]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	494d      	ldr	r1, [pc, #308]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d040      	beq.n	8005738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	4b47      	ldr	r3, [pc, #284]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d115      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e07f      	b.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d107      	bne.n	80056e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d6:	4b41      	ldr	r3, [pc, #260]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e073      	b.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e6:	4b3d      	ldr	r3, [pc, #244]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e06b      	b.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056f6:	4b39      	ldr	r3, [pc, #228]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f023 0203 	bic.w	r2, r3, #3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4936      	ldr	r1, [pc, #216]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 8005704:	4313      	orrs	r3, r2
 8005706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005708:	f7fe fd52 	bl	80041b0 <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	e00a      	b.n	8005726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005710:	f7fe fd4e 	bl	80041b0 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e053      	b.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005726:	4b2d      	ldr	r3, [pc, #180]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 020c 	and.w	r2, r3, #12
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	429a      	cmp	r2, r3
 8005736:	d1eb      	bne.n	8005710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005738:	4b27      	ldr	r3, [pc, #156]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d210      	bcs.n	8005768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005746:	4b24      	ldr	r3, [pc, #144]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 0207 	bic.w	r2, r3, #7
 800574e:	4922      	ldr	r1, [pc, #136]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005756:	4b20      	ldr	r3, [pc, #128]	@ (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d001      	beq.n	8005768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e032      	b.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005774:	4b19      	ldr	r3, [pc, #100]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4916      	ldr	r1, [pc, #88]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	490e      	ldr	r1, [pc, #56]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057a6:	f000 f821 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 80057aa:	4602      	mov	r2, r0
 80057ac:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	490a      	ldr	r1, [pc, #40]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c8>)
 80057b8:	5ccb      	ldrb	r3, [r1, r3]
 80057ba:	fa22 f303 	lsr.w	r3, r2, r3
 80057be:	4a09      	ldr	r2, [pc, #36]	@ (80057e4 <HAL_RCC_ClockConfig+0x1cc>)
 80057c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057c2:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <HAL_RCC_ClockConfig+0x1d0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fcb0 	bl	800412c <HAL_InitTick>

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40022000 	.word	0x40022000
 80057dc:	40021000 	.word	0x40021000
 80057e0:	0800d058 	.word	0x0800d058
 80057e4:	20000008 	.word	0x20000008
 80057e8:	2000000c 	.word	0x2000000c

080057ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	2300      	movs	r3, #0
 8005800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005806:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x94>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b04      	cmp	r3, #4
 8005814:	d002      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x30>
 8005816:	2b08      	cmp	r3, #8
 8005818:	d003      	beq.n	8005822 <HAL_RCC_GetSysClockFreq+0x36>
 800581a:	e027      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800581c:	4b19      	ldr	r3, [pc, #100]	@ (8005884 <HAL_RCC_GetSysClockFreq+0x98>)
 800581e:	613b      	str	r3, [r7, #16]
      break;
 8005820:	e027      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	0c9b      	lsrs	r3, r3, #18
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800582c:	5cd3      	ldrb	r3, [r2, r3]
 800582e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d010      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800583a:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x94>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	0c5b      	lsrs	r3, r3, #17
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	4a11      	ldr	r2, [pc, #68]	@ (800588c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005846:	5cd3      	ldrb	r3, [r2, r3]
 8005848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a0d      	ldr	r2, [pc, #52]	@ (8005884 <HAL_RCC_GetSysClockFreq+0x98>)
 800584e:	fb03 f202 	mul.w	r2, r3, r2
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e004      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a0c      	ldr	r2, [pc, #48]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	613b      	str	r3, [r7, #16]
      break;
 800586a:	e002      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800586c:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <HAL_RCC_GetSysClockFreq+0x98>)
 800586e:	613b      	str	r3, [r7, #16]
      break;
 8005870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005872:	693b      	ldr	r3, [r7, #16]
}
 8005874:	4618      	mov	r0, r3
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
 8005884:	007a1200 	.word	0x007a1200
 8005888:	0800d070 	.word	0x0800d070
 800588c:	0800d080 	.word	0x0800d080
 8005890:	003d0900 	.word	0x003d0900

08005894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005898:	4b02      	ldr	r3, [pc, #8]	@ (80058a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800589a:	681b      	ldr	r3, [r3, #0]
}
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	20000008 	.word	0x20000008

080058a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058ac:	f7ff fff2 	bl	8005894 <HAL_RCC_GetHCLKFreq>
 80058b0:	4602      	mov	r2, r0
 80058b2:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	4903      	ldr	r1, [pc, #12]	@ (80058cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058be:	5ccb      	ldrb	r3, [r1, r3]
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000
 80058cc:	0800d068 	.word	0x0800d068

080058d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058d4:	f7ff ffde 	bl	8005894 <HAL_RCC_GetHCLKFreq>
 80058d8:	4602      	mov	r2, r0
 80058da:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	0adb      	lsrs	r3, r3, #11
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	4903      	ldr	r1, [pc, #12]	@ (80058f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058e6:	5ccb      	ldrb	r3, [r1, r3]
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000
 80058f4:	0800d068 	.word	0x0800d068

080058f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005900:	4b0a      	ldr	r3, [pc, #40]	@ (800592c <RCC_Delay+0x34>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0a      	ldr	r2, [pc, #40]	@ (8005930 <RCC_Delay+0x38>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	0a5b      	lsrs	r3, r3, #9
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	fb02 f303 	mul.w	r3, r2, r3
 8005912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005914:	bf00      	nop
  }
  while (Delay --);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1e5a      	subs	r2, r3, #1
 800591a:	60fa      	str	r2, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f9      	bne.n	8005914 <RCC_Delay+0x1c>
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	20000008 	.word	0x20000008
 8005930:	10624dd3 	.word	0x10624dd3

08005934 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d07d      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005950:	2300      	movs	r3, #0
 8005952:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005954:	4b4f      	ldr	r3, [pc, #316]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10d      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005960:	4b4c      	ldr	r3, [pc, #304]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	4a4b      	ldr	r2, [pc, #300]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800596a:	61d3      	str	r3, [r2, #28]
 800596c:	4b49      	ldr	r3, [pc, #292]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b46      	ldr	r3, [pc, #280]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d118      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005988:	4b43      	ldr	r3, [pc, #268]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a42      	ldr	r2, [pc, #264]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800598e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005992:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005994:	f7fe fc0c 	bl	80041b0 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599a:	e008      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599c:	f7fe fc08 	bl	80041b0 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	@ 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e06d      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059ba:	4b36      	ldr	r3, [pc, #216]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d02e      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d027      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059e2:	4b2e      	ldr	r3, [pc, #184]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059e8:	4b2c      	ldr	r3, [pc, #176]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059ee:	4a29      	ldr	r2, [pc, #164]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d014      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fe fbd7 	bl	80041b0 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a04:	e00a      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a06:	f7fe fbd3 	bl	80041b0 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e036      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ee      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a28:	4b1a      	ldr	r3, [pc, #104]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4917      	ldr	r1, [pc, #92]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a40:	4b14      	ldr	r3, [pc, #80]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a58:	4b0e      	ldr	r3, [pc, #56]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	490b      	ldr	r1, [pc, #44]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a76:	4b07      	ldr	r3, [pc, #28]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4904      	ldr	r1, [pc, #16]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40021000 	.word	0x40021000
 8005a98:	40007000 	.word	0x40007000
 8005a9c:	42420440 	.word	0x42420440

08005aa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	f200 808a 	bhi.w	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d045      	beq.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d075      	beq.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005ad6:	e082      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005ad8:	4b46      	ldr	r3, [pc, #280]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005ade:	4b45      	ldr	r3, [pc, #276]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d07b      	beq.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	0c9b      	lsrs	r3, r3, #18
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	4a41      	ldr	r2, [pc, #260]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005af4:	5cd3      	ldrb	r3, [r2, r3]
 8005af6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d015      	beq.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b02:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	0c5b      	lsrs	r3, r3, #17
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005b0e:	5cd3      	ldrb	r3, [r2, r3]
 8005b10:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005b1c:	4a38      	ldr	r2, [pc, #224]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e004      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4a34      	ldr	r2, [pc, #208]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005b38:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b44:	d102      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	61bb      	str	r3, [r7, #24]
      break;
 8005b4a:	e04a      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4a2d      	ldr	r2, [pc, #180]	@ (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	61bb      	str	r3, [r7, #24]
      break;
 8005b5a:	e042      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005b5c:	4b25      	ldr	r3, [pc, #148]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b6c:	d108      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005b78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e01f      	b.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b8a:	d109      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005b8c:	4b19      	ldr	r3, [pc, #100]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005b98:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e00f      	b.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005baa:	d11c      	bne.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005bac:	4b11      	ldr	r3, [pc, #68]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d016      	beq.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005bb8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005bbc:	61bb      	str	r3, [r7, #24]
      break;
 8005bbe:	e012      	b.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005bc0:	e011      	b.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005bc2:	f7ff fe85 	bl	80058d0 <HAL_RCC_GetPCLK2Freq>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	0b9b      	lsrs	r3, r3, #14
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	61bb      	str	r3, [r7, #24]
      break;
 8005bdc:	e004      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005bde:	bf00      	nop
 8005be0:	e002      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005be6:	bf00      	nop
    }
  }
  return (frequency);
 8005be8:	69bb      	ldr	r3, [r7, #24]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	0800d084 	.word	0x0800d084
 8005bfc:	0800d094 	.word	0x0800d094
 8005c00:	007a1200 	.word	0x007a1200
 8005c04:	003d0900 	.word	0x003d0900
 8005c08:	aaaaaaab 	.word	0xaaaaaaab

08005c0c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e07a      	b.n	8005d18 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	7c5b      	ldrb	r3, [r3, #17]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fe f8be 	bl	8003db4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fb2f 	bl	80062a2 <HAL_RTC_WaitForSynchro>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e061      	b.n	8005d18 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fbe8 	bl	800642a <RTC_EnterInitMode>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e056      	b.n	8005d18 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0207 	bic.w	r2, r2, #7
 8005c78:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005c82:	4b27      	ldr	r3, [pc, #156]	@ (8005d20 <HAL_RTC_Init+0x114>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	4a26      	ldr	r2, [pc, #152]	@ (8005d20 <HAL_RTC_Init+0x114>)
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005c8e:	4b24      	ldr	r3, [pc, #144]	@ (8005d20 <HAL_RTC_Init+0x114>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	4921      	ldr	r1, [pc, #132]	@ (8005d20 <HAL_RTC_Init+0x114>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e00e      	b.n	8005cd0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f7ff fef4 	bl	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cb8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d104      	bne.n	8005cca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e026      	b.n	8005d18 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	0c1a      	lsrs	r2, r3, #16
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f002 020f 	and.w	r2, r2, #15
 8005cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	b292      	uxth	r2, r2
 8005ce6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fbc6 	bl	800647a <RTC_ExitInitMode>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e00c      	b.n	8005d18 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005d16:	2300      	movs	r3, #0
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40006c00 	.word	0x40006c00

08005d24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_RTC_SetTime+0x20>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e080      	b.n	8005e4a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	7c1b      	ldrb	r3, [r3, #16]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_RTC_SetTime+0x30>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e07a      	b.n	8005e4a <HAL_RTC_SetTime+0x126>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d113      	bne.n	8005d8e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005d70:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	1a5b      	subs	r3, r3, r1
 8005d80:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005d82:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005d88:	4413      	add	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	e01e      	b.n	8005dcc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fbb6 	bl	8006504 <RTC_Bcd2ToByte>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005da0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fbab 	bl	8006504 <RTC_Bcd2ToByte>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	4613      	mov	r3, r2
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005dba:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	789b      	ldrb	r3, [r3, #2]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fb9f 	bl	8006504 <RTC_Bcd2ToByte>
 8005dc6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005dc8:	4423      	add	r3, r4
 8005dca:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005dcc:	6979      	ldr	r1, [r7, #20]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fac4 	bl	800635c <RTC_WriteTimeCounter>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e02f      	b.n	8005e4a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0205 	bic.w	r2, r2, #5
 8005df8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fad5 	bl	80063aa <RTC_ReadAlarmCounter>
 8005e00:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e08:	d018      	beq.n	8005e3c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d214      	bcs.n	8005e3c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005e18:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005e1c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005e1e:	6939      	ldr	r1, [r7, #16]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fadb 	bl	80063dc <RTC_WriteAlarmCounter>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e006      	b.n	8005e4a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd90      	pop	{r4, r7, pc}
	...

08005e54 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_RTC_GetTime+0x28>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0b5      	b.n	8005fec <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0ac      	b.n	8005fec <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fa32 	bl	80062fc <RTC_ReadTimeCounter>
 8005e98:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4a55      	ldr	r2, [pc, #340]	@ (8005ff4 <HAL_RTC_GetTime+0x1a0>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0adb      	lsrs	r3, r3, #11
 8005ea4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4b52      	ldr	r3, [pc, #328]	@ (8005ff4 <HAL_RTC_GetTime+0x1a0>)
 8005eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8005eae:	0adb      	lsrs	r3, r3, #11
 8005eb0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	4a4f      	ldr	r2, [pc, #316]	@ (8005ff8 <HAL_RTC_GetTime+0x1a4>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	4a4a      	ldr	r2, [pc, #296]	@ (8005ff4 <HAL_RTC_GetTime+0x1a0>)
 8005ecc:	fba2 1203 	umull	r1, r2, r2, r3
 8005ed0:	0ad2      	lsrs	r2, r2, #11
 8005ed2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005ed6:	fb01 f202 	mul.w	r2, r1, r2
 8005eda:	1a9a      	subs	r2, r3, r2
 8005edc:	4b46      	ldr	r3, [pc, #280]	@ (8005ff8 <HAL_RTC_GetTime+0x1a4>)
 8005ede:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee2:	0959      	lsrs	r1, r3, #5
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	1a5b      	subs	r3, r3, r1
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	1ad1      	subs	r1, r2, r3
 8005eee:	b2ca      	uxtb	r2, r1
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b17      	cmp	r3, #23
 8005ef8:	d955      	bls.n	8005fa6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ffc <HAL_RTC_GetTime+0x1a8>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005f06:	6939      	ldr	r1, [r7, #16]
 8005f08:	4b3c      	ldr	r3, [pc, #240]	@ (8005ffc <HAL_RTC_GetTime+0x1a8>)
 8005f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f0e:	091a      	lsrs	r2, r3, #4
 8005f10:	4613      	mov	r3, r2
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4413      	add	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	1aca      	subs	r2, r1, r3
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fa42 	bl	80063aa <RTC_ReadAlarmCounter>
 8005f26:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f2e:	d008      	beq.n	8005f42 <HAL_RTC_GetTime+0xee>
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d904      	bls.n	8005f42 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	e002      	b.n	8005f48 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f46:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8006000 <HAL_RTC_GetTime+0x1ac>)
 8005f4c:	fb02 f303 	mul.w	r3, r2, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005f56:	69b9      	ldr	r1, [r7, #24]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f9ff 	bl	800635c <RTC_WriteTimeCounter>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e041      	b.n	8005fec <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f6e:	d00c      	beq.n	8005f8a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4413      	add	r3, r2
 8005f76:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fa2e 	bl	80063dc <RTC_WriteAlarmCounter>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e030      	b.n	8005fec <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005f8a:	69f9      	ldr	r1, [r7, #28]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fa25 	bl	80063dc <RTC_WriteAlarmCounter>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e027      	b.n	8005fec <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005f9c:	6979      	ldr	r1, [r7, #20]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 facd 	bl	800653e <RTC_DateUpdate>
 8005fa4:	e003      	b.n	8005fae <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01a      	beq.n	8005fea <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fa86 	bl	80064ca <RTC_ByteToBcd2>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fa7d 	bl	80064ca <RTC_ByteToBcd2>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	789b      	ldrb	r3, [r3, #2]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fa74 	bl	80064ca <RTC_ByteToBcd2>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	91a2b3c5 	.word	0x91a2b3c5
 8005ff8:	88888889 	.word	0x88888889
 8005ffc:	aaaaaaab 	.word	0xaaaaaaab
 8006000:	00015180 	.word	0x00015180

08006004 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_RTC_SetDate+0x24>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e097      	b.n	800615c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	7c1b      	ldrb	r3, [r3, #16]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_RTC_SetDate+0x34>
 8006034:	2302      	movs	r3, #2
 8006036:	e091      	b.n	800615c <HAL_RTC_SetDate+0x158>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2202      	movs	r2, #2
 8006042:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10c      	bne.n	8006064 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	78da      	ldrb	r2, [r3, #3]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	785a      	ldrb	r2, [r3, #1]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	789a      	ldrb	r2, [r3, #2]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	739a      	strb	r2, [r3, #14]
 8006062:	e01a      	b.n	800609a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	78db      	ldrb	r3, [r3, #3]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fa4b 	bl	8006504 <RTC_Bcd2ToByte>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fa42 	bl	8006504 <RTC_Bcd2ToByte>
 8006080:	4603      	mov	r3, r0
 8006082:	461a      	mov	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	789b      	ldrb	r3, [r3, #2]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fa39 	bl	8006504 <RTC_Bcd2ToByte>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	7bdb      	ldrb	r3, [r3, #15]
 800609e:	4618      	mov	r0, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	7b59      	ldrb	r1, [r3, #13]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	7b9b      	ldrb	r3, [r3, #14]
 80060a8:	461a      	mov	r2, r3
 80060aa:	f000 fb23 	bl	80066f4 <RTC_WeekDayNum>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7b1a      	ldrb	r2, [r3, #12]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f91c 	bl	80062fc <RTC_ReadTimeCounter>
 80060c4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4a26      	ldr	r2, [pc, #152]	@ (8006164 <HAL_RTC_SetDate+0x160>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	0adb      	lsrs	r3, r3, #11
 80060d0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b18      	cmp	r3, #24
 80060d6:	d93a      	bls.n	800614e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4a23      	ldr	r2, [pc, #140]	@ (8006168 <HAL_RTC_SetDate+0x164>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	4a22      	ldr	r2, [pc, #136]	@ (800616c <HAL_RTC_SetDate+0x168>)
 80060e4:	fb02 f303 	mul.w	r3, r2, r3
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80060ee:	69f9      	ldr	r1, [r7, #28]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f933 	bl	800635c <RTC_WriteTimeCounter>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2204      	movs	r2, #4
 8006100:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e027      	b.n	800615c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f94c 	bl	80063aa <RTC_ReadAlarmCounter>
 8006112:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800611a:	d018      	beq.n	800614e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	429a      	cmp	r2, r3
 8006122:	d214      	bcs.n	800614e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800612a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800612e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f952 	bl	80063dc <RTC_WriteAlarmCounter>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2204      	movs	r2, #4
 8006142:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e006      	b.n	800615c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	91a2b3c5 	.word	0x91a2b3c5
 8006168:	aaaaaaab 	.word	0xaaaaaaab
 800616c:	00015180 	.word	0x00015180

08006170 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b089      	sub	sp, #36	@ 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	2100      	movs	r1, #0
 8006186:	460a      	mov	r2, r1
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	460a      	mov	r2, r1
 800618c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <HAL_RTC_SetAlarm+0x2a>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e07d      	b.n	800629a <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	7c1b      	ldrb	r3, [r3, #16]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_RTC_SetAlarm+0x3a>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e077      	b.n	800629a <HAL_RTC_SetAlarm+0x12a>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2202      	movs	r2, #2
 80061b4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80061b6:	f107 0314 	add.w	r3, r7, #20
 80061ba:	2200      	movs	r2, #0
 80061bc:	4619      	mov	r1, r3
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fe48 	bl	8005e54 <HAL_RTC_GetTime>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e065      	b.n	800629a <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80061ce:	7d3b      	ldrb	r3, [r7, #20]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80061d6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80061da:	7d7b      	ldrb	r3, [r7, #21]
 80061dc:	4619      	mov	r1, r3
 80061de:	460b      	mov	r3, r1
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	1a5b      	subs	r3, r3, r1
 80061e4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80061e6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80061e8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80061ea:	4413      	add	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d113      	bne.n	800621c <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80061fe:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	4619      	mov	r1, r3
 8006208:	460b      	mov	r3, r1
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	1a5b      	subs	r3, r3, r1
 800620e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006210:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006216:	4413      	add	r3, r2
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	e01e      	b.n	800625a <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f96f 	bl	8006504 <RTC_Bcd2ToByte>
 8006226:	4603      	mov	r3, r0
 8006228:	461a      	mov	r2, r3
 800622a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800622e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f964 	bl	8006504 <RTC_Bcd2ToByte>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	4613      	mov	r3, r2
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006248:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	789b      	ldrb	r3, [r3, #2]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f958 	bl	8006504 <RTC_Bcd2ToByte>
 8006254:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006256:	4423      	add	r3, r4
 8006258:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	429a      	cmp	r2, r3
 8006260:	d205      	bcs.n	800626e <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8006268:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800626c:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800626e:	69f9      	ldr	r1, [r7, #28]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f8b3 	bl	80063dc <RTC_WriteAlarmCounter>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2204      	movs	r2, #4
 8006280:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e006      	b.n	800629a <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006298:	2300      	movs	r3, #0
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3724      	adds	r7, #36	@ 0x24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd90      	pop	{r4, r7, pc}

080062a2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e01d      	b.n	80062f4 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0208 	bic.w	r2, r2, #8
 80062c6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80062c8:	f7fd ff72 	bl	80041b0 <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80062ce:	e009      	b.n	80062e4 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80062d0:	f7fd ff6e 	bl	80041b0 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062de:	d901      	bls.n	80062e4 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e007      	b.n	80062f4 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0ee      	beq.n	80062d0 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	827b      	strh	r3, [r7, #18]
 8006308:	2300      	movs	r3, #0
 800630a:	823b      	strh	r3, [r7, #16]
 800630c:	2300      	movs	r3, #0
 800630e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800632c:	8a7a      	ldrh	r2, [r7, #18]
 800632e:	8a3b      	ldrh	r3, [r7, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	d008      	beq.n	8006346 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006334:	8a3b      	ldrh	r3, [r7, #16]
 8006336:	041a      	lsls	r2, r3, #16
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	b29b      	uxth	r3, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e004      	b.n	8006350 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006346:	8a7b      	ldrh	r3, [r7, #18]
 8006348:	041a      	lsls	r2, r3, #16
 800634a:	89fb      	ldrh	r3, [r7, #14]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006350:	697b      	ldr	r3, [r7, #20]
}
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f85d 	bl	800642a <RTC_EnterInitMode>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	e011      	b.n	80063a0 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	0c12      	lsrs	r2, r2, #16
 8006384:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	b292      	uxth	r2, r2
 800638e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f872 	bl	800647a <RTC_ExitInitMode>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	81fb      	strh	r3, [r7, #14]
 80063b6:	2300      	movs	r3, #0
 80063b8:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80063ca:	89fb      	ldrh	r3, [r7, #14]
 80063cc:	041a      	lsls	r2, r3, #16
 80063ce:	89bb      	ldrh	r3, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f81d 	bl	800642a <RTC_EnterInitMode>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
 80063fa:	e011      	b.n	8006420 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	0c12      	lsrs	r2, r2, #16
 8006404:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	b292      	uxth	r2, r2
 800640e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f832 	bl	800647a <RTC_ExitInitMode>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006436:	f7fd febb 	bl	80041b0 <HAL_GetTick>
 800643a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800643c:	e009      	b.n	8006452 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800643e:	f7fd feb7 	bl	80041b0 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800644c:	d901      	bls.n	8006452 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e00f      	b.n	8006472 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0ee      	beq.n	800643e <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0210 	orr.w	r2, r2, #16
 800646e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0210 	bic.w	r2, r2, #16
 8006494:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006496:	f7fd fe8b 	bl	80041b0 <HAL_GetTick>
 800649a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800649c:	e009      	b.n	80064b2 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800649e:	f7fd fe87 	bl	80041b0 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064ac:	d901      	bls.n	80064b2 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e007      	b.n	80064c2 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0ee      	beq.n	800649e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	4603      	mov	r3, r0
 80064d2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80064d8:	e005      	b.n	80064e6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	3b0a      	subs	r3, #10
 80064e4:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b09      	cmp	r3, #9
 80064ea:	d8f6      	bhi.n	80064da <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	b2db      	uxtb	r3, r3
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	b2da      	uxtb	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	4413      	add	r3, r2
 8006532:	b2db      	uxtb	r3, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	bc80      	pop	{r7}
 800653c:	4770      	bx	lr

0800653e <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	7bdb      	ldrb	r3, [r3, #15]
 800655c:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	7b5b      	ldrb	r3, [r3, #13]
 8006562:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7b9b      	ldrb	r3, [r3, #14]
 8006568:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	e06f      	b.n	8006650 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d011      	beq.n	800659a <RTC_DateUpdate+0x5c>
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d00e      	beq.n	800659a <RTC_DateUpdate+0x5c>
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b05      	cmp	r3, #5
 8006580:	d00b      	beq.n	800659a <RTC_DateUpdate+0x5c>
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b07      	cmp	r3, #7
 8006586:	d008      	beq.n	800659a <RTC_DateUpdate+0x5c>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b08      	cmp	r3, #8
 800658c:	d005      	beq.n	800659a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b0a      	cmp	r3, #10
 8006592:	d002      	beq.n	800659a <RTC_DateUpdate+0x5c>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d117      	bne.n	80065ca <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b1e      	cmp	r3, #30
 800659e:	d803      	bhi.n	80065a8 <RTC_DateUpdate+0x6a>
      {
        day++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80065a6:	e050      	b.n	800664a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b0c      	cmp	r3, #12
 80065ac:	d005      	beq.n	80065ba <RTC_DateUpdate+0x7c>
        {
          month++;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3301      	adds	r3, #1
 80065b2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80065b4:	2301      	movs	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80065b8:	e047      	b.n	800664a <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80065ba:	2301      	movs	r3, #1
 80065bc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80065be:	2301      	movs	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
          year++;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	3301      	adds	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80065c8:	e03f      	b.n	800664a <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d008      	beq.n	80065e2 <RTC_DateUpdate+0xa4>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b06      	cmp	r3, #6
 80065d4:	d005      	beq.n	80065e2 <RTC_DateUpdate+0xa4>
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b09      	cmp	r3, #9
 80065da:	d002      	beq.n	80065e2 <RTC_DateUpdate+0xa4>
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b0b      	cmp	r3, #11
 80065e0:	d10c      	bne.n	80065fc <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b1d      	cmp	r3, #29
 80065e6:	d803      	bhi.n	80065f0 <RTC_DateUpdate+0xb2>
      {
        day++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80065ee:	e02c      	b.n	800664a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	3301      	adds	r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80065f6:	2301      	movs	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80065fa:	e026      	b.n	800664a <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d123      	bne.n	800664a <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b1b      	cmp	r3, #27
 8006606:	d803      	bhi.n	8006610 <RTC_DateUpdate+0xd2>
      {
        day++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e01c      	b.n	800664a <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b1c      	cmp	r3, #28
 8006614:	d111      	bne.n	800663a <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	b29b      	uxth	r3, r3
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f838 	bl	8006690 <RTC_IsLeapYear>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <RTC_DateUpdate+0xf0>
        {
          day++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e00d      	b.n	800664a <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3301      	adds	r3, #1
 8006632:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006634:	2301      	movs	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e007      	b.n	800664a <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b1d      	cmp	r3, #29
 800663e:	d104      	bne.n	800664a <RTC_DateUpdate+0x10c>
      {
        month++;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3301      	adds	r3, #1
 8006644:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006646:	2301      	movs	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	3301      	adds	r3, #1
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d38b      	bcc.n	8006570 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	b2da      	uxtb	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	4619      	mov	r1, r3
 800667a:	6978      	ldr	r0, [r7, #20]
 800667c:	f000 f83a 	bl	80066f4 <RTC_WeekDayNum>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	731a      	strb	r2, [r3, #12]
}
 8006688:	bf00      	nop
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e01d      	b.n	80066e6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	4a10      	ldr	r2, [pc, #64]	@ (80066f0 <RTC_IsLeapYear+0x60>)
 80066ae:	fba2 1203 	umull	r1, r2, r2, r3
 80066b2:	0952      	lsrs	r2, r2, #5
 80066b4:	2164      	movs	r1, #100	@ 0x64
 80066b6:	fb01 f202 	mul.w	r2, r1, r2
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e00f      	b.n	80066e6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	4a09      	ldr	r2, [pc, #36]	@ (80066f0 <RTC_IsLeapYear+0x60>)
 80066ca:	fba2 1203 	umull	r1, r2, r2, r3
 80066ce:	09d2      	lsrs	r2, r2, #7
 80066d0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80066d4:	fb01 f202 	mul.w	r2, r1, r2
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80066e4:	2300      	movs	r3, #0
  }
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr
 80066f0:	51eb851f 	.word	0x51eb851f

080066f4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
 8006700:	4613      	mov	r3, r2
 8006702:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006712:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d82d      	bhi.n	8006776 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	4613      	mov	r3, r2
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	4413      	add	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <RTC_WeekDayNum+0xe4>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	085a      	lsrs	r2, r3, #1
 800672e:	78bb      	ldrb	r3, [r7, #2]
 8006730:	441a      	add	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	441a      	add	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	3b01      	subs	r3, #1
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	441a      	add	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3b01      	subs	r3, #1
 8006742:	4926      	ldr	r1, [pc, #152]	@ (80067dc <RTC_WeekDayNum+0xe8>)
 8006744:	fba1 1303 	umull	r1, r3, r1, r3
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	3b01      	subs	r3, #1
 8006750:	4922      	ldr	r1, [pc, #136]	@ (80067dc <RTC_WeekDayNum+0xe8>)
 8006752:	fba1 1303 	umull	r1, r3, r1, r3
 8006756:	09db      	lsrs	r3, r3, #7
 8006758:	4413      	add	r3, r2
 800675a:	1d1a      	adds	r2, r3, #4
 800675c:	4b20      	ldr	r3, [pc, #128]	@ (80067e0 <RTC_WeekDayNum+0xec>)
 800675e:	fba3 1302 	umull	r1, r3, r3, r2
 8006762:	1ad1      	subs	r1, r2, r3
 8006764:	0849      	lsrs	r1, r1, #1
 8006766:	440b      	add	r3, r1
 8006768:	0899      	lsrs	r1, r3, #2
 800676a:	460b      	mov	r3, r1
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	1a5b      	subs	r3, r3, r1
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e029      	b.n	80067ca <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	4613      	mov	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	4413      	add	r3, r2
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	1a9b      	subs	r3, r3, r2
 8006782:	4a15      	ldr	r2, [pc, #84]	@ (80067d8 <RTC_WeekDayNum+0xe4>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	085a      	lsrs	r2, r3, #1
 800678a:	78bb      	ldrb	r3, [r7, #2]
 800678c:	441a      	add	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	441a      	add	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	089b      	lsrs	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4910      	ldr	r1, [pc, #64]	@ (80067dc <RTC_WeekDayNum+0xe8>)
 800679c:	fba1 1303 	umull	r1, r3, r1, r3
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	490d      	ldr	r1, [pc, #52]	@ (80067dc <RTC_WeekDayNum+0xe8>)
 80067a8:	fba1 1303 	umull	r1, r3, r1, r3
 80067ac:	09db      	lsrs	r3, r3, #7
 80067ae:	4413      	add	r3, r2
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <RTC_WeekDayNum+0xec>)
 80067b4:	fba3 1302 	umull	r1, r3, r3, r2
 80067b8:	1ad1      	subs	r1, r2, r3
 80067ba:	0849      	lsrs	r1, r1, #1
 80067bc:	440b      	add	r3, r1
 80067be:	0899      	lsrs	r1, r3, #2
 80067c0:	460b      	mov	r3, r1
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	1a5b      	subs	r3, r3, r1
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	b2db      	uxtb	r3, r3
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	38e38e39 	.word	0x38e38e39
 80067dc:	51eb851f 	.word	0x51eb851f
 80067e0:	24924925 	.word	0x24924925

080067e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e076      	b.n	80068e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d108      	bne.n	8006810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006806:	d009      	beq.n	800681c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	61da      	str	r2, [r3, #28]
 800680e:	e005      	b.n	800681c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fd fae0 	bl	8003dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006852:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006864:	431a      	orrs	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a0:	ea42 0103 	orr.w	r1, r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	0c1a      	lsrs	r2, r3, #16
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f002 0204 	and.w	r2, r2, #4
 80068c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69da      	ldr	r2, [r3, #28]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068fc:	f7fd fc58 	bl	80041b0 <HAL_GetTick>
 8006900:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b01      	cmp	r3, #1
 8006910:	d001      	beq.n	8006916 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006912:	2302      	movs	r3, #2
 8006914:	e12a      	b.n	8006b6c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_SPI_Transmit+0x36>
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e122      	b.n	8006b6c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_SPI_Transmit+0x48>
 8006930:	2302      	movs	r3, #2
 8006932:	e11b      	b.n	8006b6c <HAL_SPI_Transmit+0x280>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2203      	movs	r2, #3
 8006940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	88fa      	ldrh	r2, [r7, #6]
 800695a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006982:	d10f      	bne.n	80069a4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006992:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ae:	2b40      	cmp	r3, #64	@ 0x40
 80069b0:	d007      	beq.n	80069c2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ca:	d152      	bne.n	8006a72 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_SPI_Transmit+0xee>
 80069d4:	8b7b      	ldrh	r3, [r7, #26]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d145      	bne.n	8006a66 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069de:	881a      	ldrh	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ea:	1c9a      	adds	r2, r3, #2
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069fe:	e032      	b.n	8006a66 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d112      	bne.n	8006a34 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a32:	e018      	b.n	8006a66 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a34:	f7fd fbbc 	bl	80041b0 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d803      	bhi.n	8006a4c <HAL_SPI_Transmit+0x160>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a4a:	d102      	bne.n	8006a52 <HAL_SPI_Transmit+0x166>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e082      	b.n	8006b6c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1c7      	bne.n	8006a00 <HAL_SPI_Transmit+0x114>
 8006a70:	e053      	b.n	8006b1a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_SPI_Transmit+0x194>
 8006a7a:	8b7b      	ldrh	r3, [r7, #26]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d147      	bne.n	8006b10 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006aa6:	e033      	b.n	8006b10 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d113      	bne.n	8006ade <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	7812      	ldrb	r2, [r2, #0]
 8006ac2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006adc:	e018      	b.n	8006b10 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ade:	f7fd fb67 	bl	80041b0 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d803      	bhi.n	8006af6 <HAL_SPI_Transmit+0x20a>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006af4:	d102      	bne.n	8006afc <HAL_SPI_Transmit+0x210>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e02d      	b.n	8006b6c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1c6      	bne.n	8006aa8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fa66 	bl	8006ff0 <SPI_EndRxTxTransaction>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	@ 0x28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b82:	2301      	movs	r3, #1
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b86:	f7fd fb13 	bl	80041b0 <HAL_GetTick>
 8006b8a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b92:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b9a:	887b      	ldrh	r3, [r7, #2]
 8006b9c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b9e:	7ffb      	ldrb	r3, [r7, #31]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d00c      	beq.n	8006bbe <HAL_SPI_TransmitReceive+0x4a>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006baa:	d106      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x46>
 8006bb4:	7ffb      	ldrb	r3, [r7, #31]
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d001      	beq.n	8006bbe <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e17f      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_SPI_TransmitReceive+0x5c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_SPI_TransmitReceive+0x5c>
 8006bca:	887b      	ldrh	r3, [r7, #2]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e174      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x6e>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e16d      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x34a>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d003      	beq.n	8006bfe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2205      	movs	r2, #5
 8006bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	887a      	ldrh	r2, [r7, #2]
 8006c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	887a      	ldrh	r2, [r7, #2]
 8006c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	887a      	ldrh	r2, [r7, #2]
 8006c20:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	887a      	ldrh	r2, [r7, #2]
 8006c26:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3e:	2b40      	cmp	r3, #64	@ 0x40
 8006c40:	d007      	beq.n	8006c52 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c5a:	d17e      	bne.n	8006d5a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <HAL_SPI_TransmitReceive+0xf6>
 8006c64:	8afb      	ldrh	r3, [r7, #22]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d16c      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6e:	881a      	ldrh	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7a:	1c9a      	adds	r2, r3, #2
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c8e:	e059      	b.n	8006d44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d11b      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x162>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d016      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x162>
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d113      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb2:	881a      	ldrh	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbe:	1c9a      	adds	r2, r3, #2
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d119      	bne.n	8006d18 <HAL_SPI_TransmitReceive+0x1a4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d014      	beq.n	8006d18 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	b292      	uxth	r2, r2
 8006cfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d14:	2301      	movs	r3, #1
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d18:	f7fd fa4a 	bl	80041b0 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d80d      	bhi.n	8006d44 <HAL_SPI_TransmitReceive+0x1d0>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d2e:	d009      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e0bc      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1a0      	bne.n	8006c90 <HAL_SPI_TransmitReceive+0x11c>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d19b      	bne.n	8006c90 <HAL_SPI_TransmitReceive+0x11c>
 8006d58:	e082      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <HAL_SPI_TransmitReceive+0x1f4>
 8006d62:	8afb      	ldrh	r3, [r7, #22]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d171      	bne.n	8006e4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	330c      	adds	r3, #12
 8006d72:	7812      	ldrb	r2, [r2, #0]
 8006d74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d8e:	e05d      	b.n	8006e4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d11c      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x264>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d017      	beq.n	8006dd8 <HAL_SPI_TransmitReceive+0x264>
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d114      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	7812      	ldrb	r2, [r2, #0]
 8006dba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d119      	bne.n	8006e1a <HAL_SPI_TransmitReceive+0x2a6>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d014      	beq.n	8006e1a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e16:	2301      	movs	r3, #1
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e1a:	f7fd f9c9 	bl	80041b0 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d803      	bhi.n	8006e32 <HAL_SPI_TransmitReceive+0x2be>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e30:	d102      	bne.n	8006e38 <HAL_SPI_TransmitReceive+0x2c4>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d109      	bne.n	8006e4c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e038      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d19c      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x21c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d197      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e60:	6a3a      	ldr	r2, [r7, #32]
 8006e62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f8c3 	bl	8006ff0 <SPI_EndRxTxTransaction>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d008      	beq.n	8006e82 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e01d      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
  }
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3728      	adds	r7, #40	@ 0x28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ed4:	b2db      	uxtb	r3, r3
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ef0:	f7fd f95e 	bl	80041b0 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	4413      	add	r3, r2
 8006efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f00:	f7fd f956 	bl	80041b0 <HAL_GetTick>
 8006f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f06:	4b39      	ldr	r3, [pc, #228]	@ (8006fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	015b      	lsls	r3, r3, #5
 8006f0c:	0d1b      	lsrs	r3, r3, #20
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f16:	e054      	b.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f1e:	d050      	beq.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f20:	f7fd f946 	bl	80041b0 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d902      	bls.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d13d      	bne.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f4e:	d111      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f58:	d004      	beq.n	8006f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f62:	d107      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f7c:	d10f      	bne.n	8006f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e017      	b.n	8006fe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d19b      	bne.n	8006f18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000008 	.word	0x20000008

08006ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2201      	movs	r2, #1
 8007004:	2102      	movs	r1, #2
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7ff ff6a 	bl	8006ee0 <SPI_WaitFlagStateUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e013      	b.n	800704a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	@ 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff ff57 	bl	8006ee0 <SPI_WaitFlagStateUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703c:	f043 0220 	orr.w	r2, r3, #32
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e000      	b.n	800704a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e041      	b.n	80070e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7fc ff09 	bl	8003e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3304      	adds	r3, #4
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f000 f93f 	bl	8007314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d001      	beq.n	8007108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e032      	b.n	800716e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a18      	ldr	r2, [pc, #96]	@ (8007178 <HAL_TIM_Base_Start+0x88>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_TIM_Base_Start+0x48>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007122:	d009      	beq.n	8007138 <HAL_TIM_Base_Start+0x48>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a14      	ldr	r2, [pc, #80]	@ (800717c <HAL_TIM_Base_Start+0x8c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIM_Base_Start+0x48>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a13      	ldr	r2, [pc, #76]	@ (8007180 <HAL_TIM_Base_Start+0x90>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d111      	bne.n	800715c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b06      	cmp	r3, #6
 8007148:	d010      	beq.n	800716c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	e007      	b.n	800716c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800

08007184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c>
 800719c:	2302      	movs	r3, #2
 800719e:	e0b4      	b.n	800730a <HAL_TIM_ConfigClockSource+0x186>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80071be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d8:	d03e      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0xd4>
 80071da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071de:	f200 8087 	bhi.w	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e6:	f000 8086 	beq.w	80072f6 <HAL_TIM_ConfigClockSource+0x172>
 80071ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ee:	d87f      	bhi.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 80071f0:	2b70      	cmp	r3, #112	@ 0x70
 80071f2:	d01a      	beq.n	800722a <HAL_TIM_ConfigClockSource+0xa6>
 80071f4:	2b70      	cmp	r3, #112	@ 0x70
 80071f6:	d87b      	bhi.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 80071f8:	2b60      	cmp	r3, #96	@ 0x60
 80071fa:	d050      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x11a>
 80071fc:	2b60      	cmp	r3, #96	@ 0x60
 80071fe:	d877      	bhi.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007200:	2b50      	cmp	r3, #80	@ 0x50
 8007202:	d03c      	beq.n	800727e <HAL_TIM_ConfigClockSource+0xfa>
 8007204:	2b50      	cmp	r3, #80	@ 0x50
 8007206:	d873      	bhi.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007208:	2b40      	cmp	r3, #64	@ 0x40
 800720a:	d058      	beq.n	80072be <HAL_TIM_ConfigClockSource+0x13a>
 800720c:	2b40      	cmp	r3, #64	@ 0x40
 800720e:	d86f      	bhi.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007210:	2b30      	cmp	r3, #48	@ 0x30
 8007212:	d064      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x15a>
 8007214:	2b30      	cmp	r3, #48	@ 0x30
 8007216:	d86b      	bhi.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007218:	2b20      	cmp	r3, #32
 800721a:	d060      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x15a>
 800721c:	2b20      	cmp	r3, #32
 800721e:	d867      	bhi.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d05c      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x15a>
 8007224:	2b10      	cmp	r3, #16
 8007226:	d05a      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x15a>
 8007228:	e062      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800723a:	f000 f950 	bl	80074de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800724c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	609a      	str	r2, [r3, #8]
      break;
 8007256:	e04f      	b.n	80072f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007268:	f000 f939 	bl	80074de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800727a:	609a      	str	r2, [r3, #8]
      break;
 800727c:	e03c      	b.n	80072f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728a:	461a      	mov	r2, r3
 800728c:	f000 f8b0 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2150      	movs	r1, #80	@ 0x50
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f907 	bl	80074aa <TIM_ITRx_SetConfig>
      break;
 800729c:	e02c      	b.n	80072f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072aa:	461a      	mov	r2, r3
 80072ac:	f000 f8ce 	bl	800744c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2160      	movs	r1, #96	@ 0x60
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f8f7 	bl	80074aa <TIM_ITRx_SetConfig>
      break;
 80072bc:	e01c      	b.n	80072f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ca:	461a      	mov	r2, r3
 80072cc:	f000 f890 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2140      	movs	r1, #64	@ 0x40
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f8e7 	bl	80074aa <TIM_ITRx_SetConfig>
      break;
 80072dc:	e00c      	b.n	80072f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f000 f8de 	bl	80074aa <TIM_ITRx_SetConfig>
      break;
 80072ee:	e003      	b.n	80072f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
      break;
 80072f4:	e000      	b.n	80072f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a2f      	ldr	r2, [pc, #188]	@ (80073e4 <TIM_Base_SetConfig+0xd0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <TIM_Base_SetConfig+0x30>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007332:	d007      	beq.n	8007344 <TIM_Base_SetConfig+0x30>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a2c      	ldr	r2, [pc, #176]	@ (80073e8 <TIM_Base_SetConfig+0xd4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_Base_SetConfig+0x30>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a2b      	ldr	r2, [pc, #172]	@ (80073ec <TIM_Base_SetConfig+0xd8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d108      	bne.n	8007356 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <TIM_Base_SetConfig+0xd0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00b      	beq.n	8007376 <TIM_Base_SetConfig+0x62>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007364:	d007      	beq.n	8007376 <TIM_Base_SetConfig+0x62>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a1f      	ldr	r2, [pc, #124]	@ (80073e8 <TIM_Base_SetConfig+0xd4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_Base_SetConfig+0x62>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a1e      	ldr	r2, [pc, #120]	@ (80073ec <TIM_Base_SetConfig+0xd8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d108      	bne.n	8007388 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800737c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a0d      	ldr	r2, [pc, #52]	@ (80073e4 <TIM_Base_SetConfig+0xd0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d103      	bne.n	80073bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d005      	beq.n	80073da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f023 0201 	bic.w	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	611a      	str	r2, [r3, #16]
  }
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800

080073f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0201 	bic.w	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800741a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f023 030a 	bic.w	r3, r3, #10
 800742c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr

0800744c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0210 	bic.w	r2, r3, #16
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	031b      	lsls	r3, r3, #12
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007488:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	621a      	str	r2, [r3, #32]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr

080074aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f043 0307 	orr.w	r3, r3, #7
 80074cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	609a      	str	r2, [r3, #8]
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr

080074de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	021a      	lsls	r2, r3, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	431a      	orrs	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4313      	orrs	r3, r2
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	609a      	str	r2, [r3, #8]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007530:	2302      	movs	r3, #2
 8007532:	e046      	b.n	80075c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a16      	ldr	r2, [pc, #88]	@ (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007580:	d009      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a12      	ldr	r2, [pc, #72]	@ (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a10      	ldr	r2, [pc, #64]	@ (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d10c      	bne.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800759c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40000400 	.word	0x40000400
 80075d4:	40000800 	.word	0x40000800

080075d8 <__cvt>:
 80075d8:	2b00      	cmp	r3, #0
 80075da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075de:	461d      	mov	r5, r3
 80075e0:	bfbb      	ittet	lt
 80075e2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80075e6:	461d      	movlt	r5, r3
 80075e8:	2300      	movge	r3, #0
 80075ea:	232d      	movlt	r3, #45	@ 0x2d
 80075ec:	b088      	sub	sp, #32
 80075ee:	4614      	mov	r4, r2
 80075f0:	bfb8      	it	lt
 80075f2:	4614      	movlt	r4, r2
 80075f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80075f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80075f8:	7013      	strb	r3, [r2, #0]
 80075fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007600:	f023 0820 	bic.w	r8, r3, #32
 8007604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007608:	d005      	beq.n	8007616 <__cvt+0x3e>
 800760a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800760e:	d100      	bne.n	8007612 <__cvt+0x3a>
 8007610:	3601      	adds	r6, #1
 8007612:	2302      	movs	r3, #2
 8007614:	e000      	b.n	8007618 <__cvt+0x40>
 8007616:	2303      	movs	r3, #3
 8007618:	aa07      	add	r2, sp, #28
 800761a:	9204      	str	r2, [sp, #16]
 800761c:	aa06      	add	r2, sp, #24
 800761e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007622:	e9cd 3600 	strd	r3, r6, [sp]
 8007626:	4622      	mov	r2, r4
 8007628:	462b      	mov	r3, r5
 800762a:	f001 f891 	bl	8008750 <_dtoa_r>
 800762e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007632:	4607      	mov	r7, r0
 8007634:	d119      	bne.n	800766a <__cvt+0x92>
 8007636:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007638:	07db      	lsls	r3, r3, #31
 800763a:	d50e      	bpl.n	800765a <__cvt+0x82>
 800763c:	eb00 0906 	add.w	r9, r0, r6
 8007640:	2200      	movs	r2, #0
 8007642:	2300      	movs	r3, #0
 8007644:	4620      	mov	r0, r4
 8007646:	4629      	mov	r1, r5
 8007648:	f7f9 f9ae 	bl	80009a8 <__aeabi_dcmpeq>
 800764c:	b108      	cbz	r0, 8007652 <__cvt+0x7a>
 800764e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007652:	2230      	movs	r2, #48	@ 0x30
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	454b      	cmp	r3, r9
 8007658:	d31e      	bcc.n	8007698 <__cvt+0xc0>
 800765a:	4638      	mov	r0, r7
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007660:	1bdb      	subs	r3, r3, r7
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	b008      	add	sp, #32
 8007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800766e:	eb00 0906 	add.w	r9, r0, r6
 8007672:	d1e5      	bne.n	8007640 <__cvt+0x68>
 8007674:	7803      	ldrb	r3, [r0, #0]
 8007676:	2b30      	cmp	r3, #48	@ 0x30
 8007678:	d10a      	bne.n	8007690 <__cvt+0xb8>
 800767a:	2200      	movs	r2, #0
 800767c:	2300      	movs	r3, #0
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f9 f991 	bl	80009a8 <__aeabi_dcmpeq>
 8007686:	b918      	cbnz	r0, 8007690 <__cvt+0xb8>
 8007688:	f1c6 0601 	rsb	r6, r6, #1
 800768c:	f8ca 6000 	str.w	r6, [sl]
 8007690:	f8da 3000 	ldr.w	r3, [sl]
 8007694:	4499      	add	r9, r3
 8007696:	e7d3      	b.n	8007640 <__cvt+0x68>
 8007698:	1c59      	adds	r1, r3, #1
 800769a:	9107      	str	r1, [sp, #28]
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	e7d9      	b.n	8007654 <__cvt+0x7c>

080076a0 <__exponent>:
 80076a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076a2:	2900      	cmp	r1, #0
 80076a4:	bfb6      	itet	lt
 80076a6:	232d      	movlt	r3, #45	@ 0x2d
 80076a8:	232b      	movge	r3, #43	@ 0x2b
 80076aa:	4249      	neglt	r1, r1
 80076ac:	2909      	cmp	r1, #9
 80076ae:	7002      	strb	r2, [r0, #0]
 80076b0:	7043      	strb	r3, [r0, #1]
 80076b2:	dd29      	ble.n	8007708 <__exponent+0x68>
 80076b4:	f10d 0307 	add.w	r3, sp, #7
 80076b8:	461d      	mov	r5, r3
 80076ba:	270a      	movs	r7, #10
 80076bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80076c0:	461a      	mov	r2, r3
 80076c2:	fb07 1416 	mls	r4, r7, r6, r1
 80076c6:	3430      	adds	r4, #48	@ 0x30
 80076c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076cc:	460c      	mov	r4, r1
 80076ce:	2c63      	cmp	r4, #99	@ 0x63
 80076d0:	4631      	mov	r1, r6
 80076d2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80076d6:	dcf1      	bgt.n	80076bc <__exponent+0x1c>
 80076d8:	3130      	adds	r1, #48	@ 0x30
 80076da:	1e94      	subs	r4, r2, #2
 80076dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076e0:	4623      	mov	r3, r4
 80076e2:	1c41      	adds	r1, r0, #1
 80076e4:	42ab      	cmp	r3, r5
 80076e6:	d30a      	bcc.n	80076fe <__exponent+0x5e>
 80076e8:	f10d 0309 	add.w	r3, sp, #9
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	42ac      	cmp	r4, r5
 80076f0:	bf88      	it	hi
 80076f2:	2300      	movhi	r3, #0
 80076f4:	3302      	adds	r3, #2
 80076f6:	4403      	add	r3, r0
 80076f8:	1a18      	subs	r0, r3, r0
 80076fa:	b003      	add	sp, #12
 80076fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007702:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007706:	e7ed      	b.n	80076e4 <__exponent+0x44>
 8007708:	2330      	movs	r3, #48	@ 0x30
 800770a:	3130      	adds	r1, #48	@ 0x30
 800770c:	7083      	strb	r3, [r0, #2]
 800770e:	70c1      	strb	r1, [r0, #3]
 8007710:	1d03      	adds	r3, r0, #4
 8007712:	e7f1      	b.n	80076f8 <__exponent+0x58>

08007714 <_printf_float>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	b091      	sub	sp, #68	@ 0x44
 800771a:	460c      	mov	r4, r1
 800771c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007720:	4616      	mov	r6, r2
 8007722:	461f      	mov	r7, r3
 8007724:	4605      	mov	r5, r0
 8007726:	f000 fef1 	bl	800850c <_localeconv_r>
 800772a:	6803      	ldr	r3, [r0, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	9308      	str	r3, [sp, #32]
 8007730:	f7f8 fd0e 	bl	8000150 <strlen>
 8007734:	2300      	movs	r3, #0
 8007736:	930e      	str	r3, [sp, #56]	@ 0x38
 8007738:	f8d8 3000 	ldr.w	r3, [r8]
 800773c:	9009      	str	r0, [sp, #36]	@ 0x24
 800773e:	3307      	adds	r3, #7
 8007740:	f023 0307 	bic.w	r3, r3, #7
 8007744:	f103 0208 	add.w	r2, r3, #8
 8007748:	f894 a018 	ldrb.w	sl, [r4, #24]
 800774c:	f8d4 b000 	ldr.w	fp, [r4]
 8007750:	f8c8 2000 	str.w	r2, [r8]
 8007754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007758:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800775c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800775e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007762:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800776a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800776e:	4b9c      	ldr	r3, [pc, #624]	@ (80079e0 <_printf_float+0x2cc>)
 8007770:	f7f9 f94c 	bl	8000a0c <__aeabi_dcmpun>
 8007774:	bb70      	cbnz	r0, 80077d4 <_printf_float+0xc0>
 8007776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800777a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800777e:	4b98      	ldr	r3, [pc, #608]	@ (80079e0 <_printf_float+0x2cc>)
 8007780:	f7f9 f926 	bl	80009d0 <__aeabi_dcmple>
 8007784:	bb30      	cbnz	r0, 80077d4 <_printf_float+0xc0>
 8007786:	2200      	movs	r2, #0
 8007788:	2300      	movs	r3, #0
 800778a:	4640      	mov	r0, r8
 800778c:	4649      	mov	r1, r9
 800778e:	f7f9 f915 	bl	80009bc <__aeabi_dcmplt>
 8007792:	b110      	cbz	r0, 800779a <_printf_float+0x86>
 8007794:	232d      	movs	r3, #45	@ 0x2d
 8007796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800779a:	4a92      	ldr	r2, [pc, #584]	@ (80079e4 <_printf_float+0x2d0>)
 800779c:	4b92      	ldr	r3, [pc, #584]	@ (80079e8 <_printf_float+0x2d4>)
 800779e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80077a2:	bf94      	ite	ls
 80077a4:	4690      	movls	r8, r2
 80077a6:	4698      	movhi	r8, r3
 80077a8:	2303      	movs	r3, #3
 80077aa:	f04f 0900 	mov.w	r9, #0
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	f02b 0304 	bic.w	r3, fp, #4
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	4633      	mov	r3, r6
 80077b8:	4621      	mov	r1, r4
 80077ba:	4628      	mov	r0, r5
 80077bc:	9700      	str	r7, [sp, #0]
 80077be:	aa0f      	add	r2, sp, #60	@ 0x3c
 80077c0:	f000 f9d4 	bl	8007b6c <_printf_common>
 80077c4:	3001      	adds	r0, #1
 80077c6:	f040 8090 	bne.w	80078ea <_printf_float+0x1d6>
 80077ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077ce:	b011      	add	sp, #68	@ 0x44
 80077d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f9 f916 	bl	8000a0c <__aeabi_dcmpun>
 80077e0:	b148      	cbz	r0, 80077f6 <_printf_float+0xe2>
 80077e2:	464b      	mov	r3, r9
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfb8      	it	lt
 80077e8:	232d      	movlt	r3, #45	@ 0x2d
 80077ea:	4a80      	ldr	r2, [pc, #512]	@ (80079ec <_printf_float+0x2d8>)
 80077ec:	bfb8      	it	lt
 80077ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077f2:	4b7f      	ldr	r3, [pc, #508]	@ (80079f0 <_printf_float+0x2dc>)
 80077f4:	e7d3      	b.n	800779e <_printf_float+0x8a>
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	d13f      	bne.n	8007880 <_printf_float+0x16c>
 8007800:	2306      	movs	r3, #6
 8007802:	6063      	str	r3, [r4, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	9206      	str	r2, [sp, #24]
 800780e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007810:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007814:	aa0d      	add	r2, sp, #52	@ 0x34
 8007816:	9203      	str	r2, [sp, #12]
 8007818:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800781c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007820:	6863      	ldr	r3, [r4, #4]
 8007822:	4642      	mov	r2, r8
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4628      	mov	r0, r5
 8007828:	464b      	mov	r3, r9
 800782a:	910a      	str	r1, [sp, #40]	@ 0x28
 800782c:	f7ff fed4 	bl	80075d8 <__cvt>
 8007830:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007832:	4680      	mov	r8, r0
 8007834:	2947      	cmp	r1, #71	@ 0x47
 8007836:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007838:	d128      	bne.n	800788c <_printf_float+0x178>
 800783a:	1cc8      	adds	r0, r1, #3
 800783c:	db02      	blt.n	8007844 <_printf_float+0x130>
 800783e:	6863      	ldr	r3, [r4, #4]
 8007840:	4299      	cmp	r1, r3
 8007842:	dd40      	ble.n	80078c6 <_printf_float+0x1b2>
 8007844:	f1aa 0a02 	sub.w	sl, sl, #2
 8007848:	fa5f fa8a 	uxtb.w	sl, sl
 800784c:	4652      	mov	r2, sl
 800784e:	3901      	subs	r1, #1
 8007850:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007854:	910d      	str	r1, [sp, #52]	@ 0x34
 8007856:	f7ff ff23 	bl	80076a0 <__exponent>
 800785a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800785c:	4681      	mov	r9, r0
 800785e:	1813      	adds	r3, r2, r0
 8007860:	2a01      	cmp	r2, #1
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	dc02      	bgt.n	800786c <_printf_float+0x158>
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	07d2      	lsls	r2, r2, #31
 800786a:	d501      	bpl.n	8007870 <_printf_float+0x15c>
 800786c:	3301      	adds	r3, #1
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007874:	2b00      	cmp	r3, #0
 8007876:	d09e      	beq.n	80077b6 <_printf_float+0xa2>
 8007878:	232d      	movs	r3, #45	@ 0x2d
 800787a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800787e:	e79a      	b.n	80077b6 <_printf_float+0xa2>
 8007880:	2947      	cmp	r1, #71	@ 0x47
 8007882:	d1bf      	bne.n	8007804 <_printf_float+0xf0>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1bd      	bne.n	8007804 <_printf_float+0xf0>
 8007888:	2301      	movs	r3, #1
 800788a:	e7ba      	b.n	8007802 <_printf_float+0xee>
 800788c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007890:	d9dc      	bls.n	800784c <_printf_float+0x138>
 8007892:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007896:	d118      	bne.n	80078ca <_printf_float+0x1b6>
 8007898:	2900      	cmp	r1, #0
 800789a:	6863      	ldr	r3, [r4, #4]
 800789c:	dd0b      	ble.n	80078b6 <_printf_float+0x1a2>
 800789e:	6121      	str	r1, [r4, #16]
 80078a0:	b913      	cbnz	r3, 80078a8 <_printf_float+0x194>
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	07d0      	lsls	r0, r2, #31
 80078a6:	d502      	bpl.n	80078ae <_printf_float+0x19a>
 80078a8:	3301      	adds	r3, #1
 80078aa:	440b      	add	r3, r1
 80078ac:	6123      	str	r3, [r4, #16]
 80078ae:	f04f 0900 	mov.w	r9, #0
 80078b2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078b4:	e7dc      	b.n	8007870 <_printf_float+0x15c>
 80078b6:	b913      	cbnz	r3, 80078be <_printf_float+0x1aa>
 80078b8:	6822      	ldr	r2, [r4, #0]
 80078ba:	07d2      	lsls	r2, r2, #31
 80078bc:	d501      	bpl.n	80078c2 <_printf_float+0x1ae>
 80078be:	3302      	adds	r3, #2
 80078c0:	e7f4      	b.n	80078ac <_printf_float+0x198>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f2      	b.n	80078ac <_printf_float+0x198>
 80078c6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078cc:	4299      	cmp	r1, r3
 80078ce:	db05      	blt.n	80078dc <_printf_float+0x1c8>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	6121      	str	r1, [r4, #16]
 80078d4:	07d8      	lsls	r0, r3, #31
 80078d6:	d5ea      	bpl.n	80078ae <_printf_float+0x19a>
 80078d8:	1c4b      	adds	r3, r1, #1
 80078da:	e7e7      	b.n	80078ac <_printf_float+0x198>
 80078dc:	2900      	cmp	r1, #0
 80078de:	bfcc      	ite	gt
 80078e0:	2201      	movgt	r2, #1
 80078e2:	f1c1 0202 	rsble	r2, r1, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	e7e0      	b.n	80078ac <_printf_float+0x198>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	055a      	lsls	r2, r3, #21
 80078ee:	d407      	bmi.n	8007900 <_printf_float+0x1ec>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	4642      	mov	r2, r8
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	d12b      	bne.n	8007956 <_printf_float+0x242>
 80078fe:	e764      	b.n	80077ca <_printf_float+0xb6>
 8007900:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007904:	f240 80dc 	bls.w	8007ac0 <_printf_float+0x3ac>
 8007908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800790c:	2200      	movs	r2, #0
 800790e:	2300      	movs	r3, #0
 8007910:	f7f9 f84a 	bl	80009a8 <__aeabi_dcmpeq>
 8007914:	2800      	cmp	r0, #0
 8007916:	d033      	beq.n	8007980 <_printf_float+0x26c>
 8007918:	2301      	movs	r3, #1
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	4a35      	ldr	r2, [pc, #212]	@ (80079f4 <_printf_float+0x2e0>)
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af51 	beq.w	80077ca <_printf_float+0xb6>
 8007928:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800792c:	4543      	cmp	r3, r8
 800792e:	db02      	blt.n	8007936 <_printf_float+0x222>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	07d8      	lsls	r0, r3, #31
 8007934:	d50f      	bpl.n	8007956 <_printf_float+0x242>
 8007936:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	f43f af42 	beq.w	80077ca <_printf_float+0xb6>
 8007946:	f04f 0900 	mov.w	r9, #0
 800794a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800794e:	f104 0a1a 	add.w	sl, r4, #26
 8007952:	45c8      	cmp	r8, r9
 8007954:	dc09      	bgt.n	800796a <_printf_float+0x256>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	079b      	lsls	r3, r3, #30
 800795a:	f100 8102 	bmi.w	8007b62 <_printf_float+0x44e>
 800795e:	68e0      	ldr	r0, [r4, #12]
 8007960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007962:	4298      	cmp	r0, r3
 8007964:	bfb8      	it	lt
 8007966:	4618      	movlt	r0, r3
 8007968:	e731      	b.n	80077ce <_printf_float+0xba>
 800796a:	2301      	movs	r3, #1
 800796c:	4652      	mov	r2, sl
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f af28 	beq.w	80077ca <_printf_float+0xb6>
 800797a:	f109 0901 	add.w	r9, r9, #1
 800797e:	e7e8      	b.n	8007952 <_printf_float+0x23e>
 8007980:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007982:	2b00      	cmp	r3, #0
 8007984:	dc38      	bgt.n	80079f8 <_printf_float+0x2e4>
 8007986:	2301      	movs	r3, #1
 8007988:	4631      	mov	r1, r6
 800798a:	4628      	mov	r0, r5
 800798c:	4a19      	ldr	r2, [pc, #100]	@ (80079f4 <_printf_float+0x2e0>)
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f af1a 	beq.w	80077ca <_printf_float+0xb6>
 8007996:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800799a:	ea59 0303 	orrs.w	r3, r9, r3
 800799e:	d102      	bne.n	80079a6 <_printf_float+0x292>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	07d9      	lsls	r1, r3, #31
 80079a4:	d5d7      	bpl.n	8007956 <_printf_float+0x242>
 80079a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f af0a 	beq.w	80077ca <_printf_float+0xb6>
 80079b6:	f04f 0a00 	mov.w	sl, #0
 80079ba:	f104 0b1a 	add.w	fp, r4, #26
 80079be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079c0:	425b      	negs	r3, r3
 80079c2:	4553      	cmp	r3, sl
 80079c4:	dc01      	bgt.n	80079ca <_printf_float+0x2b6>
 80079c6:	464b      	mov	r3, r9
 80079c8:	e793      	b.n	80078f2 <_printf_float+0x1de>
 80079ca:	2301      	movs	r3, #1
 80079cc:	465a      	mov	r2, fp
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b8      	blx	r7
 80079d4:	3001      	adds	r0, #1
 80079d6:	f43f aef8 	beq.w	80077ca <_printf_float+0xb6>
 80079da:	f10a 0a01 	add.w	sl, sl, #1
 80079de:	e7ee      	b.n	80079be <_printf_float+0x2aa>
 80079e0:	7fefffff 	.word	0x7fefffff
 80079e4:	0800d096 	.word	0x0800d096
 80079e8:	0800d09a 	.word	0x0800d09a
 80079ec:	0800d09e 	.word	0x0800d09e
 80079f0:	0800d0a2 	.word	0x0800d0a2
 80079f4:	0800d0a6 	.word	0x0800d0a6
 80079f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80079fe:	4553      	cmp	r3, sl
 8007a00:	bfa8      	it	ge
 8007a02:	4653      	movge	r3, sl
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	4699      	mov	r9, r3
 8007a08:	dc36      	bgt.n	8007a78 <_printf_float+0x364>
 8007a0a:	f04f 0b00 	mov.w	fp, #0
 8007a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a12:	f104 021a 	add.w	r2, r4, #26
 8007a16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a1a:	eba3 0309 	sub.w	r3, r3, r9
 8007a1e:	455b      	cmp	r3, fp
 8007a20:	dc31      	bgt.n	8007a86 <_printf_float+0x372>
 8007a22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a24:	459a      	cmp	sl, r3
 8007a26:	dc3a      	bgt.n	8007a9e <_printf_float+0x38a>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	07da      	lsls	r2, r3, #31
 8007a2c:	d437      	bmi.n	8007a9e <_printf_float+0x38a>
 8007a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a30:	ebaa 0903 	sub.w	r9, sl, r3
 8007a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a36:	ebaa 0303 	sub.w	r3, sl, r3
 8007a3a:	4599      	cmp	r9, r3
 8007a3c:	bfa8      	it	ge
 8007a3e:	4699      	movge	r9, r3
 8007a40:	f1b9 0f00 	cmp.w	r9, #0
 8007a44:	dc33      	bgt.n	8007aae <_printf_float+0x39a>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a4e:	f104 0b1a 	add.w	fp, r4, #26
 8007a52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a54:	ebaa 0303 	sub.w	r3, sl, r3
 8007a58:	eba3 0309 	sub.w	r3, r3, r9
 8007a5c:	4543      	cmp	r3, r8
 8007a5e:	f77f af7a 	ble.w	8007956 <_printf_float+0x242>
 8007a62:	2301      	movs	r3, #1
 8007a64:	465a      	mov	r2, fp
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	f43f aeac 	beq.w	80077ca <_printf_float+0xb6>
 8007a72:	f108 0801 	add.w	r8, r8, #1
 8007a76:	e7ec      	b.n	8007a52 <_printf_float+0x33e>
 8007a78:	4642      	mov	r2, r8
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	d1c2      	bne.n	8007a0a <_printf_float+0x2f6>
 8007a84:	e6a1      	b.n	80077ca <_printf_float+0xb6>
 8007a86:	2301      	movs	r3, #1
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	920a      	str	r2, [sp, #40]	@ 0x28
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	f43f ae9a 	beq.w	80077ca <_printf_float+0xb6>
 8007a96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a98:	f10b 0b01 	add.w	fp, fp, #1
 8007a9c:	e7bb      	b.n	8007a16 <_printf_float+0x302>
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d1c0      	bne.n	8007a2e <_printf_float+0x31a>
 8007aac:	e68d      	b.n	80077ca <_printf_float+0xb6>
 8007aae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	4442      	add	r2, r8
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	d1c3      	bne.n	8007a46 <_printf_float+0x332>
 8007abe:	e684      	b.n	80077ca <_printf_float+0xb6>
 8007ac0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007ac4:	f1ba 0f01 	cmp.w	sl, #1
 8007ac8:	dc01      	bgt.n	8007ace <_printf_float+0x3ba>
 8007aca:	07db      	lsls	r3, r3, #31
 8007acc:	d536      	bpl.n	8007b3c <_printf_float+0x428>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f43f ae76 	beq.w	80077ca <_printf_float+0xb6>
 8007ade:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f43f ae6e 	beq.w	80077ca <_printf_float+0xb6>
 8007aee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007afa:	f7f8 ff55 	bl	80009a8 <__aeabi_dcmpeq>
 8007afe:	b9c0      	cbnz	r0, 8007b32 <_printf_float+0x41e>
 8007b00:	4653      	mov	r3, sl
 8007b02:	f108 0201 	add.w	r2, r8, #1
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d10c      	bne.n	8007b2a <_printf_float+0x416>
 8007b10:	e65b      	b.n	80077ca <_printf_float+0xb6>
 8007b12:	2301      	movs	r3, #1
 8007b14:	465a      	mov	r2, fp
 8007b16:	4631      	mov	r1, r6
 8007b18:	4628      	mov	r0, r5
 8007b1a:	47b8      	blx	r7
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	f43f ae54 	beq.w	80077ca <_printf_float+0xb6>
 8007b22:	f108 0801 	add.w	r8, r8, #1
 8007b26:	45d0      	cmp	r8, sl
 8007b28:	dbf3      	blt.n	8007b12 <_printf_float+0x3fe>
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b30:	e6e0      	b.n	80078f4 <_printf_float+0x1e0>
 8007b32:	f04f 0800 	mov.w	r8, #0
 8007b36:	f104 0b1a 	add.w	fp, r4, #26
 8007b3a:	e7f4      	b.n	8007b26 <_printf_float+0x412>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4642      	mov	r2, r8
 8007b40:	e7e1      	b.n	8007b06 <_printf_float+0x3f2>
 8007b42:	2301      	movs	r3, #1
 8007b44:	464a      	mov	r2, r9
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f ae3c 	beq.w	80077ca <_printf_float+0xb6>
 8007b52:	f108 0801 	add.w	r8, r8, #1
 8007b56:	68e3      	ldr	r3, [r4, #12]
 8007b58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b5a:	1a5b      	subs	r3, r3, r1
 8007b5c:	4543      	cmp	r3, r8
 8007b5e:	dcf0      	bgt.n	8007b42 <_printf_float+0x42e>
 8007b60:	e6fd      	b.n	800795e <_printf_float+0x24a>
 8007b62:	f04f 0800 	mov.w	r8, #0
 8007b66:	f104 0919 	add.w	r9, r4, #25
 8007b6a:	e7f4      	b.n	8007b56 <_printf_float+0x442>

08007b6c <_printf_common>:
 8007b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b70:	4616      	mov	r6, r2
 8007b72:	4698      	mov	r8, r3
 8007b74:	688a      	ldr	r2, [r1, #8]
 8007b76:	690b      	ldr	r3, [r1, #16]
 8007b78:	4607      	mov	r7, r0
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	bfb8      	it	lt
 8007b7e:	4613      	movlt	r3, r2
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b86:	460c      	mov	r4, r1
 8007b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b8c:	b10a      	cbz	r2, 8007b92 <_printf_common+0x26>
 8007b8e:	3301      	adds	r3, #1
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	0699      	lsls	r1, r3, #26
 8007b96:	bf42      	ittt	mi
 8007b98:	6833      	ldrmi	r3, [r6, #0]
 8007b9a:	3302      	addmi	r3, #2
 8007b9c:	6033      	strmi	r3, [r6, #0]
 8007b9e:	6825      	ldr	r5, [r4, #0]
 8007ba0:	f015 0506 	ands.w	r5, r5, #6
 8007ba4:	d106      	bne.n	8007bb4 <_printf_common+0x48>
 8007ba6:	f104 0a19 	add.w	sl, r4, #25
 8007baa:	68e3      	ldr	r3, [r4, #12]
 8007bac:	6832      	ldr	r2, [r6, #0]
 8007bae:	1a9b      	subs	r3, r3, r2
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	dc2b      	bgt.n	8007c0c <_printf_common+0xa0>
 8007bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bb8:	6822      	ldr	r2, [r4, #0]
 8007bba:	3b00      	subs	r3, #0
 8007bbc:	bf18      	it	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	0692      	lsls	r2, r2, #26
 8007bc2:	d430      	bmi.n	8007c26 <_printf_common+0xba>
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bcc:	47c8      	blx	r9
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d023      	beq.n	8007c1a <_printf_common+0xae>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	6922      	ldr	r2, [r4, #16]
 8007bd6:	f003 0306 	and.w	r3, r3, #6
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	bf14      	ite	ne
 8007bde:	2500      	movne	r5, #0
 8007be0:	6833      	ldreq	r3, [r6, #0]
 8007be2:	f04f 0600 	mov.w	r6, #0
 8007be6:	bf08      	it	eq
 8007be8:	68e5      	ldreq	r5, [r4, #12]
 8007bea:	f104 041a 	add.w	r4, r4, #26
 8007bee:	bf08      	it	eq
 8007bf0:	1aed      	subeq	r5, r5, r3
 8007bf2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007bf6:	bf08      	it	eq
 8007bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bfc4      	itt	gt
 8007c00:	1a9b      	subgt	r3, r3, r2
 8007c02:	18ed      	addgt	r5, r5, r3
 8007c04:	42b5      	cmp	r5, r6
 8007c06:	d11a      	bne.n	8007c3e <_printf_common+0xd2>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e008      	b.n	8007c1e <_printf_common+0xb2>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	4652      	mov	r2, sl
 8007c10:	4641      	mov	r1, r8
 8007c12:	4638      	mov	r0, r7
 8007c14:	47c8      	blx	r9
 8007c16:	3001      	adds	r0, #1
 8007c18:	d103      	bne.n	8007c22 <_printf_common+0xb6>
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c22:	3501      	adds	r5, #1
 8007c24:	e7c1      	b.n	8007baa <_printf_common+0x3e>
 8007c26:	2030      	movs	r0, #48	@ 0x30
 8007c28:	18e1      	adds	r1, r4, r3
 8007c2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c34:	4422      	add	r2, r4
 8007c36:	3302      	adds	r3, #2
 8007c38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c3c:	e7c2      	b.n	8007bc4 <_printf_common+0x58>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4622      	mov	r2, r4
 8007c42:	4641      	mov	r1, r8
 8007c44:	4638      	mov	r0, r7
 8007c46:	47c8      	blx	r9
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d0e6      	beq.n	8007c1a <_printf_common+0xae>
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7d9      	b.n	8007c04 <_printf_common+0x98>

08007c50 <_printf_i>:
 8007c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	7e0f      	ldrb	r7, [r1, #24]
 8007c56:	4691      	mov	r9, r2
 8007c58:	2f78      	cmp	r7, #120	@ 0x78
 8007c5a:	4680      	mov	r8, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	469a      	mov	sl, r3
 8007c60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c66:	d807      	bhi.n	8007c78 <_printf_i+0x28>
 8007c68:	2f62      	cmp	r7, #98	@ 0x62
 8007c6a:	d80a      	bhi.n	8007c82 <_printf_i+0x32>
 8007c6c:	2f00      	cmp	r7, #0
 8007c6e:	f000 80d3 	beq.w	8007e18 <_printf_i+0x1c8>
 8007c72:	2f58      	cmp	r7, #88	@ 0x58
 8007c74:	f000 80ba 	beq.w	8007dec <_printf_i+0x19c>
 8007c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c80:	e03a      	b.n	8007cf8 <_printf_i+0xa8>
 8007c82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c86:	2b15      	cmp	r3, #21
 8007c88:	d8f6      	bhi.n	8007c78 <_printf_i+0x28>
 8007c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8007c90 <_printf_i+0x40>)
 8007c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c90:	08007ce9 	.word	0x08007ce9
 8007c94:	08007cfd 	.word	0x08007cfd
 8007c98:	08007c79 	.word	0x08007c79
 8007c9c:	08007c79 	.word	0x08007c79
 8007ca0:	08007c79 	.word	0x08007c79
 8007ca4:	08007c79 	.word	0x08007c79
 8007ca8:	08007cfd 	.word	0x08007cfd
 8007cac:	08007c79 	.word	0x08007c79
 8007cb0:	08007c79 	.word	0x08007c79
 8007cb4:	08007c79 	.word	0x08007c79
 8007cb8:	08007c79 	.word	0x08007c79
 8007cbc:	08007dff 	.word	0x08007dff
 8007cc0:	08007d27 	.word	0x08007d27
 8007cc4:	08007db9 	.word	0x08007db9
 8007cc8:	08007c79 	.word	0x08007c79
 8007ccc:	08007c79 	.word	0x08007c79
 8007cd0:	08007e21 	.word	0x08007e21
 8007cd4:	08007c79 	.word	0x08007c79
 8007cd8:	08007d27 	.word	0x08007d27
 8007cdc:	08007c79 	.word	0x08007c79
 8007ce0:	08007c79 	.word	0x08007c79
 8007ce4:	08007dc1 	.word	0x08007dc1
 8007ce8:	6833      	ldr	r3, [r6, #0]
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6032      	str	r2, [r6, #0]
 8007cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e09e      	b.n	8007e3a <_printf_i+0x1ea>
 8007cfc:	6833      	ldr	r3, [r6, #0]
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	6031      	str	r1, [r6, #0]
 8007d04:	0606      	lsls	r6, r0, #24
 8007d06:	d501      	bpl.n	8007d0c <_printf_i+0xbc>
 8007d08:	681d      	ldr	r5, [r3, #0]
 8007d0a:	e003      	b.n	8007d14 <_printf_i+0xc4>
 8007d0c:	0645      	lsls	r5, r0, #25
 8007d0e:	d5fb      	bpl.n	8007d08 <_printf_i+0xb8>
 8007d10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d14:	2d00      	cmp	r5, #0
 8007d16:	da03      	bge.n	8007d20 <_printf_i+0xd0>
 8007d18:	232d      	movs	r3, #45	@ 0x2d
 8007d1a:	426d      	negs	r5, r5
 8007d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d20:	230a      	movs	r3, #10
 8007d22:	4859      	ldr	r0, [pc, #356]	@ (8007e88 <_printf_i+0x238>)
 8007d24:	e011      	b.n	8007d4a <_printf_i+0xfa>
 8007d26:	6821      	ldr	r1, [r4, #0]
 8007d28:	6833      	ldr	r3, [r6, #0]
 8007d2a:	0608      	lsls	r0, r1, #24
 8007d2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d30:	d402      	bmi.n	8007d38 <_printf_i+0xe8>
 8007d32:	0649      	lsls	r1, r1, #25
 8007d34:	bf48      	it	mi
 8007d36:	b2ad      	uxthmi	r5, r5
 8007d38:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d3a:	6033      	str	r3, [r6, #0]
 8007d3c:	bf14      	ite	ne
 8007d3e:	230a      	movne	r3, #10
 8007d40:	2308      	moveq	r3, #8
 8007d42:	4851      	ldr	r0, [pc, #324]	@ (8007e88 <_printf_i+0x238>)
 8007d44:	2100      	movs	r1, #0
 8007d46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d4a:	6866      	ldr	r6, [r4, #4]
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	bfa8      	it	ge
 8007d50:	6821      	ldrge	r1, [r4, #0]
 8007d52:	60a6      	str	r6, [r4, #8]
 8007d54:	bfa4      	itt	ge
 8007d56:	f021 0104 	bicge.w	r1, r1, #4
 8007d5a:	6021      	strge	r1, [r4, #0]
 8007d5c:	b90d      	cbnz	r5, 8007d62 <_printf_i+0x112>
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d04b      	beq.n	8007dfa <_printf_i+0x1aa>
 8007d62:	4616      	mov	r6, r2
 8007d64:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d68:	fb03 5711 	mls	r7, r3, r1, r5
 8007d6c:	5dc7      	ldrb	r7, [r0, r7]
 8007d6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d72:	462f      	mov	r7, r5
 8007d74:	42bb      	cmp	r3, r7
 8007d76:	460d      	mov	r5, r1
 8007d78:	d9f4      	bls.n	8007d64 <_printf_i+0x114>
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d10b      	bne.n	8007d96 <_printf_i+0x146>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	07df      	lsls	r7, r3, #31
 8007d82:	d508      	bpl.n	8007d96 <_printf_i+0x146>
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	6861      	ldr	r1, [r4, #4]
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	bfde      	ittt	le
 8007d8c:	2330      	movle	r3, #48	@ 0x30
 8007d8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d92:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007d96:	1b92      	subs	r2, r2, r6
 8007d98:	6122      	str	r2, [r4, #16]
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f8cd a000 	str.w	sl, [sp]
 8007da4:	aa03      	add	r2, sp, #12
 8007da6:	f7ff fee1 	bl	8007b6c <_printf_common>
 8007daa:	3001      	adds	r0, #1
 8007dac:	d14a      	bne.n	8007e44 <_printf_i+0x1f4>
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007db2:	b004      	add	sp, #16
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	f043 0320 	orr.w	r3, r3, #32
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	2778      	movs	r7, #120	@ 0x78
 8007dc2:	4832      	ldr	r0, [pc, #200]	@ (8007e8c <_printf_i+0x23c>)
 8007dc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	061f      	lsls	r7, r3, #24
 8007dce:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dd2:	d402      	bmi.n	8007dda <_printf_i+0x18a>
 8007dd4:	065f      	lsls	r7, r3, #25
 8007dd6:	bf48      	it	mi
 8007dd8:	b2ad      	uxthmi	r5, r5
 8007dda:	6031      	str	r1, [r6, #0]
 8007ddc:	07d9      	lsls	r1, r3, #31
 8007dde:	bf44      	itt	mi
 8007de0:	f043 0320 	orrmi.w	r3, r3, #32
 8007de4:	6023      	strmi	r3, [r4, #0]
 8007de6:	b11d      	cbz	r5, 8007df0 <_printf_i+0x1a0>
 8007de8:	2310      	movs	r3, #16
 8007dea:	e7ab      	b.n	8007d44 <_printf_i+0xf4>
 8007dec:	4826      	ldr	r0, [pc, #152]	@ (8007e88 <_printf_i+0x238>)
 8007dee:	e7e9      	b.n	8007dc4 <_printf_i+0x174>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	f023 0320 	bic.w	r3, r3, #32
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	e7f6      	b.n	8007de8 <_printf_i+0x198>
 8007dfa:	4616      	mov	r6, r2
 8007dfc:	e7bd      	b.n	8007d7a <_printf_i+0x12a>
 8007dfe:	6833      	ldr	r3, [r6, #0]
 8007e00:	6825      	ldr	r5, [r4, #0]
 8007e02:	1d18      	adds	r0, r3, #4
 8007e04:	6961      	ldr	r1, [r4, #20]
 8007e06:	6030      	str	r0, [r6, #0]
 8007e08:	062e      	lsls	r6, r5, #24
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	d501      	bpl.n	8007e12 <_printf_i+0x1c2>
 8007e0e:	6019      	str	r1, [r3, #0]
 8007e10:	e002      	b.n	8007e18 <_printf_i+0x1c8>
 8007e12:	0668      	lsls	r0, r5, #25
 8007e14:	d5fb      	bpl.n	8007e0e <_printf_i+0x1be>
 8007e16:	8019      	strh	r1, [r3, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4616      	mov	r6, r2
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	e7bc      	b.n	8007d9a <_printf_i+0x14a>
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	2100      	movs	r1, #0
 8007e24:	1d1a      	adds	r2, r3, #4
 8007e26:	6032      	str	r2, [r6, #0]
 8007e28:	681e      	ldr	r6, [r3, #0]
 8007e2a:	6862      	ldr	r2, [r4, #4]
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f000 fbe4 	bl	80085fa <memchr>
 8007e32:	b108      	cbz	r0, 8007e38 <_printf_i+0x1e8>
 8007e34:	1b80      	subs	r0, r0, r6
 8007e36:	6060      	str	r0, [r4, #4]
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e42:	e7aa      	b.n	8007d9a <_printf_i+0x14a>
 8007e44:	4632      	mov	r2, r6
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	6923      	ldr	r3, [r4, #16]
 8007e4c:	47d0      	blx	sl
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d0ad      	beq.n	8007dae <_printf_i+0x15e>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	079b      	lsls	r3, r3, #30
 8007e56:	d413      	bmi.n	8007e80 <_printf_i+0x230>
 8007e58:	68e0      	ldr	r0, [r4, #12]
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	4298      	cmp	r0, r3
 8007e5e:	bfb8      	it	lt
 8007e60:	4618      	movlt	r0, r3
 8007e62:	e7a6      	b.n	8007db2 <_printf_i+0x162>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4632      	mov	r2, r6
 8007e68:	4649      	mov	r1, r9
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	47d0      	blx	sl
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d09d      	beq.n	8007dae <_printf_i+0x15e>
 8007e72:	3501      	adds	r5, #1
 8007e74:	68e3      	ldr	r3, [r4, #12]
 8007e76:	9903      	ldr	r1, [sp, #12]
 8007e78:	1a5b      	subs	r3, r3, r1
 8007e7a:	42ab      	cmp	r3, r5
 8007e7c:	dcf2      	bgt.n	8007e64 <_printf_i+0x214>
 8007e7e:	e7eb      	b.n	8007e58 <_printf_i+0x208>
 8007e80:	2500      	movs	r5, #0
 8007e82:	f104 0619 	add.w	r6, r4, #25
 8007e86:	e7f5      	b.n	8007e74 <_printf_i+0x224>
 8007e88:	0800d0a8 	.word	0x0800d0a8
 8007e8c:	0800d0b9 	.word	0x0800d0b9

08007e90 <_scanf_float>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	b087      	sub	sp, #28
 8007e96:	9303      	str	r3, [sp, #12]
 8007e98:	688b      	ldr	r3, [r1, #8]
 8007e9a:	4617      	mov	r7, r2
 8007e9c:	1e5a      	subs	r2, r3, #1
 8007e9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007ea2:	bf82      	ittt	hi
 8007ea4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007ea8:	eb03 0b05 	addhi.w	fp, r3, r5
 8007eac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	f04f 0500 	mov.w	r5, #0
 8007eb6:	bf88      	it	hi
 8007eb8:	608b      	strhi	r3, [r1, #8]
 8007eba:	680b      	ldr	r3, [r1, #0]
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007ec2:	f842 3b1c 	str.w	r3, [r2], #28
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	bf98      	it	ls
 8007eca:	f04f 0b00 	movls.w	fp, #0
 8007ece:	4616      	mov	r6, r2
 8007ed0:	46aa      	mov	sl, r5
 8007ed2:	46a9      	mov	r9, r5
 8007ed4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ed8:	9201      	str	r2, [sp, #4]
 8007eda:	9502      	str	r5, [sp, #8]
 8007edc:	68a2      	ldr	r2, [r4, #8]
 8007ede:	b152      	cbz	r2, 8007ef6 <_scanf_float+0x66>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ee6:	d865      	bhi.n	8007fb4 <_scanf_float+0x124>
 8007ee8:	2b40      	cmp	r3, #64	@ 0x40
 8007eea:	d83d      	bhi.n	8007f68 <_scanf_float+0xd8>
 8007eec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007ef0:	b2c8      	uxtb	r0, r1
 8007ef2:	280e      	cmp	r0, #14
 8007ef4:	d93b      	bls.n	8007f6e <_scanf_float+0xde>
 8007ef6:	f1b9 0f00 	cmp.w	r9, #0
 8007efa:	d003      	beq.n	8007f04 <_scanf_float+0x74>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007f08:	f1ba 0f01 	cmp.w	sl, #1
 8007f0c:	f200 8118 	bhi.w	8008140 <_scanf_float+0x2b0>
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	429e      	cmp	r6, r3
 8007f14:	f200 8109 	bhi.w	800812a <_scanf_float+0x29a>
 8007f18:	2001      	movs	r0, #1
 8007f1a:	b007      	add	sp, #28
 8007f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f20:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007f24:	2a0d      	cmp	r2, #13
 8007f26:	d8e6      	bhi.n	8007ef6 <_scanf_float+0x66>
 8007f28:	a101      	add	r1, pc, #4	@ (adr r1, 8007f30 <_scanf_float+0xa0>)
 8007f2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08008077 	.word	0x08008077
 8007f34:	08007ef7 	.word	0x08007ef7
 8007f38:	08007ef7 	.word	0x08007ef7
 8007f3c:	08007ef7 	.word	0x08007ef7
 8007f40:	080080d7 	.word	0x080080d7
 8007f44:	080080af 	.word	0x080080af
 8007f48:	08007ef7 	.word	0x08007ef7
 8007f4c:	08007ef7 	.word	0x08007ef7
 8007f50:	08008085 	.word	0x08008085
 8007f54:	08007ef7 	.word	0x08007ef7
 8007f58:	08007ef7 	.word	0x08007ef7
 8007f5c:	08007ef7 	.word	0x08007ef7
 8007f60:	08007ef7 	.word	0x08007ef7
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007f6c:	e7da      	b.n	8007f24 <_scanf_float+0x94>
 8007f6e:	290e      	cmp	r1, #14
 8007f70:	d8c1      	bhi.n	8007ef6 <_scanf_float+0x66>
 8007f72:	a001      	add	r0, pc, #4	@ (adr r0, 8007f78 <_scanf_float+0xe8>)
 8007f74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f78:	0800802d 	.word	0x0800802d
 8007f7c:	08007ef7 	.word	0x08007ef7
 8007f80:	0800802d 	.word	0x0800802d
 8007f84:	080080c3 	.word	0x080080c3
 8007f88:	08007ef7 	.word	0x08007ef7
 8007f8c:	08007fd5 	.word	0x08007fd5
 8007f90:	08008013 	.word	0x08008013
 8007f94:	08008013 	.word	0x08008013
 8007f98:	08008013 	.word	0x08008013
 8007f9c:	08008013 	.word	0x08008013
 8007fa0:	08008013 	.word	0x08008013
 8007fa4:	08008013 	.word	0x08008013
 8007fa8:	08008013 	.word	0x08008013
 8007fac:	08008013 	.word	0x08008013
 8007fb0:	08008013 	.word	0x08008013
 8007fb4:	2b6e      	cmp	r3, #110	@ 0x6e
 8007fb6:	d809      	bhi.n	8007fcc <_scanf_float+0x13c>
 8007fb8:	2b60      	cmp	r3, #96	@ 0x60
 8007fba:	d8b1      	bhi.n	8007f20 <_scanf_float+0x90>
 8007fbc:	2b54      	cmp	r3, #84	@ 0x54
 8007fbe:	d07b      	beq.n	80080b8 <_scanf_float+0x228>
 8007fc0:	2b59      	cmp	r3, #89	@ 0x59
 8007fc2:	d198      	bne.n	8007ef6 <_scanf_float+0x66>
 8007fc4:	2d07      	cmp	r5, #7
 8007fc6:	d196      	bne.n	8007ef6 <_scanf_float+0x66>
 8007fc8:	2508      	movs	r5, #8
 8007fca:	e02c      	b.n	8008026 <_scanf_float+0x196>
 8007fcc:	2b74      	cmp	r3, #116	@ 0x74
 8007fce:	d073      	beq.n	80080b8 <_scanf_float+0x228>
 8007fd0:	2b79      	cmp	r3, #121	@ 0x79
 8007fd2:	e7f6      	b.n	8007fc2 <_scanf_float+0x132>
 8007fd4:	6821      	ldr	r1, [r4, #0]
 8007fd6:	05c8      	lsls	r0, r1, #23
 8007fd8:	d51b      	bpl.n	8008012 <_scanf_float+0x182>
 8007fda:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007fde:	6021      	str	r1, [r4, #0]
 8007fe0:	f109 0901 	add.w	r9, r9, #1
 8007fe4:	f1bb 0f00 	cmp.w	fp, #0
 8007fe8:	d003      	beq.n	8007ff2 <_scanf_float+0x162>
 8007fea:	3201      	adds	r2, #1
 8007fec:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007ff0:	60a2      	str	r2, [r4, #8]
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	60a3      	str	r3, [r4, #8]
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3b01      	subs	r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	f340 8087 	ble.w	8008118 <_scanf_float+0x288>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	e764      	b.n	8007edc <_scanf_float+0x4c>
 8008012:	eb1a 0105 	adds.w	r1, sl, r5
 8008016:	f47f af6e 	bne.w	8007ef6 <_scanf_float+0x66>
 800801a:	460d      	mov	r5, r1
 800801c:	468a      	mov	sl, r1
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008024:	6022      	str	r2, [r4, #0]
 8008026:	f806 3b01 	strb.w	r3, [r6], #1
 800802a:	e7e2      	b.n	8007ff2 <_scanf_float+0x162>
 800802c:	6822      	ldr	r2, [r4, #0]
 800802e:	0610      	lsls	r0, r2, #24
 8008030:	f57f af61 	bpl.w	8007ef6 <_scanf_float+0x66>
 8008034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008038:	6022      	str	r2, [r4, #0]
 800803a:	e7f4      	b.n	8008026 <_scanf_float+0x196>
 800803c:	f1ba 0f00 	cmp.w	sl, #0
 8008040:	d10e      	bne.n	8008060 <_scanf_float+0x1d0>
 8008042:	f1b9 0f00 	cmp.w	r9, #0
 8008046:	d10e      	bne.n	8008066 <_scanf_float+0x1d6>
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800804e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008052:	d108      	bne.n	8008066 <_scanf_float+0x1d6>
 8008054:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008058:	f04f 0a01 	mov.w	sl, #1
 800805c:	6022      	str	r2, [r4, #0]
 800805e:	e7e2      	b.n	8008026 <_scanf_float+0x196>
 8008060:	f1ba 0f02 	cmp.w	sl, #2
 8008064:	d055      	beq.n	8008112 <_scanf_float+0x282>
 8008066:	2d01      	cmp	r5, #1
 8008068:	d002      	beq.n	8008070 <_scanf_float+0x1e0>
 800806a:	2d04      	cmp	r5, #4
 800806c:	f47f af43 	bne.w	8007ef6 <_scanf_float+0x66>
 8008070:	3501      	adds	r5, #1
 8008072:	b2ed      	uxtb	r5, r5
 8008074:	e7d7      	b.n	8008026 <_scanf_float+0x196>
 8008076:	f1ba 0f01 	cmp.w	sl, #1
 800807a:	f47f af3c 	bne.w	8007ef6 <_scanf_float+0x66>
 800807e:	f04f 0a02 	mov.w	sl, #2
 8008082:	e7d0      	b.n	8008026 <_scanf_float+0x196>
 8008084:	b97d      	cbnz	r5, 80080a6 <_scanf_float+0x216>
 8008086:	f1b9 0f00 	cmp.w	r9, #0
 800808a:	f47f af37 	bne.w	8007efc <_scanf_float+0x6c>
 800808e:	6822      	ldr	r2, [r4, #0]
 8008090:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008094:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008098:	f040 8103 	bne.w	80082a2 <_scanf_float+0x412>
 800809c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080a0:	2501      	movs	r5, #1
 80080a2:	6022      	str	r2, [r4, #0]
 80080a4:	e7bf      	b.n	8008026 <_scanf_float+0x196>
 80080a6:	2d03      	cmp	r5, #3
 80080a8:	d0e2      	beq.n	8008070 <_scanf_float+0x1e0>
 80080aa:	2d05      	cmp	r5, #5
 80080ac:	e7de      	b.n	800806c <_scanf_float+0x1dc>
 80080ae:	2d02      	cmp	r5, #2
 80080b0:	f47f af21 	bne.w	8007ef6 <_scanf_float+0x66>
 80080b4:	2503      	movs	r5, #3
 80080b6:	e7b6      	b.n	8008026 <_scanf_float+0x196>
 80080b8:	2d06      	cmp	r5, #6
 80080ba:	f47f af1c 	bne.w	8007ef6 <_scanf_float+0x66>
 80080be:	2507      	movs	r5, #7
 80080c0:	e7b1      	b.n	8008026 <_scanf_float+0x196>
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	0591      	lsls	r1, r2, #22
 80080c6:	f57f af16 	bpl.w	8007ef6 <_scanf_float+0x66>
 80080ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80080ce:	6022      	str	r2, [r4, #0]
 80080d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80080d4:	e7a7      	b.n	8008026 <_scanf_float+0x196>
 80080d6:	6822      	ldr	r2, [r4, #0]
 80080d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80080dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80080e0:	d006      	beq.n	80080f0 <_scanf_float+0x260>
 80080e2:	0550      	lsls	r0, r2, #21
 80080e4:	f57f af07 	bpl.w	8007ef6 <_scanf_float+0x66>
 80080e8:	f1b9 0f00 	cmp.w	r9, #0
 80080ec:	f000 80d9 	beq.w	80082a2 <_scanf_float+0x412>
 80080f0:	0591      	lsls	r1, r2, #22
 80080f2:	bf58      	it	pl
 80080f4:	9902      	ldrpl	r1, [sp, #8]
 80080f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080fa:	bf58      	it	pl
 80080fc:	eba9 0101 	subpl.w	r1, r9, r1
 8008100:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008104:	f04f 0900 	mov.w	r9, #0
 8008108:	bf58      	it	pl
 800810a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800810e:	6022      	str	r2, [r4, #0]
 8008110:	e789      	b.n	8008026 <_scanf_float+0x196>
 8008112:	f04f 0a03 	mov.w	sl, #3
 8008116:	e786      	b.n	8008026 <_scanf_float+0x196>
 8008118:	4639      	mov	r1, r7
 800811a:	4640      	mov	r0, r8
 800811c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008120:	4798      	blx	r3
 8008122:	2800      	cmp	r0, #0
 8008124:	f43f aeda 	beq.w	8007edc <_scanf_float+0x4c>
 8008128:	e6e5      	b.n	8007ef6 <_scanf_float+0x66>
 800812a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800812e:	463a      	mov	r2, r7
 8008130:	4640      	mov	r0, r8
 8008132:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008136:	4798      	blx	r3
 8008138:	6923      	ldr	r3, [r4, #16]
 800813a:	3b01      	subs	r3, #1
 800813c:	6123      	str	r3, [r4, #16]
 800813e:	e6e7      	b.n	8007f10 <_scanf_float+0x80>
 8008140:	1e6b      	subs	r3, r5, #1
 8008142:	2b06      	cmp	r3, #6
 8008144:	d824      	bhi.n	8008190 <_scanf_float+0x300>
 8008146:	2d02      	cmp	r5, #2
 8008148:	d836      	bhi.n	80081b8 <_scanf_float+0x328>
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	429e      	cmp	r6, r3
 800814e:	f67f aee3 	bls.w	8007f18 <_scanf_float+0x88>
 8008152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008156:	463a      	mov	r2, r7
 8008158:	4640      	mov	r0, r8
 800815a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800815e:	4798      	blx	r3
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	3b01      	subs	r3, #1
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	e7f0      	b.n	800814a <_scanf_float+0x2ba>
 8008168:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800816c:	463a      	mov	r2, r7
 800816e:	4640      	mov	r0, r8
 8008170:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008174:	4798      	blx	r3
 8008176:	6923      	ldr	r3, [r4, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008180:	fa5f fa8a 	uxtb.w	sl, sl
 8008184:	f1ba 0f02 	cmp.w	sl, #2
 8008188:	d1ee      	bne.n	8008168 <_scanf_float+0x2d8>
 800818a:	3d03      	subs	r5, #3
 800818c:	b2ed      	uxtb	r5, r5
 800818e:	1b76      	subs	r6, r6, r5
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	05da      	lsls	r2, r3, #23
 8008194:	d530      	bpl.n	80081f8 <_scanf_float+0x368>
 8008196:	055b      	lsls	r3, r3, #21
 8008198:	d511      	bpl.n	80081be <_scanf_float+0x32e>
 800819a:	9b01      	ldr	r3, [sp, #4]
 800819c:	429e      	cmp	r6, r3
 800819e:	f67f aebb 	bls.w	8007f18 <_scanf_float+0x88>
 80081a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081a6:	463a      	mov	r2, r7
 80081a8:	4640      	mov	r0, r8
 80081aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081ae:	4798      	blx	r3
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	e7f0      	b.n	800819a <_scanf_float+0x30a>
 80081b8:	46aa      	mov	sl, r5
 80081ba:	46b3      	mov	fp, r6
 80081bc:	e7de      	b.n	800817c <_scanf_float+0x2ec>
 80081be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	2965      	cmp	r1, #101	@ 0x65
 80081c6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80081ca:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	d00c      	beq.n	80081ec <_scanf_float+0x35c>
 80081d2:	2945      	cmp	r1, #69	@ 0x45
 80081d4:	d00a      	beq.n	80081ec <_scanf_float+0x35c>
 80081d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081da:	463a      	mov	r2, r7
 80081dc:	4640      	mov	r0, r8
 80081de:	4798      	blx	r3
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	1eb5      	subs	r5, r6, #2
 80081ea:	6123      	str	r3, [r4, #16]
 80081ec:	463a      	mov	r2, r7
 80081ee:	4640      	mov	r0, r8
 80081f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081f4:	4798      	blx	r3
 80081f6:	462e      	mov	r6, r5
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	f012 0210 	ands.w	r2, r2, #16
 80081fe:	d001      	beq.n	8008204 <_scanf_float+0x374>
 8008200:	2000      	movs	r0, #0
 8008202:	e68a      	b.n	8007f1a <_scanf_float+0x8a>
 8008204:	7032      	strb	r2, [r6, #0]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800820c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008210:	d11c      	bne.n	800824c <_scanf_float+0x3bc>
 8008212:	9b02      	ldr	r3, [sp, #8]
 8008214:	454b      	cmp	r3, r9
 8008216:	eba3 0209 	sub.w	r2, r3, r9
 800821a:	d123      	bne.n	8008264 <_scanf_float+0x3d4>
 800821c:	2200      	movs	r2, #0
 800821e:	4640      	mov	r0, r8
 8008220:	9901      	ldr	r1, [sp, #4]
 8008222:	f002 fbfd 	bl	800aa20 <_strtod_r>
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	6825      	ldr	r5, [r4, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f015 0f02 	tst.w	r5, #2
 8008230:	4606      	mov	r6, r0
 8008232:	460f      	mov	r7, r1
 8008234:	f103 0204 	add.w	r2, r3, #4
 8008238:	d01f      	beq.n	800827a <_scanf_float+0x3ea>
 800823a:	9903      	ldr	r1, [sp, #12]
 800823c:	600a      	str	r2, [r1, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	e9c3 6700 	strd	r6, r7, [r3]
 8008244:	68e3      	ldr	r3, [r4, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	60e3      	str	r3, [r4, #12]
 800824a:	e7d9      	b.n	8008200 <_scanf_float+0x370>
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0e4      	beq.n	800821c <_scanf_float+0x38c>
 8008252:	9905      	ldr	r1, [sp, #20]
 8008254:	230a      	movs	r3, #10
 8008256:	4640      	mov	r0, r8
 8008258:	3101      	adds	r1, #1
 800825a:	f002 fc61 	bl	800ab20 <_strtol_r>
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	9e05      	ldr	r6, [sp, #20]
 8008262:	1ac2      	subs	r2, r0, r3
 8008264:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008268:	429e      	cmp	r6, r3
 800826a:	bf28      	it	cs
 800826c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008270:	4630      	mov	r0, r6
 8008272:	490d      	ldr	r1, [pc, #52]	@ (80082a8 <_scanf_float+0x418>)
 8008274:	f000 f8de 	bl	8008434 <siprintf>
 8008278:	e7d0      	b.n	800821c <_scanf_float+0x38c>
 800827a:	076d      	lsls	r5, r5, #29
 800827c:	d4dd      	bmi.n	800823a <_scanf_float+0x3aa>
 800827e:	9d03      	ldr	r5, [sp, #12]
 8008280:	602a      	str	r2, [r5, #0]
 8008282:	681d      	ldr	r5, [r3, #0]
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	f7f8 fbc0 	bl	8000a0c <__aeabi_dcmpun>
 800828c:	b120      	cbz	r0, 8008298 <_scanf_float+0x408>
 800828e:	4807      	ldr	r0, [pc, #28]	@ (80082ac <_scanf_float+0x41c>)
 8008290:	f000 f9d0 	bl	8008634 <nanf>
 8008294:	6028      	str	r0, [r5, #0]
 8008296:	e7d5      	b.n	8008244 <_scanf_float+0x3b4>
 8008298:	4630      	mov	r0, r6
 800829a:	4639      	mov	r1, r7
 800829c:	f7f8 fc14 	bl	8000ac8 <__aeabi_d2f>
 80082a0:	e7f8      	b.n	8008294 <_scanf_float+0x404>
 80082a2:	f04f 0900 	mov.w	r9, #0
 80082a6:	e62d      	b.n	8007f04 <_scanf_float+0x74>
 80082a8:	0800d0ca 	.word	0x0800d0ca
 80082ac:	0800d465 	.word	0x0800d465

080082b0 <std>:
 80082b0:	2300      	movs	r3, #0
 80082b2:	b510      	push	{r4, lr}
 80082b4:	4604      	mov	r4, r0
 80082b6:	e9c0 3300 	strd	r3, r3, [r0]
 80082ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082be:	6083      	str	r3, [r0, #8]
 80082c0:	8181      	strh	r1, [r0, #12]
 80082c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80082c4:	81c2      	strh	r2, [r0, #14]
 80082c6:	6183      	str	r3, [r0, #24]
 80082c8:	4619      	mov	r1, r3
 80082ca:	2208      	movs	r2, #8
 80082cc:	305c      	adds	r0, #92	@ 0x5c
 80082ce:	f000 f914 	bl	80084fa <memset>
 80082d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008308 <std+0x58>)
 80082d4:	6224      	str	r4, [r4, #32]
 80082d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80082d8:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <std+0x5c>)
 80082da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008310 <std+0x60>)
 80082de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <std+0x64>)
 80082e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80082e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008318 <std+0x68>)
 80082e6:	429c      	cmp	r4, r3
 80082e8:	d006      	beq.n	80082f8 <std+0x48>
 80082ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082ee:	4294      	cmp	r4, r2
 80082f0:	d002      	beq.n	80082f8 <std+0x48>
 80082f2:	33d0      	adds	r3, #208	@ 0xd0
 80082f4:	429c      	cmp	r4, r3
 80082f6:	d105      	bne.n	8008304 <std+0x54>
 80082f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008300:	f000 b978 	b.w	80085f4 <__retarget_lock_init_recursive>
 8008304:	bd10      	pop	{r4, pc}
 8008306:	bf00      	nop
 8008308:	08008475 	.word	0x08008475
 800830c:	08008497 	.word	0x08008497
 8008310:	080084cf 	.word	0x080084cf
 8008314:	080084f3 	.word	0x080084f3
 8008318:	20000850 	.word	0x20000850

0800831c <stdio_exit_handler>:
 800831c:	4a02      	ldr	r2, [pc, #8]	@ (8008328 <stdio_exit_handler+0xc>)
 800831e:	4903      	ldr	r1, [pc, #12]	@ (800832c <stdio_exit_handler+0x10>)
 8008320:	4803      	ldr	r0, [pc, #12]	@ (8008330 <stdio_exit_handler+0x14>)
 8008322:	f000 b869 	b.w	80083f8 <_fwalk_sglue>
 8008326:	bf00      	nop
 8008328:	20000014 	.word	0x20000014
 800832c:	0800aed5 	.word	0x0800aed5
 8008330:	20000024 	.word	0x20000024

08008334 <cleanup_stdio>:
 8008334:	6841      	ldr	r1, [r0, #4]
 8008336:	4b0c      	ldr	r3, [pc, #48]	@ (8008368 <cleanup_stdio+0x34>)
 8008338:	b510      	push	{r4, lr}
 800833a:	4299      	cmp	r1, r3
 800833c:	4604      	mov	r4, r0
 800833e:	d001      	beq.n	8008344 <cleanup_stdio+0x10>
 8008340:	f002 fdc8 	bl	800aed4 <_fflush_r>
 8008344:	68a1      	ldr	r1, [r4, #8]
 8008346:	4b09      	ldr	r3, [pc, #36]	@ (800836c <cleanup_stdio+0x38>)
 8008348:	4299      	cmp	r1, r3
 800834a:	d002      	beq.n	8008352 <cleanup_stdio+0x1e>
 800834c:	4620      	mov	r0, r4
 800834e:	f002 fdc1 	bl	800aed4 <_fflush_r>
 8008352:	68e1      	ldr	r1, [r4, #12]
 8008354:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <cleanup_stdio+0x3c>)
 8008356:	4299      	cmp	r1, r3
 8008358:	d004      	beq.n	8008364 <cleanup_stdio+0x30>
 800835a:	4620      	mov	r0, r4
 800835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008360:	f002 bdb8 	b.w	800aed4 <_fflush_r>
 8008364:	bd10      	pop	{r4, pc}
 8008366:	bf00      	nop
 8008368:	20000850 	.word	0x20000850
 800836c:	200008b8 	.word	0x200008b8
 8008370:	20000920 	.word	0x20000920

08008374 <global_stdio_init.part.0>:
 8008374:	b510      	push	{r4, lr}
 8008376:	4b0b      	ldr	r3, [pc, #44]	@ (80083a4 <global_stdio_init.part.0+0x30>)
 8008378:	4c0b      	ldr	r4, [pc, #44]	@ (80083a8 <global_stdio_init.part.0+0x34>)
 800837a:	4a0c      	ldr	r2, [pc, #48]	@ (80083ac <global_stdio_init.part.0+0x38>)
 800837c:	4620      	mov	r0, r4
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	2104      	movs	r1, #4
 8008382:	2200      	movs	r2, #0
 8008384:	f7ff ff94 	bl	80082b0 <std>
 8008388:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800838c:	2201      	movs	r2, #1
 800838e:	2109      	movs	r1, #9
 8008390:	f7ff ff8e 	bl	80082b0 <std>
 8008394:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008398:	2202      	movs	r2, #2
 800839a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800839e:	2112      	movs	r1, #18
 80083a0:	f7ff bf86 	b.w	80082b0 <std>
 80083a4:	20000988 	.word	0x20000988
 80083a8:	20000850 	.word	0x20000850
 80083ac:	0800831d 	.word	0x0800831d

080083b0 <__sfp_lock_acquire>:
 80083b0:	4801      	ldr	r0, [pc, #4]	@ (80083b8 <__sfp_lock_acquire+0x8>)
 80083b2:	f000 b920 	b.w	80085f6 <__retarget_lock_acquire_recursive>
 80083b6:	bf00      	nop
 80083b8:	20000991 	.word	0x20000991

080083bc <__sfp_lock_release>:
 80083bc:	4801      	ldr	r0, [pc, #4]	@ (80083c4 <__sfp_lock_release+0x8>)
 80083be:	f000 b91b 	b.w	80085f8 <__retarget_lock_release_recursive>
 80083c2:	bf00      	nop
 80083c4:	20000991 	.word	0x20000991

080083c8 <__sinit>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	4604      	mov	r4, r0
 80083cc:	f7ff fff0 	bl	80083b0 <__sfp_lock_acquire>
 80083d0:	6a23      	ldr	r3, [r4, #32]
 80083d2:	b11b      	cbz	r3, 80083dc <__sinit+0x14>
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d8:	f7ff bff0 	b.w	80083bc <__sfp_lock_release>
 80083dc:	4b04      	ldr	r3, [pc, #16]	@ (80083f0 <__sinit+0x28>)
 80083de:	6223      	str	r3, [r4, #32]
 80083e0:	4b04      	ldr	r3, [pc, #16]	@ (80083f4 <__sinit+0x2c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1f5      	bne.n	80083d4 <__sinit+0xc>
 80083e8:	f7ff ffc4 	bl	8008374 <global_stdio_init.part.0>
 80083ec:	e7f2      	b.n	80083d4 <__sinit+0xc>
 80083ee:	bf00      	nop
 80083f0:	08008335 	.word	0x08008335
 80083f4:	20000988 	.word	0x20000988

080083f8 <_fwalk_sglue>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	4607      	mov	r7, r0
 80083fe:	4688      	mov	r8, r1
 8008400:	4614      	mov	r4, r2
 8008402:	2600      	movs	r6, #0
 8008404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008408:	f1b9 0901 	subs.w	r9, r9, #1
 800840c:	d505      	bpl.n	800841a <_fwalk_sglue+0x22>
 800840e:	6824      	ldr	r4, [r4, #0]
 8008410:	2c00      	cmp	r4, #0
 8008412:	d1f7      	bne.n	8008404 <_fwalk_sglue+0xc>
 8008414:	4630      	mov	r0, r6
 8008416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d907      	bls.n	8008430 <_fwalk_sglue+0x38>
 8008420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008424:	3301      	adds	r3, #1
 8008426:	d003      	beq.n	8008430 <_fwalk_sglue+0x38>
 8008428:	4629      	mov	r1, r5
 800842a:	4638      	mov	r0, r7
 800842c:	47c0      	blx	r8
 800842e:	4306      	orrs	r6, r0
 8008430:	3568      	adds	r5, #104	@ 0x68
 8008432:	e7e9      	b.n	8008408 <_fwalk_sglue+0x10>

08008434 <siprintf>:
 8008434:	b40e      	push	{r1, r2, r3}
 8008436:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800843a:	b500      	push	{lr}
 800843c:	b09c      	sub	sp, #112	@ 0x70
 800843e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008440:	9002      	str	r0, [sp, #8]
 8008442:	9006      	str	r0, [sp, #24]
 8008444:	9107      	str	r1, [sp, #28]
 8008446:	9104      	str	r1, [sp, #16]
 8008448:	4808      	ldr	r0, [pc, #32]	@ (800846c <siprintf+0x38>)
 800844a:	4909      	ldr	r1, [pc, #36]	@ (8008470 <siprintf+0x3c>)
 800844c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008450:	9105      	str	r1, [sp, #20]
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	a902      	add	r1, sp, #8
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	f002 fbc0 	bl	800abdc <_svfiprintf_r>
 800845c:	2200      	movs	r2, #0
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	b01c      	add	sp, #112	@ 0x70
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b003      	add	sp, #12
 800846a:	4770      	bx	lr
 800846c:	20000020 	.word	0x20000020
 8008470:	ffff0208 	.word	0xffff0208

08008474 <__sread>:
 8008474:	b510      	push	{r4, lr}
 8008476:	460c      	mov	r4, r1
 8008478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847c:	f000 f86c 	bl	8008558 <_read_r>
 8008480:	2800      	cmp	r0, #0
 8008482:	bfab      	itete	ge
 8008484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008486:	89a3      	ldrhlt	r3, [r4, #12]
 8008488:	181b      	addge	r3, r3, r0
 800848a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800848e:	bfac      	ite	ge
 8008490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008492:	81a3      	strhlt	r3, [r4, #12]
 8008494:	bd10      	pop	{r4, pc}

08008496 <__swrite>:
 8008496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849a:	461f      	mov	r7, r3
 800849c:	898b      	ldrh	r3, [r1, #12]
 800849e:	4605      	mov	r5, r0
 80084a0:	05db      	lsls	r3, r3, #23
 80084a2:	460c      	mov	r4, r1
 80084a4:	4616      	mov	r6, r2
 80084a6:	d505      	bpl.n	80084b4 <__swrite+0x1e>
 80084a8:	2302      	movs	r3, #2
 80084aa:	2200      	movs	r2, #0
 80084ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b0:	f000 f840 	bl	8008534 <_lseek_r>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	4632      	mov	r2, r6
 80084b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	4628      	mov	r0, r5
 80084c0:	463b      	mov	r3, r7
 80084c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ca:	f000 b857 	b.w	800857c <_write_r>

080084ce <__sseek>:
 80084ce:	b510      	push	{r4, lr}
 80084d0:	460c      	mov	r4, r1
 80084d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d6:	f000 f82d 	bl	8008534 <_lseek_r>
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	bf15      	itete	ne
 80084e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80084e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80084ea:	81a3      	strheq	r3, [r4, #12]
 80084ec:	bf18      	it	ne
 80084ee:	81a3      	strhne	r3, [r4, #12]
 80084f0:	bd10      	pop	{r4, pc}

080084f2 <__sclose>:
 80084f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f6:	f000 b80d 	b.w	8008514 <_close_r>

080084fa <memset>:
 80084fa:	4603      	mov	r3, r0
 80084fc:	4402      	add	r2, r0
 80084fe:	4293      	cmp	r3, r2
 8008500:	d100      	bne.n	8008504 <memset+0xa>
 8008502:	4770      	bx	lr
 8008504:	f803 1b01 	strb.w	r1, [r3], #1
 8008508:	e7f9      	b.n	80084fe <memset+0x4>
	...

0800850c <_localeconv_r>:
 800850c:	4800      	ldr	r0, [pc, #0]	@ (8008510 <_localeconv_r+0x4>)
 800850e:	4770      	bx	lr
 8008510:	20000160 	.word	0x20000160

08008514 <_close_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	2300      	movs	r3, #0
 8008518:	4d05      	ldr	r5, [pc, #20]	@ (8008530 <_close_r+0x1c>)
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	602b      	str	r3, [r5, #0]
 8008520:	f7fb fd5b 	bl	8003fda <_close>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_close_r+0x1a>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b103      	cbz	r3, 800852e <_close_r+0x1a>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	2000098c 	.word	0x2000098c

08008534 <_lseek_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	2200      	movs	r2, #0
 800853e:	4d05      	ldr	r5, [pc, #20]	@ (8008554 <_lseek_r+0x20>)
 8008540:	602a      	str	r2, [r5, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	f7fb fd6d 	bl	8004022 <_lseek>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_lseek_r+0x1e>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_lseek_r+0x1e>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	2000098c 	.word	0x2000098c

08008558 <_read_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	4611      	mov	r1, r2
 8008560:	2200      	movs	r2, #0
 8008562:	4d05      	ldr	r5, [pc, #20]	@ (8008578 <_read_r+0x20>)
 8008564:	602a      	str	r2, [r5, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f7fb fcfe 	bl	8003f68 <_read>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_read_r+0x1e>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_read_r+0x1e>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	2000098c 	.word	0x2000098c

0800857c <_write_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	4611      	mov	r1, r2
 8008584:	2200      	movs	r2, #0
 8008586:	4d05      	ldr	r5, [pc, #20]	@ (800859c <_write_r+0x20>)
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7fb fd09 	bl	8003fa2 <_write>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_write_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_write_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	2000098c 	.word	0x2000098c

080085a0 <__errno>:
 80085a0:	4b01      	ldr	r3, [pc, #4]	@ (80085a8 <__errno+0x8>)
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20000020 	.word	0x20000020

080085ac <__libc_init_array>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	2600      	movs	r6, #0
 80085b0:	4d0c      	ldr	r5, [pc, #48]	@ (80085e4 <__libc_init_array+0x38>)
 80085b2:	4c0d      	ldr	r4, [pc, #52]	@ (80085e8 <__libc_init_array+0x3c>)
 80085b4:	1b64      	subs	r4, r4, r5
 80085b6:	10a4      	asrs	r4, r4, #2
 80085b8:	42a6      	cmp	r6, r4
 80085ba:	d109      	bne.n	80085d0 <__libc_init_array+0x24>
 80085bc:	f003 fb68 	bl	800bc90 <_init>
 80085c0:	2600      	movs	r6, #0
 80085c2:	4d0a      	ldr	r5, [pc, #40]	@ (80085ec <__libc_init_array+0x40>)
 80085c4:	4c0a      	ldr	r4, [pc, #40]	@ (80085f0 <__libc_init_array+0x44>)
 80085c6:	1b64      	subs	r4, r4, r5
 80085c8:	10a4      	asrs	r4, r4, #2
 80085ca:	42a6      	cmp	r6, r4
 80085cc:	d105      	bne.n	80085da <__libc_init_array+0x2e>
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d4:	4798      	blx	r3
 80085d6:	3601      	adds	r6, #1
 80085d8:	e7ee      	b.n	80085b8 <__libc_init_array+0xc>
 80085da:	f855 3b04 	ldr.w	r3, [r5], #4
 80085de:	4798      	blx	r3
 80085e0:	3601      	adds	r6, #1
 80085e2:	e7f2      	b.n	80085ca <__libc_init_array+0x1e>
 80085e4:	0800d7f0 	.word	0x0800d7f0
 80085e8:	0800d7f0 	.word	0x0800d7f0
 80085ec:	0800d7f0 	.word	0x0800d7f0
 80085f0:	0800d7f4 	.word	0x0800d7f4

080085f4 <__retarget_lock_init_recursive>:
 80085f4:	4770      	bx	lr

080085f6 <__retarget_lock_acquire_recursive>:
 80085f6:	4770      	bx	lr

080085f8 <__retarget_lock_release_recursive>:
 80085f8:	4770      	bx	lr

080085fa <memchr>:
 80085fa:	4603      	mov	r3, r0
 80085fc:	b510      	push	{r4, lr}
 80085fe:	b2c9      	uxtb	r1, r1
 8008600:	4402      	add	r2, r0
 8008602:	4293      	cmp	r3, r2
 8008604:	4618      	mov	r0, r3
 8008606:	d101      	bne.n	800860c <memchr+0x12>
 8008608:	2000      	movs	r0, #0
 800860a:	e003      	b.n	8008614 <memchr+0x1a>
 800860c:	7804      	ldrb	r4, [r0, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	428c      	cmp	r4, r1
 8008612:	d1f6      	bne.n	8008602 <memchr+0x8>
 8008614:	bd10      	pop	{r4, pc}

08008616 <memcpy>:
 8008616:	440a      	add	r2, r1
 8008618:	4291      	cmp	r1, r2
 800861a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800861e:	d100      	bne.n	8008622 <memcpy+0xc>
 8008620:	4770      	bx	lr
 8008622:	b510      	push	{r4, lr}
 8008624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008628:	4291      	cmp	r1, r2
 800862a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800862e:	d1f9      	bne.n	8008624 <memcpy+0xe>
 8008630:	bd10      	pop	{r4, pc}
	...

08008634 <nanf>:
 8008634:	4800      	ldr	r0, [pc, #0]	@ (8008638 <nanf+0x4>)
 8008636:	4770      	bx	lr
 8008638:	7fc00000 	.word	0x7fc00000

0800863c <quorem>:
 800863c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	6903      	ldr	r3, [r0, #16]
 8008642:	690c      	ldr	r4, [r1, #16]
 8008644:	4607      	mov	r7, r0
 8008646:	42a3      	cmp	r3, r4
 8008648:	db7e      	blt.n	8008748 <quorem+0x10c>
 800864a:	3c01      	subs	r4, #1
 800864c:	00a3      	lsls	r3, r4, #2
 800864e:	f100 0514 	add.w	r5, r0, #20
 8008652:	f101 0814 	add.w	r8, r1, #20
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008662:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008666:	3301      	adds	r3, #1
 8008668:	429a      	cmp	r2, r3
 800866a:	fbb2 f6f3 	udiv	r6, r2, r3
 800866e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008672:	d32e      	bcc.n	80086d2 <quorem+0x96>
 8008674:	f04f 0a00 	mov.w	sl, #0
 8008678:	46c4      	mov	ip, r8
 800867a:	46ae      	mov	lr, r5
 800867c:	46d3      	mov	fp, sl
 800867e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008682:	b298      	uxth	r0, r3
 8008684:	fb06 a000 	mla	r0, r6, r0, sl
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	0c02      	lsrs	r2, r0, #16
 800868c:	fb06 2303 	mla	r3, r6, r3, r2
 8008690:	f8de 2000 	ldr.w	r2, [lr]
 8008694:	b280      	uxth	r0, r0
 8008696:	b292      	uxth	r2, r2
 8008698:	1a12      	subs	r2, r2, r0
 800869a:	445a      	add	r2, fp
 800869c:	f8de 0000 	ldr.w	r0, [lr]
 80086a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80086aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80086ae:	b292      	uxth	r2, r2
 80086b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80086b4:	45e1      	cmp	r9, ip
 80086b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80086ba:	f84e 2b04 	str.w	r2, [lr], #4
 80086be:	d2de      	bcs.n	800867e <quorem+0x42>
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	58eb      	ldr	r3, [r5, r3]
 80086c4:	b92b      	cbnz	r3, 80086d2 <quorem+0x96>
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	3b04      	subs	r3, #4
 80086ca:	429d      	cmp	r5, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	d32f      	bcc.n	8008730 <quorem+0xf4>
 80086d0:	613c      	str	r4, [r7, #16]
 80086d2:	4638      	mov	r0, r7
 80086d4:	f001 f9c4 	bl	8009a60 <__mcmp>
 80086d8:	2800      	cmp	r0, #0
 80086da:	db25      	blt.n	8008728 <quorem+0xec>
 80086dc:	4629      	mov	r1, r5
 80086de:	2000      	movs	r0, #0
 80086e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80086e4:	f8d1 c000 	ldr.w	ip, [r1]
 80086e8:	fa1f fe82 	uxth.w	lr, r2
 80086ec:	fa1f f38c 	uxth.w	r3, ip
 80086f0:	eba3 030e 	sub.w	r3, r3, lr
 80086f4:	4403      	add	r3, r0
 80086f6:	0c12      	lsrs	r2, r2, #16
 80086f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80086fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008700:	b29b      	uxth	r3, r3
 8008702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008706:	45c1      	cmp	r9, r8
 8008708:	ea4f 4022 	mov.w	r0, r2, asr #16
 800870c:	f841 3b04 	str.w	r3, [r1], #4
 8008710:	d2e6      	bcs.n	80086e0 <quorem+0xa4>
 8008712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800871a:	b922      	cbnz	r2, 8008726 <quorem+0xea>
 800871c:	3b04      	subs	r3, #4
 800871e:	429d      	cmp	r5, r3
 8008720:	461a      	mov	r2, r3
 8008722:	d30b      	bcc.n	800873c <quorem+0x100>
 8008724:	613c      	str	r4, [r7, #16]
 8008726:	3601      	adds	r6, #1
 8008728:	4630      	mov	r0, r6
 800872a:	b003      	add	sp, #12
 800872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	3b04      	subs	r3, #4
 8008734:	2a00      	cmp	r2, #0
 8008736:	d1cb      	bne.n	80086d0 <quorem+0x94>
 8008738:	3c01      	subs	r4, #1
 800873a:	e7c6      	b.n	80086ca <quorem+0x8e>
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	3b04      	subs	r3, #4
 8008740:	2a00      	cmp	r2, #0
 8008742:	d1ef      	bne.n	8008724 <quorem+0xe8>
 8008744:	3c01      	subs	r4, #1
 8008746:	e7ea      	b.n	800871e <quorem+0xe2>
 8008748:	2000      	movs	r0, #0
 800874a:	e7ee      	b.n	800872a <quorem+0xee>
 800874c:	0000      	movs	r0, r0
	...

08008750 <_dtoa_r>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	4614      	mov	r4, r2
 8008756:	461d      	mov	r5, r3
 8008758:	69c7      	ldr	r7, [r0, #28]
 800875a:	b097      	sub	sp, #92	@ 0x5c
 800875c:	4683      	mov	fp, r0
 800875e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008762:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008764:	b97f      	cbnz	r7, 8008786 <_dtoa_r+0x36>
 8008766:	2010      	movs	r0, #16
 8008768:	f000 fe02 	bl	8009370 <malloc>
 800876c:	4602      	mov	r2, r0
 800876e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008772:	b920      	cbnz	r0, 800877e <_dtoa_r+0x2e>
 8008774:	21ef      	movs	r1, #239	@ 0xef
 8008776:	4ba8      	ldr	r3, [pc, #672]	@ (8008a18 <_dtoa_r+0x2c8>)
 8008778:	48a8      	ldr	r0, [pc, #672]	@ (8008a1c <_dtoa_r+0x2cc>)
 800877a:	f002 fc15 	bl	800afa8 <__assert_func>
 800877e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008782:	6007      	str	r7, [r0, #0]
 8008784:	60c7      	str	r7, [r0, #12]
 8008786:	f8db 301c 	ldr.w	r3, [fp, #28]
 800878a:	6819      	ldr	r1, [r3, #0]
 800878c:	b159      	cbz	r1, 80087a6 <_dtoa_r+0x56>
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	2301      	movs	r3, #1
 8008792:	4093      	lsls	r3, r2
 8008794:	604a      	str	r2, [r1, #4]
 8008796:	608b      	str	r3, [r1, #8]
 8008798:	4658      	mov	r0, fp
 800879a:	f000 fedf 	bl	800955c <_Bfree>
 800879e:	2200      	movs	r2, #0
 80087a0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	1e2b      	subs	r3, r5, #0
 80087a8:	bfaf      	iteee	ge
 80087aa:	2300      	movge	r3, #0
 80087ac:	2201      	movlt	r2, #1
 80087ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80087b2:	9303      	strlt	r3, [sp, #12]
 80087b4:	bfa8      	it	ge
 80087b6:	6033      	strge	r3, [r6, #0]
 80087b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087bc:	4b98      	ldr	r3, [pc, #608]	@ (8008a20 <_dtoa_r+0x2d0>)
 80087be:	bfb8      	it	lt
 80087c0:	6032      	strlt	r2, [r6, #0]
 80087c2:	ea33 0308 	bics.w	r3, r3, r8
 80087c6:	d112      	bne.n	80087ee <_dtoa_r+0x9e>
 80087c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80087cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80087d4:	4323      	orrs	r3, r4
 80087d6:	f000 8550 	beq.w	800927a <_dtoa_r+0xb2a>
 80087da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087dc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008a24 <_dtoa_r+0x2d4>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 8552 	beq.w	800928a <_dtoa_r+0xb3a>
 80087e6:	f10a 0303 	add.w	r3, sl, #3
 80087ea:	f000 bd4c 	b.w	8009286 <_dtoa_r+0xb36>
 80087ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80087f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087fa:	2200      	movs	r2, #0
 80087fc:	2300      	movs	r3, #0
 80087fe:	f7f8 f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 8008802:	4607      	mov	r7, r0
 8008804:	b158      	cbz	r0, 800881e <_dtoa_r+0xce>
 8008806:	2301      	movs	r3, #1
 8008808:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800880e:	b113      	cbz	r3, 8008816 <_dtoa_r+0xc6>
 8008810:	4b85      	ldr	r3, [pc, #532]	@ (8008a28 <_dtoa_r+0x2d8>)
 8008812:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008a2c <_dtoa_r+0x2dc>
 800881a:	f000 bd36 	b.w	800928a <_dtoa_r+0xb3a>
 800881e:	ab14      	add	r3, sp, #80	@ 0x50
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	ab15      	add	r3, sp, #84	@ 0x54
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	4658      	mov	r0, fp
 8008828:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800882c:	f001 fa30 	bl	8009c90 <__d2b>
 8008830:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008834:	4681      	mov	r9, r0
 8008836:	2e00      	cmp	r6, #0
 8008838:	d077      	beq.n	800892a <_dtoa_r+0x1da>
 800883a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800883e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008840:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008848:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800884c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008850:	9712      	str	r7, [sp, #72]	@ 0x48
 8008852:	4619      	mov	r1, r3
 8008854:	2200      	movs	r2, #0
 8008856:	4b76      	ldr	r3, [pc, #472]	@ (8008a30 <_dtoa_r+0x2e0>)
 8008858:	f7f7 fc86 	bl	8000168 <__aeabi_dsub>
 800885c:	a368      	add	r3, pc, #416	@ (adr r3, 8008a00 <_dtoa_r+0x2b0>)
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	f7f7 fe39 	bl	80004d8 <__aeabi_dmul>
 8008866:	a368      	add	r3, pc, #416	@ (adr r3, 8008a08 <_dtoa_r+0x2b8>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 fc7e 	bl	800016c <__adddf3>
 8008870:	4604      	mov	r4, r0
 8008872:	4630      	mov	r0, r6
 8008874:	460d      	mov	r5, r1
 8008876:	f7f7 fdc5 	bl	8000404 <__aeabi_i2d>
 800887a:	a365      	add	r3, pc, #404	@ (adr r3, 8008a10 <_dtoa_r+0x2c0>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f7 fe2a 	bl	80004d8 <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4620      	mov	r0, r4
 800888a:	4629      	mov	r1, r5
 800888c:	f7f7 fc6e 	bl	800016c <__adddf3>
 8008890:	4604      	mov	r4, r0
 8008892:	460d      	mov	r5, r1
 8008894:	f7f8 f8d0 	bl	8000a38 <__aeabi_d2iz>
 8008898:	2200      	movs	r2, #0
 800889a:	4607      	mov	r7, r0
 800889c:	2300      	movs	r3, #0
 800889e:	4620      	mov	r0, r4
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f8 f88b 	bl	80009bc <__aeabi_dcmplt>
 80088a6:	b140      	cbz	r0, 80088ba <_dtoa_r+0x16a>
 80088a8:	4638      	mov	r0, r7
 80088aa:	f7f7 fdab 	bl	8000404 <__aeabi_i2d>
 80088ae:	4622      	mov	r2, r4
 80088b0:	462b      	mov	r3, r5
 80088b2:	f7f8 f879 	bl	80009a8 <__aeabi_dcmpeq>
 80088b6:	b900      	cbnz	r0, 80088ba <_dtoa_r+0x16a>
 80088b8:	3f01      	subs	r7, #1
 80088ba:	2f16      	cmp	r7, #22
 80088bc:	d853      	bhi.n	8008966 <_dtoa_r+0x216>
 80088be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008a34 <_dtoa_r+0x2e4>)
 80088c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f8 f876 	bl	80009bc <__aeabi_dcmplt>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d04a      	beq.n	800896a <_dtoa_r+0x21a>
 80088d4:	2300      	movs	r3, #0
 80088d6:	3f01      	subs	r7, #1
 80088d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088dc:	1b9b      	subs	r3, r3, r6
 80088de:	1e5a      	subs	r2, r3, #1
 80088e0:	bf46      	itte	mi
 80088e2:	f1c3 0801 	rsbmi	r8, r3, #1
 80088e6:	2300      	movmi	r3, #0
 80088e8:	f04f 0800 	movpl.w	r8, #0
 80088ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80088ee:	bf48      	it	mi
 80088f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80088f2:	2f00      	cmp	r7, #0
 80088f4:	db3b      	blt.n	800896e <_dtoa_r+0x21e>
 80088f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f8:	970e      	str	r7, [sp, #56]	@ 0x38
 80088fa:	443b      	add	r3, r7
 80088fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fe:	2300      	movs	r3, #0
 8008900:	930a      	str	r3, [sp, #40]	@ 0x28
 8008902:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008904:	2b09      	cmp	r3, #9
 8008906:	d866      	bhi.n	80089d6 <_dtoa_r+0x286>
 8008908:	2b05      	cmp	r3, #5
 800890a:	bfc4      	itt	gt
 800890c:	3b04      	subgt	r3, #4
 800890e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008910:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008912:	bfc8      	it	gt
 8008914:	2400      	movgt	r4, #0
 8008916:	f1a3 0302 	sub.w	r3, r3, #2
 800891a:	bfd8      	it	le
 800891c:	2401      	movle	r4, #1
 800891e:	2b03      	cmp	r3, #3
 8008920:	d864      	bhi.n	80089ec <_dtoa_r+0x29c>
 8008922:	e8df f003 	tbb	[pc, r3]
 8008926:	382b      	.short	0x382b
 8008928:	5636      	.short	0x5636
 800892a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800892e:	441e      	add	r6, r3
 8008930:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008934:	2b20      	cmp	r3, #32
 8008936:	bfc1      	itttt	gt
 8008938:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800893c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008940:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008944:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008948:	bfd6      	itet	le
 800894a:	f1c3 0320 	rsble	r3, r3, #32
 800894e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008952:	fa04 f003 	lslle.w	r0, r4, r3
 8008956:	f7f7 fd45 	bl	80003e4 <__aeabi_ui2d>
 800895a:	2201      	movs	r2, #1
 800895c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008960:	3e01      	subs	r6, #1
 8008962:	9212      	str	r2, [sp, #72]	@ 0x48
 8008964:	e775      	b.n	8008852 <_dtoa_r+0x102>
 8008966:	2301      	movs	r3, #1
 8008968:	e7b6      	b.n	80088d8 <_dtoa_r+0x188>
 800896a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800896c:	e7b5      	b.n	80088da <_dtoa_r+0x18a>
 800896e:	427b      	negs	r3, r7
 8008970:	930a      	str	r3, [sp, #40]	@ 0x28
 8008972:	2300      	movs	r3, #0
 8008974:	eba8 0807 	sub.w	r8, r8, r7
 8008978:	930e      	str	r3, [sp, #56]	@ 0x38
 800897a:	e7c2      	b.n	8008902 <_dtoa_r+0x1b2>
 800897c:	2300      	movs	r3, #0
 800897e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008980:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008982:	2b00      	cmp	r3, #0
 8008984:	dc35      	bgt.n	80089f2 <_dtoa_r+0x2a2>
 8008986:	2301      	movs	r3, #1
 8008988:	461a      	mov	r2, r3
 800898a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800898e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008990:	e00b      	b.n	80089aa <_dtoa_r+0x25a>
 8008992:	2301      	movs	r3, #1
 8008994:	e7f3      	b.n	800897e <_dtoa_r+0x22e>
 8008996:	2300      	movs	r3, #0
 8008998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800899a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800899c:	18fb      	adds	r3, r7, r3
 800899e:	9308      	str	r3, [sp, #32]
 80089a0:	3301      	adds	r3, #1
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	9307      	str	r3, [sp, #28]
 80089a6:	bfb8      	it	lt
 80089a8:	2301      	movlt	r3, #1
 80089aa:	2100      	movs	r1, #0
 80089ac:	2204      	movs	r2, #4
 80089ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80089b2:	f102 0514 	add.w	r5, r2, #20
 80089b6:	429d      	cmp	r5, r3
 80089b8:	d91f      	bls.n	80089fa <_dtoa_r+0x2aa>
 80089ba:	6041      	str	r1, [r0, #4]
 80089bc:	4658      	mov	r0, fp
 80089be:	f000 fd8d 	bl	80094dc <_Balloc>
 80089c2:	4682      	mov	sl, r0
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d139      	bne.n	8008a3c <_dtoa_r+0x2ec>
 80089c8:	4602      	mov	r2, r0
 80089ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80089ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008a38 <_dtoa_r+0x2e8>)
 80089d0:	e6d2      	b.n	8008778 <_dtoa_r+0x28>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7e0      	b.n	8008998 <_dtoa_r+0x248>
 80089d6:	2401      	movs	r4, #1
 80089d8:	2300      	movs	r3, #0
 80089da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80089dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80089de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089e2:	2200      	movs	r2, #0
 80089e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80089e8:	2312      	movs	r3, #18
 80089ea:	e7d0      	b.n	800898e <_dtoa_r+0x23e>
 80089ec:	2301      	movs	r3, #1
 80089ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089f0:	e7f5      	b.n	80089de <_dtoa_r+0x28e>
 80089f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80089f8:	e7d7      	b.n	80089aa <_dtoa_r+0x25a>
 80089fa:	3101      	adds	r1, #1
 80089fc:	0052      	lsls	r2, r2, #1
 80089fe:	e7d8      	b.n	80089b2 <_dtoa_r+0x262>
 8008a00:	636f4361 	.word	0x636f4361
 8008a04:	3fd287a7 	.word	0x3fd287a7
 8008a08:	8b60c8b3 	.word	0x8b60c8b3
 8008a0c:	3fc68a28 	.word	0x3fc68a28
 8008a10:	509f79fb 	.word	0x509f79fb
 8008a14:	3fd34413 	.word	0x3fd34413
 8008a18:	0800d0dc 	.word	0x0800d0dc
 8008a1c:	0800d0f3 	.word	0x0800d0f3
 8008a20:	7ff00000 	.word	0x7ff00000
 8008a24:	0800d0d8 	.word	0x0800d0d8
 8008a28:	0800d0a7 	.word	0x0800d0a7
 8008a2c:	0800d0a6 	.word	0x0800d0a6
 8008a30:	3ff80000 	.word	0x3ff80000
 8008a34:	0800d1f0 	.word	0x0800d1f0
 8008a38:	0800d14b 	.word	0x0800d14b
 8008a3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a40:	6018      	str	r0, [r3, #0]
 8008a42:	9b07      	ldr	r3, [sp, #28]
 8008a44:	2b0e      	cmp	r3, #14
 8008a46:	f200 80a4 	bhi.w	8008b92 <_dtoa_r+0x442>
 8008a4a:	2c00      	cmp	r4, #0
 8008a4c:	f000 80a1 	beq.w	8008b92 <_dtoa_r+0x442>
 8008a50:	2f00      	cmp	r7, #0
 8008a52:	dd33      	ble.n	8008abc <_dtoa_r+0x36c>
 8008a54:	4b86      	ldr	r3, [pc, #536]	@ (8008c70 <_dtoa_r+0x520>)
 8008a56:	f007 020f 	and.w	r2, r7, #15
 8008a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a5e:	05f8      	lsls	r0, r7, #23
 8008a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008a6c:	d516      	bpl.n	8008a9c <_dtoa_r+0x34c>
 8008a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a72:	4b80      	ldr	r3, [pc, #512]	@ (8008c74 <_dtoa_r+0x524>)
 8008a74:	2603      	movs	r6, #3
 8008a76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a7a:	f7f7 fe57 	bl	800072c <__aeabi_ddiv>
 8008a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a82:	f004 040f 	and.w	r4, r4, #15
 8008a86:	4d7b      	ldr	r5, [pc, #492]	@ (8008c74 <_dtoa_r+0x524>)
 8008a88:	b954      	cbnz	r4, 8008aa0 <_dtoa_r+0x350>
 8008a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a92:	f7f7 fe4b 	bl	800072c <__aeabi_ddiv>
 8008a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a9a:	e028      	b.n	8008aee <_dtoa_r+0x39e>
 8008a9c:	2602      	movs	r6, #2
 8008a9e:	e7f2      	b.n	8008a86 <_dtoa_r+0x336>
 8008aa0:	07e1      	lsls	r1, r4, #31
 8008aa2:	d508      	bpl.n	8008ab6 <_dtoa_r+0x366>
 8008aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008aac:	f7f7 fd14 	bl	80004d8 <__aeabi_dmul>
 8008ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ab4:	3601      	adds	r6, #1
 8008ab6:	1064      	asrs	r4, r4, #1
 8008ab8:	3508      	adds	r5, #8
 8008aba:	e7e5      	b.n	8008a88 <_dtoa_r+0x338>
 8008abc:	f000 80d2 	beq.w	8008c64 <_dtoa_r+0x514>
 8008ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ac4:	427c      	negs	r4, r7
 8008ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8008c70 <_dtoa_r+0x520>)
 8008ac8:	f004 020f 	and.w	r2, r4, #15
 8008acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 fd00 	bl	80004d8 <__aeabi_dmul>
 8008ad8:	2602      	movs	r6, #2
 8008ada:	2300      	movs	r3, #0
 8008adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae0:	4d64      	ldr	r5, [pc, #400]	@ (8008c74 <_dtoa_r+0x524>)
 8008ae2:	1124      	asrs	r4, r4, #4
 8008ae4:	2c00      	cmp	r4, #0
 8008ae6:	f040 80b2 	bne.w	8008c4e <_dtoa_r+0x4fe>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1d3      	bne.n	8008a96 <_dtoa_r+0x346>
 8008aee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 80b7 	beq.w	8008c68 <_dtoa_r+0x518>
 8008afa:	2200      	movs	r2, #0
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	4b5d      	ldr	r3, [pc, #372]	@ (8008c78 <_dtoa_r+0x528>)
 8008b02:	f7f7 ff5b 	bl	80009bc <__aeabi_dcmplt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f000 80ae 	beq.w	8008c68 <_dtoa_r+0x518>
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 80aa 	beq.w	8008c68 <_dtoa_r+0x518>
 8008b14:	9b08      	ldr	r3, [sp, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dd37      	ble.n	8008b8a <_dtoa_r+0x43a>
 8008b1a:	1e7b      	subs	r3, r7, #1
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	2200      	movs	r2, #0
 8008b22:	4629      	mov	r1, r5
 8008b24:	4b55      	ldr	r3, [pc, #340]	@ (8008c7c <_dtoa_r+0x52c>)
 8008b26:	f7f7 fcd7 	bl	80004d8 <__aeabi_dmul>
 8008b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2e:	9c08      	ldr	r4, [sp, #32]
 8008b30:	3601      	adds	r6, #1
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7f7 fc66 	bl	8000404 <__aeabi_i2d>
 8008b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b3c:	f7f7 fccc 	bl	80004d8 <__aeabi_dmul>
 8008b40:	2200      	movs	r2, #0
 8008b42:	4b4f      	ldr	r3, [pc, #316]	@ (8008c80 <_dtoa_r+0x530>)
 8008b44:	f7f7 fb12 	bl	800016c <__adddf3>
 8008b48:	4605      	mov	r5, r0
 8008b4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	f040 809a 	bne.w	8008c88 <_dtoa_r+0x538>
 8008b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8008c84 <_dtoa_r+0x534>)
 8008b5c:	f7f7 fb04 	bl	8000168 <__aeabi_dsub>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b68:	462a      	mov	r2, r5
 8008b6a:	4633      	mov	r3, r6
 8008b6c:	f7f7 ff44 	bl	80009f8 <__aeabi_dcmpgt>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f040 828e 	bne.w	8009092 <_dtoa_r+0x942>
 8008b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b80:	f7f7 ff1c 	bl	80009bc <__aeabi_dcmplt>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f040 8127 	bne.w	8008dd8 <_dtoa_r+0x688>
 8008b8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008b8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f2c0 8163 	blt.w	8008e60 <_dtoa_r+0x710>
 8008b9a:	2f0e      	cmp	r7, #14
 8008b9c:	f300 8160 	bgt.w	8008e60 <_dtoa_r+0x710>
 8008ba0:	4b33      	ldr	r3, [pc, #204]	@ (8008c70 <_dtoa_r+0x520>)
 8008ba2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ba6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008baa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008bae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da03      	bge.n	8008bbc <_dtoa_r+0x46c>
 8008bb4:	9b07      	ldr	r3, [sp, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f340 8100 	ble.w	8008dbc <_dtoa_r+0x66c>
 8008bbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bc0:	4656      	mov	r6, sl
 8008bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	4629      	mov	r1, r5
 8008bca:	f7f7 fdaf 	bl	800072c <__aeabi_ddiv>
 8008bce:	f7f7 ff33 	bl	8000a38 <__aeabi_d2iz>
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	f7f7 fc16 	bl	8000404 <__aeabi_i2d>
 8008bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bdc:	f7f7 fc7c 	bl	80004d8 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	f7f7 fabe 	bl	8000168 <__aeabi_dsub>
 8008bec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008bf0:	9d07      	ldr	r5, [sp, #28]
 8008bf2:	f806 4b01 	strb.w	r4, [r6], #1
 8008bf6:	eba6 040a 	sub.w	r4, r6, sl
 8008bfa:	42a5      	cmp	r5, r4
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	f040 8116 	bne.w	8008e30 <_dtoa_r+0x6e0>
 8008c04:	f7f7 fab2 	bl	800016c <__adddf3>
 8008c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	f7f7 fef2 	bl	80009f8 <__aeabi_dcmpgt>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f040 80f8 	bne.w	8008e0a <_dtoa_r+0x6ba>
 8008c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 fec1 	bl	80009a8 <__aeabi_dcmpeq>
 8008c26:	b118      	cbz	r0, 8008c30 <_dtoa_r+0x4e0>
 8008c28:	f018 0f01 	tst.w	r8, #1
 8008c2c:	f040 80ed 	bne.w	8008e0a <_dtoa_r+0x6ba>
 8008c30:	4649      	mov	r1, r9
 8008c32:	4658      	mov	r0, fp
 8008c34:	f000 fc92 	bl	800955c <_Bfree>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	7033      	strb	r3, [r6, #0]
 8008c3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c3e:	3701      	adds	r7, #1
 8008c40:	601f      	str	r7, [r3, #0]
 8008c42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 8320 	beq.w	800928a <_dtoa_r+0xb3a>
 8008c4a:	601e      	str	r6, [r3, #0]
 8008c4c:	e31d      	b.n	800928a <_dtoa_r+0xb3a>
 8008c4e:	07e2      	lsls	r2, r4, #31
 8008c50:	d505      	bpl.n	8008c5e <_dtoa_r+0x50e>
 8008c52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c56:	f7f7 fc3f 	bl	80004d8 <__aeabi_dmul>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	1064      	asrs	r4, r4, #1
 8008c60:	3508      	adds	r5, #8
 8008c62:	e73f      	b.n	8008ae4 <_dtoa_r+0x394>
 8008c64:	2602      	movs	r6, #2
 8008c66:	e742      	b.n	8008aee <_dtoa_r+0x39e>
 8008c68:	9c07      	ldr	r4, [sp, #28]
 8008c6a:	9704      	str	r7, [sp, #16]
 8008c6c:	e761      	b.n	8008b32 <_dtoa_r+0x3e2>
 8008c6e:	bf00      	nop
 8008c70:	0800d1f0 	.word	0x0800d1f0
 8008c74:	0800d1c8 	.word	0x0800d1c8
 8008c78:	3ff00000 	.word	0x3ff00000
 8008c7c:	40240000 	.word	0x40240000
 8008c80:	401c0000 	.word	0x401c0000
 8008c84:	40140000 	.word	0x40140000
 8008c88:	4b70      	ldr	r3, [pc, #448]	@ (8008e4c <_dtoa_r+0x6fc>)
 8008c8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c94:	4454      	add	r4, sl
 8008c96:	2900      	cmp	r1, #0
 8008c98:	d045      	beq.n	8008d26 <_dtoa_r+0x5d6>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	496c      	ldr	r1, [pc, #432]	@ (8008e50 <_dtoa_r+0x700>)
 8008c9e:	f7f7 fd45 	bl	800072c <__aeabi_ddiv>
 8008ca2:	4633      	mov	r3, r6
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	f7f7 fa5f 	bl	8000168 <__aeabi_dsub>
 8008caa:	4656      	mov	r6, sl
 8008cac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb4:	f7f7 fec0 	bl	8000a38 <__aeabi_d2iz>
 8008cb8:	4605      	mov	r5, r0
 8008cba:	f7f7 fba3 	bl	8000404 <__aeabi_i2d>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc6:	f7f7 fa4f 	bl	8000168 <__aeabi_dsub>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	3530      	adds	r5, #48	@ 0x30
 8008cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cd8:	f806 5b01 	strb.w	r5, [r6], #1
 8008cdc:	f7f7 fe6e 	bl	80009bc <__aeabi_dcmplt>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d163      	bne.n	8008dac <_dtoa_r+0x65c>
 8008ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce8:	2000      	movs	r0, #0
 8008cea:	495a      	ldr	r1, [pc, #360]	@ (8008e54 <_dtoa_r+0x704>)
 8008cec:	f7f7 fa3c 	bl	8000168 <__aeabi_dsub>
 8008cf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cf4:	f7f7 fe62 	bl	80009bc <__aeabi_dcmplt>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	f040 8087 	bne.w	8008e0c <_dtoa_r+0x6bc>
 8008cfe:	42a6      	cmp	r6, r4
 8008d00:	f43f af43 	beq.w	8008b8a <_dtoa_r+0x43a>
 8008d04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4b53      	ldr	r3, [pc, #332]	@ (8008e58 <_dtoa_r+0x708>)
 8008d0c:	f7f7 fbe4 	bl	80004d8 <__aeabi_dmul>
 8008d10:	2200      	movs	r2, #0
 8008d12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8008e58 <_dtoa_r+0x708>)
 8008d1c:	f7f7 fbdc 	bl	80004d8 <__aeabi_dmul>
 8008d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d24:	e7c4      	b.n	8008cb0 <_dtoa_r+0x560>
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f7f7 fbd5 	bl	80004d8 <__aeabi_dmul>
 8008d2e:	4656      	mov	r6, sl
 8008d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d34:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d3a:	f7f7 fe7d 	bl	8000a38 <__aeabi_d2iz>
 8008d3e:	4605      	mov	r5, r0
 8008d40:	f7f7 fb60 	bl	8000404 <__aeabi_i2d>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d4c:	f7f7 fa0c 	bl	8000168 <__aeabi_dsub>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	3530      	adds	r5, #48	@ 0x30
 8008d56:	f806 5b01 	strb.w	r5, [r6], #1
 8008d5a:	42a6      	cmp	r6, r4
 8008d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	d124      	bne.n	8008db0 <_dtoa_r+0x660>
 8008d66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d6a:	4b39      	ldr	r3, [pc, #228]	@ (8008e50 <_dtoa_r+0x700>)
 8008d6c:	f7f7 f9fe 	bl	800016c <__adddf3>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d78:	f7f7 fe3e 	bl	80009f8 <__aeabi_dcmpgt>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d145      	bne.n	8008e0c <_dtoa_r+0x6bc>
 8008d80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d84:	2000      	movs	r0, #0
 8008d86:	4932      	ldr	r1, [pc, #200]	@ (8008e50 <_dtoa_r+0x700>)
 8008d88:	f7f7 f9ee 	bl	8000168 <__aeabi_dsub>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d94:	f7f7 fe12 	bl	80009bc <__aeabi_dcmplt>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	f43f aef6 	beq.w	8008b8a <_dtoa_r+0x43a>
 8008d9e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008da0:	1e73      	subs	r3, r6, #1
 8008da2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008da4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008da8:	2b30      	cmp	r3, #48	@ 0x30
 8008daa:	d0f8      	beq.n	8008d9e <_dtoa_r+0x64e>
 8008dac:	9f04      	ldr	r7, [sp, #16]
 8008dae:	e73f      	b.n	8008c30 <_dtoa_r+0x4e0>
 8008db0:	4b29      	ldr	r3, [pc, #164]	@ (8008e58 <_dtoa_r+0x708>)
 8008db2:	f7f7 fb91 	bl	80004d8 <__aeabi_dmul>
 8008db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dba:	e7bc      	b.n	8008d36 <_dtoa_r+0x5e6>
 8008dbc:	d10c      	bne.n	8008dd8 <_dtoa_r+0x688>
 8008dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	4b25      	ldr	r3, [pc, #148]	@ (8008e5c <_dtoa_r+0x70c>)
 8008dc6:	f7f7 fb87 	bl	80004d8 <__aeabi_dmul>
 8008dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dce:	f7f7 fe09 	bl	80009e4 <__aeabi_dcmpge>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f000 815b 	beq.w	800908e <_dtoa_r+0x93e>
 8008dd8:	2400      	movs	r4, #0
 8008dda:	4625      	mov	r5, r4
 8008ddc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008dde:	4656      	mov	r6, sl
 8008de0:	43db      	mvns	r3, r3
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	2700      	movs	r7, #0
 8008de6:	4621      	mov	r1, r4
 8008de8:	4658      	mov	r0, fp
 8008dea:	f000 fbb7 	bl	800955c <_Bfree>
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	d0dc      	beq.n	8008dac <_dtoa_r+0x65c>
 8008df2:	b12f      	cbz	r7, 8008e00 <_dtoa_r+0x6b0>
 8008df4:	42af      	cmp	r7, r5
 8008df6:	d003      	beq.n	8008e00 <_dtoa_r+0x6b0>
 8008df8:	4639      	mov	r1, r7
 8008dfa:	4658      	mov	r0, fp
 8008dfc:	f000 fbae 	bl	800955c <_Bfree>
 8008e00:	4629      	mov	r1, r5
 8008e02:	4658      	mov	r0, fp
 8008e04:	f000 fbaa 	bl	800955c <_Bfree>
 8008e08:	e7d0      	b.n	8008dac <_dtoa_r+0x65c>
 8008e0a:	9704      	str	r7, [sp, #16]
 8008e0c:	4633      	mov	r3, r6
 8008e0e:	461e      	mov	r6, r3
 8008e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e14:	2a39      	cmp	r2, #57	@ 0x39
 8008e16:	d107      	bne.n	8008e28 <_dtoa_r+0x6d8>
 8008e18:	459a      	cmp	sl, r3
 8008e1a:	d1f8      	bne.n	8008e0e <_dtoa_r+0x6be>
 8008e1c:	9a04      	ldr	r2, [sp, #16]
 8008e1e:	3201      	adds	r2, #1
 8008e20:	9204      	str	r2, [sp, #16]
 8008e22:	2230      	movs	r2, #48	@ 0x30
 8008e24:	f88a 2000 	strb.w	r2, [sl]
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	3201      	adds	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e7bd      	b.n	8008dac <_dtoa_r+0x65c>
 8008e30:	2200      	movs	r2, #0
 8008e32:	4b09      	ldr	r3, [pc, #36]	@ (8008e58 <_dtoa_r+0x708>)
 8008e34:	f7f7 fb50 	bl	80004d8 <__aeabi_dmul>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	f7f7 fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f43f aebc 	beq.w	8008bc2 <_dtoa_r+0x472>
 8008e4a:	e6f1      	b.n	8008c30 <_dtoa_r+0x4e0>
 8008e4c:	0800d1f0 	.word	0x0800d1f0
 8008e50:	3fe00000 	.word	0x3fe00000
 8008e54:	3ff00000 	.word	0x3ff00000
 8008e58:	40240000 	.word	0x40240000
 8008e5c:	40140000 	.word	0x40140000
 8008e60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	f000 80db 	beq.w	800901e <_dtoa_r+0x8ce>
 8008e68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e6a:	2a01      	cmp	r2, #1
 8008e6c:	f300 80bf 	bgt.w	8008fee <_dtoa_r+0x89e>
 8008e70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	f000 80b7 	beq.w	8008fe6 <_dtoa_r+0x896>
 8008e78:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008e7c:	4646      	mov	r6, r8
 8008e7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e82:	2101      	movs	r1, #1
 8008e84:	441a      	add	r2, r3
 8008e86:	4658      	mov	r0, fp
 8008e88:	4498      	add	r8, r3
 8008e8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e8c:	f000 fc64 	bl	8009758 <__i2b>
 8008e90:	4605      	mov	r5, r0
 8008e92:	b15e      	cbz	r6, 8008eac <_dtoa_r+0x75c>
 8008e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dd08      	ble.n	8008eac <_dtoa_r+0x75c>
 8008e9a:	42b3      	cmp	r3, r6
 8008e9c:	bfa8      	it	ge
 8008e9e:	4633      	movge	r3, r6
 8008ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ea2:	eba8 0803 	sub.w	r8, r8, r3
 8008ea6:	1af6      	subs	r6, r6, r3
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eae:	b1f3      	cbz	r3, 8008eee <_dtoa_r+0x79e>
 8008eb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80b7 	beq.w	8009026 <_dtoa_r+0x8d6>
 8008eb8:	b18c      	cbz	r4, 8008ede <_dtoa_r+0x78e>
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4658      	mov	r0, fp
 8008ec0:	f000 fd08 	bl	80098d4 <__pow5mult>
 8008ec4:	464a      	mov	r2, r9
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	4605      	mov	r5, r0
 8008eca:	4658      	mov	r0, fp
 8008ecc:	f000 fc5a 	bl	8009784 <__multiply>
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	9004      	str	r0, [sp, #16]
 8008ed4:	4658      	mov	r0, fp
 8008ed6:	f000 fb41 	bl	800955c <_Bfree>
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	4699      	mov	r9, r3
 8008ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ee0:	1b1a      	subs	r2, r3, r4
 8008ee2:	d004      	beq.n	8008eee <_dtoa_r+0x79e>
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	4658      	mov	r0, fp
 8008ee8:	f000 fcf4 	bl	80098d4 <__pow5mult>
 8008eec:	4681      	mov	r9, r0
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4658      	mov	r0, fp
 8008ef2:	f000 fc31 	bl	8009758 <__i2b>
 8008ef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef8:	4604      	mov	r4, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 81c9 	beq.w	8009292 <_dtoa_r+0xb42>
 8008f00:	461a      	mov	r2, r3
 8008f02:	4601      	mov	r1, r0
 8008f04:	4658      	mov	r0, fp
 8008f06:	f000 fce5 	bl	80098d4 <__pow5mult>
 8008f0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	f300 808f 	bgt.w	8009032 <_dtoa_r+0x8e2>
 8008f14:	9b02      	ldr	r3, [sp, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f040 8087 	bne.w	800902a <_dtoa_r+0x8da>
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f040 8083 	bne.w	800902e <_dtoa_r+0x8de>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f2e:	0d1b      	lsrs	r3, r3, #20
 8008f30:	051b      	lsls	r3, r3, #20
 8008f32:	b12b      	cbz	r3, 8008f40 <_dtoa_r+0x7f0>
 8008f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f36:	f108 0801 	add.w	r8, r8, #1
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f3e:	2301      	movs	r3, #1
 8008f40:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 81aa 	beq.w	800929e <_dtoa_r+0xb4e>
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f50:	6918      	ldr	r0, [r3, #16]
 8008f52:	f000 fbb5 	bl	80096c0 <__hi0bits>
 8008f56:	f1c0 0020 	rsb	r0, r0, #32
 8008f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f5c:	4418      	add	r0, r3
 8008f5e:	f010 001f 	ands.w	r0, r0, #31
 8008f62:	d071      	beq.n	8009048 <_dtoa_r+0x8f8>
 8008f64:	f1c0 0320 	rsb	r3, r0, #32
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	dd65      	ble.n	8009038 <_dtoa_r+0x8e8>
 8008f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6e:	f1c0 001c 	rsb	r0, r0, #28
 8008f72:	4403      	add	r3, r0
 8008f74:	4480      	add	r8, r0
 8008f76:	4406      	add	r6, r0
 8008f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7a:	f1b8 0f00 	cmp.w	r8, #0
 8008f7e:	dd05      	ble.n	8008f8c <_dtoa_r+0x83c>
 8008f80:	4649      	mov	r1, r9
 8008f82:	4642      	mov	r2, r8
 8008f84:	4658      	mov	r0, fp
 8008f86:	f000 fcff 	bl	8009988 <__lshift>
 8008f8a:	4681      	mov	r9, r0
 8008f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	dd05      	ble.n	8008f9e <_dtoa_r+0x84e>
 8008f92:	4621      	mov	r1, r4
 8008f94:	461a      	mov	r2, r3
 8008f96:	4658      	mov	r0, fp
 8008f98:	f000 fcf6 	bl	8009988 <__lshift>
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d053      	beq.n	800904c <_dtoa_r+0x8fc>
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4648      	mov	r0, r9
 8008fa8:	f000 fd5a 	bl	8009a60 <__mcmp>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	da4d      	bge.n	800904c <_dtoa_r+0x8fc>
 8008fb0:	1e7b      	subs	r3, r7, #1
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	9304      	str	r3, [sp, #16]
 8008fb6:	220a      	movs	r2, #10
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4658      	mov	r0, fp
 8008fbc:	f000 faf0 	bl	80095a0 <__multadd>
 8008fc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fc2:	4681      	mov	r9, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 816c 	beq.w	80092a2 <_dtoa_r+0xb52>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4629      	mov	r1, r5
 8008fce:	220a      	movs	r2, #10
 8008fd0:	4658      	mov	r0, fp
 8008fd2:	f000 fae5 	bl	80095a0 <__multadd>
 8008fd6:	9b08      	ldr	r3, [sp, #32]
 8008fd8:	4605      	mov	r5, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dc61      	bgt.n	80090a2 <_dtoa_r+0x952>
 8008fde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	dc3b      	bgt.n	800905c <_dtoa_r+0x90c>
 8008fe4:	e05d      	b.n	80090a2 <_dtoa_r+0x952>
 8008fe6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008fe8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008fec:	e746      	b.n	8008e7c <_dtoa_r+0x72c>
 8008fee:	9b07      	ldr	r3, [sp, #28]
 8008ff0:	1e5c      	subs	r4, r3, #1
 8008ff2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	bfbf      	itttt	lt
 8008ff8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ffa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008ffc:	1ae3      	sublt	r3, r4, r3
 8008ffe:	18d2      	addlt	r2, r2, r3
 8009000:	bfa8      	it	ge
 8009002:	1b1c      	subge	r4, r3, r4
 8009004:	9b07      	ldr	r3, [sp, #28]
 8009006:	bfbe      	ittt	lt
 8009008:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800900a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800900c:	2400      	movlt	r4, #0
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfb5      	itete	lt
 8009012:	eba8 0603 	sublt.w	r6, r8, r3
 8009016:	4646      	movge	r6, r8
 8009018:	2300      	movlt	r3, #0
 800901a:	9b07      	ldrge	r3, [sp, #28]
 800901c:	e730      	b.n	8008e80 <_dtoa_r+0x730>
 800901e:	4646      	mov	r6, r8
 8009020:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009022:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009024:	e735      	b.n	8008e92 <_dtoa_r+0x742>
 8009026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009028:	e75c      	b.n	8008ee4 <_dtoa_r+0x794>
 800902a:	2300      	movs	r3, #0
 800902c:	e788      	b.n	8008f40 <_dtoa_r+0x7f0>
 800902e:	9b02      	ldr	r3, [sp, #8]
 8009030:	e786      	b.n	8008f40 <_dtoa_r+0x7f0>
 8009032:	2300      	movs	r3, #0
 8009034:	930a      	str	r3, [sp, #40]	@ 0x28
 8009036:	e788      	b.n	8008f4a <_dtoa_r+0x7fa>
 8009038:	d09f      	beq.n	8008f7a <_dtoa_r+0x82a>
 800903a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800903c:	331c      	adds	r3, #28
 800903e:	441a      	add	r2, r3
 8009040:	4498      	add	r8, r3
 8009042:	441e      	add	r6, r3
 8009044:	9209      	str	r2, [sp, #36]	@ 0x24
 8009046:	e798      	b.n	8008f7a <_dtoa_r+0x82a>
 8009048:	4603      	mov	r3, r0
 800904a:	e7f6      	b.n	800903a <_dtoa_r+0x8ea>
 800904c:	9b07      	ldr	r3, [sp, #28]
 800904e:	9704      	str	r7, [sp, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	dc20      	bgt.n	8009096 <_dtoa_r+0x946>
 8009054:	9308      	str	r3, [sp, #32]
 8009056:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009058:	2b02      	cmp	r3, #2
 800905a:	dd1e      	ble.n	800909a <_dtoa_r+0x94a>
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	2b00      	cmp	r3, #0
 8009060:	f47f aebc 	bne.w	8008ddc <_dtoa_r+0x68c>
 8009064:	4621      	mov	r1, r4
 8009066:	2205      	movs	r2, #5
 8009068:	4658      	mov	r0, fp
 800906a:	f000 fa99 	bl	80095a0 <__multadd>
 800906e:	4601      	mov	r1, r0
 8009070:	4604      	mov	r4, r0
 8009072:	4648      	mov	r0, r9
 8009074:	f000 fcf4 	bl	8009a60 <__mcmp>
 8009078:	2800      	cmp	r0, #0
 800907a:	f77f aeaf 	ble.w	8008ddc <_dtoa_r+0x68c>
 800907e:	2331      	movs	r3, #49	@ 0x31
 8009080:	4656      	mov	r6, sl
 8009082:	f806 3b01 	strb.w	r3, [r6], #1
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	3301      	adds	r3, #1
 800908a:	9304      	str	r3, [sp, #16]
 800908c:	e6aa      	b.n	8008de4 <_dtoa_r+0x694>
 800908e:	9c07      	ldr	r4, [sp, #28]
 8009090:	9704      	str	r7, [sp, #16]
 8009092:	4625      	mov	r5, r4
 8009094:	e7f3      	b.n	800907e <_dtoa_r+0x92e>
 8009096:	9b07      	ldr	r3, [sp, #28]
 8009098:	9308      	str	r3, [sp, #32]
 800909a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 8104 	beq.w	80092aa <_dtoa_r+0xb5a>
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	dd05      	ble.n	80090b2 <_dtoa_r+0x962>
 80090a6:	4629      	mov	r1, r5
 80090a8:	4632      	mov	r2, r6
 80090aa:	4658      	mov	r0, fp
 80090ac:	f000 fc6c 	bl	8009988 <__lshift>
 80090b0:	4605      	mov	r5, r0
 80090b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d05a      	beq.n	800916e <_dtoa_r+0xa1e>
 80090b8:	4658      	mov	r0, fp
 80090ba:	6869      	ldr	r1, [r5, #4]
 80090bc:	f000 fa0e 	bl	80094dc <_Balloc>
 80090c0:	4606      	mov	r6, r0
 80090c2:	b928      	cbnz	r0, 80090d0 <_dtoa_r+0x980>
 80090c4:	4602      	mov	r2, r0
 80090c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80090ca:	4b83      	ldr	r3, [pc, #524]	@ (80092d8 <_dtoa_r+0xb88>)
 80090cc:	f7ff bb54 	b.w	8008778 <_dtoa_r+0x28>
 80090d0:	692a      	ldr	r2, [r5, #16]
 80090d2:	f105 010c 	add.w	r1, r5, #12
 80090d6:	3202      	adds	r2, #2
 80090d8:	0092      	lsls	r2, r2, #2
 80090da:	300c      	adds	r0, #12
 80090dc:	f7ff fa9b 	bl	8008616 <memcpy>
 80090e0:	2201      	movs	r2, #1
 80090e2:	4631      	mov	r1, r6
 80090e4:	4658      	mov	r0, fp
 80090e6:	f000 fc4f 	bl	8009988 <__lshift>
 80090ea:	462f      	mov	r7, r5
 80090ec:	4605      	mov	r5, r0
 80090ee:	f10a 0301 	add.w	r3, sl, #1
 80090f2:	9307      	str	r3, [sp, #28]
 80090f4:	9b08      	ldr	r3, [sp, #32]
 80090f6:	4453      	add	r3, sl
 80090f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090fa:	9b02      	ldr	r3, [sp, #8]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	930a      	str	r3, [sp, #40]	@ 0x28
 8009102:	9b07      	ldr	r3, [sp, #28]
 8009104:	4621      	mov	r1, r4
 8009106:	3b01      	subs	r3, #1
 8009108:	4648      	mov	r0, r9
 800910a:	9302      	str	r3, [sp, #8]
 800910c:	f7ff fa96 	bl	800863c <quorem>
 8009110:	4639      	mov	r1, r7
 8009112:	9008      	str	r0, [sp, #32]
 8009114:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009118:	4648      	mov	r0, r9
 800911a:	f000 fca1 	bl	8009a60 <__mcmp>
 800911e:	462a      	mov	r2, r5
 8009120:	9009      	str	r0, [sp, #36]	@ 0x24
 8009122:	4621      	mov	r1, r4
 8009124:	4658      	mov	r0, fp
 8009126:	f000 fcb7 	bl	8009a98 <__mdiff>
 800912a:	68c2      	ldr	r2, [r0, #12]
 800912c:	4606      	mov	r6, r0
 800912e:	bb02      	cbnz	r2, 8009172 <_dtoa_r+0xa22>
 8009130:	4601      	mov	r1, r0
 8009132:	4648      	mov	r0, r9
 8009134:	f000 fc94 	bl	8009a60 <__mcmp>
 8009138:	4602      	mov	r2, r0
 800913a:	4631      	mov	r1, r6
 800913c:	4658      	mov	r0, fp
 800913e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009140:	f000 fa0c 	bl	800955c <_Bfree>
 8009144:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009146:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009148:	9e07      	ldr	r6, [sp, #28]
 800914a:	ea43 0102 	orr.w	r1, r3, r2
 800914e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009150:	4319      	orrs	r1, r3
 8009152:	d110      	bne.n	8009176 <_dtoa_r+0xa26>
 8009154:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009158:	d029      	beq.n	80091ae <_dtoa_r+0xa5e>
 800915a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	dd02      	ble.n	8009166 <_dtoa_r+0xa16>
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009166:	9b02      	ldr	r3, [sp, #8]
 8009168:	f883 8000 	strb.w	r8, [r3]
 800916c:	e63b      	b.n	8008de6 <_dtoa_r+0x696>
 800916e:	4628      	mov	r0, r5
 8009170:	e7bb      	b.n	80090ea <_dtoa_r+0x99a>
 8009172:	2201      	movs	r2, #1
 8009174:	e7e1      	b.n	800913a <_dtoa_r+0x9ea>
 8009176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	db04      	blt.n	8009186 <_dtoa_r+0xa36>
 800917c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800917e:	430b      	orrs	r3, r1
 8009180:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009182:	430b      	orrs	r3, r1
 8009184:	d120      	bne.n	80091c8 <_dtoa_r+0xa78>
 8009186:	2a00      	cmp	r2, #0
 8009188:	dded      	ble.n	8009166 <_dtoa_r+0xa16>
 800918a:	4649      	mov	r1, r9
 800918c:	2201      	movs	r2, #1
 800918e:	4658      	mov	r0, fp
 8009190:	f000 fbfa 	bl	8009988 <__lshift>
 8009194:	4621      	mov	r1, r4
 8009196:	4681      	mov	r9, r0
 8009198:	f000 fc62 	bl	8009a60 <__mcmp>
 800919c:	2800      	cmp	r0, #0
 800919e:	dc03      	bgt.n	80091a8 <_dtoa_r+0xa58>
 80091a0:	d1e1      	bne.n	8009166 <_dtoa_r+0xa16>
 80091a2:	f018 0f01 	tst.w	r8, #1
 80091a6:	d0de      	beq.n	8009166 <_dtoa_r+0xa16>
 80091a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091ac:	d1d8      	bne.n	8009160 <_dtoa_r+0xa10>
 80091ae:	2339      	movs	r3, #57	@ 0x39
 80091b0:	9a02      	ldr	r2, [sp, #8]
 80091b2:	7013      	strb	r3, [r2, #0]
 80091b4:	4633      	mov	r3, r6
 80091b6:	461e      	mov	r6, r3
 80091b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80091bc:	3b01      	subs	r3, #1
 80091be:	2a39      	cmp	r2, #57	@ 0x39
 80091c0:	d052      	beq.n	8009268 <_dtoa_r+0xb18>
 80091c2:	3201      	adds	r2, #1
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	e60e      	b.n	8008de6 <_dtoa_r+0x696>
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	dd07      	ble.n	80091dc <_dtoa_r+0xa8c>
 80091cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091d0:	d0ed      	beq.n	80091ae <_dtoa_r+0xa5e>
 80091d2:	9a02      	ldr	r2, [sp, #8]
 80091d4:	f108 0301 	add.w	r3, r8, #1
 80091d8:	7013      	strb	r3, [r2, #0]
 80091da:	e604      	b.n	8008de6 <_dtoa_r+0x696>
 80091dc:	9b07      	ldr	r3, [sp, #28]
 80091de:	9a07      	ldr	r2, [sp, #28]
 80091e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80091e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d028      	beq.n	800923c <_dtoa_r+0xaec>
 80091ea:	4649      	mov	r1, r9
 80091ec:	2300      	movs	r3, #0
 80091ee:	220a      	movs	r2, #10
 80091f0:	4658      	mov	r0, fp
 80091f2:	f000 f9d5 	bl	80095a0 <__multadd>
 80091f6:	42af      	cmp	r7, r5
 80091f8:	4681      	mov	r9, r0
 80091fa:	f04f 0300 	mov.w	r3, #0
 80091fe:	f04f 020a 	mov.w	r2, #10
 8009202:	4639      	mov	r1, r7
 8009204:	4658      	mov	r0, fp
 8009206:	d107      	bne.n	8009218 <_dtoa_r+0xac8>
 8009208:	f000 f9ca 	bl	80095a0 <__multadd>
 800920c:	4607      	mov	r7, r0
 800920e:	4605      	mov	r5, r0
 8009210:	9b07      	ldr	r3, [sp, #28]
 8009212:	3301      	adds	r3, #1
 8009214:	9307      	str	r3, [sp, #28]
 8009216:	e774      	b.n	8009102 <_dtoa_r+0x9b2>
 8009218:	f000 f9c2 	bl	80095a0 <__multadd>
 800921c:	4629      	mov	r1, r5
 800921e:	4607      	mov	r7, r0
 8009220:	2300      	movs	r3, #0
 8009222:	220a      	movs	r2, #10
 8009224:	4658      	mov	r0, fp
 8009226:	f000 f9bb 	bl	80095a0 <__multadd>
 800922a:	4605      	mov	r5, r0
 800922c:	e7f0      	b.n	8009210 <_dtoa_r+0xac0>
 800922e:	9b08      	ldr	r3, [sp, #32]
 8009230:	2700      	movs	r7, #0
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfcc      	ite	gt
 8009236:	461e      	movgt	r6, r3
 8009238:	2601      	movle	r6, #1
 800923a:	4456      	add	r6, sl
 800923c:	4649      	mov	r1, r9
 800923e:	2201      	movs	r2, #1
 8009240:	4658      	mov	r0, fp
 8009242:	f000 fba1 	bl	8009988 <__lshift>
 8009246:	4621      	mov	r1, r4
 8009248:	4681      	mov	r9, r0
 800924a:	f000 fc09 	bl	8009a60 <__mcmp>
 800924e:	2800      	cmp	r0, #0
 8009250:	dcb0      	bgt.n	80091b4 <_dtoa_r+0xa64>
 8009252:	d102      	bne.n	800925a <_dtoa_r+0xb0a>
 8009254:	f018 0f01 	tst.w	r8, #1
 8009258:	d1ac      	bne.n	80091b4 <_dtoa_r+0xa64>
 800925a:	4633      	mov	r3, r6
 800925c:	461e      	mov	r6, r3
 800925e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009262:	2a30      	cmp	r2, #48	@ 0x30
 8009264:	d0fa      	beq.n	800925c <_dtoa_r+0xb0c>
 8009266:	e5be      	b.n	8008de6 <_dtoa_r+0x696>
 8009268:	459a      	cmp	sl, r3
 800926a:	d1a4      	bne.n	80091b6 <_dtoa_r+0xa66>
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	3301      	adds	r3, #1
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	2331      	movs	r3, #49	@ 0x31
 8009274:	f88a 3000 	strb.w	r3, [sl]
 8009278:	e5b5      	b.n	8008de6 <_dtoa_r+0x696>
 800927a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800927c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80092dc <_dtoa_r+0xb8c>
 8009280:	b11b      	cbz	r3, 800928a <_dtoa_r+0xb3a>
 8009282:	f10a 0308 	add.w	r3, sl, #8
 8009286:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	4650      	mov	r0, sl
 800928c:	b017      	add	sp, #92	@ 0x5c
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009292:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009294:	2b01      	cmp	r3, #1
 8009296:	f77f ae3d 	ble.w	8008f14 <_dtoa_r+0x7c4>
 800929a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800929c:	930a      	str	r3, [sp, #40]	@ 0x28
 800929e:	2001      	movs	r0, #1
 80092a0:	e65b      	b.n	8008f5a <_dtoa_r+0x80a>
 80092a2:	9b08      	ldr	r3, [sp, #32]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f77f aed6 	ble.w	8009056 <_dtoa_r+0x906>
 80092aa:	4656      	mov	r6, sl
 80092ac:	4621      	mov	r1, r4
 80092ae:	4648      	mov	r0, r9
 80092b0:	f7ff f9c4 	bl	800863c <quorem>
 80092b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	f806 8b01 	strb.w	r8, [r6], #1
 80092be:	eba6 020a 	sub.w	r2, r6, sl
 80092c2:	4293      	cmp	r3, r2
 80092c4:	ddb3      	ble.n	800922e <_dtoa_r+0xade>
 80092c6:	4649      	mov	r1, r9
 80092c8:	2300      	movs	r3, #0
 80092ca:	220a      	movs	r2, #10
 80092cc:	4658      	mov	r0, fp
 80092ce:	f000 f967 	bl	80095a0 <__multadd>
 80092d2:	4681      	mov	r9, r0
 80092d4:	e7ea      	b.n	80092ac <_dtoa_r+0xb5c>
 80092d6:	bf00      	nop
 80092d8:	0800d14b 	.word	0x0800d14b
 80092dc:	0800d0cf 	.word	0x0800d0cf

080092e0 <_free_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4605      	mov	r5, r0
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d040      	beq.n	800936a <_free_r+0x8a>
 80092e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ec:	1f0c      	subs	r4, r1, #4
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bfb8      	it	lt
 80092f2:	18e4      	addlt	r4, r4, r3
 80092f4:	f000 f8e6 	bl	80094c4 <__malloc_lock>
 80092f8:	4a1c      	ldr	r2, [pc, #112]	@ (800936c <_free_r+0x8c>)
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	b933      	cbnz	r3, 800930c <_free_r+0x2c>
 80092fe:	6063      	str	r3, [r4, #4]
 8009300:	6014      	str	r4, [r2, #0]
 8009302:	4628      	mov	r0, r5
 8009304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009308:	f000 b8e2 	b.w	80094d0 <__malloc_unlock>
 800930c:	42a3      	cmp	r3, r4
 800930e:	d908      	bls.n	8009322 <_free_r+0x42>
 8009310:	6820      	ldr	r0, [r4, #0]
 8009312:	1821      	adds	r1, r4, r0
 8009314:	428b      	cmp	r3, r1
 8009316:	bf01      	itttt	eq
 8009318:	6819      	ldreq	r1, [r3, #0]
 800931a:	685b      	ldreq	r3, [r3, #4]
 800931c:	1809      	addeq	r1, r1, r0
 800931e:	6021      	streq	r1, [r4, #0]
 8009320:	e7ed      	b.n	80092fe <_free_r+0x1e>
 8009322:	461a      	mov	r2, r3
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	b10b      	cbz	r3, 800932c <_free_r+0x4c>
 8009328:	42a3      	cmp	r3, r4
 800932a:	d9fa      	bls.n	8009322 <_free_r+0x42>
 800932c:	6811      	ldr	r1, [r2, #0]
 800932e:	1850      	adds	r0, r2, r1
 8009330:	42a0      	cmp	r0, r4
 8009332:	d10b      	bne.n	800934c <_free_r+0x6c>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	4401      	add	r1, r0
 8009338:	1850      	adds	r0, r2, r1
 800933a:	4283      	cmp	r3, r0
 800933c:	6011      	str	r1, [r2, #0]
 800933e:	d1e0      	bne.n	8009302 <_free_r+0x22>
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	4408      	add	r0, r1
 8009346:	6010      	str	r0, [r2, #0]
 8009348:	6053      	str	r3, [r2, #4]
 800934a:	e7da      	b.n	8009302 <_free_r+0x22>
 800934c:	d902      	bls.n	8009354 <_free_r+0x74>
 800934e:	230c      	movs	r3, #12
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	e7d6      	b.n	8009302 <_free_r+0x22>
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	1821      	adds	r1, r4, r0
 8009358:	428b      	cmp	r3, r1
 800935a:	bf01      	itttt	eq
 800935c:	6819      	ldreq	r1, [r3, #0]
 800935e:	685b      	ldreq	r3, [r3, #4]
 8009360:	1809      	addeq	r1, r1, r0
 8009362:	6021      	streq	r1, [r4, #0]
 8009364:	6063      	str	r3, [r4, #4]
 8009366:	6054      	str	r4, [r2, #4]
 8009368:	e7cb      	b.n	8009302 <_free_r+0x22>
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	20000998 	.word	0x20000998

08009370 <malloc>:
 8009370:	4b02      	ldr	r3, [pc, #8]	@ (800937c <malloc+0xc>)
 8009372:	4601      	mov	r1, r0
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	f000 b825 	b.w	80093c4 <_malloc_r>
 800937a:	bf00      	nop
 800937c:	20000020 	.word	0x20000020

08009380 <sbrk_aligned>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	4e0f      	ldr	r6, [pc, #60]	@ (80093c0 <sbrk_aligned+0x40>)
 8009384:	460c      	mov	r4, r1
 8009386:	6831      	ldr	r1, [r6, #0]
 8009388:	4605      	mov	r5, r0
 800938a:	b911      	cbnz	r1, 8009392 <sbrk_aligned+0x12>
 800938c:	f001 fdf6 	bl	800af7c <_sbrk_r>
 8009390:	6030      	str	r0, [r6, #0]
 8009392:	4621      	mov	r1, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f001 fdf1 	bl	800af7c <_sbrk_r>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	d103      	bne.n	80093a6 <sbrk_aligned+0x26>
 800939e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80093a2:	4620      	mov	r0, r4
 80093a4:	bd70      	pop	{r4, r5, r6, pc}
 80093a6:	1cc4      	adds	r4, r0, #3
 80093a8:	f024 0403 	bic.w	r4, r4, #3
 80093ac:	42a0      	cmp	r0, r4
 80093ae:	d0f8      	beq.n	80093a2 <sbrk_aligned+0x22>
 80093b0:	1a21      	subs	r1, r4, r0
 80093b2:	4628      	mov	r0, r5
 80093b4:	f001 fde2 	bl	800af7c <_sbrk_r>
 80093b8:	3001      	adds	r0, #1
 80093ba:	d1f2      	bne.n	80093a2 <sbrk_aligned+0x22>
 80093bc:	e7ef      	b.n	800939e <sbrk_aligned+0x1e>
 80093be:	bf00      	nop
 80093c0:	20000994 	.word	0x20000994

080093c4 <_malloc_r>:
 80093c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c8:	1ccd      	adds	r5, r1, #3
 80093ca:	f025 0503 	bic.w	r5, r5, #3
 80093ce:	3508      	adds	r5, #8
 80093d0:	2d0c      	cmp	r5, #12
 80093d2:	bf38      	it	cc
 80093d4:	250c      	movcc	r5, #12
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	4606      	mov	r6, r0
 80093da:	db01      	blt.n	80093e0 <_malloc_r+0x1c>
 80093dc:	42a9      	cmp	r1, r5
 80093de:	d904      	bls.n	80093ea <_malloc_r+0x26>
 80093e0:	230c      	movs	r3, #12
 80093e2:	6033      	str	r3, [r6, #0]
 80093e4:	2000      	movs	r0, #0
 80093e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094c0 <_malloc_r+0xfc>
 80093ee:	f000 f869 	bl	80094c4 <__malloc_lock>
 80093f2:	f8d8 3000 	ldr.w	r3, [r8]
 80093f6:	461c      	mov	r4, r3
 80093f8:	bb44      	cbnz	r4, 800944c <_malloc_r+0x88>
 80093fa:	4629      	mov	r1, r5
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7ff ffbf 	bl	8009380 <sbrk_aligned>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	4604      	mov	r4, r0
 8009406:	d158      	bne.n	80094ba <_malloc_r+0xf6>
 8009408:	f8d8 4000 	ldr.w	r4, [r8]
 800940c:	4627      	mov	r7, r4
 800940e:	2f00      	cmp	r7, #0
 8009410:	d143      	bne.n	800949a <_malloc_r+0xd6>
 8009412:	2c00      	cmp	r4, #0
 8009414:	d04b      	beq.n	80094ae <_malloc_r+0xea>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	4639      	mov	r1, r7
 800941a:	4630      	mov	r0, r6
 800941c:	eb04 0903 	add.w	r9, r4, r3
 8009420:	f001 fdac 	bl	800af7c <_sbrk_r>
 8009424:	4581      	cmp	r9, r0
 8009426:	d142      	bne.n	80094ae <_malloc_r+0xea>
 8009428:	6821      	ldr	r1, [r4, #0]
 800942a:	4630      	mov	r0, r6
 800942c:	1a6d      	subs	r5, r5, r1
 800942e:	4629      	mov	r1, r5
 8009430:	f7ff ffa6 	bl	8009380 <sbrk_aligned>
 8009434:	3001      	adds	r0, #1
 8009436:	d03a      	beq.n	80094ae <_malloc_r+0xea>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	442b      	add	r3, r5
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	f8d8 3000 	ldr.w	r3, [r8]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	bb62      	cbnz	r2, 80094a0 <_malloc_r+0xdc>
 8009446:	f8c8 7000 	str.w	r7, [r8]
 800944a:	e00f      	b.n	800946c <_malloc_r+0xa8>
 800944c:	6822      	ldr	r2, [r4, #0]
 800944e:	1b52      	subs	r2, r2, r5
 8009450:	d420      	bmi.n	8009494 <_malloc_r+0xd0>
 8009452:	2a0b      	cmp	r2, #11
 8009454:	d917      	bls.n	8009486 <_malloc_r+0xc2>
 8009456:	1961      	adds	r1, r4, r5
 8009458:	42a3      	cmp	r3, r4
 800945a:	6025      	str	r5, [r4, #0]
 800945c:	bf18      	it	ne
 800945e:	6059      	strne	r1, [r3, #4]
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	bf08      	it	eq
 8009464:	f8c8 1000 	streq.w	r1, [r8]
 8009468:	5162      	str	r2, [r4, r5]
 800946a:	604b      	str	r3, [r1, #4]
 800946c:	4630      	mov	r0, r6
 800946e:	f000 f82f 	bl	80094d0 <__malloc_unlock>
 8009472:	f104 000b 	add.w	r0, r4, #11
 8009476:	1d23      	adds	r3, r4, #4
 8009478:	f020 0007 	bic.w	r0, r0, #7
 800947c:	1ac2      	subs	r2, r0, r3
 800947e:	bf1c      	itt	ne
 8009480:	1a1b      	subne	r3, r3, r0
 8009482:	50a3      	strne	r3, [r4, r2]
 8009484:	e7af      	b.n	80093e6 <_malloc_r+0x22>
 8009486:	6862      	ldr	r2, [r4, #4]
 8009488:	42a3      	cmp	r3, r4
 800948a:	bf0c      	ite	eq
 800948c:	f8c8 2000 	streq.w	r2, [r8]
 8009490:	605a      	strne	r2, [r3, #4]
 8009492:	e7eb      	b.n	800946c <_malloc_r+0xa8>
 8009494:	4623      	mov	r3, r4
 8009496:	6864      	ldr	r4, [r4, #4]
 8009498:	e7ae      	b.n	80093f8 <_malloc_r+0x34>
 800949a:	463c      	mov	r4, r7
 800949c:	687f      	ldr	r7, [r7, #4]
 800949e:	e7b6      	b.n	800940e <_malloc_r+0x4a>
 80094a0:	461a      	mov	r2, r3
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	d1fb      	bne.n	80094a0 <_malloc_r+0xdc>
 80094a8:	2300      	movs	r3, #0
 80094aa:	6053      	str	r3, [r2, #4]
 80094ac:	e7de      	b.n	800946c <_malloc_r+0xa8>
 80094ae:	230c      	movs	r3, #12
 80094b0:	4630      	mov	r0, r6
 80094b2:	6033      	str	r3, [r6, #0]
 80094b4:	f000 f80c 	bl	80094d0 <__malloc_unlock>
 80094b8:	e794      	b.n	80093e4 <_malloc_r+0x20>
 80094ba:	6005      	str	r5, [r0, #0]
 80094bc:	e7d6      	b.n	800946c <_malloc_r+0xa8>
 80094be:	bf00      	nop
 80094c0:	20000998 	.word	0x20000998

080094c4 <__malloc_lock>:
 80094c4:	4801      	ldr	r0, [pc, #4]	@ (80094cc <__malloc_lock+0x8>)
 80094c6:	f7ff b896 	b.w	80085f6 <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	20000990 	.word	0x20000990

080094d0 <__malloc_unlock>:
 80094d0:	4801      	ldr	r0, [pc, #4]	@ (80094d8 <__malloc_unlock+0x8>)
 80094d2:	f7ff b891 	b.w	80085f8 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	20000990 	.word	0x20000990

080094dc <_Balloc>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	69c6      	ldr	r6, [r0, #28]
 80094e0:	4604      	mov	r4, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	b976      	cbnz	r6, 8009504 <_Balloc+0x28>
 80094e6:	2010      	movs	r0, #16
 80094e8:	f7ff ff42 	bl	8009370 <malloc>
 80094ec:	4602      	mov	r2, r0
 80094ee:	61e0      	str	r0, [r4, #28]
 80094f0:	b920      	cbnz	r0, 80094fc <_Balloc+0x20>
 80094f2:	216b      	movs	r1, #107	@ 0x6b
 80094f4:	4b17      	ldr	r3, [pc, #92]	@ (8009554 <_Balloc+0x78>)
 80094f6:	4818      	ldr	r0, [pc, #96]	@ (8009558 <_Balloc+0x7c>)
 80094f8:	f001 fd56 	bl	800afa8 <__assert_func>
 80094fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009500:	6006      	str	r6, [r0, #0]
 8009502:	60c6      	str	r6, [r0, #12]
 8009504:	69e6      	ldr	r6, [r4, #28]
 8009506:	68f3      	ldr	r3, [r6, #12]
 8009508:	b183      	cbz	r3, 800952c <_Balloc+0x50>
 800950a:	69e3      	ldr	r3, [r4, #28]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009512:	b9b8      	cbnz	r0, 8009544 <_Balloc+0x68>
 8009514:	2101      	movs	r1, #1
 8009516:	fa01 f605 	lsl.w	r6, r1, r5
 800951a:	1d72      	adds	r2, r6, #5
 800951c:	4620      	mov	r0, r4
 800951e:	0092      	lsls	r2, r2, #2
 8009520:	f001 fd60 	bl	800afe4 <_calloc_r>
 8009524:	b160      	cbz	r0, 8009540 <_Balloc+0x64>
 8009526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800952a:	e00e      	b.n	800954a <_Balloc+0x6e>
 800952c:	2221      	movs	r2, #33	@ 0x21
 800952e:	2104      	movs	r1, #4
 8009530:	4620      	mov	r0, r4
 8009532:	f001 fd57 	bl	800afe4 <_calloc_r>
 8009536:	69e3      	ldr	r3, [r4, #28]
 8009538:	60f0      	str	r0, [r6, #12]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e4      	bne.n	800950a <_Balloc+0x2e>
 8009540:	2000      	movs	r0, #0
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	6802      	ldr	r2, [r0, #0]
 8009546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800954a:	2300      	movs	r3, #0
 800954c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009550:	e7f7      	b.n	8009542 <_Balloc+0x66>
 8009552:	bf00      	nop
 8009554:	0800d0dc 	.word	0x0800d0dc
 8009558:	0800d15c 	.word	0x0800d15c

0800955c <_Bfree>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	69c6      	ldr	r6, [r0, #28]
 8009560:	4605      	mov	r5, r0
 8009562:	460c      	mov	r4, r1
 8009564:	b976      	cbnz	r6, 8009584 <_Bfree+0x28>
 8009566:	2010      	movs	r0, #16
 8009568:	f7ff ff02 	bl	8009370 <malloc>
 800956c:	4602      	mov	r2, r0
 800956e:	61e8      	str	r0, [r5, #28]
 8009570:	b920      	cbnz	r0, 800957c <_Bfree+0x20>
 8009572:	218f      	movs	r1, #143	@ 0x8f
 8009574:	4b08      	ldr	r3, [pc, #32]	@ (8009598 <_Bfree+0x3c>)
 8009576:	4809      	ldr	r0, [pc, #36]	@ (800959c <_Bfree+0x40>)
 8009578:	f001 fd16 	bl	800afa8 <__assert_func>
 800957c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009580:	6006      	str	r6, [r0, #0]
 8009582:	60c6      	str	r6, [r0, #12]
 8009584:	b13c      	cbz	r4, 8009596 <_Bfree+0x3a>
 8009586:	69eb      	ldr	r3, [r5, #28]
 8009588:	6862      	ldr	r2, [r4, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009590:	6021      	str	r1, [r4, #0]
 8009592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	0800d0dc 	.word	0x0800d0dc
 800959c:	0800d15c 	.word	0x0800d15c

080095a0 <__multadd>:
 80095a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a4:	4607      	mov	r7, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	461e      	mov	r6, r3
 80095aa:	2000      	movs	r0, #0
 80095ac:	690d      	ldr	r5, [r1, #16]
 80095ae:	f101 0c14 	add.w	ip, r1, #20
 80095b2:	f8dc 3000 	ldr.w	r3, [ip]
 80095b6:	3001      	adds	r0, #1
 80095b8:	b299      	uxth	r1, r3
 80095ba:	fb02 6101 	mla	r1, r2, r1, r6
 80095be:	0c1e      	lsrs	r6, r3, #16
 80095c0:	0c0b      	lsrs	r3, r1, #16
 80095c2:	fb02 3306 	mla	r3, r2, r6, r3
 80095c6:	b289      	uxth	r1, r1
 80095c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095cc:	4285      	cmp	r5, r0
 80095ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095d2:	f84c 1b04 	str.w	r1, [ip], #4
 80095d6:	dcec      	bgt.n	80095b2 <__multadd+0x12>
 80095d8:	b30e      	cbz	r6, 800961e <__multadd+0x7e>
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dc19      	bgt.n	8009614 <__multadd+0x74>
 80095e0:	6861      	ldr	r1, [r4, #4]
 80095e2:	4638      	mov	r0, r7
 80095e4:	3101      	adds	r1, #1
 80095e6:	f7ff ff79 	bl	80094dc <_Balloc>
 80095ea:	4680      	mov	r8, r0
 80095ec:	b928      	cbnz	r0, 80095fa <__multadd+0x5a>
 80095ee:	4602      	mov	r2, r0
 80095f0:	21ba      	movs	r1, #186	@ 0xba
 80095f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009624 <__multadd+0x84>)
 80095f4:	480c      	ldr	r0, [pc, #48]	@ (8009628 <__multadd+0x88>)
 80095f6:	f001 fcd7 	bl	800afa8 <__assert_func>
 80095fa:	6922      	ldr	r2, [r4, #16]
 80095fc:	f104 010c 	add.w	r1, r4, #12
 8009600:	3202      	adds	r2, #2
 8009602:	0092      	lsls	r2, r2, #2
 8009604:	300c      	adds	r0, #12
 8009606:	f7ff f806 	bl	8008616 <memcpy>
 800960a:	4621      	mov	r1, r4
 800960c:	4638      	mov	r0, r7
 800960e:	f7ff ffa5 	bl	800955c <_Bfree>
 8009612:	4644      	mov	r4, r8
 8009614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009618:	3501      	adds	r5, #1
 800961a:	615e      	str	r6, [r3, #20]
 800961c:	6125      	str	r5, [r4, #16]
 800961e:	4620      	mov	r0, r4
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009624:	0800d14b 	.word	0x0800d14b
 8009628:	0800d15c 	.word	0x0800d15c

0800962c <__s2b>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	4615      	mov	r5, r2
 8009632:	2209      	movs	r2, #9
 8009634:	461f      	mov	r7, r3
 8009636:	3308      	adds	r3, #8
 8009638:	460c      	mov	r4, r1
 800963a:	fb93 f3f2 	sdiv	r3, r3, r2
 800963e:	4606      	mov	r6, r0
 8009640:	2201      	movs	r2, #1
 8009642:	2100      	movs	r1, #0
 8009644:	429a      	cmp	r2, r3
 8009646:	db09      	blt.n	800965c <__s2b+0x30>
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff ff47 	bl	80094dc <_Balloc>
 800964e:	b940      	cbnz	r0, 8009662 <__s2b+0x36>
 8009650:	4602      	mov	r2, r0
 8009652:	21d3      	movs	r1, #211	@ 0xd3
 8009654:	4b18      	ldr	r3, [pc, #96]	@ (80096b8 <__s2b+0x8c>)
 8009656:	4819      	ldr	r0, [pc, #100]	@ (80096bc <__s2b+0x90>)
 8009658:	f001 fca6 	bl	800afa8 <__assert_func>
 800965c:	0052      	lsls	r2, r2, #1
 800965e:	3101      	adds	r1, #1
 8009660:	e7f0      	b.n	8009644 <__s2b+0x18>
 8009662:	9b08      	ldr	r3, [sp, #32]
 8009664:	2d09      	cmp	r5, #9
 8009666:	6143      	str	r3, [r0, #20]
 8009668:	f04f 0301 	mov.w	r3, #1
 800966c:	6103      	str	r3, [r0, #16]
 800966e:	dd16      	ble.n	800969e <__s2b+0x72>
 8009670:	f104 0909 	add.w	r9, r4, #9
 8009674:	46c8      	mov	r8, r9
 8009676:	442c      	add	r4, r5
 8009678:	f818 3b01 	ldrb.w	r3, [r8], #1
 800967c:	4601      	mov	r1, r0
 800967e:	220a      	movs	r2, #10
 8009680:	4630      	mov	r0, r6
 8009682:	3b30      	subs	r3, #48	@ 0x30
 8009684:	f7ff ff8c 	bl	80095a0 <__multadd>
 8009688:	45a0      	cmp	r8, r4
 800968a:	d1f5      	bne.n	8009678 <__s2b+0x4c>
 800968c:	f1a5 0408 	sub.w	r4, r5, #8
 8009690:	444c      	add	r4, r9
 8009692:	1b2d      	subs	r5, r5, r4
 8009694:	1963      	adds	r3, r4, r5
 8009696:	42bb      	cmp	r3, r7
 8009698:	db04      	blt.n	80096a4 <__s2b+0x78>
 800969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969e:	2509      	movs	r5, #9
 80096a0:	340a      	adds	r4, #10
 80096a2:	e7f6      	b.n	8009692 <__s2b+0x66>
 80096a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096a8:	4601      	mov	r1, r0
 80096aa:	220a      	movs	r2, #10
 80096ac:	4630      	mov	r0, r6
 80096ae:	3b30      	subs	r3, #48	@ 0x30
 80096b0:	f7ff ff76 	bl	80095a0 <__multadd>
 80096b4:	e7ee      	b.n	8009694 <__s2b+0x68>
 80096b6:	bf00      	nop
 80096b8:	0800d14b 	.word	0x0800d14b
 80096bc:	0800d15c 	.word	0x0800d15c

080096c0 <__hi0bits>:
 80096c0:	4603      	mov	r3, r0
 80096c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80096c6:	bf3a      	itte	cc
 80096c8:	0403      	lslcc	r3, r0, #16
 80096ca:	2010      	movcc	r0, #16
 80096cc:	2000      	movcs	r0, #0
 80096ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096d2:	bf3c      	itt	cc
 80096d4:	021b      	lslcc	r3, r3, #8
 80096d6:	3008      	addcc	r0, #8
 80096d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096dc:	bf3c      	itt	cc
 80096de:	011b      	lslcc	r3, r3, #4
 80096e0:	3004      	addcc	r0, #4
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e6:	bf3c      	itt	cc
 80096e8:	009b      	lslcc	r3, r3, #2
 80096ea:	3002      	addcc	r0, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	db05      	blt.n	80096fc <__hi0bits+0x3c>
 80096f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096f4:	f100 0001 	add.w	r0, r0, #1
 80096f8:	bf08      	it	eq
 80096fa:	2020      	moveq	r0, #32
 80096fc:	4770      	bx	lr

080096fe <__lo0bits>:
 80096fe:	6803      	ldr	r3, [r0, #0]
 8009700:	4602      	mov	r2, r0
 8009702:	f013 0007 	ands.w	r0, r3, #7
 8009706:	d00b      	beq.n	8009720 <__lo0bits+0x22>
 8009708:	07d9      	lsls	r1, r3, #31
 800970a:	d421      	bmi.n	8009750 <__lo0bits+0x52>
 800970c:	0798      	lsls	r0, r3, #30
 800970e:	bf49      	itett	mi
 8009710:	085b      	lsrmi	r3, r3, #1
 8009712:	089b      	lsrpl	r3, r3, #2
 8009714:	2001      	movmi	r0, #1
 8009716:	6013      	strmi	r3, [r2, #0]
 8009718:	bf5c      	itt	pl
 800971a:	2002      	movpl	r0, #2
 800971c:	6013      	strpl	r3, [r2, #0]
 800971e:	4770      	bx	lr
 8009720:	b299      	uxth	r1, r3
 8009722:	b909      	cbnz	r1, 8009728 <__lo0bits+0x2a>
 8009724:	2010      	movs	r0, #16
 8009726:	0c1b      	lsrs	r3, r3, #16
 8009728:	b2d9      	uxtb	r1, r3
 800972a:	b909      	cbnz	r1, 8009730 <__lo0bits+0x32>
 800972c:	3008      	adds	r0, #8
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	0719      	lsls	r1, r3, #28
 8009732:	bf04      	itt	eq
 8009734:	091b      	lsreq	r3, r3, #4
 8009736:	3004      	addeq	r0, #4
 8009738:	0799      	lsls	r1, r3, #30
 800973a:	bf04      	itt	eq
 800973c:	089b      	lsreq	r3, r3, #2
 800973e:	3002      	addeq	r0, #2
 8009740:	07d9      	lsls	r1, r3, #31
 8009742:	d403      	bmi.n	800974c <__lo0bits+0x4e>
 8009744:	085b      	lsrs	r3, r3, #1
 8009746:	f100 0001 	add.w	r0, r0, #1
 800974a:	d003      	beq.n	8009754 <__lo0bits+0x56>
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	4770      	bx	lr
 8009750:	2000      	movs	r0, #0
 8009752:	4770      	bx	lr
 8009754:	2020      	movs	r0, #32
 8009756:	4770      	bx	lr

08009758 <__i2b>:
 8009758:	b510      	push	{r4, lr}
 800975a:	460c      	mov	r4, r1
 800975c:	2101      	movs	r1, #1
 800975e:	f7ff febd 	bl	80094dc <_Balloc>
 8009762:	4602      	mov	r2, r0
 8009764:	b928      	cbnz	r0, 8009772 <__i2b+0x1a>
 8009766:	f240 1145 	movw	r1, #325	@ 0x145
 800976a:	4b04      	ldr	r3, [pc, #16]	@ (800977c <__i2b+0x24>)
 800976c:	4804      	ldr	r0, [pc, #16]	@ (8009780 <__i2b+0x28>)
 800976e:	f001 fc1b 	bl	800afa8 <__assert_func>
 8009772:	2301      	movs	r3, #1
 8009774:	6144      	str	r4, [r0, #20]
 8009776:	6103      	str	r3, [r0, #16]
 8009778:	bd10      	pop	{r4, pc}
 800977a:	bf00      	nop
 800977c:	0800d14b 	.word	0x0800d14b
 8009780:	0800d15c 	.word	0x0800d15c

08009784 <__multiply>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	4614      	mov	r4, r2
 800978a:	690a      	ldr	r2, [r1, #16]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	460f      	mov	r7, r1
 8009790:	429a      	cmp	r2, r3
 8009792:	bfa2      	ittt	ge
 8009794:	4623      	movge	r3, r4
 8009796:	460c      	movge	r4, r1
 8009798:	461f      	movge	r7, r3
 800979a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800979e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	6861      	ldr	r1, [r4, #4]
 80097a6:	eb0a 0609 	add.w	r6, sl, r9
 80097aa:	42b3      	cmp	r3, r6
 80097ac:	b085      	sub	sp, #20
 80097ae:	bfb8      	it	lt
 80097b0:	3101      	addlt	r1, #1
 80097b2:	f7ff fe93 	bl	80094dc <_Balloc>
 80097b6:	b930      	cbnz	r0, 80097c6 <__multiply+0x42>
 80097b8:	4602      	mov	r2, r0
 80097ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80097be:	4b43      	ldr	r3, [pc, #268]	@ (80098cc <__multiply+0x148>)
 80097c0:	4843      	ldr	r0, [pc, #268]	@ (80098d0 <__multiply+0x14c>)
 80097c2:	f001 fbf1 	bl	800afa8 <__assert_func>
 80097c6:	f100 0514 	add.w	r5, r0, #20
 80097ca:	462b      	mov	r3, r5
 80097cc:	2200      	movs	r2, #0
 80097ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097d2:	4543      	cmp	r3, r8
 80097d4:	d321      	bcc.n	800981a <__multiply+0x96>
 80097d6:	f107 0114 	add.w	r1, r7, #20
 80097da:	f104 0214 	add.w	r2, r4, #20
 80097de:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80097e2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	1b13      	subs	r3, r2, r4
 80097ea:	3b15      	subs	r3, #21
 80097ec:	f023 0303 	bic.w	r3, r3, #3
 80097f0:	3304      	adds	r3, #4
 80097f2:	f104 0715 	add.w	r7, r4, #21
 80097f6:	42ba      	cmp	r2, r7
 80097f8:	bf38      	it	cc
 80097fa:	2304      	movcc	r3, #4
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	9b02      	ldr	r3, [sp, #8]
 8009800:	9103      	str	r1, [sp, #12]
 8009802:	428b      	cmp	r3, r1
 8009804:	d80c      	bhi.n	8009820 <__multiply+0x9c>
 8009806:	2e00      	cmp	r6, #0
 8009808:	dd03      	ble.n	8009812 <__multiply+0x8e>
 800980a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800980e:	2b00      	cmp	r3, #0
 8009810:	d05a      	beq.n	80098c8 <__multiply+0x144>
 8009812:	6106      	str	r6, [r0, #16]
 8009814:	b005      	add	sp, #20
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	f843 2b04 	str.w	r2, [r3], #4
 800981e:	e7d8      	b.n	80097d2 <__multiply+0x4e>
 8009820:	f8b1 a000 	ldrh.w	sl, [r1]
 8009824:	f1ba 0f00 	cmp.w	sl, #0
 8009828:	d023      	beq.n	8009872 <__multiply+0xee>
 800982a:	46a9      	mov	r9, r5
 800982c:	f04f 0c00 	mov.w	ip, #0
 8009830:	f104 0e14 	add.w	lr, r4, #20
 8009834:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009838:	f8d9 3000 	ldr.w	r3, [r9]
 800983c:	fa1f fb87 	uxth.w	fp, r7
 8009840:	b29b      	uxth	r3, r3
 8009842:	fb0a 330b 	mla	r3, sl, fp, r3
 8009846:	4463      	add	r3, ip
 8009848:	f8d9 c000 	ldr.w	ip, [r9]
 800984c:	0c3f      	lsrs	r7, r7, #16
 800984e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009852:	fb0a c707 	mla	r7, sl, r7, ip
 8009856:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800985a:	b29b      	uxth	r3, r3
 800985c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009860:	4572      	cmp	r2, lr
 8009862:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009866:	f849 3b04 	str.w	r3, [r9], #4
 800986a:	d8e3      	bhi.n	8009834 <__multiply+0xb0>
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	f845 c003 	str.w	ip, [r5, r3]
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	3104      	adds	r1, #4
 8009876:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800987a:	f1b9 0f00 	cmp.w	r9, #0
 800987e:	d021      	beq.n	80098c4 <__multiply+0x140>
 8009880:	46ae      	mov	lr, r5
 8009882:	f04f 0a00 	mov.w	sl, #0
 8009886:	682b      	ldr	r3, [r5, #0]
 8009888:	f104 0c14 	add.w	ip, r4, #20
 800988c:	f8bc b000 	ldrh.w	fp, [ip]
 8009890:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009894:	b29b      	uxth	r3, r3
 8009896:	fb09 770b 	mla	r7, r9, fp, r7
 800989a:	4457      	add	r7, sl
 800989c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098a0:	f84e 3b04 	str.w	r3, [lr], #4
 80098a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098ac:	f8be 3000 	ldrh.w	r3, [lr]
 80098b0:	4562      	cmp	r2, ip
 80098b2:	fb09 330a 	mla	r3, r9, sl, r3
 80098b6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80098ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098be:	d8e5      	bhi.n	800988c <__multiply+0x108>
 80098c0:	9f01      	ldr	r7, [sp, #4]
 80098c2:	51eb      	str	r3, [r5, r7]
 80098c4:	3504      	adds	r5, #4
 80098c6:	e79a      	b.n	80097fe <__multiply+0x7a>
 80098c8:	3e01      	subs	r6, #1
 80098ca:	e79c      	b.n	8009806 <__multiply+0x82>
 80098cc:	0800d14b 	.word	0x0800d14b
 80098d0:	0800d15c 	.word	0x0800d15c

080098d4 <__pow5mult>:
 80098d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d8:	4615      	mov	r5, r2
 80098da:	f012 0203 	ands.w	r2, r2, #3
 80098de:	4607      	mov	r7, r0
 80098e0:	460e      	mov	r6, r1
 80098e2:	d007      	beq.n	80098f4 <__pow5mult+0x20>
 80098e4:	4c25      	ldr	r4, [pc, #148]	@ (800997c <__pow5mult+0xa8>)
 80098e6:	3a01      	subs	r2, #1
 80098e8:	2300      	movs	r3, #0
 80098ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098ee:	f7ff fe57 	bl	80095a0 <__multadd>
 80098f2:	4606      	mov	r6, r0
 80098f4:	10ad      	asrs	r5, r5, #2
 80098f6:	d03d      	beq.n	8009974 <__pow5mult+0xa0>
 80098f8:	69fc      	ldr	r4, [r7, #28]
 80098fa:	b97c      	cbnz	r4, 800991c <__pow5mult+0x48>
 80098fc:	2010      	movs	r0, #16
 80098fe:	f7ff fd37 	bl	8009370 <malloc>
 8009902:	4602      	mov	r2, r0
 8009904:	61f8      	str	r0, [r7, #28]
 8009906:	b928      	cbnz	r0, 8009914 <__pow5mult+0x40>
 8009908:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800990c:	4b1c      	ldr	r3, [pc, #112]	@ (8009980 <__pow5mult+0xac>)
 800990e:	481d      	ldr	r0, [pc, #116]	@ (8009984 <__pow5mult+0xb0>)
 8009910:	f001 fb4a 	bl	800afa8 <__assert_func>
 8009914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009918:	6004      	str	r4, [r0, #0]
 800991a:	60c4      	str	r4, [r0, #12]
 800991c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009924:	b94c      	cbnz	r4, 800993a <__pow5mult+0x66>
 8009926:	f240 2171 	movw	r1, #625	@ 0x271
 800992a:	4638      	mov	r0, r7
 800992c:	f7ff ff14 	bl	8009758 <__i2b>
 8009930:	2300      	movs	r3, #0
 8009932:	4604      	mov	r4, r0
 8009934:	f8c8 0008 	str.w	r0, [r8, #8]
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	f04f 0900 	mov.w	r9, #0
 800993e:	07eb      	lsls	r3, r5, #31
 8009940:	d50a      	bpl.n	8009958 <__pow5mult+0x84>
 8009942:	4631      	mov	r1, r6
 8009944:	4622      	mov	r2, r4
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff ff1c 	bl	8009784 <__multiply>
 800994c:	4680      	mov	r8, r0
 800994e:	4631      	mov	r1, r6
 8009950:	4638      	mov	r0, r7
 8009952:	f7ff fe03 	bl	800955c <_Bfree>
 8009956:	4646      	mov	r6, r8
 8009958:	106d      	asrs	r5, r5, #1
 800995a:	d00b      	beq.n	8009974 <__pow5mult+0xa0>
 800995c:	6820      	ldr	r0, [r4, #0]
 800995e:	b938      	cbnz	r0, 8009970 <__pow5mult+0x9c>
 8009960:	4622      	mov	r2, r4
 8009962:	4621      	mov	r1, r4
 8009964:	4638      	mov	r0, r7
 8009966:	f7ff ff0d 	bl	8009784 <__multiply>
 800996a:	6020      	str	r0, [r4, #0]
 800996c:	f8c0 9000 	str.w	r9, [r0]
 8009970:	4604      	mov	r4, r0
 8009972:	e7e4      	b.n	800993e <__pow5mult+0x6a>
 8009974:	4630      	mov	r0, r6
 8009976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800997a:	bf00      	nop
 800997c:	0800d1b8 	.word	0x0800d1b8
 8009980:	0800d0dc 	.word	0x0800d0dc
 8009984:	0800d15c 	.word	0x0800d15c

08009988 <__lshift>:
 8009988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	460c      	mov	r4, r1
 800998e:	4607      	mov	r7, r0
 8009990:	4691      	mov	r9, r2
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	6849      	ldr	r1, [r1, #4]
 8009996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099a0:	f108 0601 	add.w	r6, r8, #1
 80099a4:	42b3      	cmp	r3, r6
 80099a6:	db0b      	blt.n	80099c0 <__lshift+0x38>
 80099a8:	4638      	mov	r0, r7
 80099aa:	f7ff fd97 	bl	80094dc <_Balloc>
 80099ae:	4605      	mov	r5, r0
 80099b0:	b948      	cbnz	r0, 80099c6 <__lshift+0x3e>
 80099b2:	4602      	mov	r2, r0
 80099b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80099b8:	4b27      	ldr	r3, [pc, #156]	@ (8009a58 <__lshift+0xd0>)
 80099ba:	4828      	ldr	r0, [pc, #160]	@ (8009a5c <__lshift+0xd4>)
 80099bc:	f001 faf4 	bl	800afa8 <__assert_func>
 80099c0:	3101      	adds	r1, #1
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	e7ee      	b.n	80099a4 <__lshift+0x1c>
 80099c6:	2300      	movs	r3, #0
 80099c8:	f100 0114 	add.w	r1, r0, #20
 80099cc:	f100 0210 	add.w	r2, r0, #16
 80099d0:	4618      	mov	r0, r3
 80099d2:	4553      	cmp	r3, sl
 80099d4:	db33      	blt.n	8009a3e <__lshift+0xb6>
 80099d6:	6920      	ldr	r0, [r4, #16]
 80099d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099dc:	f104 0314 	add.w	r3, r4, #20
 80099e0:	f019 091f 	ands.w	r9, r9, #31
 80099e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099ec:	d02b      	beq.n	8009a46 <__lshift+0xbe>
 80099ee:	468a      	mov	sl, r1
 80099f0:	2200      	movs	r2, #0
 80099f2:	f1c9 0e20 	rsb	lr, r9, #32
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	fa00 f009 	lsl.w	r0, r0, r9
 80099fc:	4310      	orrs	r0, r2
 80099fe:	f84a 0b04 	str.w	r0, [sl], #4
 8009a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a06:	459c      	cmp	ip, r3
 8009a08:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a0c:	d8f3      	bhi.n	80099f6 <__lshift+0x6e>
 8009a0e:	ebac 0304 	sub.w	r3, ip, r4
 8009a12:	3b15      	subs	r3, #21
 8009a14:	f023 0303 	bic.w	r3, r3, #3
 8009a18:	3304      	adds	r3, #4
 8009a1a:	f104 0015 	add.w	r0, r4, #21
 8009a1e:	4584      	cmp	ip, r0
 8009a20:	bf38      	it	cc
 8009a22:	2304      	movcc	r3, #4
 8009a24:	50ca      	str	r2, [r1, r3]
 8009a26:	b10a      	cbz	r2, 8009a2c <__lshift+0xa4>
 8009a28:	f108 0602 	add.w	r6, r8, #2
 8009a2c:	3e01      	subs	r6, #1
 8009a2e:	4638      	mov	r0, r7
 8009a30:	4621      	mov	r1, r4
 8009a32:	612e      	str	r6, [r5, #16]
 8009a34:	f7ff fd92 	bl	800955c <_Bfree>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a42:	3301      	adds	r3, #1
 8009a44:	e7c5      	b.n	80099d2 <__lshift+0x4a>
 8009a46:	3904      	subs	r1, #4
 8009a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4c:	459c      	cmp	ip, r3
 8009a4e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a52:	d8f9      	bhi.n	8009a48 <__lshift+0xc0>
 8009a54:	e7ea      	b.n	8009a2c <__lshift+0xa4>
 8009a56:	bf00      	nop
 8009a58:	0800d14b 	.word	0x0800d14b
 8009a5c:	0800d15c 	.word	0x0800d15c

08009a60 <__mcmp>:
 8009a60:	4603      	mov	r3, r0
 8009a62:	690a      	ldr	r2, [r1, #16]
 8009a64:	6900      	ldr	r0, [r0, #16]
 8009a66:	b530      	push	{r4, r5, lr}
 8009a68:	1a80      	subs	r0, r0, r2
 8009a6a:	d10e      	bne.n	8009a8a <__mcmp+0x2a>
 8009a6c:	3314      	adds	r3, #20
 8009a6e:	3114      	adds	r1, #20
 8009a70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a80:	4295      	cmp	r5, r2
 8009a82:	d003      	beq.n	8009a8c <__mcmp+0x2c>
 8009a84:	d205      	bcs.n	8009a92 <__mcmp+0x32>
 8009a86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a8a:	bd30      	pop	{r4, r5, pc}
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	d3f3      	bcc.n	8009a78 <__mcmp+0x18>
 8009a90:	e7fb      	b.n	8009a8a <__mcmp+0x2a>
 8009a92:	2001      	movs	r0, #1
 8009a94:	e7f9      	b.n	8009a8a <__mcmp+0x2a>
	...

08009a98 <__mdiff>:
 8009a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9c:	4689      	mov	r9, r1
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	4648      	mov	r0, r9
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	f7ff ffdb 	bl	8009a60 <__mcmp>
 8009aaa:	1e05      	subs	r5, r0, #0
 8009aac:	d112      	bne.n	8009ad4 <__mdiff+0x3c>
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f7ff fd13 	bl	80094dc <_Balloc>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	b928      	cbnz	r0, 8009ac6 <__mdiff+0x2e>
 8009aba:	f240 2137 	movw	r1, #567	@ 0x237
 8009abe:	4b3e      	ldr	r3, [pc, #248]	@ (8009bb8 <__mdiff+0x120>)
 8009ac0:	483e      	ldr	r0, [pc, #248]	@ (8009bbc <__mdiff+0x124>)
 8009ac2:	f001 fa71 	bl	800afa8 <__assert_func>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009acc:	4610      	mov	r0, r2
 8009ace:	b003      	add	sp, #12
 8009ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad4:	bfbc      	itt	lt
 8009ad6:	464b      	movlt	r3, r9
 8009ad8:	46a1      	movlt	r9, r4
 8009ada:	4630      	mov	r0, r6
 8009adc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ae0:	bfba      	itte	lt
 8009ae2:	461c      	movlt	r4, r3
 8009ae4:	2501      	movlt	r5, #1
 8009ae6:	2500      	movge	r5, #0
 8009ae8:	f7ff fcf8 	bl	80094dc <_Balloc>
 8009aec:	4602      	mov	r2, r0
 8009aee:	b918      	cbnz	r0, 8009af8 <__mdiff+0x60>
 8009af0:	f240 2145 	movw	r1, #581	@ 0x245
 8009af4:	4b30      	ldr	r3, [pc, #192]	@ (8009bb8 <__mdiff+0x120>)
 8009af6:	e7e3      	b.n	8009ac0 <__mdiff+0x28>
 8009af8:	f100 0b14 	add.w	fp, r0, #20
 8009afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b00:	f109 0310 	add.w	r3, r9, #16
 8009b04:	60c5      	str	r5, [r0, #12]
 8009b06:	f04f 0c00 	mov.w	ip, #0
 8009b0a:	f109 0514 	add.w	r5, r9, #20
 8009b0e:	46d9      	mov	r9, fp
 8009b10:	6926      	ldr	r6, [r4, #16]
 8009b12:	f104 0e14 	add.w	lr, r4, #20
 8009b16:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b1a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b2a:	b281      	uxth	r1, r0
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	fa1f f38a 	uxth.w	r3, sl
 8009b32:	1a5b      	subs	r3, r3, r1
 8009b34:	0c00      	lsrs	r0, r0, #16
 8009b36:	4463      	add	r3, ip
 8009b38:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b3c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b46:	4576      	cmp	r6, lr
 8009b48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b4c:	f849 3b04 	str.w	r3, [r9], #4
 8009b50:	d8e6      	bhi.n	8009b20 <__mdiff+0x88>
 8009b52:	1b33      	subs	r3, r6, r4
 8009b54:	3b15      	subs	r3, #21
 8009b56:	f023 0303 	bic.w	r3, r3, #3
 8009b5a:	3415      	adds	r4, #21
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	42a6      	cmp	r6, r4
 8009b60:	bf38      	it	cc
 8009b62:	2304      	movcc	r3, #4
 8009b64:	441d      	add	r5, r3
 8009b66:	445b      	add	r3, fp
 8009b68:	461e      	mov	r6, r3
 8009b6a:	462c      	mov	r4, r5
 8009b6c:	4544      	cmp	r4, r8
 8009b6e:	d30e      	bcc.n	8009b8e <__mdiff+0xf6>
 8009b70:	f108 0103 	add.w	r1, r8, #3
 8009b74:	1b49      	subs	r1, r1, r5
 8009b76:	f021 0103 	bic.w	r1, r1, #3
 8009b7a:	3d03      	subs	r5, #3
 8009b7c:	45a8      	cmp	r8, r5
 8009b7e:	bf38      	it	cc
 8009b80:	2100      	movcc	r1, #0
 8009b82:	440b      	add	r3, r1
 8009b84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b88:	b199      	cbz	r1, 8009bb2 <__mdiff+0x11a>
 8009b8a:	6117      	str	r7, [r2, #16]
 8009b8c:	e79e      	b.n	8009acc <__mdiff+0x34>
 8009b8e:	46e6      	mov	lr, ip
 8009b90:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b94:	fa1f fc81 	uxth.w	ip, r1
 8009b98:	44f4      	add	ip, lr
 8009b9a:	0c08      	lsrs	r0, r1, #16
 8009b9c:	4471      	add	r1, lr
 8009b9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ba2:	b289      	uxth	r1, r1
 8009ba4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ba8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bac:	f846 1b04 	str.w	r1, [r6], #4
 8009bb0:	e7dc      	b.n	8009b6c <__mdiff+0xd4>
 8009bb2:	3f01      	subs	r7, #1
 8009bb4:	e7e6      	b.n	8009b84 <__mdiff+0xec>
 8009bb6:	bf00      	nop
 8009bb8:	0800d14b 	.word	0x0800d14b
 8009bbc:	0800d15c 	.word	0x0800d15c

08009bc0 <__ulp>:
 8009bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bfc <__ulp+0x3c>)
 8009bc2:	400b      	ands	r3, r1
 8009bc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	dc08      	bgt.n	8009bde <__ulp+0x1e>
 8009bcc:	425b      	negs	r3, r3
 8009bce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009bd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bd6:	da04      	bge.n	8009be2 <__ulp+0x22>
 8009bd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009bdc:	4113      	asrs	r3, r2
 8009bde:	2200      	movs	r2, #0
 8009be0:	e008      	b.n	8009bf4 <__ulp+0x34>
 8009be2:	f1a2 0314 	sub.w	r3, r2, #20
 8009be6:	2b1e      	cmp	r3, #30
 8009be8:	bfd6      	itet	le
 8009bea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009bee:	2201      	movgt	r2, #1
 8009bf0:	40da      	lsrle	r2, r3
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	7ff00000 	.word	0x7ff00000

08009c00 <__b2d>:
 8009c00:	6902      	ldr	r2, [r0, #16]
 8009c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c04:	f100 0614 	add.w	r6, r0, #20
 8009c08:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009c0c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009c10:	4f1e      	ldr	r7, [pc, #120]	@ (8009c8c <__b2d+0x8c>)
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7ff fd54 	bl	80096c0 <__hi0bits>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f1c0 0020 	rsb	r0, r0, #32
 8009c1e:	2b0a      	cmp	r3, #10
 8009c20:	f1a2 0504 	sub.w	r5, r2, #4
 8009c24:	6008      	str	r0, [r1, #0]
 8009c26:	dc12      	bgt.n	8009c4e <__b2d+0x4e>
 8009c28:	42ae      	cmp	r6, r5
 8009c2a:	bf2c      	ite	cs
 8009c2c:	2200      	movcs	r2, #0
 8009c2e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009c32:	f1c3 0c0b 	rsb	ip, r3, #11
 8009c36:	3315      	adds	r3, #21
 8009c38:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009c3c:	fa04 f303 	lsl.w	r3, r4, r3
 8009c40:	fa22 f20c 	lsr.w	r2, r2, ip
 8009c44:	ea4e 0107 	orr.w	r1, lr, r7
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4e:	42ae      	cmp	r6, r5
 8009c50:	bf36      	itet	cc
 8009c52:	f1a2 0508 	subcc.w	r5, r2, #8
 8009c56:	2200      	movcs	r2, #0
 8009c58:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009c5c:	3b0b      	subs	r3, #11
 8009c5e:	d012      	beq.n	8009c86 <__b2d+0x86>
 8009c60:	f1c3 0720 	rsb	r7, r3, #32
 8009c64:	fa22 f107 	lsr.w	r1, r2, r7
 8009c68:	409c      	lsls	r4, r3
 8009c6a:	430c      	orrs	r4, r1
 8009c6c:	42b5      	cmp	r5, r6
 8009c6e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009c72:	bf94      	ite	ls
 8009c74:	2400      	movls	r4, #0
 8009c76:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009c7a:	409a      	lsls	r2, r3
 8009c7c:	40fc      	lsrs	r4, r7
 8009c7e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009c82:	4322      	orrs	r2, r4
 8009c84:	e7e1      	b.n	8009c4a <__b2d+0x4a>
 8009c86:	ea44 0107 	orr.w	r1, r4, r7
 8009c8a:	e7de      	b.n	8009c4a <__b2d+0x4a>
 8009c8c:	3ff00000 	.word	0x3ff00000

08009c90 <__d2b>:
 8009c90:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009c94:	2101      	movs	r1, #1
 8009c96:	4690      	mov	r8, r2
 8009c98:	4699      	mov	r9, r3
 8009c9a:	9e08      	ldr	r6, [sp, #32]
 8009c9c:	f7ff fc1e 	bl	80094dc <_Balloc>
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	b930      	cbnz	r0, 8009cb2 <__d2b+0x22>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	f240 310f 	movw	r1, #783	@ 0x30f
 8009caa:	4b23      	ldr	r3, [pc, #140]	@ (8009d38 <__d2b+0xa8>)
 8009cac:	4823      	ldr	r0, [pc, #140]	@ (8009d3c <__d2b+0xac>)
 8009cae:	f001 f97b 	bl	800afa8 <__assert_func>
 8009cb2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cba:	b10d      	cbz	r5, 8009cc0 <__d2b+0x30>
 8009cbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	f1b8 0300 	subs.w	r3, r8, #0
 8009cc6:	d024      	beq.n	8009d12 <__d2b+0x82>
 8009cc8:	4668      	mov	r0, sp
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	f7ff fd17 	bl	80096fe <__lo0bits>
 8009cd0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cd4:	b1d8      	cbz	r0, 8009d0e <__d2b+0x7e>
 8009cd6:	f1c0 0320 	rsb	r3, r0, #32
 8009cda:	fa02 f303 	lsl.w	r3, r2, r3
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	40c2      	lsrs	r2, r0
 8009ce2:	6163      	str	r3, [r4, #20]
 8009ce4:	9201      	str	r2, [sp, #4]
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bf0c      	ite	eq
 8009cec:	2201      	moveq	r2, #1
 8009cee:	2202      	movne	r2, #2
 8009cf0:	61a3      	str	r3, [r4, #24]
 8009cf2:	6122      	str	r2, [r4, #16]
 8009cf4:	b1ad      	cbz	r5, 8009d22 <__d2b+0x92>
 8009cf6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009cfa:	4405      	add	r5, r0
 8009cfc:	6035      	str	r5, [r6, #0]
 8009cfe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d04:	6018      	str	r0, [r3, #0]
 8009d06:	4620      	mov	r0, r4
 8009d08:	b002      	add	sp, #8
 8009d0a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009d0e:	6161      	str	r1, [r4, #20]
 8009d10:	e7e9      	b.n	8009ce6 <__d2b+0x56>
 8009d12:	a801      	add	r0, sp, #4
 8009d14:	f7ff fcf3 	bl	80096fe <__lo0bits>
 8009d18:	9b01      	ldr	r3, [sp, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	6163      	str	r3, [r4, #20]
 8009d1e:	3020      	adds	r0, #32
 8009d20:	e7e7      	b.n	8009cf2 <__d2b+0x62>
 8009d22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d2a:	6030      	str	r0, [r6, #0]
 8009d2c:	6918      	ldr	r0, [r3, #16]
 8009d2e:	f7ff fcc7 	bl	80096c0 <__hi0bits>
 8009d32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d36:	e7e4      	b.n	8009d02 <__d2b+0x72>
 8009d38:	0800d14b 	.word	0x0800d14b
 8009d3c:	0800d15c 	.word	0x0800d15c

08009d40 <__ratio>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	b085      	sub	sp, #20
 8009d46:	e9cd 1000 	strd	r1, r0, [sp]
 8009d4a:	a902      	add	r1, sp, #8
 8009d4c:	f7ff ff58 	bl	8009c00 <__b2d>
 8009d50:	468b      	mov	fp, r1
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	9800      	ldr	r0, [sp, #0]
 8009d58:	a903      	add	r1, sp, #12
 8009d5a:	f7ff ff51 	bl	8009c00 <__b2d>
 8009d5e:	460d      	mov	r5, r1
 8009d60:	9b01      	ldr	r3, [sp, #4]
 8009d62:	4689      	mov	r9, r1
 8009d64:	6919      	ldr	r1, [r3, #16]
 8009d66:	9b00      	ldr	r3, [sp, #0]
 8009d68:	4604      	mov	r4, r0
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	1ac9      	subs	r1, r1, r3
 8009d70:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d74:	1a9b      	subs	r3, r3, r2
 8009d76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bfcd      	iteet	gt
 8009d7e:	463a      	movgt	r2, r7
 8009d80:	462a      	movle	r2, r5
 8009d82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d86:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009d8a:	bfd8      	it	le
 8009d8c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009d90:	464b      	mov	r3, r9
 8009d92:	4622      	mov	r2, r4
 8009d94:	4659      	mov	r1, fp
 8009d96:	f7f6 fcc9 	bl	800072c <__aeabi_ddiv>
 8009d9a:	b005      	add	sp, #20
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009da0 <__copybits>:
 8009da0:	3901      	subs	r1, #1
 8009da2:	b570      	push	{r4, r5, r6, lr}
 8009da4:	1149      	asrs	r1, r1, #5
 8009da6:	6914      	ldr	r4, [r2, #16]
 8009da8:	3101      	adds	r1, #1
 8009daa:	f102 0314 	add.w	r3, r2, #20
 8009dae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009db2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009db6:	1f05      	subs	r5, r0, #4
 8009db8:	42a3      	cmp	r3, r4
 8009dba:	d30c      	bcc.n	8009dd6 <__copybits+0x36>
 8009dbc:	1aa3      	subs	r3, r4, r2
 8009dbe:	3b11      	subs	r3, #17
 8009dc0:	f023 0303 	bic.w	r3, r3, #3
 8009dc4:	3211      	adds	r2, #17
 8009dc6:	42a2      	cmp	r2, r4
 8009dc8:	bf88      	it	hi
 8009dca:	2300      	movhi	r3, #0
 8009dcc:	4418      	add	r0, r3
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4288      	cmp	r0, r1
 8009dd2:	d305      	bcc.n	8009de0 <__copybits+0x40>
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
 8009dd6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dda:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dde:	e7eb      	b.n	8009db8 <__copybits+0x18>
 8009de0:	f840 3b04 	str.w	r3, [r0], #4
 8009de4:	e7f4      	b.n	8009dd0 <__copybits+0x30>

08009de6 <__any_on>:
 8009de6:	f100 0214 	add.w	r2, r0, #20
 8009dea:	6900      	ldr	r0, [r0, #16]
 8009dec:	114b      	asrs	r3, r1, #5
 8009dee:	4298      	cmp	r0, r3
 8009df0:	b510      	push	{r4, lr}
 8009df2:	db11      	blt.n	8009e18 <__any_on+0x32>
 8009df4:	dd0a      	ble.n	8009e0c <__any_on+0x26>
 8009df6:	f011 011f 	ands.w	r1, r1, #31
 8009dfa:	d007      	beq.n	8009e0c <__any_on+0x26>
 8009dfc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e00:	fa24 f001 	lsr.w	r0, r4, r1
 8009e04:	fa00 f101 	lsl.w	r1, r0, r1
 8009e08:	428c      	cmp	r4, r1
 8009e0a:	d10b      	bne.n	8009e24 <__any_on+0x3e>
 8009e0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d803      	bhi.n	8009e1c <__any_on+0x36>
 8009e14:	2000      	movs	r0, #0
 8009e16:	bd10      	pop	{r4, pc}
 8009e18:	4603      	mov	r3, r0
 8009e1a:	e7f7      	b.n	8009e0c <__any_on+0x26>
 8009e1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e20:	2900      	cmp	r1, #0
 8009e22:	d0f5      	beq.n	8009e10 <__any_on+0x2a>
 8009e24:	2001      	movs	r0, #1
 8009e26:	e7f6      	b.n	8009e16 <__any_on+0x30>

08009e28 <sulp>:
 8009e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2c:	460f      	mov	r7, r1
 8009e2e:	4690      	mov	r8, r2
 8009e30:	f7ff fec6 	bl	8009bc0 <__ulp>
 8009e34:	4604      	mov	r4, r0
 8009e36:	460d      	mov	r5, r1
 8009e38:	f1b8 0f00 	cmp.w	r8, #0
 8009e3c:	d011      	beq.n	8009e62 <sulp+0x3a>
 8009e3e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009e42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	dd0b      	ble.n	8009e62 <sulp+0x3a>
 8009e4a:	2400      	movs	r4, #0
 8009e4c:	051b      	lsls	r3, r3, #20
 8009e4e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009e52:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009e56:	4622      	mov	r2, r4
 8009e58:	462b      	mov	r3, r5
 8009e5a:	f7f6 fb3d 	bl	80004d8 <__aeabi_dmul>
 8009e5e:	4604      	mov	r4, r0
 8009e60:	460d      	mov	r5, r1
 8009e62:	4620      	mov	r0, r4
 8009e64:	4629      	mov	r1, r5
 8009e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6a:	0000      	movs	r0, r0
 8009e6c:	0000      	movs	r0, r0
	...

08009e70 <_strtod_l>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	b09f      	sub	sp, #124	@ 0x7c
 8009e76:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009e78:	2200      	movs	r2, #0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e7e:	f04f 0a00 	mov.w	sl, #0
 8009e82:	f04f 0b00 	mov.w	fp, #0
 8009e86:	460a      	mov	r2, r1
 8009e88:	9005      	str	r0, [sp, #20]
 8009e8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e8c:	7811      	ldrb	r1, [r2, #0]
 8009e8e:	292b      	cmp	r1, #43	@ 0x2b
 8009e90:	d048      	beq.n	8009f24 <_strtod_l+0xb4>
 8009e92:	d836      	bhi.n	8009f02 <_strtod_l+0x92>
 8009e94:	290d      	cmp	r1, #13
 8009e96:	d830      	bhi.n	8009efa <_strtod_l+0x8a>
 8009e98:	2908      	cmp	r1, #8
 8009e9a:	d830      	bhi.n	8009efe <_strtod_l+0x8e>
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d039      	beq.n	8009f14 <_strtod_l+0xa4>
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009ea4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009ea6:	782a      	ldrb	r2, [r5, #0]
 8009ea8:	2a30      	cmp	r2, #48	@ 0x30
 8009eaa:	f040 80b1 	bne.w	800a010 <_strtod_l+0x1a0>
 8009eae:	786a      	ldrb	r2, [r5, #1]
 8009eb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009eb4:	2a58      	cmp	r2, #88	@ 0x58
 8009eb6:	d16c      	bne.n	8009f92 <_strtod_l+0x122>
 8009eb8:	9302      	str	r3, [sp, #8]
 8009eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ebc:	4a8e      	ldr	r2, [pc, #568]	@ (800a0f8 <_strtod_l+0x288>)
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	9805      	ldr	r0, [sp, #20]
 8009ec6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ec8:	a919      	add	r1, sp, #100	@ 0x64
 8009eca:	f001 f907 	bl	800b0dc <__gethex>
 8009ece:	f010 060f 	ands.w	r6, r0, #15
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	d005      	beq.n	8009ee2 <_strtod_l+0x72>
 8009ed6:	2e06      	cmp	r6, #6
 8009ed8:	d126      	bne.n	8009f28 <_strtod_l+0xb8>
 8009eda:	2300      	movs	r3, #0
 8009edc:	3501      	adds	r5, #1
 8009ede:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ee2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f040 8584 	bne.w	800a9f2 <_strtod_l+0xb82>
 8009eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eec:	b1bb      	cbz	r3, 8009f1e <_strtod_l+0xae>
 8009eee:	4650      	mov	r0, sl
 8009ef0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009ef4:	b01f      	add	sp, #124	@ 0x7c
 8009ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efa:	2920      	cmp	r1, #32
 8009efc:	d1d0      	bne.n	8009ea0 <_strtod_l+0x30>
 8009efe:	3201      	adds	r2, #1
 8009f00:	e7c3      	b.n	8009e8a <_strtod_l+0x1a>
 8009f02:	292d      	cmp	r1, #45	@ 0x2d
 8009f04:	d1cc      	bne.n	8009ea0 <_strtod_l+0x30>
 8009f06:	2101      	movs	r1, #1
 8009f08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f0a:	1c51      	adds	r1, r2, #1
 8009f0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f0e:	7852      	ldrb	r2, [r2, #1]
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	d1c7      	bne.n	8009ea4 <_strtod_l+0x34>
 8009f14:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f16:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f040 8568 	bne.w	800a9ee <_strtod_l+0xb7e>
 8009f1e:	4650      	mov	r0, sl
 8009f20:	4659      	mov	r1, fp
 8009f22:	e7e7      	b.n	8009ef4 <_strtod_l+0x84>
 8009f24:	2100      	movs	r1, #0
 8009f26:	e7ef      	b.n	8009f08 <_strtod_l+0x98>
 8009f28:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f2a:	b13a      	cbz	r2, 8009f3c <_strtod_l+0xcc>
 8009f2c:	2135      	movs	r1, #53	@ 0x35
 8009f2e:	a81c      	add	r0, sp, #112	@ 0x70
 8009f30:	f7ff ff36 	bl	8009da0 <__copybits>
 8009f34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f36:	9805      	ldr	r0, [sp, #20]
 8009f38:	f7ff fb10 	bl	800955c <_Bfree>
 8009f3c:	3e01      	subs	r6, #1
 8009f3e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f40:	2e04      	cmp	r6, #4
 8009f42:	d806      	bhi.n	8009f52 <_strtod_l+0xe2>
 8009f44:	e8df f006 	tbb	[pc, r6]
 8009f48:	201d0314 	.word	0x201d0314
 8009f4c:	14          	.byte	0x14
 8009f4d:	00          	.byte	0x00
 8009f4e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009f52:	05e1      	lsls	r1, r4, #23
 8009f54:	bf48      	it	mi
 8009f56:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009f5a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f5e:	0d1b      	lsrs	r3, r3, #20
 8009f60:	051b      	lsls	r3, r3, #20
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1bd      	bne.n	8009ee2 <_strtod_l+0x72>
 8009f66:	f7fe fb1b 	bl	80085a0 <__errno>
 8009f6a:	2322      	movs	r3, #34	@ 0x22
 8009f6c:	6003      	str	r3, [r0, #0]
 8009f6e:	e7b8      	b.n	8009ee2 <_strtod_l+0x72>
 8009f70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009f78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009f7c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f80:	e7e7      	b.n	8009f52 <_strtod_l+0xe2>
 8009f82:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a0fc <_strtod_l+0x28c>
 8009f86:	e7e4      	b.n	8009f52 <_strtod_l+0xe2>
 8009f88:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f8c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009f90:	e7df      	b.n	8009f52 <_strtod_l+0xe2>
 8009f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f98:	785b      	ldrb	r3, [r3, #1]
 8009f9a:	2b30      	cmp	r3, #48	@ 0x30
 8009f9c:	d0f9      	beq.n	8009f92 <_strtod_l+0x122>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d09f      	beq.n	8009ee2 <_strtod_l+0x72>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fa8:	220a      	movs	r2, #10
 8009faa:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fac:	2300      	movs	r3, #0
 8009fae:	461f      	mov	r7, r3
 8009fb0:	9308      	str	r3, [sp, #32]
 8009fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fb4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009fb6:	7805      	ldrb	r5, [r0, #0]
 8009fb8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009fbc:	b2d9      	uxtb	r1, r3
 8009fbe:	2909      	cmp	r1, #9
 8009fc0:	d928      	bls.n	800a014 <_strtod_l+0x1a4>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	494e      	ldr	r1, [pc, #312]	@ (800a100 <_strtod_l+0x290>)
 8009fc6:	f000 ffc7 	bl	800af58 <strncmp>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d032      	beq.n	800a034 <_strtod_l+0x1c4>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	462a      	mov	r2, r5
 8009fd2:	4681      	mov	r9, r0
 8009fd4:	463d      	mov	r5, r7
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2a65      	cmp	r2, #101	@ 0x65
 8009fda:	d001      	beq.n	8009fe0 <_strtod_l+0x170>
 8009fdc:	2a45      	cmp	r2, #69	@ 0x45
 8009fde:	d114      	bne.n	800a00a <_strtod_l+0x19a>
 8009fe0:	b91d      	cbnz	r5, 8009fea <_strtod_l+0x17a>
 8009fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fe4:	4302      	orrs	r2, r0
 8009fe6:	d095      	beq.n	8009f14 <_strtod_l+0xa4>
 8009fe8:	2500      	movs	r5, #0
 8009fea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009fec:	1c62      	adds	r2, r4, #1
 8009fee:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ff0:	7862      	ldrb	r2, [r4, #1]
 8009ff2:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ff4:	d077      	beq.n	800a0e6 <_strtod_l+0x276>
 8009ff6:	2a2d      	cmp	r2, #45	@ 0x2d
 8009ff8:	d07b      	beq.n	800a0f2 <_strtod_l+0x282>
 8009ffa:	f04f 0c00 	mov.w	ip, #0
 8009ffe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a002:	2909      	cmp	r1, #9
 800a004:	f240 8082 	bls.w	800a10c <_strtod_l+0x29c>
 800a008:	9419      	str	r4, [sp, #100]	@ 0x64
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	e0a2      	b.n	800a156 <_strtod_l+0x2e6>
 800a010:	2300      	movs	r3, #0
 800a012:	e7c7      	b.n	8009fa4 <_strtod_l+0x134>
 800a014:	2f08      	cmp	r7, #8
 800a016:	bfd5      	itete	le
 800a018:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a01a:	9908      	ldrgt	r1, [sp, #32]
 800a01c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a020:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a024:	f100 0001 	add.w	r0, r0, #1
 800a028:	bfd4      	ite	le
 800a02a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a02c:	9308      	strgt	r3, [sp, #32]
 800a02e:	3701      	adds	r7, #1
 800a030:	9019      	str	r0, [sp, #100]	@ 0x64
 800a032:	e7bf      	b.n	8009fb4 <_strtod_l+0x144>
 800a034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	9219      	str	r2, [sp, #100]	@ 0x64
 800a03a:	785a      	ldrb	r2, [r3, #1]
 800a03c:	b37f      	cbz	r7, 800a09e <_strtod_l+0x22e>
 800a03e:	4681      	mov	r9, r0
 800a040:	463d      	mov	r5, r7
 800a042:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a046:	2b09      	cmp	r3, #9
 800a048:	d912      	bls.n	800a070 <_strtod_l+0x200>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e7c4      	b.n	8009fd8 <_strtod_l+0x168>
 800a04e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a050:	3001      	adds	r0, #1
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	9219      	str	r2, [sp, #100]	@ 0x64
 800a056:	785a      	ldrb	r2, [r3, #1]
 800a058:	2a30      	cmp	r2, #48	@ 0x30
 800a05a:	d0f8      	beq.n	800a04e <_strtod_l+0x1de>
 800a05c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a060:	2b08      	cmp	r3, #8
 800a062:	f200 84cb 	bhi.w	800a9fc <_strtod_l+0xb8c>
 800a066:	4681      	mov	r9, r0
 800a068:	2000      	movs	r0, #0
 800a06a:	4605      	mov	r5, r0
 800a06c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a06e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a070:	3a30      	subs	r2, #48	@ 0x30
 800a072:	f100 0301 	add.w	r3, r0, #1
 800a076:	d02a      	beq.n	800a0ce <_strtod_l+0x25e>
 800a078:	4499      	add	r9, r3
 800a07a:	210a      	movs	r1, #10
 800a07c:	462b      	mov	r3, r5
 800a07e:	eb00 0c05 	add.w	ip, r0, r5
 800a082:	4563      	cmp	r3, ip
 800a084:	d10d      	bne.n	800a0a2 <_strtod_l+0x232>
 800a086:	1c69      	adds	r1, r5, #1
 800a088:	4401      	add	r1, r0
 800a08a:	4428      	add	r0, r5
 800a08c:	2808      	cmp	r0, #8
 800a08e:	dc16      	bgt.n	800a0be <_strtod_l+0x24e>
 800a090:	230a      	movs	r3, #10
 800a092:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a094:	fb03 2300 	mla	r3, r3, r0, r2
 800a098:	930a      	str	r3, [sp, #40]	@ 0x28
 800a09a:	2300      	movs	r3, #0
 800a09c:	e018      	b.n	800a0d0 <_strtod_l+0x260>
 800a09e:	4638      	mov	r0, r7
 800a0a0:	e7da      	b.n	800a058 <_strtod_l+0x1e8>
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	f103 0301 	add.w	r3, r3, #1
 800a0a8:	dc03      	bgt.n	800a0b2 <_strtod_l+0x242>
 800a0aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a0ac:	434e      	muls	r6, r1
 800a0ae:	960a      	str	r6, [sp, #40]	@ 0x28
 800a0b0:	e7e7      	b.n	800a082 <_strtod_l+0x212>
 800a0b2:	2b10      	cmp	r3, #16
 800a0b4:	bfde      	ittt	le
 800a0b6:	9e08      	ldrle	r6, [sp, #32]
 800a0b8:	434e      	mulle	r6, r1
 800a0ba:	9608      	strle	r6, [sp, #32]
 800a0bc:	e7e1      	b.n	800a082 <_strtod_l+0x212>
 800a0be:	280f      	cmp	r0, #15
 800a0c0:	dceb      	bgt.n	800a09a <_strtod_l+0x22a>
 800a0c2:	230a      	movs	r3, #10
 800a0c4:	9808      	ldr	r0, [sp, #32]
 800a0c6:	fb03 2300 	mla	r3, r3, r0, r2
 800a0ca:	9308      	str	r3, [sp, #32]
 800a0cc:	e7e5      	b.n	800a09a <_strtod_l+0x22a>
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	1c50      	adds	r0, r2, #1
 800a0d6:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0d8:	7852      	ldrb	r2, [r2, #1]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	e7b1      	b.n	800a042 <_strtod_l+0x1d2>
 800a0de:	f04f 0900 	mov.w	r9, #0
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e77d      	b.n	8009fe2 <_strtod_l+0x172>
 800a0e6:	f04f 0c00 	mov.w	ip, #0
 800a0ea:	1ca2      	adds	r2, r4, #2
 800a0ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0ee:	78a2      	ldrb	r2, [r4, #2]
 800a0f0:	e785      	b.n	8009ffe <_strtod_l+0x18e>
 800a0f2:	f04f 0c01 	mov.w	ip, #1
 800a0f6:	e7f8      	b.n	800a0ea <_strtod_l+0x27a>
 800a0f8:	0800d2d0 	.word	0x0800d2d0
 800a0fc:	7ff00000 	.word	0x7ff00000
 800a100:	0800d2b8 	.word	0x0800d2b8
 800a104:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a106:	1c51      	adds	r1, r2, #1
 800a108:	9119      	str	r1, [sp, #100]	@ 0x64
 800a10a:	7852      	ldrb	r2, [r2, #1]
 800a10c:	2a30      	cmp	r2, #48	@ 0x30
 800a10e:	d0f9      	beq.n	800a104 <_strtod_l+0x294>
 800a110:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a114:	2908      	cmp	r1, #8
 800a116:	f63f af78 	bhi.w	800a00a <_strtod_l+0x19a>
 800a11a:	f04f 080a 	mov.w	r8, #10
 800a11e:	3a30      	subs	r2, #48	@ 0x30
 800a120:	920e      	str	r2, [sp, #56]	@ 0x38
 800a122:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a124:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a126:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a128:	1c56      	adds	r6, r2, #1
 800a12a:	9619      	str	r6, [sp, #100]	@ 0x64
 800a12c:	7852      	ldrb	r2, [r2, #1]
 800a12e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a132:	f1be 0f09 	cmp.w	lr, #9
 800a136:	d939      	bls.n	800a1ac <_strtod_l+0x33c>
 800a138:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a13a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a13e:	1a76      	subs	r6, r6, r1
 800a140:	2e08      	cmp	r6, #8
 800a142:	dc03      	bgt.n	800a14c <_strtod_l+0x2dc>
 800a144:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a146:	4588      	cmp	r8, r1
 800a148:	bfa8      	it	ge
 800a14a:	4688      	movge	r8, r1
 800a14c:	f1bc 0f00 	cmp.w	ip, #0
 800a150:	d001      	beq.n	800a156 <_strtod_l+0x2e6>
 800a152:	f1c8 0800 	rsb	r8, r8, #0
 800a156:	2d00      	cmp	r5, #0
 800a158:	d14e      	bne.n	800a1f8 <_strtod_l+0x388>
 800a15a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a15c:	4308      	orrs	r0, r1
 800a15e:	f47f aec0 	bne.w	8009ee2 <_strtod_l+0x72>
 800a162:	2b00      	cmp	r3, #0
 800a164:	f47f aed6 	bne.w	8009f14 <_strtod_l+0xa4>
 800a168:	2a69      	cmp	r2, #105	@ 0x69
 800a16a:	d028      	beq.n	800a1be <_strtod_l+0x34e>
 800a16c:	dc25      	bgt.n	800a1ba <_strtod_l+0x34a>
 800a16e:	2a49      	cmp	r2, #73	@ 0x49
 800a170:	d025      	beq.n	800a1be <_strtod_l+0x34e>
 800a172:	2a4e      	cmp	r2, #78	@ 0x4e
 800a174:	f47f aece 	bne.w	8009f14 <_strtod_l+0xa4>
 800a178:	499a      	ldr	r1, [pc, #616]	@ (800a3e4 <_strtod_l+0x574>)
 800a17a:	a819      	add	r0, sp, #100	@ 0x64
 800a17c:	f001 f9d0 	bl	800b520 <__match>
 800a180:	2800      	cmp	r0, #0
 800a182:	f43f aec7 	beq.w	8009f14 <_strtod_l+0xa4>
 800a186:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b28      	cmp	r3, #40	@ 0x28
 800a18c:	d12e      	bne.n	800a1ec <_strtod_l+0x37c>
 800a18e:	4996      	ldr	r1, [pc, #600]	@ (800a3e8 <_strtod_l+0x578>)
 800a190:	aa1c      	add	r2, sp, #112	@ 0x70
 800a192:	a819      	add	r0, sp, #100	@ 0x64
 800a194:	f001 f9d8 	bl	800b548 <__hexnan>
 800a198:	2805      	cmp	r0, #5
 800a19a:	d127      	bne.n	800a1ec <_strtod_l+0x37c>
 800a19c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a19e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a1a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a1a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a1aa:	e69a      	b.n	8009ee2 <_strtod_l+0x72>
 800a1ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a1ae:	fb08 2101 	mla	r1, r8, r1, r2
 800a1b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a1b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1b8:	e7b5      	b.n	800a126 <_strtod_l+0x2b6>
 800a1ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800a1bc:	e7da      	b.n	800a174 <_strtod_l+0x304>
 800a1be:	498b      	ldr	r1, [pc, #556]	@ (800a3ec <_strtod_l+0x57c>)
 800a1c0:	a819      	add	r0, sp, #100	@ 0x64
 800a1c2:	f001 f9ad 	bl	800b520 <__match>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	f43f aea4 	beq.w	8009f14 <_strtod_l+0xa4>
 800a1cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1ce:	4988      	ldr	r1, [pc, #544]	@ (800a3f0 <_strtod_l+0x580>)
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	a819      	add	r0, sp, #100	@ 0x64
 800a1d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1d6:	f001 f9a3 	bl	800b520 <__match>
 800a1da:	b910      	cbnz	r0, 800a1e2 <_strtod_l+0x372>
 800a1dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1de:	3301      	adds	r3, #1
 800a1e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1e2:	f04f 0a00 	mov.w	sl, #0
 800a1e6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a3f4 <_strtod_l+0x584>
 800a1ea:	e67a      	b.n	8009ee2 <_strtod_l+0x72>
 800a1ec:	4882      	ldr	r0, [pc, #520]	@ (800a3f8 <_strtod_l+0x588>)
 800a1ee:	f000 fed5 	bl	800af9c <nan>
 800a1f2:	4682      	mov	sl, r0
 800a1f4:	468b      	mov	fp, r1
 800a1f6:	e674      	b.n	8009ee2 <_strtod_l+0x72>
 800a1f8:	eba8 0309 	sub.w	r3, r8, r9
 800a1fc:	2f00      	cmp	r7, #0
 800a1fe:	bf08      	it	eq
 800a200:	462f      	moveq	r7, r5
 800a202:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a204:	2d10      	cmp	r5, #16
 800a206:	462c      	mov	r4, r5
 800a208:	9309      	str	r3, [sp, #36]	@ 0x24
 800a20a:	bfa8      	it	ge
 800a20c:	2410      	movge	r4, #16
 800a20e:	f7f6 f8e9 	bl	80003e4 <__aeabi_ui2d>
 800a212:	2d09      	cmp	r5, #9
 800a214:	4682      	mov	sl, r0
 800a216:	468b      	mov	fp, r1
 800a218:	dc11      	bgt.n	800a23e <_strtod_l+0x3ce>
 800a21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f43f ae60 	beq.w	8009ee2 <_strtod_l+0x72>
 800a222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a224:	dd76      	ble.n	800a314 <_strtod_l+0x4a4>
 800a226:	2b16      	cmp	r3, #22
 800a228:	dc5d      	bgt.n	800a2e6 <_strtod_l+0x476>
 800a22a:	4974      	ldr	r1, [pc, #464]	@ (800a3fc <_strtod_l+0x58c>)
 800a22c:	4652      	mov	r2, sl
 800a22e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a232:	465b      	mov	r3, fp
 800a234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a238:	f7f6 f94e 	bl	80004d8 <__aeabi_dmul>
 800a23c:	e7d9      	b.n	800a1f2 <_strtod_l+0x382>
 800a23e:	4b6f      	ldr	r3, [pc, #444]	@ (800a3fc <_strtod_l+0x58c>)
 800a240:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a244:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a248:	f7f6 f946 	bl	80004d8 <__aeabi_dmul>
 800a24c:	4682      	mov	sl, r0
 800a24e:	9808      	ldr	r0, [sp, #32]
 800a250:	468b      	mov	fp, r1
 800a252:	f7f6 f8c7 	bl	80003e4 <__aeabi_ui2d>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4650      	mov	r0, sl
 800a25c:	4659      	mov	r1, fp
 800a25e:	f7f5 ff85 	bl	800016c <__adddf3>
 800a262:	2d0f      	cmp	r5, #15
 800a264:	4682      	mov	sl, r0
 800a266:	468b      	mov	fp, r1
 800a268:	ddd7      	ble.n	800a21a <_strtod_l+0x3aa>
 800a26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a26c:	1b2c      	subs	r4, r5, r4
 800a26e:	441c      	add	r4, r3
 800a270:	2c00      	cmp	r4, #0
 800a272:	f340 8096 	ble.w	800a3a2 <_strtod_l+0x532>
 800a276:	f014 030f 	ands.w	r3, r4, #15
 800a27a:	d00a      	beq.n	800a292 <_strtod_l+0x422>
 800a27c:	495f      	ldr	r1, [pc, #380]	@ (800a3fc <_strtod_l+0x58c>)
 800a27e:	4652      	mov	r2, sl
 800a280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a288:	465b      	mov	r3, fp
 800a28a:	f7f6 f925 	bl	80004d8 <__aeabi_dmul>
 800a28e:	4682      	mov	sl, r0
 800a290:	468b      	mov	fp, r1
 800a292:	f034 040f 	bics.w	r4, r4, #15
 800a296:	d073      	beq.n	800a380 <_strtod_l+0x510>
 800a298:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a29c:	dd48      	ble.n	800a330 <_strtod_l+0x4c0>
 800a29e:	2400      	movs	r4, #0
 800a2a0:	46a0      	mov	r8, r4
 800a2a2:	46a1      	mov	r9, r4
 800a2a4:	940a      	str	r4, [sp, #40]	@ 0x28
 800a2a6:	2322      	movs	r3, #34	@ 0x22
 800a2a8:	f04f 0a00 	mov.w	sl, #0
 800a2ac:	9a05      	ldr	r2, [sp, #20]
 800a2ae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a3f4 <_strtod_l+0x584>
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f43f ae13 	beq.w	8009ee2 <_strtod_l+0x72>
 800a2bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2be:	9805      	ldr	r0, [sp, #20]
 800a2c0:	f7ff f94c 	bl	800955c <_Bfree>
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	9805      	ldr	r0, [sp, #20]
 800a2c8:	f7ff f948 	bl	800955c <_Bfree>
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	9805      	ldr	r0, [sp, #20]
 800a2d0:	f7ff f944 	bl	800955c <_Bfree>
 800a2d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2d6:	9805      	ldr	r0, [sp, #20]
 800a2d8:	f7ff f940 	bl	800955c <_Bfree>
 800a2dc:	4621      	mov	r1, r4
 800a2de:	9805      	ldr	r0, [sp, #20]
 800a2e0:	f7ff f93c 	bl	800955c <_Bfree>
 800a2e4:	e5fd      	b.n	8009ee2 <_strtod_l+0x72>
 800a2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	dbbc      	blt.n	800a26a <_strtod_l+0x3fa>
 800a2f0:	4c42      	ldr	r4, [pc, #264]	@ (800a3fc <_strtod_l+0x58c>)
 800a2f2:	f1c5 050f 	rsb	r5, r5, #15
 800a2f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a300:	465b      	mov	r3, fp
 800a302:	f7f6 f8e9 	bl	80004d8 <__aeabi_dmul>
 800a306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a308:	1b5d      	subs	r5, r3, r5
 800a30a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a30e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a312:	e791      	b.n	800a238 <_strtod_l+0x3c8>
 800a314:	3316      	adds	r3, #22
 800a316:	dba8      	blt.n	800a26a <_strtod_l+0x3fa>
 800a318:	4b38      	ldr	r3, [pc, #224]	@ (800a3fc <_strtod_l+0x58c>)
 800a31a:	eba9 0808 	sub.w	r8, r9, r8
 800a31e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a322:	4650      	mov	r0, sl
 800a324:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a328:	4659      	mov	r1, fp
 800a32a:	f7f6 f9ff 	bl	800072c <__aeabi_ddiv>
 800a32e:	e760      	b.n	800a1f2 <_strtod_l+0x382>
 800a330:	4b33      	ldr	r3, [pc, #204]	@ (800a400 <_strtod_l+0x590>)
 800a332:	4650      	mov	r0, sl
 800a334:	9308      	str	r3, [sp, #32]
 800a336:	2300      	movs	r3, #0
 800a338:	4659      	mov	r1, fp
 800a33a:	461e      	mov	r6, r3
 800a33c:	1124      	asrs	r4, r4, #4
 800a33e:	2c01      	cmp	r4, #1
 800a340:	dc21      	bgt.n	800a386 <_strtod_l+0x516>
 800a342:	b10b      	cbz	r3, 800a348 <_strtod_l+0x4d8>
 800a344:	4682      	mov	sl, r0
 800a346:	468b      	mov	fp, r1
 800a348:	492d      	ldr	r1, [pc, #180]	@ (800a400 <_strtod_l+0x590>)
 800a34a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a34e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a352:	4652      	mov	r2, sl
 800a354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a358:	465b      	mov	r3, fp
 800a35a:	f7f6 f8bd 	bl	80004d8 <__aeabi_dmul>
 800a35e:	4b25      	ldr	r3, [pc, #148]	@ (800a3f4 <_strtod_l+0x584>)
 800a360:	460a      	mov	r2, r1
 800a362:	400b      	ands	r3, r1
 800a364:	4927      	ldr	r1, [pc, #156]	@ (800a404 <_strtod_l+0x594>)
 800a366:	4682      	mov	sl, r0
 800a368:	428b      	cmp	r3, r1
 800a36a:	d898      	bhi.n	800a29e <_strtod_l+0x42e>
 800a36c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a370:	428b      	cmp	r3, r1
 800a372:	bf86      	itte	hi
 800a374:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a378:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a408 <_strtod_l+0x598>
 800a37c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a380:	2300      	movs	r3, #0
 800a382:	9308      	str	r3, [sp, #32]
 800a384:	e07a      	b.n	800a47c <_strtod_l+0x60c>
 800a386:	07e2      	lsls	r2, r4, #31
 800a388:	d505      	bpl.n	800a396 <_strtod_l+0x526>
 800a38a:	9b08      	ldr	r3, [sp, #32]
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f6 f8a2 	bl	80004d8 <__aeabi_dmul>
 800a394:	2301      	movs	r3, #1
 800a396:	9a08      	ldr	r2, [sp, #32]
 800a398:	3601      	adds	r6, #1
 800a39a:	3208      	adds	r2, #8
 800a39c:	1064      	asrs	r4, r4, #1
 800a39e:	9208      	str	r2, [sp, #32]
 800a3a0:	e7cd      	b.n	800a33e <_strtod_l+0x4ce>
 800a3a2:	d0ed      	beq.n	800a380 <_strtod_l+0x510>
 800a3a4:	4264      	negs	r4, r4
 800a3a6:	f014 020f 	ands.w	r2, r4, #15
 800a3aa:	d00a      	beq.n	800a3c2 <_strtod_l+0x552>
 800a3ac:	4b13      	ldr	r3, [pc, #76]	@ (800a3fc <_strtod_l+0x58c>)
 800a3ae:	4650      	mov	r0, sl
 800a3b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	f7f6 f9b7 	bl	800072c <__aeabi_ddiv>
 800a3be:	4682      	mov	sl, r0
 800a3c0:	468b      	mov	fp, r1
 800a3c2:	1124      	asrs	r4, r4, #4
 800a3c4:	d0dc      	beq.n	800a380 <_strtod_l+0x510>
 800a3c6:	2c1f      	cmp	r4, #31
 800a3c8:	dd20      	ble.n	800a40c <_strtod_l+0x59c>
 800a3ca:	2400      	movs	r4, #0
 800a3cc:	46a0      	mov	r8, r4
 800a3ce:	46a1      	mov	r9, r4
 800a3d0:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3d2:	2322      	movs	r3, #34	@ 0x22
 800a3d4:	9a05      	ldr	r2, [sp, #20]
 800a3d6:	f04f 0a00 	mov.w	sl, #0
 800a3da:	f04f 0b00 	mov.w	fp, #0
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e768      	b.n	800a2b4 <_strtod_l+0x444>
 800a3e2:	bf00      	nop
 800a3e4:	0800d0a3 	.word	0x0800d0a3
 800a3e8:	0800d2bc 	.word	0x0800d2bc
 800a3ec:	0800d09b 	.word	0x0800d09b
 800a3f0:	0800d0d2 	.word	0x0800d0d2
 800a3f4:	7ff00000 	.word	0x7ff00000
 800a3f8:	0800d465 	.word	0x0800d465
 800a3fc:	0800d1f0 	.word	0x0800d1f0
 800a400:	0800d1c8 	.word	0x0800d1c8
 800a404:	7ca00000 	.word	0x7ca00000
 800a408:	7fefffff 	.word	0x7fefffff
 800a40c:	f014 0310 	ands.w	r3, r4, #16
 800a410:	bf18      	it	ne
 800a412:	236a      	movne	r3, #106	@ 0x6a
 800a414:	4650      	mov	r0, sl
 800a416:	9308      	str	r3, [sp, #32]
 800a418:	4659      	mov	r1, fp
 800a41a:	2300      	movs	r3, #0
 800a41c:	4ea9      	ldr	r6, [pc, #676]	@ (800a6c4 <_strtod_l+0x854>)
 800a41e:	07e2      	lsls	r2, r4, #31
 800a420:	d504      	bpl.n	800a42c <_strtod_l+0x5bc>
 800a422:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a426:	f7f6 f857 	bl	80004d8 <__aeabi_dmul>
 800a42a:	2301      	movs	r3, #1
 800a42c:	1064      	asrs	r4, r4, #1
 800a42e:	f106 0608 	add.w	r6, r6, #8
 800a432:	d1f4      	bne.n	800a41e <_strtod_l+0x5ae>
 800a434:	b10b      	cbz	r3, 800a43a <_strtod_l+0x5ca>
 800a436:	4682      	mov	sl, r0
 800a438:	468b      	mov	fp, r1
 800a43a:	9b08      	ldr	r3, [sp, #32]
 800a43c:	b1b3      	cbz	r3, 800a46c <_strtod_l+0x5fc>
 800a43e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a442:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a446:	2b00      	cmp	r3, #0
 800a448:	4659      	mov	r1, fp
 800a44a:	dd0f      	ble.n	800a46c <_strtod_l+0x5fc>
 800a44c:	2b1f      	cmp	r3, #31
 800a44e:	dd57      	ble.n	800a500 <_strtod_l+0x690>
 800a450:	2b34      	cmp	r3, #52	@ 0x34
 800a452:	bfd8      	it	le
 800a454:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a458:	f04f 0a00 	mov.w	sl, #0
 800a45c:	bfcf      	iteee	gt
 800a45e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a462:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a466:	4093      	lslle	r3, r2
 800a468:	ea03 0b01 	andle.w	fp, r3, r1
 800a46c:	2200      	movs	r2, #0
 800a46e:	2300      	movs	r3, #0
 800a470:	4650      	mov	r0, sl
 800a472:	4659      	mov	r1, fp
 800a474:	f7f6 fa98 	bl	80009a8 <__aeabi_dcmpeq>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d1a6      	bne.n	800a3ca <_strtod_l+0x55a>
 800a47c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a47e:	463a      	mov	r2, r7
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a484:	462b      	mov	r3, r5
 800a486:	9805      	ldr	r0, [sp, #20]
 800a488:	f7ff f8d0 	bl	800962c <__s2b>
 800a48c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a48e:	2800      	cmp	r0, #0
 800a490:	f43f af05 	beq.w	800a29e <_strtod_l+0x42e>
 800a494:	2400      	movs	r4, #0
 800a496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a498:	eba9 0308 	sub.w	r3, r9, r8
 800a49c:	2a00      	cmp	r2, #0
 800a49e:	bfa8      	it	ge
 800a4a0:	2300      	movge	r3, #0
 800a4a2:	46a0      	mov	r8, r4
 800a4a4:	9312      	str	r3, [sp, #72]	@ 0x48
 800a4a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800a4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ae:	9805      	ldr	r0, [sp, #20]
 800a4b0:	6859      	ldr	r1, [r3, #4]
 800a4b2:	f7ff f813 	bl	80094dc <_Balloc>
 800a4b6:	4681      	mov	r9, r0
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	f43f aef4 	beq.w	800a2a6 <_strtod_l+0x436>
 800a4be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	f103 010c 	add.w	r1, r3, #12
 800a4c8:	3202      	adds	r2, #2
 800a4ca:	0092      	lsls	r2, r2, #2
 800a4cc:	f7fe f8a3 	bl	8008616 <memcpy>
 800a4d0:	ab1c      	add	r3, sp, #112	@ 0x70
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	4652      	mov	r2, sl
 800a4da:	465b      	mov	r3, fp
 800a4dc:	9805      	ldr	r0, [sp, #20]
 800a4de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a4e2:	f7ff fbd5 	bl	8009c90 <__d2b>
 800a4e6:	901a      	str	r0, [sp, #104]	@ 0x68
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f43f aedc 	beq.w	800a2a6 <_strtod_l+0x436>
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	9805      	ldr	r0, [sp, #20]
 800a4f2:	f7ff f931 	bl	8009758 <__i2b>
 800a4f6:	4680      	mov	r8, r0
 800a4f8:	b948      	cbnz	r0, 800a50e <_strtod_l+0x69e>
 800a4fa:	f04f 0800 	mov.w	r8, #0
 800a4fe:	e6d2      	b.n	800a2a6 <_strtod_l+0x436>
 800a500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a504:	fa02 f303 	lsl.w	r3, r2, r3
 800a508:	ea03 0a0a 	and.w	sl, r3, sl
 800a50c:	e7ae      	b.n	800a46c <_strtod_l+0x5fc>
 800a50e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a510:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a512:	2d00      	cmp	r5, #0
 800a514:	bfab      	itete	ge
 800a516:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a518:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a51a:	18ef      	addge	r7, r5, r3
 800a51c:	1b5e      	sublt	r6, r3, r5
 800a51e:	9b08      	ldr	r3, [sp, #32]
 800a520:	bfa8      	it	ge
 800a522:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a524:	eba5 0503 	sub.w	r5, r5, r3
 800a528:	4415      	add	r5, r2
 800a52a:	4b67      	ldr	r3, [pc, #412]	@ (800a6c8 <_strtod_l+0x858>)
 800a52c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800a530:	bfb8      	it	lt
 800a532:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a534:	429d      	cmp	r5, r3
 800a536:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a53a:	da50      	bge.n	800a5de <_strtod_l+0x76e>
 800a53c:	1b5b      	subs	r3, r3, r5
 800a53e:	2b1f      	cmp	r3, #31
 800a540:	f04f 0101 	mov.w	r1, #1
 800a544:	eba2 0203 	sub.w	r2, r2, r3
 800a548:	dc3d      	bgt.n	800a5c6 <_strtod_l+0x756>
 800a54a:	fa01 f303 	lsl.w	r3, r1, r3
 800a54e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a550:	2300      	movs	r3, #0
 800a552:	9310      	str	r3, [sp, #64]	@ 0x40
 800a554:	18bd      	adds	r5, r7, r2
 800a556:	9b08      	ldr	r3, [sp, #32]
 800a558:	42af      	cmp	r7, r5
 800a55a:	4416      	add	r6, r2
 800a55c:	441e      	add	r6, r3
 800a55e:	463b      	mov	r3, r7
 800a560:	bfa8      	it	ge
 800a562:	462b      	movge	r3, r5
 800a564:	42b3      	cmp	r3, r6
 800a566:	bfa8      	it	ge
 800a568:	4633      	movge	r3, r6
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bfc2      	ittt	gt
 800a56e:	1aed      	subgt	r5, r5, r3
 800a570:	1af6      	subgt	r6, r6, r3
 800a572:	1aff      	subgt	r7, r7, r3
 800a574:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd16      	ble.n	800a5a8 <_strtod_l+0x738>
 800a57a:	4641      	mov	r1, r8
 800a57c:	461a      	mov	r2, r3
 800a57e:	9805      	ldr	r0, [sp, #20]
 800a580:	f7ff f9a8 	bl	80098d4 <__pow5mult>
 800a584:	4680      	mov	r8, r0
 800a586:	2800      	cmp	r0, #0
 800a588:	d0b7      	beq.n	800a4fa <_strtod_l+0x68a>
 800a58a:	4601      	mov	r1, r0
 800a58c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a58e:	9805      	ldr	r0, [sp, #20]
 800a590:	f7ff f8f8 	bl	8009784 <__multiply>
 800a594:	900e      	str	r0, [sp, #56]	@ 0x38
 800a596:	2800      	cmp	r0, #0
 800a598:	f43f ae85 	beq.w	800a2a6 <_strtod_l+0x436>
 800a59c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a59e:	9805      	ldr	r0, [sp, #20]
 800a5a0:	f7fe ffdc 	bl	800955c <_Bfree>
 800a5a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	dc1d      	bgt.n	800a5e8 <_strtod_l+0x778>
 800a5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd23      	ble.n	800a5fa <_strtod_l+0x78a>
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a5b6:	9805      	ldr	r0, [sp, #20]
 800a5b8:	f7ff f98c 	bl	80098d4 <__pow5mult>
 800a5bc:	4681      	mov	r9, r0
 800a5be:	b9e0      	cbnz	r0, 800a5fa <_strtod_l+0x78a>
 800a5c0:	f04f 0900 	mov.w	r9, #0
 800a5c4:	e66f      	b.n	800a2a6 <_strtod_l+0x436>
 800a5c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a5ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a5ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a5d2:	35e2      	adds	r5, #226	@ 0xe2
 800a5d4:	fa01 f305 	lsl.w	r3, r1, r5
 800a5d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5da:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a5dc:	e7ba      	b.n	800a554 <_strtod_l+0x6e4>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5e6:	e7b5      	b.n	800a554 <_strtod_l+0x6e4>
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ec:	9805      	ldr	r0, [sp, #20]
 800a5ee:	f7ff f9cb 	bl	8009988 <__lshift>
 800a5f2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d1d9      	bne.n	800a5ac <_strtod_l+0x73c>
 800a5f8:	e655      	b.n	800a2a6 <_strtod_l+0x436>
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	dd07      	ble.n	800a60e <_strtod_l+0x79e>
 800a5fe:	4649      	mov	r1, r9
 800a600:	4632      	mov	r2, r6
 800a602:	9805      	ldr	r0, [sp, #20]
 800a604:	f7ff f9c0 	bl	8009988 <__lshift>
 800a608:	4681      	mov	r9, r0
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d0d8      	beq.n	800a5c0 <_strtod_l+0x750>
 800a60e:	2f00      	cmp	r7, #0
 800a610:	dd08      	ble.n	800a624 <_strtod_l+0x7b4>
 800a612:	4641      	mov	r1, r8
 800a614:	463a      	mov	r2, r7
 800a616:	9805      	ldr	r0, [sp, #20]
 800a618:	f7ff f9b6 	bl	8009988 <__lshift>
 800a61c:	4680      	mov	r8, r0
 800a61e:	2800      	cmp	r0, #0
 800a620:	f43f ae41 	beq.w	800a2a6 <_strtod_l+0x436>
 800a624:	464a      	mov	r2, r9
 800a626:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a628:	9805      	ldr	r0, [sp, #20]
 800a62a:	f7ff fa35 	bl	8009a98 <__mdiff>
 800a62e:	4604      	mov	r4, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	f43f ae38 	beq.w	800a2a6 <_strtod_l+0x436>
 800a636:	68c3      	ldr	r3, [r0, #12]
 800a638:	4641      	mov	r1, r8
 800a63a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a63c:	2300      	movs	r3, #0
 800a63e:	60c3      	str	r3, [r0, #12]
 800a640:	f7ff fa0e 	bl	8009a60 <__mcmp>
 800a644:	2800      	cmp	r0, #0
 800a646:	da45      	bge.n	800a6d4 <_strtod_l+0x864>
 800a648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a64a:	ea53 030a 	orrs.w	r3, r3, sl
 800a64e:	d16b      	bne.n	800a728 <_strtod_l+0x8b8>
 800a650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a654:	2b00      	cmp	r3, #0
 800a656:	d167      	bne.n	800a728 <_strtod_l+0x8b8>
 800a658:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a65c:	0d1b      	lsrs	r3, r3, #20
 800a65e:	051b      	lsls	r3, r3, #20
 800a660:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a664:	d960      	bls.n	800a728 <_strtod_l+0x8b8>
 800a666:	6963      	ldr	r3, [r4, #20]
 800a668:	b913      	cbnz	r3, 800a670 <_strtod_l+0x800>
 800a66a:	6923      	ldr	r3, [r4, #16]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	dd5b      	ble.n	800a728 <_strtod_l+0x8b8>
 800a670:	4621      	mov	r1, r4
 800a672:	2201      	movs	r2, #1
 800a674:	9805      	ldr	r0, [sp, #20]
 800a676:	f7ff f987 	bl	8009988 <__lshift>
 800a67a:	4641      	mov	r1, r8
 800a67c:	4604      	mov	r4, r0
 800a67e:	f7ff f9ef 	bl	8009a60 <__mcmp>
 800a682:	2800      	cmp	r0, #0
 800a684:	dd50      	ble.n	800a728 <_strtod_l+0x8b8>
 800a686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a68a:	9a08      	ldr	r2, [sp, #32]
 800a68c:	0d1b      	lsrs	r3, r3, #20
 800a68e:	051b      	lsls	r3, r3, #20
 800a690:	2a00      	cmp	r2, #0
 800a692:	d06a      	beq.n	800a76a <_strtod_l+0x8fa>
 800a694:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a698:	d867      	bhi.n	800a76a <_strtod_l+0x8fa>
 800a69a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a69e:	f67f ae98 	bls.w	800a3d2 <_strtod_l+0x562>
 800a6a2:	4650      	mov	r0, sl
 800a6a4:	4659      	mov	r1, fp
 800a6a6:	4b09      	ldr	r3, [pc, #36]	@ (800a6cc <_strtod_l+0x85c>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f7f5 ff15 	bl	80004d8 <__aeabi_dmul>
 800a6ae:	4b08      	ldr	r3, [pc, #32]	@ (800a6d0 <_strtod_l+0x860>)
 800a6b0:	4682      	mov	sl, r0
 800a6b2:	400b      	ands	r3, r1
 800a6b4:	468b      	mov	fp, r1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f47f ae00 	bne.w	800a2bc <_strtod_l+0x44c>
 800a6bc:	2322      	movs	r3, #34	@ 0x22
 800a6be:	9a05      	ldr	r2, [sp, #20]
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	e5fb      	b.n	800a2bc <_strtod_l+0x44c>
 800a6c4:	0800d2e8 	.word	0x0800d2e8
 800a6c8:	fffffc02 	.word	0xfffffc02
 800a6cc:	39500000 	.word	0x39500000
 800a6d0:	7ff00000 	.word	0x7ff00000
 800a6d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a6d8:	d165      	bne.n	800a7a6 <_strtod_l+0x936>
 800a6da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a6dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6e0:	b35a      	cbz	r2, 800a73a <_strtod_l+0x8ca>
 800a6e2:	4a99      	ldr	r2, [pc, #612]	@ (800a948 <_strtod_l+0xad8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d12b      	bne.n	800a740 <_strtod_l+0x8d0>
 800a6e8:	9b08      	ldr	r3, [sp, #32]
 800a6ea:	4651      	mov	r1, sl
 800a6ec:	b303      	cbz	r3, 800a730 <_strtod_l+0x8c0>
 800a6ee:	465a      	mov	r2, fp
 800a6f0:	4b96      	ldr	r3, [pc, #600]	@ (800a94c <_strtod_l+0xadc>)
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a6f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6fc:	d81b      	bhi.n	800a736 <_strtod_l+0x8c6>
 800a6fe:	0d1b      	lsrs	r3, r3, #20
 800a700:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a704:	fa02 f303 	lsl.w	r3, r2, r3
 800a708:	4299      	cmp	r1, r3
 800a70a:	d119      	bne.n	800a740 <_strtod_l+0x8d0>
 800a70c:	4b90      	ldr	r3, [pc, #576]	@ (800a950 <_strtod_l+0xae0>)
 800a70e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a710:	429a      	cmp	r2, r3
 800a712:	d102      	bne.n	800a71a <_strtod_l+0x8aa>
 800a714:	3101      	adds	r1, #1
 800a716:	f43f adc6 	beq.w	800a2a6 <_strtod_l+0x436>
 800a71a:	f04f 0a00 	mov.w	sl, #0
 800a71e:	4b8b      	ldr	r3, [pc, #556]	@ (800a94c <_strtod_l+0xadc>)
 800a720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a722:	401a      	ands	r2, r3
 800a724:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a728:	9b08      	ldr	r3, [sp, #32]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1b9      	bne.n	800a6a2 <_strtod_l+0x832>
 800a72e:	e5c5      	b.n	800a2bc <_strtod_l+0x44c>
 800a730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a734:	e7e8      	b.n	800a708 <_strtod_l+0x898>
 800a736:	4613      	mov	r3, r2
 800a738:	e7e6      	b.n	800a708 <_strtod_l+0x898>
 800a73a:	ea53 030a 	orrs.w	r3, r3, sl
 800a73e:	d0a2      	beq.n	800a686 <_strtod_l+0x816>
 800a740:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a742:	b1db      	cbz	r3, 800a77c <_strtod_l+0x90c>
 800a744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a746:	4213      	tst	r3, r2
 800a748:	d0ee      	beq.n	800a728 <_strtod_l+0x8b8>
 800a74a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a74c:	4650      	mov	r0, sl
 800a74e:	4659      	mov	r1, fp
 800a750:	9a08      	ldr	r2, [sp, #32]
 800a752:	b1bb      	cbz	r3, 800a784 <_strtod_l+0x914>
 800a754:	f7ff fb68 	bl	8009e28 <sulp>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a760:	f7f5 fd04 	bl	800016c <__adddf3>
 800a764:	4682      	mov	sl, r0
 800a766:	468b      	mov	fp, r1
 800a768:	e7de      	b.n	800a728 <_strtod_l+0x8b8>
 800a76a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a76e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a772:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a776:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a77a:	e7d5      	b.n	800a728 <_strtod_l+0x8b8>
 800a77c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a77e:	ea13 0f0a 	tst.w	r3, sl
 800a782:	e7e1      	b.n	800a748 <_strtod_l+0x8d8>
 800a784:	f7ff fb50 	bl	8009e28 <sulp>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a790:	f7f5 fcea 	bl	8000168 <__aeabi_dsub>
 800a794:	2200      	movs	r2, #0
 800a796:	2300      	movs	r3, #0
 800a798:	4682      	mov	sl, r0
 800a79a:	468b      	mov	fp, r1
 800a79c:	f7f6 f904 	bl	80009a8 <__aeabi_dcmpeq>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d0c1      	beq.n	800a728 <_strtod_l+0x8b8>
 800a7a4:	e615      	b.n	800a3d2 <_strtod_l+0x562>
 800a7a6:	4641      	mov	r1, r8
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7ff fac9 	bl	8009d40 <__ratio>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460f      	mov	r7, r1
 800a7b8:	f7f6 f90a 	bl	80009d0 <__aeabi_dcmple>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d06d      	beq.n	800a89c <_strtod_l+0xa2c>
 800a7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d178      	bne.n	800a8b8 <_strtod_l+0xa48>
 800a7c6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ca:	d156      	bne.n	800a87a <_strtod_l+0xa0a>
 800a7cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d158      	bne.n	800a888 <_strtod_l+0xa18>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	4b5d      	ldr	r3, [pc, #372]	@ (800a954 <_strtod_l+0xae4>)
 800a7de:	f7f6 f8ed 	bl	80009bc <__aeabi_dcmplt>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d157      	bne.n	800a896 <_strtod_l+0xa26>
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	4b5a      	ldr	r3, [pc, #360]	@ (800a958 <_strtod_l+0xae8>)
 800a7ee:	f7f5 fe73 	bl	80004d8 <__aeabi_dmul>
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a7fa:	9606      	str	r6, [sp, #24]
 800a7fc:	9307      	str	r3, [sp, #28]
 800a7fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a802:	4d52      	ldr	r5, [pc, #328]	@ (800a94c <_strtod_l+0xadc>)
 800a804:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a80a:	401d      	ands	r5, r3
 800a80c:	4b53      	ldr	r3, [pc, #332]	@ (800a95c <_strtod_l+0xaec>)
 800a80e:	429d      	cmp	r5, r3
 800a810:	f040 80aa 	bne.w	800a968 <_strtod_l+0xaf8>
 800a814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a816:	4650      	mov	r0, sl
 800a818:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a81c:	4659      	mov	r1, fp
 800a81e:	f7ff f9cf 	bl	8009bc0 <__ulp>
 800a822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a826:	f7f5 fe57 	bl	80004d8 <__aeabi_dmul>
 800a82a:	4652      	mov	r2, sl
 800a82c:	465b      	mov	r3, fp
 800a82e:	f7f5 fc9d 	bl	800016c <__adddf3>
 800a832:	460b      	mov	r3, r1
 800a834:	4945      	ldr	r1, [pc, #276]	@ (800a94c <_strtod_l+0xadc>)
 800a836:	4a4a      	ldr	r2, [pc, #296]	@ (800a960 <_strtod_l+0xaf0>)
 800a838:	4019      	ands	r1, r3
 800a83a:	4291      	cmp	r1, r2
 800a83c:	4682      	mov	sl, r0
 800a83e:	d942      	bls.n	800a8c6 <_strtod_l+0xa56>
 800a840:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a842:	4b43      	ldr	r3, [pc, #268]	@ (800a950 <_strtod_l+0xae0>)
 800a844:	429a      	cmp	r2, r3
 800a846:	d103      	bne.n	800a850 <_strtod_l+0x9e0>
 800a848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a84a:	3301      	adds	r3, #1
 800a84c:	f43f ad2b 	beq.w	800a2a6 <_strtod_l+0x436>
 800a850:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a854:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a950 <_strtod_l+0xae0>
 800a858:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a85a:	9805      	ldr	r0, [sp, #20]
 800a85c:	f7fe fe7e 	bl	800955c <_Bfree>
 800a860:	4649      	mov	r1, r9
 800a862:	9805      	ldr	r0, [sp, #20]
 800a864:	f7fe fe7a 	bl	800955c <_Bfree>
 800a868:	4641      	mov	r1, r8
 800a86a:	9805      	ldr	r0, [sp, #20]
 800a86c:	f7fe fe76 	bl	800955c <_Bfree>
 800a870:	4621      	mov	r1, r4
 800a872:	9805      	ldr	r0, [sp, #20]
 800a874:	f7fe fe72 	bl	800955c <_Bfree>
 800a878:	e618      	b.n	800a4ac <_strtod_l+0x63c>
 800a87a:	f1ba 0f01 	cmp.w	sl, #1
 800a87e:	d103      	bne.n	800a888 <_strtod_l+0xa18>
 800a880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a882:	2b00      	cmp	r3, #0
 800a884:	f43f ada5 	beq.w	800a3d2 <_strtod_l+0x562>
 800a888:	2200      	movs	r2, #0
 800a88a:	4b36      	ldr	r3, [pc, #216]	@ (800a964 <_strtod_l+0xaf4>)
 800a88c:	2600      	movs	r6, #0
 800a88e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a892:	4f30      	ldr	r7, [pc, #192]	@ (800a954 <_strtod_l+0xae4>)
 800a894:	e7b3      	b.n	800a7fe <_strtod_l+0x98e>
 800a896:	2600      	movs	r6, #0
 800a898:	4f2f      	ldr	r7, [pc, #188]	@ (800a958 <_strtod_l+0xae8>)
 800a89a:	e7ac      	b.n	800a7f6 <_strtod_l+0x986>
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a958 <_strtod_l+0xae8>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f7f5 fe18 	bl	80004d8 <__aeabi_dmul>
 800a8a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460f      	mov	r7, r1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0a1      	beq.n	800a7f6 <_strtod_l+0x986>
 800a8b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a8b6:	e7a2      	b.n	800a7fe <_strtod_l+0x98e>
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4b26      	ldr	r3, [pc, #152]	@ (800a954 <_strtod_l+0xae4>)
 800a8bc:	4616      	mov	r6, r2
 800a8be:	461f      	mov	r7, r3
 800a8c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8c4:	e79b      	b.n	800a7fe <_strtod_l+0x98e>
 800a8c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1c1      	bne.n	800a858 <_strtod_l+0x9e8>
 800a8d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8d8:	0d1b      	lsrs	r3, r3, #20
 800a8da:	051b      	lsls	r3, r3, #20
 800a8dc:	429d      	cmp	r5, r3
 800a8de:	d1bb      	bne.n	800a858 <_strtod_l+0x9e8>
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f6 fc2c 	bl	8001140 <__aeabi_d2lz>
 800a8e8:	f7f5 fdc8 	bl	800047c <__aeabi_l2d>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f5 fc38 	bl	8000168 <__aeabi_dsub>
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a900:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a906:	ea46 060a 	orr.w	r6, r6, sl
 800a90a:	431e      	orrs	r6, r3
 800a90c:	d069      	beq.n	800a9e2 <_strtod_l+0xb72>
 800a90e:	a30a      	add	r3, pc, #40	@ (adr r3, 800a938 <_strtod_l+0xac8>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f7f6 f852 	bl	80009bc <__aeabi_dcmplt>
 800a918:	2800      	cmp	r0, #0
 800a91a:	f47f accf 	bne.w	800a2bc <_strtod_l+0x44c>
 800a91e:	a308      	add	r3, pc, #32	@ (adr r3, 800a940 <_strtod_l+0xad0>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a928:	f7f6 f866 	bl	80009f8 <__aeabi_dcmpgt>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d093      	beq.n	800a858 <_strtod_l+0x9e8>
 800a930:	e4c4      	b.n	800a2bc <_strtod_l+0x44c>
 800a932:	bf00      	nop
 800a934:	f3af 8000 	nop.w
 800a938:	94a03595 	.word	0x94a03595
 800a93c:	3fdfffff 	.word	0x3fdfffff
 800a940:	35afe535 	.word	0x35afe535
 800a944:	3fe00000 	.word	0x3fe00000
 800a948:	000fffff 	.word	0x000fffff
 800a94c:	7ff00000 	.word	0x7ff00000
 800a950:	7fefffff 	.word	0x7fefffff
 800a954:	3ff00000 	.word	0x3ff00000
 800a958:	3fe00000 	.word	0x3fe00000
 800a95c:	7fe00000 	.word	0x7fe00000
 800a960:	7c9fffff 	.word	0x7c9fffff
 800a964:	bff00000 	.word	0xbff00000
 800a968:	9b08      	ldr	r3, [sp, #32]
 800a96a:	b323      	cbz	r3, 800a9b6 <_strtod_l+0xb46>
 800a96c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a970:	d821      	bhi.n	800a9b6 <_strtod_l+0xb46>
 800a972:	a327      	add	r3, pc, #156	@ (adr r3, 800aa10 <_strtod_l+0xba0>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	4630      	mov	r0, r6
 800a97a:	4639      	mov	r1, r7
 800a97c:	f7f6 f828 	bl	80009d0 <__aeabi_dcmple>
 800a980:	b1a0      	cbz	r0, 800a9ac <_strtod_l+0xb3c>
 800a982:	4639      	mov	r1, r7
 800a984:	4630      	mov	r0, r6
 800a986:	f7f6 f87f 	bl	8000a88 <__aeabi_d2uiz>
 800a98a:	2801      	cmp	r0, #1
 800a98c:	bf38      	it	cc
 800a98e:	2001      	movcc	r0, #1
 800a990:	f7f5 fd28 	bl	80003e4 <__aeabi_ui2d>
 800a994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	b9fb      	cbnz	r3, 800a9dc <_strtod_l+0xb6c>
 800a99c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9a0:	9014      	str	r0, [sp, #80]	@ 0x50
 800a9a2:	9315      	str	r3, [sp, #84]	@ 0x54
 800a9a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a9a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a9ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9ae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a9b2:	1b5b      	subs	r3, r3, r5
 800a9b4:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a9be:	f7ff f8ff 	bl	8009bc0 <__ulp>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	4659      	mov	r1, fp
 800a9ca:	f7f5 fd85 	bl	80004d8 <__aeabi_dmul>
 800a9ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9d2:	f7f5 fbcb 	bl	800016c <__adddf3>
 800a9d6:	4682      	mov	sl, r0
 800a9d8:	468b      	mov	fp, r1
 800a9da:	e776      	b.n	800a8ca <_strtod_l+0xa5a>
 800a9dc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a9e0:	e7e0      	b.n	800a9a4 <_strtod_l+0xb34>
 800a9e2:	a30d      	add	r3, pc, #52	@ (adr r3, 800aa18 <_strtod_l+0xba8>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	f7f5 ffe8 	bl	80009bc <__aeabi_dcmplt>
 800a9ec:	e79e      	b.n	800a92c <_strtod_l+0xabc>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9f4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	f7ff ba77 	b.w	8009eea <_strtod_l+0x7a>
 800a9fc:	2a65      	cmp	r2, #101	@ 0x65
 800a9fe:	f43f ab6e 	beq.w	800a0de <_strtod_l+0x26e>
 800aa02:	2a45      	cmp	r2, #69	@ 0x45
 800aa04:	f43f ab6b 	beq.w	800a0de <_strtod_l+0x26e>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	f7ff bba6 	b.w	800a15a <_strtod_l+0x2ea>
 800aa0e:	bf00      	nop
 800aa10:	ffc00000 	.word	0xffc00000
 800aa14:	41dfffff 	.word	0x41dfffff
 800aa18:	94a03595 	.word	0x94a03595
 800aa1c:	3fcfffff 	.word	0x3fcfffff

0800aa20 <_strtod_r>:
 800aa20:	4b01      	ldr	r3, [pc, #4]	@ (800aa28 <_strtod_r+0x8>)
 800aa22:	f7ff ba25 	b.w	8009e70 <_strtod_l>
 800aa26:	bf00      	nop
 800aa28:	20000070 	.word	0x20000070

0800aa2c <_strtol_l.constprop.0>:
 800aa2c:	2b24      	cmp	r3, #36	@ 0x24
 800aa2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa32:	4686      	mov	lr, r0
 800aa34:	4690      	mov	r8, r2
 800aa36:	d801      	bhi.n	800aa3c <_strtol_l.constprop.0+0x10>
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d106      	bne.n	800aa4a <_strtol_l.constprop.0+0x1e>
 800aa3c:	f7fd fdb0 	bl	80085a0 <__errno>
 800aa40:	2316      	movs	r3, #22
 800aa42:	6003      	str	r3, [r0, #0]
 800aa44:	2000      	movs	r0, #0
 800aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	4833      	ldr	r0, [pc, #204]	@ (800ab1c <_strtol_l.constprop.0+0xf0>)
 800aa4e:	462a      	mov	r2, r5
 800aa50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa54:	5d06      	ldrb	r6, [r0, r4]
 800aa56:	f016 0608 	ands.w	r6, r6, #8
 800aa5a:	d1f8      	bne.n	800aa4e <_strtol_l.constprop.0+0x22>
 800aa5c:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa5e:	d12d      	bne.n	800aabc <_strtol_l.constprop.0+0x90>
 800aa60:	2601      	movs	r6, #1
 800aa62:	782c      	ldrb	r4, [r5, #0]
 800aa64:	1c95      	adds	r5, r2, #2
 800aa66:	f033 0210 	bics.w	r2, r3, #16
 800aa6a:	d109      	bne.n	800aa80 <_strtol_l.constprop.0+0x54>
 800aa6c:	2c30      	cmp	r4, #48	@ 0x30
 800aa6e:	d12a      	bne.n	800aac6 <_strtol_l.constprop.0+0x9a>
 800aa70:	782a      	ldrb	r2, [r5, #0]
 800aa72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa76:	2a58      	cmp	r2, #88	@ 0x58
 800aa78:	d125      	bne.n	800aac6 <_strtol_l.constprop.0+0x9a>
 800aa7a:	2310      	movs	r3, #16
 800aa7c:	786c      	ldrb	r4, [r5, #1]
 800aa7e:	3502      	adds	r5, #2
 800aa80:	2200      	movs	r2, #0
 800aa82:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa86:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800aa8a:	fbbc f9f3 	udiv	r9, ip, r3
 800aa8e:	4610      	mov	r0, r2
 800aa90:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa98:	2f09      	cmp	r7, #9
 800aa9a:	d81b      	bhi.n	800aad4 <_strtol_l.constprop.0+0xa8>
 800aa9c:	463c      	mov	r4, r7
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	dd27      	ble.n	800aaf2 <_strtol_l.constprop.0+0xc6>
 800aaa2:	1c57      	adds	r7, r2, #1
 800aaa4:	d007      	beq.n	800aab6 <_strtol_l.constprop.0+0x8a>
 800aaa6:	4581      	cmp	r9, r0
 800aaa8:	d320      	bcc.n	800aaec <_strtol_l.constprop.0+0xc0>
 800aaaa:	d101      	bne.n	800aab0 <_strtol_l.constprop.0+0x84>
 800aaac:	45a2      	cmp	sl, r4
 800aaae:	db1d      	blt.n	800aaec <_strtol_l.constprop.0+0xc0>
 800aab0:	2201      	movs	r2, #1
 800aab2:	fb00 4003 	mla	r0, r0, r3, r4
 800aab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaba:	e7eb      	b.n	800aa94 <_strtol_l.constprop.0+0x68>
 800aabc:	2c2b      	cmp	r4, #43	@ 0x2b
 800aabe:	bf04      	itt	eq
 800aac0:	782c      	ldrbeq	r4, [r5, #0]
 800aac2:	1c95      	addeq	r5, r2, #2
 800aac4:	e7cf      	b.n	800aa66 <_strtol_l.constprop.0+0x3a>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1da      	bne.n	800aa80 <_strtol_l.constprop.0+0x54>
 800aaca:	2c30      	cmp	r4, #48	@ 0x30
 800aacc:	bf0c      	ite	eq
 800aace:	2308      	moveq	r3, #8
 800aad0:	230a      	movne	r3, #10
 800aad2:	e7d5      	b.n	800aa80 <_strtol_l.constprop.0+0x54>
 800aad4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aad8:	2f19      	cmp	r7, #25
 800aada:	d801      	bhi.n	800aae0 <_strtol_l.constprop.0+0xb4>
 800aadc:	3c37      	subs	r4, #55	@ 0x37
 800aade:	e7de      	b.n	800aa9e <_strtol_l.constprop.0+0x72>
 800aae0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aae4:	2f19      	cmp	r7, #25
 800aae6:	d804      	bhi.n	800aaf2 <_strtol_l.constprop.0+0xc6>
 800aae8:	3c57      	subs	r4, #87	@ 0x57
 800aaea:	e7d8      	b.n	800aa9e <_strtol_l.constprop.0+0x72>
 800aaec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aaf0:	e7e1      	b.n	800aab6 <_strtol_l.constprop.0+0x8a>
 800aaf2:	1c53      	adds	r3, r2, #1
 800aaf4:	d108      	bne.n	800ab08 <_strtol_l.constprop.0+0xdc>
 800aaf6:	2322      	movs	r3, #34	@ 0x22
 800aaf8:	4660      	mov	r0, ip
 800aafa:	f8ce 3000 	str.w	r3, [lr]
 800aafe:	f1b8 0f00 	cmp.w	r8, #0
 800ab02:	d0a0      	beq.n	800aa46 <_strtol_l.constprop.0+0x1a>
 800ab04:	1e69      	subs	r1, r5, #1
 800ab06:	e006      	b.n	800ab16 <_strtol_l.constprop.0+0xea>
 800ab08:	b106      	cbz	r6, 800ab0c <_strtol_l.constprop.0+0xe0>
 800ab0a:	4240      	negs	r0, r0
 800ab0c:	f1b8 0f00 	cmp.w	r8, #0
 800ab10:	d099      	beq.n	800aa46 <_strtol_l.constprop.0+0x1a>
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	d1f6      	bne.n	800ab04 <_strtol_l.constprop.0+0xd8>
 800ab16:	f8c8 1000 	str.w	r1, [r8]
 800ab1a:	e794      	b.n	800aa46 <_strtol_l.constprop.0+0x1a>
 800ab1c:	0800d311 	.word	0x0800d311

0800ab20 <_strtol_r>:
 800ab20:	f7ff bf84 	b.w	800aa2c <_strtol_l.constprop.0>

0800ab24 <__ssputs_r>:
 800ab24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	461f      	mov	r7, r3
 800ab2a:	688e      	ldr	r6, [r1, #8]
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	42be      	cmp	r6, r7
 800ab30:	460c      	mov	r4, r1
 800ab32:	4690      	mov	r8, r2
 800ab34:	680b      	ldr	r3, [r1, #0]
 800ab36:	d82d      	bhi.n	800ab94 <__ssputs_r+0x70>
 800ab38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab40:	d026      	beq.n	800ab90 <__ssputs_r+0x6c>
 800ab42:	6965      	ldr	r5, [r4, #20]
 800ab44:	6909      	ldr	r1, [r1, #16]
 800ab46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab4a:	eba3 0901 	sub.w	r9, r3, r1
 800ab4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab52:	1c7b      	adds	r3, r7, #1
 800ab54:	444b      	add	r3, r9
 800ab56:	106d      	asrs	r5, r5, #1
 800ab58:	429d      	cmp	r5, r3
 800ab5a:	bf38      	it	cc
 800ab5c:	461d      	movcc	r5, r3
 800ab5e:	0553      	lsls	r3, r2, #21
 800ab60:	d527      	bpl.n	800abb2 <__ssputs_r+0x8e>
 800ab62:	4629      	mov	r1, r5
 800ab64:	f7fe fc2e 	bl	80093c4 <_malloc_r>
 800ab68:	4606      	mov	r6, r0
 800ab6a:	b360      	cbz	r0, 800abc6 <__ssputs_r+0xa2>
 800ab6c:	464a      	mov	r2, r9
 800ab6e:	6921      	ldr	r1, [r4, #16]
 800ab70:	f7fd fd51 	bl	8008616 <memcpy>
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	6126      	str	r6, [r4, #16]
 800ab82:	444e      	add	r6, r9
 800ab84:	6026      	str	r6, [r4, #0]
 800ab86:	463e      	mov	r6, r7
 800ab88:	6165      	str	r5, [r4, #20]
 800ab8a:	eba5 0509 	sub.w	r5, r5, r9
 800ab8e:	60a5      	str	r5, [r4, #8]
 800ab90:	42be      	cmp	r6, r7
 800ab92:	d900      	bls.n	800ab96 <__ssputs_r+0x72>
 800ab94:	463e      	mov	r6, r7
 800ab96:	4632      	mov	r2, r6
 800ab98:	4641      	mov	r1, r8
 800ab9a:	6820      	ldr	r0, [r4, #0]
 800ab9c:	f000 f9c2 	bl	800af24 <memmove>
 800aba0:	2000      	movs	r0, #0
 800aba2:	68a3      	ldr	r3, [r4, #8]
 800aba4:	1b9b      	subs	r3, r3, r6
 800aba6:	60a3      	str	r3, [r4, #8]
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	4433      	add	r3, r6
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	462a      	mov	r2, r5
 800abb4:	f000 fd75 	bl	800b6a2 <_realloc_r>
 800abb8:	4606      	mov	r6, r0
 800abba:	2800      	cmp	r0, #0
 800abbc:	d1e0      	bne.n	800ab80 <__ssputs_r+0x5c>
 800abbe:	4650      	mov	r0, sl
 800abc0:	6921      	ldr	r1, [r4, #16]
 800abc2:	f7fe fb8d 	bl	80092e0 <_free_r>
 800abc6:	230c      	movs	r3, #12
 800abc8:	f8ca 3000 	str.w	r3, [sl]
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	e7e9      	b.n	800abae <__ssputs_r+0x8a>
	...

0800abdc <_svfiprintf_r>:
 800abdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe0:	4698      	mov	r8, r3
 800abe2:	898b      	ldrh	r3, [r1, #12]
 800abe4:	4607      	mov	r7, r0
 800abe6:	061b      	lsls	r3, r3, #24
 800abe8:	460d      	mov	r5, r1
 800abea:	4614      	mov	r4, r2
 800abec:	b09d      	sub	sp, #116	@ 0x74
 800abee:	d510      	bpl.n	800ac12 <_svfiprintf_r+0x36>
 800abf0:	690b      	ldr	r3, [r1, #16]
 800abf2:	b973      	cbnz	r3, 800ac12 <_svfiprintf_r+0x36>
 800abf4:	2140      	movs	r1, #64	@ 0x40
 800abf6:	f7fe fbe5 	bl	80093c4 <_malloc_r>
 800abfa:	6028      	str	r0, [r5, #0]
 800abfc:	6128      	str	r0, [r5, #16]
 800abfe:	b930      	cbnz	r0, 800ac0e <_svfiprintf_r+0x32>
 800ac00:	230c      	movs	r3, #12
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac08:	b01d      	add	sp, #116	@ 0x74
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	2340      	movs	r3, #64	@ 0x40
 800ac10:	616b      	str	r3, [r5, #20]
 800ac12:	2300      	movs	r3, #0
 800ac14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac16:	2320      	movs	r3, #32
 800ac18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac1c:	2330      	movs	r3, #48	@ 0x30
 800ac1e:	f04f 0901 	mov.w	r9, #1
 800ac22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac26:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800adc0 <_svfiprintf_r+0x1e4>
 800ac2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac2e:	4623      	mov	r3, r4
 800ac30:	469a      	mov	sl, r3
 800ac32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac36:	b10a      	cbz	r2, 800ac3c <_svfiprintf_r+0x60>
 800ac38:	2a25      	cmp	r2, #37	@ 0x25
 800ac3a:	d1f9      	bne.n	800ac30 <_svfiprintf_r+0x54>
 800ac3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac40:	d00b      	beq.n	800ac5a <_svfiprintf_r+0x7e>
 800ac42:	465b      	mov	r3, fp
 800ac44:	4622      	mov	r2, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff ff6b 	bl	800ab24 <__ssputs_r>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f000 80a7 	beq.w	800ada2 <_svfiprintf_r+0x1c6>
 800ac54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac56:	445a      	add	r2, fp
 800ac58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 809f 	beq.w	800ada2 <_svfiprintf_r+0x1c6>
 800ac64:	2300      	movs	r3, #0
 800ac66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac6e:	f10a 0a01 	add.w	sl, sl, #1
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	9307      	str	r3, [sp, #28]
 800ac76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac7c:	4654      	mov	r4, sl
 800ac7e:	2205      	movs	r2, #5
 800ac80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac84:	484e      	ldr	r0, [pc, #312]	@ (800adc0 <_svfiprintf_r+0x1e4>)
 800ac86:	f7fd fcb8 	bl	80085fa <memchr>
 800ac8a:	9a04      	ldr	r2, [sp, #16]
 800ac8c:	b9d8      	cbnz	r0, 800acc6 <_svfiprintf_r+0xea>
 800ac8e:	06d0      	lsls	r0, r2, #27
 800ac90:	bf44      	itt	mi
 800ac92:	2320      	movmi	r3, #32
 800ac94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac98:	0711      	lsls	r1, r2, #28
 800ac9a:	bf44      	itt	mi
 800ac9c:	232b      	movmi	r3, #43	@ 0x2b
 800ac9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aca2:	f89a 3000 	ldrb.w	r3, [sl]
 800aca6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aca8:	d015      	beq.n	800acd6 <_svfiprintf_r+0xfa>
 800acaa:	4654      	mov	r4, sl
 800acac:	2000      	movs	r0, #0
 800acae:	f04f 0c0a 	mov.w	ip, #10
 800acb2:	9a07      	ldr	r2, [sp, #28]
 800acb4:	4621      	mov	r1, r4
 800acb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acba:	3b30      	subs	r3, #48	@ 0x30
 800acbc:	2b09      	cmp	r3, #9
 800acbe:	d94b      	bls.n	800ad58 <_svfiprintf_r+0x17c>
 800acc0:	b1b0      	cbz	r0, 800acf0 <_svfiprintf_r+0x114>
 800acc2:	9207      	str	r2, [sp, #28]
 800acc4:	e014      	b.n	800acf0 <_svfiprintf_r+0x114>
 800acc6:	eba0 0308 	sub.w	r3, r0, r8
 800acca:	fa09 f303 	lsl.w	r3, r9, r3
 800acce:	4313      	orrs	r3, r2
 800acd0:	46a2      	mov	sl, r4
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	e7d2      	b.n	800ac7c <_svfiprintf_r+0xa0>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	1d19      	adds	r1, r3, #4
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	9103      	str	r1, [sp, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	bfbb      	ittet	lt
 800ace2:	425b      	neglt	r3, r3
 800ace4:	f042 0202 	orrlt.w	r2, r2, #2
 800ace8:	9307      	strge	r3, [sp, #28]
 800acea:	9307      	strlt	r3, [sp, #28]
 800acec:	bfb8      	it	lt
 800acee:	9204      	strlt	r2, [sp, #16]
 800acf0:	7823      	ldrb	r3, [r4, #0]
 800acf2:	2b2e      	cmp	r3, #46	@ 0x2e
 800acf4:	d10a      	bne.n	800ad0c <_svfiprintf_r+0x130>
 800acf6:	7863      	ldrb	r3, [r4, #1]
 800acf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acfa:	d132      	bne.n	800ad62 <_svfiprintf_r+0x186>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	3402      	adds	r4, #2
 800ad00:	1d1a      	adds	r2, r3, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	9203      	str	r2, [sp, #12]
 800ad06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad0a:	9305      	str	r3, [sp, #20]
 800ad0c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800adc4 <_svfiprintf_r+0x1e8>
 800ad10:	2203      	movs	r2, #3
 800ad12:	4650      	mov	r0, sl
 800ad14:	7821      	ldrb	r1, [r4, #0]
 800ad16:	f7fd fc70 	bl	80085fa <memchr>
 800ad1a:	b138      	cbz	r0, 800ad2c <_svfiprintf_r+0x150>
 800ad1c:	2240      	movs	r2, #64	@ 0x40
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	eba0 000a 	sub.w	r0, r0, sl
 800ad24:	4082      	lsls	r2, r0
 800ad26:	4313      	orrs	r3, r2
 800ad28:	3401      	adds	r4, #1
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad30:	2206      	movs	r2, #6
 800ad32:	4825      	ldr	r0, [pc, #148]	@ (800adc8 <_svfiprintf_r+0x1ec>)
 800ad34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad38:	f7fd fc5f 	bl	80085fa <memchr>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d036      	beq.n	800adae <_svfiprintf_r+0x1d2>
 800ad40:	4b22      	ldr	r3, [pc, #136]	@ (800adcc <_svfiprintf_r+0x1f0>)
 800ad42:	bb1b      	cbnz	r3, 800ad8c <_svfiprintf_r+0x1b0>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	3307      	adds	r3, #7
 800ad48:	f023 0307 	bic.w	r3, r3, #7
 800ad4c:	3308      	adds	r3, #8
 800ad4e:	9303      	str	r3, [sp, #12]
 800ad50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad52:	4433      	add	r3, r6
 800ad54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad56:	e76a      	b.n	800ac2e <_svfiprintf_r+0x52>
 800ad58:	460c      	mov	r4, r1
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad60:	e7a8      	b.n	800acb4 <_svfiprintf_r+0xd8>
 800ad62:	2300      	movs	r3, #0
 800ad64:	f04f 0c0a 	mov.w	ip, #10
 800ad68:	4619      	mov	r1, r3
 800ad6a:	3401      	adds	r4, #1
 800ad6c:	9305      	str	r3, [sp, #20]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad74:	3a30      	subs	r2, #48	@ 0x30
 800ad76:	2a09      	cmp	r2, #9
 800ad78:	d903      	bls.n	800ad82 <_svfiprintf_r+0x1a6>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0c6      	beq.n	800ad0c <_svfiprintf_r+0x130>
 800ad7e:	9105      	str	r1, [sp, #20]
 800ad80:	e7c4      	b.n	800ad0c <_svfiprintf_r+0x130>
 800ad82:	4604      	mov	r4, r0
 800ad84:	2301      	movs	r3, #1
 800ad86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad8a:	e7f0      	b.n	800ad6e <_svfiprintf_r+0x192>
 800ad8c:	ab03      	add	r3, sp, #12
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	462a      	mov	r2, r5
 800ad92:	4638      	mov	r0, r7
 800ad94:	4b0e      	ldr	r3, [pc, #56]	@ (800add0 <_svfiprintf_r+0x1f4>)
 800ad96:	a904      	add	r1, sp, #16
 800ad98:	f7fc fcbc 	bl	8007714 <_printf_float>
 800ad9c:	1c42      	adds	r2, r0, #1
 800ad9e:	4606      	mov	r6, r0
 800ada0:	d1d6      	bne.n	800ad50 <_svfiprintf_r+0x174>
 800ada2:	89ab      	ldrh	r3, [r5, #12]
 800ada4:	065b      	lsls	r3, r3, #25
 800ada6:	f53f af2d 	bmi.w	800ac04 <_svfiprintf_r+0x28>
 800adaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adac:	e72c      	b.n	800ac08 <_svfiprintf_r+0x2c>
 800adae:	ab03      	add	r3, sp, #12
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	462a      	mov	r2, r5
 800adb4:	4638      	mov	r0, r7
 800adb6:	4b06      	ldr	r3, [pc, #24]	@ (800add0 <_svfiprintf_r+0x1f4>)
 800adb8:	a904      	add	r1, sp, #16
 800adba:	f7fc ff49 	bl	8007c50 <_printf_i>
 800adbe:	e7ed      	b.n	800ad9c <_svfiprintf_r+0x1c0>
 800adc0:	0800d411 	.word	0x0800d411
 800adc4:	0800d417 	.word	0x0800d417
 800adc8:	0800d41b 	.word	0x0800d41b
 800adcc:	08007715 	.word	0x08007715
 800add0:	0800ab25 	.word	0x0800ab25

0800add4 <__sflush_r>:
 800add4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	0716      	lsls	r6, r2, #28
 800addc:	4605      	mov	r5, r0
 800adde:	460c      	mov	r4, r1
 800ade0:	d454      	bmi.n	800ae8c <__sflush_r+0xb8>
 800ade2:	684b      	ldr	r3, [r1, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dc02      	bgt.n	800adee <__sflush_r+0x1a>
 800ade8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	dd48      	ble.n	800ae80 <__sflush_r+0xac>
 800adee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adf0:	2e00      	cmp	r6, #0
 800adf2:	d045      	beq.n	800ae80 <__sflush_r+0xac>
 800adf4:	2300      	movs	r3, #0
 800adf6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adfa:	682f      	ldr	r7, [r5, #0]
 800adfc:	6a21      	ldr	r1, [r4, #32]
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	d030      	beq.n	800ae64 <__sflush_r+0x90>
 800ae02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	0759      	lsls	r1, r3, #29
 800ae08:	d505      	bpl.n	800ae16 <__sflush_r+0x42>
 800ae0a:	6863      	ldr	r3, [r4, #4]
 800ae0c:	1ad2      	subs	r2, r2, r3
 800ae0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae10:	b10b      	cbz	r3, 800ae16 <__sflush_r+0x42>
 800ae12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae14:	1ad2      	subs	r2, r2, r3
 800ae16:	2300      	movs	r3, #0
 800ae18:	4628      	mov	r0, r5
 800ae1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae1c:	6a21      	ldr	r1, [r4, #32]
 800ae1e:	47b0      	blx	r6
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	d106      	bne.n	800ae34 <__sflush_r+0x60>
 800ae26:	6829      	ldr	r1, [r5, #0]
 800ae28:	291d      	cmp	r1, #29
 800ae2a:	d82b      	bhi.n	800ae84 <__sflush_r+0xb0>
 800ae2c:	4a28      	ldr	r2, [pc, #160]	@ (800aed0 <__sflush_r+0xfc>)
 800ae2e:	410a      	asrs	r2, r1
 800ae30:	07d6      	lsls	r6, r2, #31
 800ae32:	d427      	bmi.n	800ae84 <__sflush_r+0xb0>
 800ae34:	2200      	movs	r2, #0
 800ae36:	6062      	str	r2, [r4, #4]
 800ae38:	6922      	ldr	r2, [r4, #16]
 800ae3a:	04d9      	lsls	r1, r3, #19
 800ae3c:	6022      	str	r2, [r4, #0]
 800ae3e:	d504      	bpl.n	800ae4a <__sflush_r+0x76>
 800ae40:	1c42      	adds	r2, r0, #1
 800ae42:	d101      	bne.n	800ae48 <__sflush_r+0x74>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b903      	cbnz	r3, 800ae4a <__sflush_r+0x76>
 800ae48:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae4c:	602f      	str	r7, [r5, #0]
 800ae4e:	b1b9      	cbz	r1, 800ae80 <__sflush_r+0xac>
 800ae50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae54:	4299      	cmp	r1, r3
 800ae56:	d002      	beq.n	800ae5e <__sflush_r+0x8a>
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f7fe fa41 	bl	80092e0 <_free_r>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae62:	e00d      	b.n	800ae80 <__sflush_r+0xac>
 800ae64:	2301      	movs	r3, #1
 800ae66:	4628      	mov	r0, r5
 800ae68:	47b0      	blx	r6
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	1c50      	adds	r0, r2, #1
 800ae6e:	d1c9      	bne.n	800ae04 <__sflush_r+0x30>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0c6      	beq.n	800ae04 <__sflush_r+0x30>
 800ae76:	2b1d      	cmp	r3, #29
 800ae78:	d001      	beq.n	800ae7e <__sflush_r+0xaa>
 800ae7a:	2b16      	cmp	r3, #22
 800ae7c:	d11d      	bne.n	800aeba <__sflush_r+0xe6>
 800ae7e:	602f      	str	r7, [r5, #0]
 800ae80:	2000      	movs	r0, #0
 800ae82:	e021      	b.n	800aec8 <__sflush_r+0xf4>
 800ae84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae88:	b21b      	sxth	r3, r3
 800ae8a:	e01a      	b.n	800aec2 <__sflush_r+0xee>
 800ae8c:	690f      	ldr	r7, [r1, #16]
 800ae8e:	2f00      	cmp	r7, #0
 800ae90:	d0f6      	beq.n	800ae80 <__sflush_r+0xac>
 800ae92:	0793      	lsls	r3, r2, #30
 800ae94:	bf18      	it	ne
 800ae96:	2300      	movne	r3, #0
 800ae98:	680e      	ldr	r6, [r1, #0]
 800ae9a:	bf08      	it	eq
 800ae9c:	694b      	ldreq	r3, [r1, #20]
 800ae9e:	1bf6      	subs	r6, r6, r7
 800aea0:	600f      	str	r7, [r1, #0]
 800aea2:	608b      	str	r3, [r1, #8]
 800aea4:	2e00      	cmp	r6, #0
 800aea6:	ddeb      	ble.n	800ae80 <__sflush_r+0xac>
 800aea8:	4633      	mov	r3, r6
 800aeaa:	463a      	mov	r2, r7
 800aeac:	4628      	mov	r0, r5
 800aeae:	6a21      	ldr	r1, [r4, #32]
 800aeb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aeb4:	47e0      	blx	ip
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	dc07      	bgt.n	800aeca <__sflush_r+0xf6>
 800aeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aec2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aec6:	81a3      	strh	r3, [r4, #12]
 800aec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeca:	4407      	add	r7, r0
 800aecc:	1a36      	subs	r6, r6, r0
 800aece:	e7e9      	b.n	800aea4 <__sflush_r+0xd0>
 800aed0:	dfbffffe 	.word	0xdfbffffe

0800aed4 <_fflush_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	690b      	ldr	r3, [r1, #16]
 800aed8:	4605      	mov	r5, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	b913      	cbnz	r3, 800aee4 <_fflush_r+0x10>
 800aede:	2500      	movs	r5, #0
 800aee0:	4628      	mov	r0, r5
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	b118      	cbz	r0, 800aeee <_fflush_r+0x1a>
 800aee6:	6a03      	ldr	r3, [r0, #32]
 800aee8:	b90b      	cbnz	r3, 800aeee <_fflush_r+0x1a>
 800aeea:	f7fd fa6d 	bl	80083c8 <__sinit>
 800aeee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0f3      	beq.n	800aede <_fflush_r+0xa>
 800aef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aef8:	07d0      	lsls	r0, r2, #31
 800aefa:	d404      	bmi.n	800af06 <_fflush_r+0x32>
 800aefc:	0599      	lsls	r1, r3, #22
 800aefe:	d402      	bmi.n	800af06 <_fflush_r+0x32>
 800af00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af02:	f7fd fb78 	bl	80085f6 <__retarget_lock_acquire_recursive>
 800af06:	4628      	mov	r0, r5
 800af08:	4621      	mov	r1, r4
 800af0a:	f7ff ff63 	bl	800add4 <__sflush_r>
 800af0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af10:	4605      	mov	r5, r0
 800af12:	07da      	lsls	r2, r3, #31
 800af14:	d4e4      	bmi.n	800aee0 <_fflush_r+0xc>
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	059b      	lsls	r3, r3, #22
 800af1a:	d4e1      	bmi.n	800aee0 <_fflush_r+0xc>
 800af1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af1e:	f7fd fb6b 	bl	80085f8 <__retarget_lock_release_recursive>
 800af22:	e7dd      	b.n	800aee0 <_fflush_r+0xc>

0800af24 <memmove>:
 800af24:	4288      	cmp	r0, r1
 800af26:	b510      	push	{r4, lr}
 800af28:	eb01 0402 	add.w	r4, r1, r2
 800af2c:	d902      	bls.n	800af34 <memmove+0x10>
 800af2e:	4284      	cmp	r4, r0
 800af30:	4623      	mov	r3, r4
 800af32:	d807      	bhi.n	800af44 <memmove+0x20>
 800af34:	1e43      	subs	r3, r0, #1
 800af36:	42a1      	cmp	r1, r4
 800af38:	d008      	beq.n	800af4c <memmove+0x28>
 800af3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af42:	e7f8      	b.n	800af36 <memmove+0x12>
 800af44:	4601      	mov	r1, r0
 800af46:	4402      	add	r2, r0
 800af48:	428a      	cmp	r2, r1
 800af4a:	d100      	bne.n	800af4e <memmove+0x2a>
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af56:	e7f7      	b.n	800af48 <memmove+0x24>

0800af58 <strncmp>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	b16a      	cbz	r2, 800af78 <strncmp+0x20>
 800af5c:	3901      	subs	r1, #1
 800af5e:	1884      	adds	r4, r0, r2
 800af60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af68:	429a      	cmp	r2, r3
 800af6a:	d103      	bne.n	800af74 <strncmp+0x1c>
 800af6c:	42a0      	cmp	r0, r4
 800af6e:	d001      	beq.n	800af74 <strncmp+0x1c>
 800af70:	2a00      	cmp	r2, #0
 800af72:	d1f5      	bne.n	800af60 <strncmp+0x8>
 800af74:	1ad0      	subs	r0, r2, r3
 800af76:	bd10      	pop	{r4, pc}
 800af78:	4610      	mov	r0, r2
 800af7a:	e7fc      	b.n	800af76 <strncmp+0x1e>

0800af7c <_sbrk_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	2300      	movs	r3, #0
 800af80:	4d05      	ldr	r5, [pc, #20]	@ (800af98 <_sbrk_r+0x1c>)
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	f7f9 f858 	bl	800403c <_sbrk>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_sbrk_r+0x1a>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_sbrk_r+0x1a>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	2000098c 	.word	0x2000098c

0800af9c <nan>:
 800af9c:	2000      	movs	r0, #0
 800af9e:	4901      	ldr	r1, [pc, #4]	@ (800afa4 <nan+0x8>)
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	7ff80000 	.word	0x7ff80000

0800afa8 <__assert_func>:
 800afa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afaa:	4614      	mov	r4, r2
 800afac:	461a      	mov	r2, r3
 800afae:	4b09      	ldr	r3, [pc, #36]	@ (800afd4 <__assert_func+0x2c>)
 800afb0:	4605      	mov	r5, r0
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68d8      	ldr	r0, [r3, #12]
 800afb6:	b954      	cbnz	r4, 800afce <__assert_func+0x26>
 800afb8:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <__assert_func+0x30>)
 800afba:	461c      	mov	r4, r3
 800afbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afc0:	9100      	str	r1, [sp, #0]
 800afc2:	462b      	mov	r3, r5
 800afc4:	4905      	ldr	r1, [pc, #20]	@ (800afdc <__assert_func+0x34>)
 800afc6:	f000 fba7 	bl	800b718 <fiprintf>
 800afca:	f000 fbb7 	bl	800b73c <abort>
 800afce:	4b04      	ldr	r3, [pc, #16]	@ (800afe0 <__assert_func+0x38>)
 800afd0:	e7f4      	b.n	800afbc <__assert_func+0x14>
 800afd2:	bf00      	nop
 800afd4:	20000020 	.word	0x20000020
 800afd8:	0800d465 	.word	0x0800d465
 800afdc:	0800d437 	.word	0x0800d437
 800afe0:	0800d42a 	.word	0x0800d42a

0800afe4 <_calloc_r>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	fba1 5402 	umull	r5, r4, r1, r2
 800afea:	b93c      	cbnz	r4, 800affc <_calloc_r+0x18>
 800afec:	4629      	mov	r1, r5
 800afee:	f7fe f9e9 	bl	80093c4 <_malloc_r>
 800aff2:	4606      	mov	r6, r0
 800aff4:	b928      	cbnz	r0, 800b002 <_calloc_r+0x1e>
 800aff6:	2600      	movs	r6, #0
 800aff8:	4630      	mov	r0, r6
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	220c      	movs	r2, #12
 800affe:	6002      	str	r2, [r0, #0]
 800b000:	e7f9      	b.n	800aff6 <_calloc_r+0x12>
 800b002:	462a      	mov	r2, r5
 800b004:	4621      	mov	r1, r4
 800b006:	f7fd fa78 	bl	80084fa <memset>
 800b00a:	e7f5      	b.n	800aff8 <_calloc_r+0x14>

0800b00c <rshift>:
 800b00c:	6903      	ldr	r3, [r0, #16]
 800b00e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b012:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b016:	f100 0414 	add.w	r4, r0, #20
 800b01a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b01e:	dd46      	ble.n	800b0ae <rshift+0xa2>
 800b020:	f011 011f 	ands.w	r1, r1, #31
 800b024:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b028:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b02c:	d10c      	bne.n	800b048 <rshift+0x3c>
 800b02e:	4629      	mov	r1, r5
 800b030:	f100 0710 	add.w	r7, r0, #16
 800b034:	42b1      	cmp	r1, r6
 800b036:	d335      	bcc.n	800b0a4 <rshift+0x98>
 800b038:	1a9b      	subs	r3, r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	1eea      	subs	r2, r5, #3
 800b03e:	4296      	cmp	r6, r2
 800b040:	bf38      	it	cc
 800b042:	2300      	movcc	r3, #0
 800b044:	4423      	add	r3, r4
 800b046:	e015      	b.n	800b074 <rshift+0x68>
 800b048:	46a1      	mov	r9, r4
 800b04a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b04e:	f1c1 0820 	rsb	r8, r1, #32
 800b052:	40cf      	lsrs	r7, r1
 800b054:	f105 0e04 	add.w	lr, r5, #4
 800b058:	4576      	cmp	r6, lr
 800b05a:	46f4      	mov	ip, lr
 800b05c:	d816      	bhi.n	800b08c <rshift+0x80>
 800b05e:	1a9a      	subs	r2, r3, r2
 800b060:	0092      	lsls	r2, r2, #2
 800b062:	3a04      	subs	r2, #4
 800b064:	3501      	adds	r5, #1
 800b066:	42ae      	cmp	r6, r5
 800b068:	bf38      	it	cc
 800b06a:	2200      	movcc	r2, #0
 800b06c:	18a3      	adds	r3, r4, r2
 800b06e:	50a7      	str	r7, [r4, r2]
 800b070:	b107      	cbz	r7, 800b074 <rshift+0x68>
 800b072:	3304      	adds	r3, #4
 800b074:	42a3      	cmp	r3, r4
 800b076:	eba3 0204 	sub.w	r2, r3, r4
 800b07a:	bf08      	it	eq
 800b07c:	2300      	moveq	r3, #0
 800b07e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b082:	6102      	str	r2, [r0, #16]
 800b084:	bf08      	it	eq
 800b086:	6143      	streq	r3, [r0, #20]
 800b088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b08c:	f8dc c000 	ldr.w	ip, [ip]
 800b090:	fa0c fc08 	lsl.w	ip, ip, r8
 800b094:	ea4c 0707 	orr.w	r7, ip, r7
 800b098:	f849 7b04 	str.w	r7, [r9], #4
 800b09c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0a0:	40cf      	lsrs	r7, r1
 800b0a2:	e7d9      	b.n	800b058 <rshift+0x4c>
 800b0a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0ac:	e7c2      	b.n	800b034 <rshift+0x28>
 800b0ae:	4623      	mov	r3, r4
 800b0b0:	e7e0      	b.n	800b074 <rshift+0x68>

0800b0b2 <__hexdig_fun>:
 800b0b2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d802      	bhi.n	800b0c0 <__hexdig_fun+0xe>
 800b0ba:	3820      	subs	r0, #32
 800b0bc:	b2c0      	uxtb	r0, r0
 800b0be:	4770      	bx	lr
 800b0c0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b0c4:	2b05      	cmp	r3, #5
 800b0c6:	d801      	bhi.n	800b0cc <__hexdig_fun+0x1a>
 800b0c8:	3847      	subs	r0, #71	@ 0x47
 800b0ca:	e7f7      	b.n	800b0bc <__hexdig_fun+0xa>
 800b0cc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b0d0:	2b05      	cmp	r3, #5
 800b0d2:	d801      	bhi.n	800b0d8 <__hexdig_fun+0x26>
 800b0d4:	3827      	subs	r0, #39	@ 0x27
 800b0d6:	e7f1      	b.n	800b0bc <__hexdig_fun+0xa>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	4770      	bx	lr

0800b0dc <__gethex>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	468a      	mov	sl, r1
 800b0e2:	4690      	mov	r8, r2
 800b0e4:	b085      	sub	sp, #20
 800b0e6:	9302      	str	r3, [sp, #8]
 800b0e8:	680b      	ldr	r3, [r1, #0]
 800b0ea:	9001      	str	r0, [sp, #4]
 800b0ec:	1c9c      	adds	r4, r3, #2
 800b0ee:	46a1      	mov	r9, r4
 800b0f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b0f4:	2830      	cmp	r0, #48	@ 0x30
 800b0f6:	d0fa      	beq.n	800b0ee <__gethex+0x12>
 800b0f8:	eba9 0303 	sub.w	r3, r9, r3
 800b0fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800b100:	f7ff ffd7 	bl	800b0b2 <__hexdig_fun>
 800b104:	4605      	mov	r5, r0
 800b106:	2800      	cmp	r0, #0
 800b108:	d168      	bne.n	800b1dc <__gethex+0x100>
 800b10a:	2201      	movs	r2, #1
 800b10c:	4648      	mov	r0, r9
 800b10e:	499f      	ldr	r1, [pc, #636]	@ (800b38c <__gethex+0x2b0>)
 800b110:	f7ff ff22 	bl	800af58 <strncmp>
 800b114:	4607      	mov	r7, r0
 800b116:	2800      	cmp	r0, #0
 800b118:	d167      	bne.n	800b1ea <__gethex+0x10e>
 800b11a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b11e:	4626      	mov	r6, r4
 800b120:	f7ff ffc7 	bl	800b0b2 <__hexdig_fun>
 800b124:	2800      	cmp	r0, #0
 800b126:	d062      	beq.n	800b1ee <__gethex+0x112>
 800b128:	4623      	mov	r3, r4
 800b12a:	7818      	ldrb	r0, [r3, #0]
 800b12c:	4699      	mov	r9, r3
 800b12e:	2830      	cmp	r0, #48	@ 0x30
 800b130:	f103 0301 	add.w	r3, r3, #1
 800b134:	d0f9      	beq.n	800b12a <__gethex+0x4e>
 800b136:	f7ff ffbc 	bl	800b0b2 <__hexdig_fun>
 800b13a:	fab0 f580 	clz	r5, r0
 800b13e:	f04f 0b01 	mov.w	fp, #1
 800b142:	096d      	lsrs	r5, r5, #5
 800b144:	464a      	mov	r2, r9
 800b146:	4616      	mov	r6, r2
 800b148:	7830      	ldrb	r0, [r6, #0]
 800b14a:	3201      	adds	r2, #1
 800b14c:	f7ff ffb1 	bl	800b0b2 <__hexdig_fun>
 800b150:	2800      	cmp	r0, #0
 800b152:	d1f8      	bne.n	800b146 <__gethex+0x6a>
 800b154:	2201      	movs	r2, #1
 800b156:	4630      	mov	r0, r6
 800b158:	498c      	ldr	r1, [pc, #560]	@ (800b38c <__gethex+0x2b0>)
 800b15a:	f7ff fefd 	bl	800af58 <strncmp>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d13f      	bne.n	800b1e2 <__gethex+0x106>
 800b162:	b944      	cbnz	r4, 800b176 <__gethex+0x9a>
 800b164:	1c74      	adds	r4, r6, #1
 800b166:	4622      	mov	r2, r4
 800b168:	4616      	mov	r6, r2
 800b16a:	7830      	ldrb	r0, [r6, #0]
 800b16c:	3201      	adds	r2, #1
 800b16e:	f7ff ffa0 	bl	800b0b2 <__hexdig_fun>
 800b172:	2800      	cmp	r0, #0
 800b174:	d1f8      	bne.n	800b168 <__gethex+0x8c>
 800b176:	1ba4      	subs	r4, r4, r6
 800b178:	00a7      	lsls	r7, r4, #2
 800b17a:	7833      	ldrb	r3, [r6, #0]
 800b17c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b180:	2b50      	cmp	r3, #80	@ 0x50
 800b182:	d13e      	bne.n	800b202 <__gethex+0x126>
 800b184:	7873      	ldrb	r3, [r6, #1]
 800b186:	2b2b      	cmp	r3, #43	@ 0x2b
 800b188:	d033      	beq.n	800b1f2 <__gethex+0x116>
 800b18a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b18c:	d034      	beq.n	800b1f8 <__gethex+0x11c>
 800b18e:	2400      	movs	r4, #0
 800b190:	1c71      	adds	r1, r6, #1
 800b192:	7808      	ldrb	r0, [r1, #0]
 800b194:	f7ff ff8d 	bl	800b0b2 <__hexdig_fun>
 800b198:	1e43      	subs	r3, r0, #1
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b18      	cmp	r3, #24
 800b19e:	d830      	bhi.n	800b202 <__gethex+0x126>
 800b1a0:	f1a0 0210 	sub.w	r2, r0, #16
 800b1a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1a8:	f7ff ff83 	bl	800b0b2 <__hexdig_fun>
 800b1ac:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b1b0:	fa5f fc8c 	uxtb.w	ip, ip
 800b1b4:	f1bc 0f18 	cmp.w	ip, #24
 800b1b8:	f04f 030a 	mov.w	r3, #10
 800b1bc:	d91e      	bls.n	800b1fc <__gethex+0x120>
 800b1be:	b104      	cbz	r4, 800b1c2 <__gethex+0xe6>
 800b1c0:	4252      	negs	r2, r2
 800b1c2:	4417      	add	r7, r2
 800b1c4:	f8ca 1000 	str.w	r1, [sl]
 800b1c8:	b1ed      	cbz	r5, 800b206 <__gethex+0x12a>
 800b1ca:	f1bb 0f00 	cmp.w	fp, #0
 800b1ce:	bf0c      	ite	eq
 800b1d0:	2506      	moveq	r5, #6
 800b1d2:	2500      	movne	r5, #0
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	b005      	add	sp, #20
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	2500      	movs	r5, #0
 800b1de:	462c      	mov	r4, r5
 800b1e0:	e7b0      	b.n	800b144 <__gethex+0x68>
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	d1c7      	bne.n	800b176 <__gethex+0x9a>
 800b1e6:	4627      	mov	r7, r4
 800b1e8:	e7c7      	b.n	800b17a <__gethex+0x9e>
 800b1ea:	464e      	mov	r6, r9
 800b1ec:	462f      	mov	r7, r5
 800b1ee:	2501      	movs	r5, #1
 800b1f0:	e7c3      	b.n	800b17a <__gethex+0x9e>
 800b1f2:	2400      	movs	r4, #0
 800b1f4:	1cb1      	adds	r1, r6, #2
 800b1f6:	e7cc      	b.n	800b192 <__gethex+0xb6>
 800b1f8:	2401      	movs	r4, #1
 800b1fa:	e7fb      	b.n	800b1f4 <__gethex+0x118>
 800b1fc:	fb03 0002 	mla	r0, r3, r2, r0
 800b200:	e7ce      	b.n	800b1a0 <__gethex+0xc4>
 800b202:	4631      	mov	r1, r6
 800b204:	e7de      	b.n	800b1c4 <__gethex+0xe8>
 800b206:	4629      	mov	r1, r5
 800b208:	eba6 0309 	sub.w	r3, r6, r9
 800b20c:	3b01      	subs	r3, #1
 800b20e:	2b07      	cmp	r3, #7
 800b210:	dc0a      	bgt.n	800b228 <__gethex+0x14c>
 800b212:	9801      	ldr	r0, [sp, #4]
 800b214:	f7fe f962 	bl	80094dc <_Balloc>
 800b218:	4604      	mov	r4, r0
 800b21a:	b940      	cbnz	r0, 800b22e <__gethex+0x152>
 800b21c:	4602      	mov	r2, r0
 800b21e:	21e4      	movs	r1, #228	@ 0xe4
 800b220:	4b5b      	ldr	r3, [pc, #364]	@ (800b390 <__gethex+0x2b4>)
 800b222:	485c      	ldr	r0, [pc, #368]	@ (800b394 <__gethex+0x2b8>)
 800b224:	f7ff fec0 	bl	800afa8 <__assert_func>
 800b228:	3101      	adds	r1, #1
 800b22a:	105b      	asrs	r3, r3, #1
 800b22c:	e7ef      	b.n	800b20e <__gethex+0x132>
 800b22e:	2300      	movs	r3, #0
 800b230:	f100 0a14 	add.w	sl, r0, #20
 800b234:	4655      	mov	r5, sl
 800b236:	469b      	mov	fp, r3
 800b238:	45b1      	cmp	r9, r6
 800b23a:	d337      	bcc.n	800b2ac <__gethex+0x1d0>
 800b23c:	f845 bb04 	str.w	fp, [r5], #4
 800b240:	eba5 050a 	sub.w	r5, r5, sl
 800b244:	10ad      	asrs	r5, r5, #2
 800b246:	6125      	str	r5, [r4, #16]
 800b248:	4658      	mov	r0, fp
 800b24a:	f7fe fa39 	bl	80096c0 <__hi0bits>
 800b24e:	016d      	lsls	r5, r5, #5
 800b250:	f8d8 6000 	ldr.w	r6, [r8]
 800b254:	1a2d      	subs	r5, r5, r0
 800b256:	42b5      	cmp	r5, r6
 800b258:	dd54      	ble.n	800b304 <__gethex+0x228>
 800b25a:	1bad      	subs	r5, r5, r6
 800b25c:	4629      	mov	r1, r5
 800b25e:	4620      	mov	r0, r4
 800b260:	f7fe fdc1 	bl	8009de6 <__any_on>
 800b264:	4681      	mov	r9, r0
 800b266:	b178      	cbz	r0, 800b288 <__gethex+0x1ac>
 800b268:	f04f 0901 	mov.w	r9, #1
 800b26c:	1e6b      	subs	r3, r5, #1
 800b26e:	1159      	asrs	r1, r3, #5
 800b270:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b274:	f003 021f 	and.w	r2, r3, #31
 800b278:	fa09 f202 	lsl.w	r2, r9, r2
 800b27c:	420a      	tst	r2, r1
 800b27e:	d003      	beq.n	800b288 <__gethex+0x1ac>
 800b280:	454b      	cmp	r3, r9
 800b282:	dc36      	bgt.n	800b2f2 <__gethex+0x216>
 800b284:	f04f 0902 	mov.w	r9, #2
 800b288:	4629      	mov	r1, r5
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7ff febe 	bl	800b00c <rshift>
 800b290:	442f      	add	r7, r5
 800b292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b296:	42bb      	cmp	r3, r7
 800b298:	da42      	bge.n	800b320 <__gethex+0x244>
 800b29a:	4621      	mov	r1, r4
 800b29c:	9801      	ldr	r0, [sp, #4]
 800b29e:	f7fe f95d 	bl	800955c <_Bfree>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2a6:	25a3      	movs	r5, #163	@ 0xa3
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	e793      	b.n	800b1d4 <__gethex+0xf8>
 800b2ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b2b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b2b2:	d012      	beq.n	800b2da <__gethex+0x1fe>
 800b2b4:	2b20      	cmp	r3, #32
 800b2b6:	d104      	bne.n	800b2c2 <__gethex+0x1e6>
 800b2b8:	f845 bb04 	str.w	fp, [r5], #4
 800b2bc:	f04f 0b00 	mov.w	fp, #0
 800b2c0:	465b      	mov	r3, fp
 800b2c2:	7830      	ldrb	r0, [r6, #0]
 800b2c4:	9303      	str	r3, [sp, #12]
 800b2c6:	f7ff fef4 	bl	800b0b2 <__hexdig_fun>
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	f000 000f 	and.w	r0, r0, #15
 800b2d0:	4098      	lsls	r0, r3
 800b2d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	e7ae      	b.n	800b238 <__gethex+0x15c>
 800b2da:	45b1      	cmp	r9, r6
 800b2dc:	d8ea      	bhi.n	800b2b4 <__gethex+0x1d8>
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	492a      	ldr	r1, [pc, #168]	@ (800b38c <__gethex+0x2b0>)
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	f7ff fe37 	bl	800af58 <strncmp>
 800b2ea:	9b03      	ldr	r3, [sp, #12]
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d1e1      	bne.n	800b2b4 <__gethex+0x1d8>
 800b2f0:	e7a2      	b.n	800b238 <__gethex+0x15c>
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	1ea9      	subs	r1, r5, #2
 800b2f6:	f7fe fd76 	bl	8009de6 <__any_on>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d0c2      	beq.n	800b284 <__gethex+0x1a8>
 800b2fe:	f04f 0903 	mov.w	r9, #3
 800b302:	e7c1      	b.n	800b288 <__gethex+0x1ac>
 800b304:	da09      	bge.n	800b31a <__gethex+0x23e>
 800b306:	1b75      	subs	r5, r6, r5
 800b308:	4621      	mov	r1, r4
 800b30a:	462a      	mov	r2, r5
 800b30c:	9801      	ldr	r0, [sp, #4]
 800b30e:	f7fe fb3b 	bl	8009988 <__lshift>
 800b312:	4604      	mov	r4, r0
 800b314:	1b7f      	subs	r7, r7, r5
 800b316:	f100 0a14 	add.w	sl, r0, #20
 800b31a:	f04f 0900 	mov.w	r9, #0
 800b31e:	e7b8      	b.n	800b292 <__gethex+0x1b6>
 800b320:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b324:	42bd      	cmp	r5, r7
 800b326:	dd6f      	ble.n	800b408 <__gethex+0x32c>
 800b328:	1bed      	subs	r5, r5, r7
 800b32a:	42ae      	cmp	r6, r5
 800b32c:	dc34      	bgt.n	800b398 <__gethex+0x2bc>
 800b32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b332:	2b02      	cmp	r3, #2
 800b334:	d022      	beq.n	800b37c <__gethex+0x2a0>
 800b336:	2b03      	cmp	r3, #3
 800b338:	d024      	beq.n	800b384 <__gethex+0x2a8>
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d115      	bne.n	800b36a <__gethex+0x28e>
 800b33e:	42ae      	cmp	r6, r5
 800b340:	d113      	bne.n	800b36a <__gethex+0x28e>
 800b342:	2e01      	cmp	r6, #1
 800b344:	d10b      	bne.n	800b35e <__gethex+0x282>
 800b346:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b34a:	9a02      	ldr	r2, [sp, #8]
 800b34c:	2562      	movs	r5, #98	@ 0x62
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	2301      	movs	r3, #1
 800b352:	6123      	str	r3, [r4, #16]
 800b354:	f8ca 3000 	str.w	r3, [sl]
 800b358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b35a:	601c      	str	r4, [r3, #0]
 800b35c:	e73a      	b.n	800b1d4 <__gethex+0xf8>
 800b35e:	4620      	mov	r0, r4
 800b360:	1e71      	subs	r1, r6, #1
 800b362:	f7fe fd40 	bl	8009de6 <__any_on>
 800b366:	2800      	cmp	r0, #0
 800b368:	d1ed      	bne.n	800b346 <__gethex+0x26a>
 800b36a:	4621      	mov	r1, r4
 800b36c:	9801      	ldr	r0, [sp, #4]
 800b36e:	f7fe f8f5 	bl	800955c <_Bfree>
 800b372:	2300      	movs	r3, #0
 800b374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b376:	2550      	movs	r5, #80	@ 0x50
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	e72b      	b.n	800b1d4 <__gethex+0xf8>
 800b37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1f3      	bne.n	800b36a <__gethex+0x28e>
 800b382:	e7e0      	b.n	800b346 <__gethex+0x26a>
 800b384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1dd      	bne.n	800b346 <__gethex+0x26a>
 800b38a:	e7ee      	b.n	800b36a <__gethex+0x28e>
 800b38c:	0800d2b8 	.word	0x0800d2b8
 800b390:	0800d14b 	.word	0x0800d14b
 800b394:	0800d466 	.word	0x0800d466
 800b398:	1e6f      	subs	r7, r5, #1
 800b39a:	f1b9 0f00 	cmp.w	r9, #0
 800b39e:	d130      	bne.n	800b402 <__gethex+0x326>
 800b3a0:	b127      	cbz	r7, 800b3ac <__gethex+0x2d0>
 800b3a2:	4639      	mov	r1, r7
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f7fe fd1e 	bl	8009de6 <__any_on>
 800b3aa:	4681      	mov	r9, r0
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	1b76      	subs	r6, r6, r5
 800b3b2:	2502      	movs	r5, #2
 800b3b4:	117a      	asrs	r2, r7, #5
 800b3b6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b3ba:	f007 071f 	and.w	r7, r7, #31
 800b3be:	40bb      	lsls	r3, r7
 800b3c0:	4213      	tst	r3, r2
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	bf18      	it	ne
 800b3c6:	f049 0902 	orrne.w	r9, r9, #2
 800b3ca:	f7ff fe1f 	bl	800b00c <rshift>
 800b3ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b3d2:	f1b9 0f00 	cmp.w	r9, #0
 800b3d6:	d047      	beq.n	800b468 <__gethex+0x38c>
 800b3d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d015      	beq.n	800b40c <__gethex+0x330>
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d017      	beq.n	800b414 <__gethex+0x338>
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d109      	bne.n	800b3fc <__gethex+0x320>
 800b3e8:	f019 0f02 	tst.w	r9, #2
 800b3ec:	d006      	beq.n	800b3fc <__gethex+0x320>
 800b3ee:	f8da 3000 	ldr.w	r3, [sl]
 800b3f2:	ea49 0903 	orr.w	r9, r9, r3
 800b3f6:	f019 0f01 	tst.w	r9, #1
 800b3fa:	d10e      	bne.n	800b41a <__gethex+0x33e>
 800b3fc:	f045 0510 	orr.w	r5, r5, #16
 800b400:	e032      	b.n	800b468 <__gethex+0x38c>
 800b402:	f04f 0901 	mov.w	r9, #1
 800b406:	e7d1      	b.n	800b3ac <__gethex+0x2d0>
 800b408:	2501      	movs	r5, #1
 800b40a:	e7e2      	b.n	800b3d2 <__gethex+0x2f6>
 800b40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b40e:	f1c3 0301 	rsb	r3, r3, #1
 800b412:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0f0      	beq.n	800b3fc <__gethex+0x320>
 800b41a:	f04f 0c00 	mov.w	ip, #0
 800b41e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b422:	f104 0314 	add.w	r3, r4, #20
 800b426:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b42a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b42e:	4618      	mov	r0, r3
 800b430:	f853 2b04 	ldr.w	r2, [r3], #4
 800b434:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b438:	d01b      	beq.n	800b472 <__gethex+0x396>
 800b43a:	3201      	adds	r2, #1
 800b43c:	6002      	str	r2, [r0, #0]
 800b43e:	2d02      	cmp	r5, #2
 800b440:	f104 0314 	add.w	r3, r4, #20
 800b444:	d13c      	bne.n	800b4c0 <__gethex+0x3e4>
 800b446:	f8d8 2000 	ldr.w	r2, [r8]
 800b44a:	3a01      	subs	r2, #1
 800b44c:	42b2      	cmp	r2, r6
 800b44e:	d109      	bne.n	800b464 <__gethex+0x388>
 800b450:	2201      	movs	r2, #1
 800b452:	1171      	asrs	r1, r6, #5
 800b454:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b458:	f006 061f 	and.w	r6, r6, #31
 800b45c:	fa02 f606 	lsl.w	r6, r2, r6
 800b460:	421e      	tst	r6, r3
 800b462:	d13a      	bne.n	800b4da <__gethex+0x3fe>
 800b464:	f045 0520 	orr.w	r5, r5, #32
 800b468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46a:	601c      	str	r4, [r3, #0]
 800b46c:	9b02      	ldr	r3, [sp, #8]
 800b46e:	601f      	str	r7, [r3, #0]
 800b470:	e6b0      	b.n	800b1d4 <__gethex+0xf8>
 800b472:	4299      	cmp	r1, r3
 800b474:	f843 cc04 	str.w	ip, [r3, #-4]
 800b478:	d8d9      	bhi.n	800b42e <__gethex+0x352>
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	459b      	cmp	fp, r3
 800b47e:	db17      	blt.n	800b4b0 <__gethex+0x3d4>
 800b480:	6861      	ldr	r1, [r4, #4]
 800b482:	9801      	ldr	r0, [sp, #4]
 800b484:	3101      	adds	r1, #1
 800b486:	f7fe f829 	bl	80094dc <_Balloc>
 800b48a:	4681      	mov	r9, r0
 800b48c:	b918      	cbnz	r0, 800b496 <__gethex+0x3ba>
 800b48e:	4602      	mov	r2, r0
 800b490:	2184      	movs	r1, #132	@ 0x84
 800b492:	4b19      	ldr	r3, [pc, #100]	@ (800b4f8 <__gethex+0x41c>)
 800b494:	e6c5      	b.n	800b222 <__gethex+0x146>
 800b496:	6922      	ldr	r2, [r4, #16]
 800b498:	f104 010c 	add.w	r1, r4, #12
 800b49c:	3202      	adds	r2, #2
 800b49e:	0092      	lsls	r2, r2, #2
 800b4a0:	300c      	adds	r0, #12
 800b4a2:	f7fd f8b8 	bl	8008616 <memcpy>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	9801      	ldr	r0, [sp, #4]
 800b4aa:	f7fe f857 	bl	800955c <_Bfree>
 800b4ae:	464c      	mov	r4, r9
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	6122      	str	r2, [r4, #16]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4bc:	615a      	str	r2, [r3, #20]
 800b4be:	e7be      	b.n	800b43e <__gethex+0x362>
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	455a      	cmp	r2, fp
 800b4c4:	dd0b      	ble.n	800b4de <__gethex+0x402>
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f7ff fd9f 	bl	800b00c <rshift>
 800b4ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4d2:	3701      	adds	r7, #1
 800b4d4:	42bb      	cmp	r3, r7
 800b4d6:	f6ff aee0 	blt.w	800b29a <__gethex+0x1be>
 800b4da:	2501      	movs	r5, #1
 800b4dc:	e7c2      	b.n	800b464 <__gethex+0x388>
 800b4de:	f016 061f 	ands.w	r6, r6, #31
 800b4e2:	d0fa      	beq.n	800b4da <__gethex+0x3fe>
 800b4e4:	4453      	add	r3, sl
 800b4e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b4ea:	f7fe f8e9 	bl	80096c0 <__hi0bits>
 800b4ee:	f1c6 0620 	rsb	r6, r6, #32
 800b4f2:	42b0      	cmp	r0, r6
 800b4f4:	dbe7      	blt.n	800b4c6 <__gethex+0x3ea>
 800b4f6:	e7f0      	b.n	800b4da <__gethex+0x3fe>
 800b4f8:	0800d14b 	.word	0x0800d14b

0800b4fc <L_shift>:
 800b4fc:	f1c2 0208 	rsb	r2, r2, #8
 800b500:	0092      	lsls	r2, r2, #2
 800b502:	b570      	push	{r4, r5, r6, lr}
 800b504:	f1c2 0620 	rsb	r6, r2, #32
 800b508:	6843      	ldr	r3, [r0, #4]
 800b50a:	6804      	ldr	r4, [r0, #0]
 800b50c:	fa03 f506 	lsl.w	r5, r3, r6
 800b510:	432c      	orrs	r4, r5
 800b512:	40d3      	lsrs	r3, r2
 800b514:	6004      	str	r4, [r0, #0]
 800b516:	f840 3f04 	str.w	r3, [r0, #4]!
 800b51a:	4288      	cmp	r0, r1
 800b51c:	d3f4      	bcc.n	800b508 <L_shift+0xc>
 800b51e:	bd70      	pop	{r4, r5, r6, pc}

0800b520 <__match>:
 800b520:	b530      	push	{r4, r5, lr}
 800b522:	6803      	ldr	r3, [r0, #0]
 800b524:	3301      	adds	r3, #1
 800b526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b52a:	b914      	cbnz	r4, 800b532 <__match+0x12>
 800b52c:	6003      	str	r3, [r0, #0]
 800b52e:	2001      	movs	r0, #1
 800b530:	bd30      	pop	{r4, r5, pc}
 800b532:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b536:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b53a:	2d19      	cmp	r5, #25
 800b53c:	bf98      	it	ls
 800b53e:	3220      	addls	r2, #32
 800b540:	42a2      	cmp	r2, r4
 800b542:	d0f0      	beq.n	800b526 <__match+0x6>
 800b544:	2000      	movs	r0, #0
 800b546:	e7f3      	b.n	800b530 <__match+0x10>

0800b548 <__hexnan>:
 800b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	2500      	movs	r5, #0
 800b54e:	680b      	ldr	r3, [r1, #0]
 800b550:	4682      	mov	sl, r0
 800b552:	115e      	asrs	r6, r3, #5
 800b554:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b558:	f013 031f 	ands.w	r3, r3, #31
 800b55c:	bf18      	it	ne
 800b55e:	3604      	addne	r6, #4
 800b560:	1f37      	subs	r7, r6, #4
 800b562:	4690      	mov	r8, r2
 800b564:	46b9      	mov	r9, r7
 800b566:	463c      	mov	r4, r7
 800b568:	46ab      	mov	fp, r5
 800b56a:	b087      	sub	sp, #28
 800b56c:	6801      	ldr	r1, [r0, #0]
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	f846 5c04 	str.w	r5, [r6, #-4]
 800b574:	9502      	str	r5, [sp, #8]
 800b576:	784a      	ldrb	r2, [r1, #1]
 800b578:	1c4b      	adds	r3, r1, #1
 800b57a:	9303      	str	r3, [sp, #12]
 800b57c:	b342      	cbz	r2, 800b5d0 <__hexnan+0x88>
 800b57e:	4610      	mov	r0, r2
 800b580:	9105      	str	r1, [sp, #20]
 800b582:	9204      	str	r2, [sp, #16]
 800b584:	f7ff fd95 	bl	800b0b2 <__hexdig_fun>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d151      	bne.n	800b630 <__hexnan+0xe8>
 800b58c:	9a04      	ldr	r2, [sp, #16]
 800b58e:	9905      	ldr	r1, [sp, #20]
 800b590:	2a20      	cmp	r2, #32
 800b592:	d818      	bhi.n	800b5c6 <__hexnan+0x7e>
 800b594:	9b02      	ldr	r3, [sp, #8]
 800b596:	459b      	cmp	fp, r3
 800b598:	dd13      	ble.n	800b5c2 <__hexnan+0x7a>
 800b59a:	454c      	cmp	r4, r9
 800b59c:	d206      	bcs.n	800b5ac <__hexnan+0x64>
 800b59e:	2d07      	cmp	r5, #7
 800b5a0:	dc04      	bgt.n	800b5ac <__hexnan+0x64>
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff ffa8 	bl	800b4fc <L_shift>
 800b5ac:	4544      	cmp	r4, r8
 800b5ae:	d952      	bls.n	800b656 <__hexnan+0x10e>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f1a4 0904 	sub.w	r9, r4, #4
 800b5b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5ba:	461d      	mov	r5, r3
 800b5bc:	464c      	mov	r4, r9
 800b5be:	f8cd b008 	str.w	fp, [sp, #8]
 800b5c2:	9903      	ldr	r1, [sp, #12]
 800b5c4:	e7d7      	b.n	800b576 <__hexnan+0x2e>
 800b5c6:	2a29      	cmp	r2, #41	@ 0x29
 800b5c8:	d157      	bne.n	800b67a <__hexnan+0x132>
 800b5ca:	3102      	adds	r1, #2
 800b5cc:	f8ca 1000 	str.w	r1, [sl]
 800b5d0:	f1bb 0f00 	cmp.w	fp, #0
 800b5d4:	d051      	beq.n	800b67a <__hexnan+0x132>
 800b5d6:	454c      	cmp	r4, r9
 800b5d8:	d206      	bcs.n	800b5e8 <__hexnan+0xa0>
 800b5da:	2d07      	cmp	r5, #7
 800b5dc:	dc04      	bgt.n	800b5e8 <__hexnan+0xa0>
 800b5de:	462a      	mov	r2, r5
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f7ff ff8a 	bl	800b4fc <L_shift>
 800b5e8:	4544      	cmp	r4, r8
 800b5ea:	d936      	bls.n	800b65a <__hexnan+0x112>
 800b5ec:	4623      	mov	r3, r4
 800b5ee:	f1a8 0204 	sub.w	r2, r8, #4
 800b5f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5f6:	429f      	cmp	r7, r3
 800b5f8:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5fc:	d2f9      	bcs.n	800b5f2 <__hexnan+0xaa>
 800b5fe:	1b3b      	subs	r3, r7, r4
 800b600:	f023 0303 	bic.w	r3, r3, #3
 800b604:	3304      	adds	r3, #4
 800b606:	3401      	adds	r4, #1
 800b608:	3e03      	subs	r6, #3
 800b60a:	42b4      	cmp	r4, r6
 800b60c:	bf88      	it	hi
 800b60e:	2304      	movhi	r3, #4
 800b610:	2200      	movs	r2, #0
 800b612:	4443      	add	r3, r8
 800b614:	f843 2b04 	str.w	r2, [r3], #4
 800b618:	429f      	cmp	r7, r3
 800b61a:	d2fb      	bcs.n	800b614 <__hexnan+0xcc>
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	b91b      	cbnz	r3, 800b628 <__hexnan+0xe0>
 800b620:	4547      	cmp	r7, r8
 800b622:	d128      	bne.n	800b676 <__hexnan+0x12e>
 800b624:	2301      	movs	r3, #1
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	2005      	movs	r0, #5
 800b62a:	b007      	add	sp, #28
 800b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b630:	3501      	adds	r5, #1
 800b632:	2d08      	cmp	r5, #8
 800b634:	f10b 0b01 	add.w	fp, fp, #1
 800b638:	dd06      	ble.n	800b648 <__hexnan+0x100>
 800b63a:	4544      	cmp	r4, r8
 800b63c:	d9c1      	bls.n	800b5c2 <__hexnan+0x7a>
 800b63e:	2300      	movs	r3, #0
 800b640:	2501      	movs	r5, #1
 800b642:	f844 3c04 	str.w	r3, [r4, #-4]
 800b646:	3c04      	subs	r4, #4
 800b648:	6822      	ldr	r2, [r4, #0]
 800b64a:	f000 000f 	and.w	r0, r0, #15
 800b64e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b652:	6020      	str	r0, [r4, #0]
 800b654:	e7b5      	b.n	800b5c2 <__hexnan+0x7a>
 800b656:	2508      	movs	r5, #8
 800b658:	e7b3      	b.n	800b5c2 <__hexnan+0x7a>
 800b65a:	9b01      	ldr	r3, [sp, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0dd      	beq.n	800b61c <__hexnan+0xd4>
 800b660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b664:	f1c3 0320 	rsb	r3, r3, #32
 800b668:	40da      	lsrs	r2, r3
 800b66a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b66e:	4013      	ands	r3, r2
 800b670:	f846 3c04 	str.w	r3, [r6, #-4]
 800b674:	e7d2      	b.n	800b61c <__hexnan+0xd4>
 800b676:	3f04      	subs	r7, #4
 800b678:	e7d0      	b.n	800b61c <__hexnan+0xd4>
 800b67a:	2004      	movs	r0, #4
 800b67c:	e7d5      	b.n	800b62a <__hexnan+0xe2>

0800b67e <__ascii_mbtowc>:
 800b67e:	b082      	sub	sp, #8
 800b680:	b901      	cbnz	r1, 800b684 <__ascii_mbtowc+0x6>
 800b682:	a901      	add	r1, sp, #4
 800b684:	b142      	cbz	r2, 800b698 <__ascii_mbtowc+0x1a>
 800b686:	b14b      	cbz	r3, 800b69c <__ascii_mbtowc+0x1e>
 800b688:	7813      	ldrb	r3, [r2, #0]
 800b68a:	600b      	str	r3, [r1, #0]
 800b68c:	7812      	ldrb	r2, [r2, #0]
 800b68e:	1e10      	subs	r0, r2, #0
 800b690:	bf18      	it	ne
 800b692:	2001      	movne	r0, #1
 800b694:	b002      	add	sp, #8
 800b696:	4770      	bx	lr
 800b698:	4610      	mov	r0, r2
 800b69a:	e7fb      	b.n	800b694 <__ascii_mbtowc+0x16>
 800b69c:	f06f 0001 	mvn.w	r0, #1
 800b6a0:	e7f8      	b.n	800b694 <__ascii_mbtowc+0x16>

0800b6a2 <_realloc_r>:
 800b6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a6:	4680      	mov	r8, r0
 800b6a8:	4615      	mov	r5, r2
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	b921      	cbnz	r1, 800b6b8 <_realloc_r+0x16>
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	f7fd be86 	b.w	80093c4 <_malloc_r>
 800b6b8:	b92a      	cbnz	r2, 800b6c6 <_realloc_r+0x24>
 800b6ba:	f7fd fe11 	bl	80092e0 <_free_r>
 800b6be:	2400      	movs	r4, #0
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c6:	f000 f840 	bl	800b74a <_malloc_usable_size_r>
 800b6ca:	4285      	cmp	r5, r0
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	d802      	bhi.n	800b6d6 <_realloc_r+0x34>
 800b6d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b6d4:	d8f4      	bhi.n	800b6c0 <_realloc_r+0x1e>
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	4640      	mov	r0, r8
 800b6da:	f7fd fe73 	bl	80093c4 <_malloc_r>
 800b6de:	4607      	mov	r7, r0
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d0ec      	beq.n	800b6be <_realloc_r+0x1c>
 800b6e4:	42b5      	cmp	r5, r6
 800b6e6:	462a      	mov	r2, r5
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	bf28      	it	cs
 800b6ec:	4632      	movcs	r2, r6
 800b6ee:	f7fc ff92 	bl	8008616 <memcpy>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	f7fd fdf3 	bl	80092e0 <_free_r>
 800b6fa:	463c      	mov	r4, r7
 800b6fc:	e7e0      	b.n	800b6c0 <_realloc_r+0x1e>

0800b6fe <__ascii_wctomb>:
 800b6fe:	4603      	mov	r3, r0
 800b700:	4608      	mov	r0, r1
 800b702:	b141      	cbz	r1, 800b716 <__ascii_wctomb+0x18>
 800b704:	2aff      	cmp	r2, #255	@ 0xff
 800b706:	d904      	bls.n	800b712 <__ascii_wctomb+0x14>
 800b708:	228a      	movs	r2, #138	@ 0x8a
 800b70a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	4770      	bx	lr
 800b712:	2001      	movs	r0, #1
 800b714:	700a      	strb	r2, [r1, #0]
 800b716:	4770      	bx	lr

0800b718 <fiprintf>:
 800b718:	b40e      	push	{r1, r2, r3}
 800b71a:	b503      	push	{r0, r1, lr}
 800b71c:	4601      	mov	r1, r0
 800b71e:	ab03      	add	r3, sp, #12
 800b720:	4805      	ldr	r0, [pc, #20]	@ (800b738 <fiprintf+0x20>)
 800b722:	f853 2b04 	ldr.w	r2, [r3], #4
 800b726:	6800      	ldr	r0, [r0, #0]
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	f000 f83d 	bl	800b7a8 <_vfiprintf_r>
 800b72e:	b002      	add	sp, #8
 800b730:	f85d eb04 	ldr.w	lr, [sp], #4
 800b734:	b003      	add	sp, #12
 800b736:	4770      	bx	lr
 800b738:	20000020 	.word	0x20000020

0800b73c <abort>:
 800b73c:	2006      	movs	r0, #6
 800b73e:	b508      	push	{r3, lr}
 800b740:	f000 fa06 	bl	800bb50 <raise>
 800b744:	2001      	movs	r0, #1
 800b746:	f7f8 fc04 	bl	8003f52 <_exit>

0800b74a <_malloc_usable_size_r>:
 800b74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b74e:	1f18      	subs	r0, r3, #4
 800b750:	2b00      	cmp	r3, #0
 800b752:	bfbc      	itt	lt
 800b754:	580b      	ldrlt	r3, [r1, r0]
 800b756:	18c0      	addlt	r0, r0, r3
 800b758:	4770      	bx	lr

0800b75a <__sfputc_r>:
 800b75a:	6893      	ldr	r3, [r2, #8]
 800b75c:	b410      	push	{r4}
 800b75e:	3b01      	subs	r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	6093      	str	r3, [r2, #8]
 800b764:	da07      	bge.n	800b776 <__sfputc_r+0x1c>
 800b766:	6994      	ldr	r4, [r2, #24]
 800b768:	42a3      	cmp	r3, r4
 800b76a:	db01      	blt.n	800b770 <__sfputc_r+0x16>
 800b76c:	290a      	cmp	r1, #10
 800b76e:	d102      	bne.n	800b776 <__sfputc_r+0x1c>
 800b770:	bc10      	pop	{r4}
 800b772:	f000 b931 	b.w	800b9d8 <__swbuf_r>
 800b776:	6813      	ldr	r3, [r2, #0]
 800b778:	1c58      	adds	r0, r3, #1
 800b77a:	6010      	str	r0, [r2, #0]
 800b77c:	7019      	strb	r1, [r3, #0]
 800b77e:	4608      	mov	r0, r1
 800b780:	bc10      	pop	{r4}
 800b782:	4770      	bx	lr

0800b784 <__sfputs_r>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	4606      	mov	r6, r0
 800b788:	460f      	mov	r7, r1
 800b78a:	4614      	mov	r4, r2
 800b78c:	18d5      	adds	r5, r2, r3
 800b78e:	42ac      	cmp	r4, r5
 800b790:	d101      	bne.n	800b796 <__sfputs_r+0x12>
 800b792:	2000      	movs	r0, #0
 800b794:	e007      	b.n	800b7a6 <__sfputs_r+0x22>
 800b796:	463a      	mov	r2, r7
 800b798:	4630      	mov	r0, r6
 800b79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79e:	f7ff ffdc 	bl	800b75a <__sfputc_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d1f3      	bne.n	800b78e <__sfputs_r+0xa>
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7a8 <_vfiprintf_r>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	4614      	mov	r4, r2
 800b7b0:	4698      	mov	r8, r3
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	b09d      	sub	sp, #116	@ 0x74
 800b7b6:	b118      	cbz	r0, 800b7c0 <_vfiprintf_r+0x18>
 800b7b8:	6a03      	ldr	r3, [r0, #32]
 800b7ba:	b90b      	cbnz	r3, 800b7c0 <_vfiprintf_r+0x18>
 800b7bc:	f7fc fe04 	bl	80083c8 <__sinit>
 800b7c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	059a      	lsls	r2, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7ce:	f7fc ff12 	bl	80085f6 <__retarget_lock_acquire_recursive>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	071b      	lsls	r3, r3, #28
 800b7d6:	d501      	bpl.n	800b7dc <_vfiprintf_r+0x34>
 800b7d8:	692b      	ldr	r3, [r5, #16]
 800b7da:	b99b      	cbnz	r3, 800b804 <_vfiprintf_r+0x5c>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 f938 	bl	800ba54 <__swsetup_r>
 800b7e4:	b170      	cbz	r0, 800b804 <_vfiprintf_r+0x5c>
 800b7e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7e8:	07dc      	lsls	r4, r3, #31
 800b7ea:	d504      	bpl.n	800b7f6 <_vfiprintf_r+0x4e>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7f0:	b01d      	add	sp, #116	@ 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	89ab      	ldrh	r3, [r5, #12]
 800b7f8:	0598      	lsls	r0, r3, #22
 800b7fa:	d4f7      	bmi.n	800b7ec <_vfiprintf_r+0x44>
 800b7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7fe:	f7fc fefb 	bl	80085f8 <__retarget_lock_release_recursive>
 800b802:	e7f3      	b.n	800b7ec <_vfiprintf_r+0x44>
 800b804:	2300      	movs	r3, #0
 800b806:	9309      	str	r3, [sp, #36]	@ 0x24
 800b808:	2320      	movs	r3, #32
 800b80a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b80e:	2330      	movs	r3, #48	@ 0x30
 800b810:	f04f 0901 	mov.w	r9, #1
 800b814:	f8cd 800c 	str.w	r8, [sp, #12]
 800b818:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b9c4 <_vfiprintf_r+0x21c>
 800b81c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b820:	4623      	mov	r3, r4
 800b822:	469a      	mov	sl, r3
 800b824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b828:	b10a      	cbz	r2, 800b82e <_vfiprintf_r+0x86>
 800b82a:	2a25      	cmp	r2, #37	@ 0x25
 800b82c:	d1f9      	bne.n	800b822 <_vfiprintf_r+0x7a>
 800b82e:	ebba 0b04 	subs.w	fp, sl, r4
 800b832:	d00b      	beq.n	800b84c <_vfiprintf_r+0xa4>
 800b834:	465b      	mov	r3, fp
 800b836:	4622      	mov	r2, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7ff ffa2 	bl	800b784 <__sfputs_r>
 800b840:	3001      	adds	r0, #1
 800b842:	f000 80a7 	beq.w	800b994 <_vfiprintf_r+0x1ec>
 800b846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b848:	445a      	add	r2, fp
 800b84a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 809f 	beq.w	800b994 <_vfiprintf_r+0x1ec>
 800b856:	2300      	movs	r3, #0
 800b858:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b860:	f10a 0a01 	add.w	sl, sl, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	9307      	str	r3, [sp, #28]
 800b868:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b86c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b86e:	4654      	mov	r4, sl
 800b870:	2205      	movs	r2, #5
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4853      	ldr	r0, [pc, #332]	@ (800b9c4 <_vfiprintf_r+0x21c>)
 800b878:	f7fc febf 	bl	80085fa <memchr>
 800b87c:	9a04      	ldr	r2, [sp, #16]
 800b87e:	b9d8      	cbnz	r0, 800b8b8 <_vfiprintf_r+0x110>
 800b880:	06d1      	lsls	r1, r2, #27
 800b882:	bf44      	itt	mi
 800b884:	2320      	movmi	r3, #32
 800b886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b88a:	0713      	lsls	r3, r2, #28
 800b88c:	bf44      	itt	mi
 800b88e:	232b      	movmi	r3, #43	@ 0x2b
 800b890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b894:	f89a 3000 	ldrb.w	r3, [sl]
 800b898:	2b2a      	cmp	r3, #42	@ 0x2a
 800b89a:	d015      	beq.n	800b8c8 <_vfiprintf_r+0x120>
 800b89c:	4654      	mov	r4, sl
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f04f 0c0a 	mov.w	ip, #10
 800b8a4:	9a07      	ldr	r2, [sp, #28]
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ac:	3b30      	subs	r3, #48	@ 0x30
 800b8ae:	2b09      	cmp	r3, #9
 800b8b0:	d94b      	bls.n	800b94a <_vfiprintf_r+0x1a2>
 800b8b2:	b1b0      	cbz	r0, 800b8e2 <_vfiprintf_r+0x13a>
 800b8b4:	9207      	str	r2, [sp, #28]
 800b8b6:	e014      	b.n	800b8e2 <_vfiprintf_r+0x13a>
 800b8b8:	eba0 0308 	sub.w	r3, r0, r8
 800b8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	46a2      	mov	sl, r4
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	e7d2      	b.n	800b86e <_vfiprintf_r+0xc6>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	1d19      	adds	r1, r3, #4
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	9103      	str	r1, [sp, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bfbb      	ittet	lt
 800b8d4:	425b      	neglt	r3, r3
 800b8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8da:	9307      	strge	r3, [sp, #28]
 800b8dc:	9307      	strlt	r3, [sp, #28]
 800b8de:	bfb8      	it	lt
 800b8e0:	9204      	strlt	r2, [sp, #16]
 800b8e2:	7823      	ldrb	r3, [r4, #0]
 800b8e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8e6:	d10a      	bne.n	800b8fe <_vfiprintf_r+0x156>
 800b8e8:	7863      	ldrb	r3, [r4, #1]
 800b8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ec:	d132      	bne.n	800b954 <_vfiprintf_r+0x1ac>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	3402      	adds	r4, #2
 800b8f2:	1d1a      	adds	r2, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	9203      	str	r2, [sp, #12]
 800b8f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b9c8 <_vfiprintf_r+0x220>
 800b902:	2203      	movs	r2, #3
 800b904:	4650      	mov	r0, sl
 800b906:	7821      	ldrb	r1, [r4, #0]
 800b908:	f7fc fe77 	bl	80085fa <memchr>
 800b90c:	b138      	cbz	r0, 800b91e <_vfiprintf_r+0x176>
 800b90e:	2240      	movs	r2, #64	@ 0x40
 800b910:	9b04      	ldr	r3, [sp, #16]
 800b912:	eba0 000a 	sub.w	r0, r0, sl
 800b916:	4082      	lsls	r2, r0
 800b918:	4313      	orrs	r3, r2
 800b91a:	3401      	adds	r4, #1
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b922:	2206      	movs	r2, #6
 800b924:	4829      	ldr	r0, [pc, #164]	@ (800b9cc <_vfiprintf_r+0x224>)
 800b926:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b92a:	f7fc fe66 	bl	80085fa <memchr>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d03f      	beq.n	800b9b2 <_vfiprintf_r+0x20a>
 800b932:	4b27      	ldr	r3, [pc, #156]	@ (800b9d0 <_vfiprintf_r+0x228>)
 800b934:	bb1b      	cbnz	r3, 800b97e <_vfiprintf_r+0x1d6>
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	3307      	adds	r3, #7
 800b93a:	f023 0307 	bic.w	r3, r3, #7
 800b93e:	3308      	adds	r3, #8
 800b940:	9303      	str	r3, [sp, #12]
 800b942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b944:	443b      	add	r3, r7
 800b946:	9309      	str	r3, [sp, #36]	@ 0x24
 800b948:	e76a      	b.n	800b820 <_vfiprintf_r+0x78>
 800b94a:	460c      	mov	r4, r1
 800b94c:	2001      	movs	r0, #1
 800b94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b952:	e7a8      	b.n	800b8a6 <_vfiprintf_r+0xfe>
 800b954:	2300      	movs	r3, #0
 800b956:	f04f 0c0a 	mov.w	ip, #10
 800b95a:	4619      	mov	r1, r3
 800b95c:	3401      	adds	r4, #1
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	4620      	mov	r0, r4
 800b962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b966:	3a30      	subs	r2, #48	@ 0x30
 800b968:	2a09      	cmp	r2, #9
 800b96a:	d903      	bls.n	800b974 <_vfiprintf_r+0x1cc>
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0c6      	beq.n	800b8fe <_vfiprintf_r+0x156>
 800b970:	9105      	str	r1, [sp, #20]
 800b972:	e7c4      	b.n	800b8fe <_vfiprintf_r+0x156>
 800b974:	4604      	mov	r4, r0
 800b976:	2301      	movs	r3, #1
 800b978:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97c:	e7f0      	b.n	800b960 <_vfiprintf_r+0x1b8>
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4630      	mov	r0, r6
 800b986:	4b13      	ldr	r3, [pc, #76]	@ (800b9d4 <_vfiprintf_r+0x22c>)
 800b988:	a904      	add	r1, sp, #16
 800b98a:	f7fb fec3 	bl	8007714 <_printf_float>
 800b98e:	4607      	mov	r7, r0
 800b990:	1c78      	adds	r0, r7, #1
 800b992:	d1d6      	bne.n	800b942 <_vfiprintf_r+0x19a>
 800b994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b996:	07d9      	lsls	r1, r3, #31
 800b998:	d405      	bmi.n	800b9a6 <_vfiprintf_r+0x1fe>
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	059a      	lsls	r2, r3, #22
 800b99e:	d402      	bmi.n	800b9a6 <_vfiprintf_r+0x1fe>
 800b9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9a2:	f7fc fe29 	bl	80085f8 <__retarget_lock_release_recursive>
 800b9a6:	89ab      	ldrh	r3, [r5, #12]
 800b9a8:	065b      	lsls	r3, r3, #25
 800b9aa:	f53f af1f 	bmi.w	800b7ec <_vfiprintf_r+0x44>
 800b9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9b0:	e71e      	b.n	800b7f0 <_vfiprintf_r+0x48>
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	4b06      	ldr	r3, [pc, #24]	@ (800b9d4 <_vfiprintf_r+0x22c>)
 800b9bc:	a904      	add	r1, sp, #16
 800b9be:	f7fc f947 	bl	8007c50 <_printf_i>
 800b9c2:	e7e4      	b.n	800b98e <_vfiprintf_r+0x1e6>
 800b9c4:	0800d411 	.word	0x0800d411
 800b9c8:	0800d417 	.word	0x0800d417
 800b9cc:	0800d41b 	.word	0x0800d41b
 800b9d0:	08007715 	.word	0x08007715
 800b9d4:	0800b785 	.word	0x0800b785

0800b9d8 <__swbuf_r>:
 800b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9da:	460e      	mov	r6, r1
 800b9dc:	4614      	mov	r4, r2
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b118      	cbz	r0, 800b9ea <__swbuf_r+0x12>
 800b9e2:	6a03      	ldr	r3, [r0, #32]
 800b9e4:	b90b      	cbnz	r3, 800b9ea <__swbuf_r+0x12>
 800b9e6:	f7fc fcef 	bl	80083c8 <__sinit>
 800b9ea:	69a3      	ldr	r3, [r4, #24]
 800b9ec:	60a3      	str	r3, [r4, #8]
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	071a      	lsls	r2, r3, #28
 800b9f2:	d501      	bpl.n	800b9f8 <__swbuf_r+0x20>
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	b943      	cbnz	r3, 800ba0a <__swbuf_r+0x32>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f82a 	bl	800ba54 <__swsetup_r>
 800ba00:	b118      	cbz	r0, 800ba0a <__swbuf_r+0x32>
 800ba02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ba06:	4638      	mov	r0, r7
 800ba08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	6922      	ldr	r2, [r4, #16]
 800ba0e:	b2f6      	uxtb	r6, r6
 800ba10:	1a98      	subs	r0, r3, r2
 800ba12:	6963      	ldr	r3, [r4, #20]
 800ba14:	4637      	mov	r7, r6
 800ba16:	4283      	cmp	r3, r0
 800ba18:	dc05      	bgt.n	800ba26 <__swbuf_r+0x4e>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f7ff fa59 	bl	800aed4 <_fflush_r>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d1ed      	bne.n	800ba02 <__swbuf_r+0x2a>
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	60a3      	str	r3, [r4, #8]
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	6022      	str	r2, [r4, #0]
 800ba32:	701e      	strb	r6, [r3, #0]
 800ba34:	6962      	ldr	r2, [r4, #20]
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d004      	beq.n	800ba46 <__swbuf_r+0x6e>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	07db      	lsls	r3, r3, #31
 800ba40:	d5e1      	bpl.n	800ba06 <__swbuf_r+0x2e>
 800ba42:	2e0a      	cmp	r6, #10
 800ba44:	d1df      	bne.n	800ba06 <__swbuf_r+0x2e>
 800ba46:	4621      	mov	r1, r4
 800ba48:	4628      	mov	r0, r5
 800ba4a:	f7ff fa43 	bl	800aed4 <_fflush_r>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d0d9      	beq.n	800ba06 <__swbuf_r+0x2e>
 800ba52:	e7d6      	b.n	800ba02 <__swbuf_r+0x2a>

0800ba54 <__swsetup_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4b29      	ldr	r3, [pc, #164]	@ (800bafc <__swsetup_r+0xa8>)
 800ba58:	4605      	mov	r5, r0
 800ba5a:	6818      	ldr	r0, [r3, #0]
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	b118      	cbz	r0, 800ba68 <__swsetup_r+0x14>
 800ba60:	6a03      	ldr	r3, [r0, #32]
 800ba62:	b90b      	cbnz	r3, 800ba68 <__swsetup_r+0x14>
 800ba64:	f7fc fcb0 	bl	80083c8 <__sinit>
 800ba68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba6c:	0719      	lsls	r1, r3, #28
 800ba6e:	d422      	bmi.n	800bab6 <__swsetup_r+0x62>
 800ba70:	06da      	lsls	r2, r3, #27
 800ba72:	d407      	bmi.n	800ba84 <__swsetup_r+0x30>
 800ba74:	2209      	movs	r2, #9
 800ba76:	602a      	str	r2, [r5, #0]
 800ba78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba80:	81a3      	strh	r3, [r4, #12]
 800ba82:	e033      	b.n	800baec <__swsetup_r+0x98>
 800ba84:	0758      	lsls	r0, r3, #29
 800ba86:	d512      	bpl.n	800baae <__swsetup_r+0x5a>
 800ba88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba8a:	b141      	cbz	r1, 800ba9e <__swsetup_r+0x4a>
 800ba8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba90:	4299      	cmp	r1, r3
 800ba92:	d002      	beq.n	800ba9a <__swsetup_r+0x46>
 800ba94:	4628      	mov	r0, r5
 800ba96:	f7fd fc23 	bl	80092e0 <_free_r>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800baa4:	81a3      	strh	r3, [r4, #12]
 800baa6:	2300      	movs	r3, #0
 800baa8:	6063      	str	r3, [r4, #4]
 800baaa:	6923      	ldr	r3, [r4, #16]
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	f043 0308 	orr.w	r3, r3, #8
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	6923      	ldr	r3, [r4, #16]
 800bab8:	b94b      	cbnz	r3, 800bace <__swsetup_r+0x7a>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bac4:	d003      	beq.n	800bace <__swsetup_r+0x7a>
 800bac6:	4621      	mov	r1, r4
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 f882 	bl	800bbd2 <__smakebuf_r>
 800bace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bad2:	f013 0201 	ands.w	r2, r3, #1
 800bad6:	d00a      	beq.n	800baee <__swsetup_r+0x9a>
 800bad8:	2200      	movs	r2, #0
 800bada:	60a2      	str	r2, [r4, #8]
 800badc:	6962      	ldr	r2, [r4, #20]
 800bade:	4252      	negs	r2, r2
 800bae0:	61a2      	str	r2, [r4, #24]
 800bae2:	6922      	ldr	r2, [r4, #16]
 800bae4:	b942      	cbnz	r2, 800baf8 <__swsetup_r+0xa4>
 800bae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baea:	d1c5      	bne.n	800ba78 <__swsetup_r+0x24>
 800baec:	bd38      	pop	{r3, r4, r5, pc}
 800baee:	0799      	lsls	r1, r3, #30
 800baf0:	bf58      	it	pl
 800baf2:	6962      	ldrpl	r2, [r4, #20]
 800baf4:	60a2      	str	r2, [r4, #8]
 800baf6:	e7f4      	b.n	800bae2 <__swsetup_r+0x8e>
 800baf8:	2000      	movs	r0, #0
 800bafa:	e7f7      	b.n	800baec <__swsetup_r+0x98>
 800bafc:	20000020 	.word	0x20000020

0800bb00 <_raise_r>:
 800bb00:	291f      	cmp	r1, #31
 800bb02:	b538      	push	{r3, r4, r5, lr}
 800bb04:	4605      	mov	r5, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	d904      	bls.n	800bb14 <_raise_r+0x14>
 800bb0a:	2316      	movs	r3, #22
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bb16:	b112      	cbz	r2, 800bb1e <_raise_r+0x1e>
 800bb18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb1c:	b94b      	cbnz	r3, 800bb32 <_raise_r+0x32>
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 f830 	bl	800bb84 <_getpid_r>
 800bb24:	4622      	mov	r2, r4
 800bb26:	4601      	mov	r1, r0
 800bb28:	4628      	mov	r0, r5
 800bb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb2e:	f000 b817 	b.w	800bb60 <_kill_r>
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d00a      	beq.n	800bb4c <_raise_r+0x4c>
 800bb36:	1c59      	adds	r1, r3, #1
 800bb38:	d103      	bne.n	800bb42 <_raise_r+0x42>
 800bb3a:	2316      	movs	r3, #22
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7e7      	b.n	800bb12 <_raise_r+0x12>
 800bb42:	2100      	movs	r1, #0
 800bb44:	4620      	mov	r0, r4
 800bb46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb4a:	4798      	blx	r3
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	e7e0      	b.n	800bb12 <_raise_r+0x12>

0800bb50 <raise>:
 800bb50:	4b02      	ldr	r3, [pc, #8]	@ (800bb5c <raise+0xc>)
 800bb52:	4601      	mov	r1, r0
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	f7ff bfd3 	b.w	800bb00 <_raise_r>
 800bb5a:	bf00      	nop
 800bb5c:	20000020 	.word	0x20000020

0800bb60 <_kill_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	2300      	movs	r3, #0
 800bb64:	4d06      	ldr	r5, [pc, #24]	@ (800bb80 <_kill_r+0x20>)
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	f7f8 f9e0 	bl	8003f32 <_kill>
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d102      	bne.n	800bb7c <_kill_r+0x1c>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	b103      	cbz	r3, 800bb7c <_kill_r+0x1c>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	bd38      	pop	{r3, r4, r5, pc}
 800bb7e:	bf00      	nop
 800bb80:	2000098c 	.word	0x2000098c

0800bb84 <_getpid_r>:
 800bb84:	f7f8 b9ce 	b.w	8003f24 <_getpid>

0800bb88 <__swhatbuf_r>:
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb90:	4615      	mov	r5, r2
 800bb92:	2900      	cmp	r1, #0
 800bb94:	461e      	mov	r6, r3
 800bb96:	b096      	sub	sp, #88	@ 0x58
 800bb98:	da0c      	bge.n	800bbb4 <__swhatbuf_r+0x2c>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bba2:	bf14      	ite	ne
 800bba4:	2340      	movne	r3, #64	@ 0x40
 800bba6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bbaa:	2000      	movs	r0, #0
 800bbac:	6031      	str	r1, [r6, #0]
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	b016      	add	sp, #88	@ 0x58
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	466a      	mov	r2, sp
 800bbb6:	f000 f849 	bl	800bc4c <_fstat_r>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	dbed      	blt.n	800bb9a <__swhatbuf_r+0x12>
 800bbbe:	9901      	ldr	r1, [sp, #4]
 800bbc0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bbc4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bbc8:	4259      	negs	r1, r3
 800bbca:	4159      	adcs	r1, r3
 800bbcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbd0:	e7eb      	b.n	800bbaa <__swhatbuf_r+0x22>

0800bbd2 <__smakebuf_r>:
 800bbd2:	898b      	ldrh	r3, [r1, #12]
 800bbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd6:	079d      	lsls	r5, r3, #30
 800bbd8:	4606      	mov	r6, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	d507      	bpl.n	800bbee <__smakebuf_r+0x1c>
 800bbde:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	6163      	str	r3, [r4, #20]
 800bbea:	b003      	add	sp, #12
 800bbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbee:	466a      	mov	r2, sp
 800bbf0:	ab01      	add	r3, sp, #4
 800bbf2:	f7ff ffc9 	bl	800bb88 <__swhatbuf_r>
 800bbf6:	9f00      	ldr	r7, [sp, #0]
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7fd fbe1 	bl	80093c4 <_malloc_r>
 800bc02:	b948      	cbnz	r0, 800bc18 <__smakebuf_r+0x46>
 800bc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc08:	059a      	lsls	r2, r3, #22
 800bc0a:	d4ee      	bmi.n	800bbea <__smakebuf_r+0x18>
 800bc0c:	f023 0303 	bic.w	r3, r3, #3
 800bc10:	f043 0302 	orr.w	r3, r3, #2
 800bc14:	81a3      	strh	r3, [r4, #12]
 800bc16:	e7e2      	b.n	800bbde <__smakebuf_r+0xc>
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	9b01      	ldr	r3, [sp, #4]
 800bc26:	6020      	str	r0, [r4, #0]
 800bc28:	b15b      	cbz	r3, 800bc42 <__smakebuf_r+0x70>
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc30:	f000 f81e 	bl	800bc70 <_isatty_r>
 800bc34:	b128      	cbz	r0, 800bc42 <__smakebuf_r+0x70>
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	f023 0303 	bic.w	r3, r3, #3
 800bc3c:	f043 0301 	orr.w	r3, r3, #1
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	89a3      	ldrh	r3, [r4, #12]
 800bc44:	431d      	orrs	r5, r3
 800bc46:	81a5      	strh	r5, [r4, #12]
 800bc48:	e7cf      	b.n	800bbea <__smakebuf_r+0x18>
	...

0800bc4c <_fstat_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	2300      	movs	r3, #0
 800bc50:	4d06      	ldr	r5, [pc, #24]	@ (800bc6c <_fstat_r+0x20>)
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	f7f8 f9c9 	bl	8003ff0 <_fstat>
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	d102      	bne.n	800bc68 <_fstat_r+0x1c>
 800bc62:	682b      	ldr	r3, [r5, #0]
 800bc64:	b103      	cbz	r3, 800bc68 <_fstat_r+0x1c>
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	bd38      	pop	{r3, r4, r5, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000098c 	.word	0x2000098c

0800bc70 <_isatty_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	2300      	movs	r3, #0
 800bc74:	4d05      	ldr	r5, [pc, #20]	@ (800bc8c <_isatty_r+0x1c>)
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f8 f9c7 	bl	800400e <_isatty>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_isatty_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_isatty_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	2000098c 	.word	0x2000098c

0800bc90 <_init>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_fini>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr
